//
//  TBMStyleKit.swift
//  Millionare
//
//  Created by Igor Ivanov on 18.06.2020.
//  Copyright Â© 2020 None. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class TBMStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let gradientColor: UIColor = UIColor(red: 0.071, green: 0.306, blue: 0.937, alpha: 1.000)
        static let gradientColor2: UIColor = UIColor(red: 0.192, green: 0.945, blue: 1.000, alpha: 1.000)
        static let gradientColor3: UIColor = UIColor(red: 0.082, green: 0.627, blue: 1.000, alpha: 1.000)
        static let mainBackground: UIColor = UIColor(red: 0.141, green: 0.082, blue: 0.424, alpha: 1.000)
        static let primaryTextColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        static let honeycombesStrokeColor1: UIColor = UIColor(red: 0.000, green: 0.820, blue: 1.000, alpha: 1.000)
        static let markPGradientColor4: UIColor = UIColor(red: 0.988, green: 0.671, blue: 0.208, alpha: 0.500)
        static let gradientColor6: UIColor = UIColor(red: 0.145, green: 0.102, blue: 0.498, alpha: 1.000)
        static let gradientColor7: UIColor = UIColor(red: 0.224, green: 0.176, blue: 0.624, alpha: 1.000)
        static let lighting: UIColor = UIColor(red: 0.094, green: 0.114, blue: 0.847, alpha: 1.000)
        static let paint0_linear: CGGradient = CGGradient(colorsSpace: nil, colors: [TBMStyleKit.gradientColor.cgColor, TBMStyleKit.gradientColor2.cgColor, TBMStyleKit.gradientColor3.cgColor] as CFArray, locations: [0, 0.5, 1])!
        static let button_linear: CGGradient = CGGradient(colorsSpace: nil, colors: [TBMStyleKit.gradientColor6.cgColor, TBMStyleKit.gradientColor7.cgColor] as CFArray, locations: [0, 1])!
    }

    //// Colors

    @objc dynamic public class var gradientColor: UIColor { return Cache.gradientColor }
    @objc dynamic public class var gradientColor2: UIColor { return Cache.gradientColor2 }
    @objc dynamic public class var gradientColor3: UIColor { return Cache.gradientColor3 }
    @objc dynamic public class var mainBackground: UIColor { return Cache.mainBackground }
    @objc dynamic public class var primaryTextColor: UIColor { return Cache.primaryTextColor }
    @objc dynamic public class var honeycombesStrokeColor1: UIColor { return Cache.honeycombesStrokeColor1 }
    @objc dynamic public class var markPGradientColor4: UIColor { return Cache.markPGradientColor4 }
    @objc dynamic public class var gradientColor6: UIColor { return Cache.gradientColor6 }
    @objc dynamic public class var gradientColor7: UIColor { return Cache.gradientColor7 }
    @objc dynamic public class var lighting: UIColor { return Cache.lighting }

    //// Gradients

    @objc dynamic public class var paint0_linear: CGGradient { return Cache.paint0_linear }
    @objc dynamic public class var button_linear: CGGradient { return Cache.button_linear }

    //// Drawing Methods

    @objc dynamic public class func drawLogo(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 38), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 38), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 38)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 20, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 19.76), controlPoint1: CGPoint(x: 8.96, y: 0), controlPoint2: CGPoint(x: 0, y: 8.85))
        bezierPath.addCurve(to: CGPoint(x: 1.02, y: 26), controlPoint1: CGPoint(x: 0, y: 21.94), controlPoint2: CGPoint(x: 0.36, y: 24.04))
        bezierPath.addLine(to: CGPoint(x: 7, y: 26))
        bezierPath.addLine(to: CGPoint(x: 7, y: 9.38))
        bezierPath.addLine(to: CGPoint(x: 20, y: 22.22))
        bezierPath.addLine(to: CGPoint(x: 33, y: 9.38))
        bezierPath.addLine(to: CGPoint(x: 33, y: 26))
        bezierPath.addLine(to: CGPoint(x: 38.98, y: 26))
        bezierPath.addCurve(to: CGPoint(x: 40, y: 19.76), controlPoint1: CGPoint(x: 39.64, y: 24.04), controlPoint2: CGPoint(x: 40, y: 21.94))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 0), controlPoint1: CGPoint(x: 40, y: 8.85), controlPoint2: CGPoint(x: 31.04, y: 0))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        context.saveGState()
        bezierPath.addClip()
        context.drawLinearGradient(TBMStyleKit.paint0_linear,
            start: CGPoint(x: 45.31, y: 13.61),
            end: CGPoint(x: 19.5, y: -7.35),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 16.85, y: 22.9))
        bezier2Path.addLine(to: CGPoint(x: 10.88, y: 17))
        bezier2Path.addLine(to: CGPoint(x: 10.88, y: 28.01))
        bezier2Path.addLine(to: CGPoint(x: 2, y: 28.01))
        bezier2Path.addCurve(to: CGPoint(x: 20, y: 38), controlPoint1: CGPoint(x: 5.7, y: 34), controlPoint2: CGPoint(x: 12.38, y: 38))
        bezier2Path.addCurve(to: CGPoint(x: 38, y: 28.01), controlPoint1: CGPoint(x: 27.62, y: 38), controlPoint2: CGPoint(x: 34.3, y: 34))
        bezier2Path.addLine(to: CGPoint(x: 29.12, y: 28.01))
        bezier2Path.addLine(to: CGPoint(x: 29.12, y: 17))
        bezier2Path.addLine(to: CGPoint(x: 23.15, y: 22.9))
        bezier2Path.addLine(to: CGPoint(x: 20, y: 26.01))
        bezier2Path.addLine(to: CGPoint(x: 16.85, y: 22.9))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        context.saveGState()
        bezier2Path.addClip()
        context.drawLinearGradient(TBMStyleKit.paint0_linear,
            start: CGPoint(x: 42.78, y: 27.99),
            end: CGPoint(x: 21.59, y: 8.81),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPlay_HoneycombsCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 65, height: 59), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 65, height: 59), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 65, y: resizedFrame.height / 59)


        //// Color Declarations
        let strokeColor = UIColor(red: 0.000, green: 0.820, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 33.5, y: 0.5))
        bezierPath.addLine(to: CGPoint(x: 30.5, y: 6))
        bezierPath.addLine(to: CGPoint(x: 34.5, y: 13))
        bezierPath.addLine(to: CGPoint(x: 42.5, y: 13))
        bezierPath.addLine(to: CGPoint(x: 46.5, y: 6))
        bezierPath.addLine(to: CGPoint(x: 43, y: 0.5))
        bezierPath.move(to: CGPoint(x: 45, y: 0.5))
        bezierPath.addLine(to: CGPoint(x: 48, y: 5.5))
        bezierPath.addLine(to: CGPoint(x: 57, y: 5.5))
        bezierPath.addLine(to: CGPoint(x: 62, y: 14))
        bezierPath.addLine(to: CGPoint(x: 57.5, y: 21.5))
        bezierPath.addLine(to: CGPoint(x: 62, y: 29.5))
        bezierPath.addLine(to: CGPoint(x: 57.5, y: 37))
        bezierPath.move(to: CGPoint(x: 21, y: 38))
        bezierPath.addLine(to: CGPoint(x: 29, y: 38))
        bezierPath.addLine(to: CGPoint(x: 33, y: 45))
        bezierPath.addLine(to: CGPoint(x: 29, y: 52))
        bezierPath.addLine(to: CGPoint(x: 21, y: 52))
        bezierPath.addLine(to: CGPoint(x: 17, y: 45))
        bezierPath.addLine(to: CGPoint(x: 21, y: 38))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 34.5, y: 30))
        bezierPath.addLine(to: CGPoint(x: 42.5, y: 30))
        bezierPath.addLine(to: CGPoint(x: 46.5, y: 37))
        bezierPath.addLine(to: CGPoint(x: 42.5, y: 44))
        bezierPath.addLine(to: CGPoint(x: 34.5, y: 44))
        bezierPath.addLine(to: CGPoint(x: 30.5, y: 37))
        bezierPath.addLine(to: CGPoint(x: 34.5, y: 30))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 21, y: 22))
        bezierPath.addLine(to: CGPoint(x: 25, y: 22))
        bezierPath.addLine(to: CGPoint(x: 29, y: 22))
        bezierPath.addLine(to: CGPoint(x: 33, y: 29))
        bezierPath.addLine(to: CGPoint(x: 29, y: 36))
        bezierPath.addLine(to: CGPoint(x: 21, y: 36))
        bezierPath.addLine(to: CGPoint(x: 17, y: 29))
        bezierPath.addLine(to: CGPoint(x: 19, y: 25.5))
        bezierPath.addLine(to: CGPoint(x: 21, y: 22))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 34.5, y: 14.5))
        bezierPath.addLine(to: CGPoint(x: 42.5, y: 14.5))
        bezierPath.addLine(to: CGPoint(x: 46.5, y: 21.5))
        bezierPath.addLine(to: CGPoint(x: 42.5, y: 28.5))
        bezierPath.addLine(to: CGPoint(x: 34.5, y: 28.5))
        bezierPath.addLine(to: CGPoint(x: 30.5, y: 21.5))
        bezierPath.addLine(to: CGPoint(x: 34.5, y: 14.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 48, y: 22.5))
        bezierPath.addLine(to: CGPoint(x: 56, y: 22.5))
        bezierPath.addLine(to: CGPoint(x: 60, y: 29.5))
        bezierPath.addLine(to: CGPoint(x: 56, y: 36.5))
        bezierPath.addLine(to: CGPoint(x: 48, y: 36.5))
        bezierPath.addLine(to: CGPoint(x: 44, y: 29.5))
        bezierPath.addLine(to: CGPoint(x: 48, y: 22.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 48, y: 7))
        bezierPath.addLine(to: CGPoint(x: 56, y: 7))
        bezierPath.addLine(to: CGPoint(x: 60, y: 14))
        bezierPath.addLine(to: CGPoint(x: 56, y: 21))
        bezierPath.addLine(to: CGPoint(x: 48, y: 21))
        bezierPath.addLine(to: CGPoint(x: 44, y: 14))
        bezierPath.addLine(to: CGPoint(x: 48, y: 7))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 48, y: 38))
        bezierPath.addLine(to: CGPoint(x: 56, y: 38))
        bezierPath.addLine(to: CGPoint(x: 60, y: 45))
        bezierPath.addLine(to: CGPoint(x: 56, y: 52))
        bezierPath.addLine(to: CGPoint(x: 48, y: 52))
        bezierPath.addLine(to: CGPoint(x: 44, y: 45))
        bezierPath.addLine(to: CGPoint(x: 48, y: 38))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 7.5, y: 30))
        bezierPath.addLine(to: CGPoint(x: 15.5, y: 30))
        bezierPath.addLine(to: CGPoint(x: 19.5, y: 37))
        bezierPath.addLine(to: CGPoint(x: 15.5, y: 44))
        bezierPath.addLine(to: CGPoint(x: 7.5, y: 44))
        bezierPath.addLine(to: CGPoint(x: 3.5, y: 37))
        bezierPath.addLine(to: CGPoint(x: 7.5, y: 30))
        bezierPath.close()
        TBMStyleKit.honeycombesStrokeColor1.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.miterLimit = 4
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 64, y: 30))
        bezier2Path.addLine(to: CGPoint(x: 59, y: 38.5))
        bezier2Path.addLine(to: CGPoint(x: 63, y: 45.5))
        bezier2Path.addLine(to: CGPoint(x: 57.5, y: 54.5))
        bezier2Path.addLine(to: CGPoint(x: 46.5, y: 54.5))
        bezier2Path.addLine(to: CGPoint(x: 42, y: 46.5))
        bezier2Path.addLine(to: CGPoint(x: 39, y: 46.5))
        bezier2Path.addLine(to: CGPoint(x: 35.5, y: 52.5))
        bezier2Path.addLine(to: CGPoint(x: 39.5, y: 58.5))
        strokeColor.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.miterLimit = 4
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 30.5, y: 0.5))
        bezier3Path.addLine(to: CGPoint(x: 28, y: 6))
        bezier3Path.addLine(to: CGPoint(x: 32, y: 13.5))
        bezier3Path.addLine(to: CGPoint(x: 29, y: 19.5))
        strokeColor.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.miterLimit = 4
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 15, y: 27.5))
        bezier4Path.addLine(to: CGPoint(x: 6.5, y: 27.5))
        bezier4Path.addLine(to: CGPoint(x: 1, y: 37))
        bezier4Path.addLine(to: CGPoint(x: 6.5, y: 46.5))
        bezier4Path.addLine(to: CGPoint(x: 15, y: 46.5))
        bezier4Path.addLine(to: CGPoint(x: 20, y: 54.5))
        bezier4Path.addLine(to: CGPoint(x: 30, y: 54.5))
        bezier4Path.addLine(to: CGPoint(x: 34.5, y: 46.5))
        bezier4Path.addLine(to: CGPoint(x: 37, y: 46.5))
        bezier4Path.addLine(to: CGPoint(x: 33.5, y: 52.5))
        bezier4Path.addLine(to: CGPoint(x: 37.5, y: 58.5))
        strokeColor.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.miterLimit = 4
        bezier4Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawLeaderboard_HoneycombsCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 60), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 60)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 3.5, y: 36.5))
        bezierPath.addLine(to: CGPoint(x: 13, y: 36.5))
        bezierPath.addLine(to: CGPoint(x: 17, y: 30))
        bezierPath.addLine(to: CGPoint(x: 12.5, y: 22))
        bezierPath.addLine(to: CGPoint(x: 18, y: 13))
        bezierPath.addLine(to: CGPoint(x: 27, y: 13))
        bezierPath.addLine(to: CGPoint(x: 30.5, y: 7))
        bezierPath.addLine(to: CGPoint(x: 27, y: 1.5))
        bezierPath.move(to: CGPoint(x: 27.5, y: 59))
        bezierPath.addLine(to: CGPoint(x: 31, y: 53))
        bezierPath.addLine(to: CGPoint(x: 27, y: 46))
        bezierPath.addLine(to: CGPoint(x: 19, y: 46))
        bezierPath.addLine(to: CGPoint(x: 15, y: 53))
        bezierPath.addLine(to: CGPoint(x: 18.5, y: 59))
        bezierPath.move(to: CGPoint(x: 29.5, y: 1))
        bezierPath.addLine(to: CGPoint(x: 31, y: 3.5))
        bezierPath.addLine(to: CGPoint(x: 32.5, y: 6))
        bezierPath.addLine(to: CGPoint(x: 37, y: 6))
        bezierPath.addLine(to: CGPoint(x: 41.5, y: 6))
        bezierPath.addLine(to: CGPoint(x: 46.5, y: 14.5))
        bezierPath.addLine(to: CGPoint(x: 42, y: 22))
        bezierPath.addLine(to: CGPoint(x: 46.5, y: 30))
        bezierPath.addLine(to: CGPoint(x: 42, y: 37.5))
        bezierPath.move(to: CGPoint(x: 5.5, y: 38.5))
        bezierPath.addLine(to: CGPoint(x: 13.5, y: 38.5))
        bezierPath.addLine(to: CGPoint(x: 17.5, y: 45.5))
        bezierPath.addLine(to: CGPoint(x: 13.5, y: 52.5))
        bezierPath.addLine(to: CGPoint(x: 5.5, y: 52.5))
        bezierPath.addLine(to: CGPoint(x: 1.5, y: 45.5))
        bezierPath.addLine(to: CGPoint(x: 5.5, y: 38.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 19, y: 30.5))
        bezierPath.addLine(to: CGPoint(x: 27, y: 30.5))
        bezierPath.addLine(to: CGPoint(x: 31, y: 37.5))
        bezierPath.addLine(to: CGPoint(x: 27, y: 44.5))
        bezierPath.addLine(to: CGPoint(x: 19, y: 44.5))
        bezierPath.addLine(to: CGPoint(x: 15, y: 37.5))
        bezierPath.addLine(to: CGPoint(x: 19, y: 30.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 19, y: 15))
        bezierPath.addLine(to: CGPoint(x: 27, y: 15))
        bezierPath.addLine(to: CGPoint(x: 31, y: 22))
        bezierPath.addLine(to: CGPoint(x: 27, y: 29))
        bezierPath.addLine(to: CGPoint(x: 19, y: 29))
        bezierPath.addLine(to: CGPoint(x: 15, y: 22))
        bezierPath.addLine(to: CGPoint(x: 19, y: 15))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 32.5, y: 23))
        bezierPath.addLine(to: CGPoint(x: 40.5, y: 23))
        bezierPath.addLine(to: CGPoint(x: 44.5, y: 30))
        bezierPath.addLine(to: CGPoint(x: 40.5, y: 37))
        bezierPath.addLine(to: CGPoint(x: 32.5, y: 37))
        bezierPath.addLine(to: CGPoint(x: 28.5, y: 30))
        bezierPath.addLine(to: CGPoint(x: 32.5, y: 23))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 32.5, y: 7.5))
        bezierPath.addLine(to: CGPoint(x: 40.5, y: 7.5))
        bezierPath.addLine(to: CGPoint(x: 44.5, y: 14.5))
        bezierPath.addLine(to: CGPoint(x: 40.5, y: 21.5))
        bezierPath.addLine(to: CGPoint(x: 32.5, y: 21.5))
        bezierPath.addLine(to: CGPoint(x: 28.5, y: 14.5))
        bezierPath.addLine(to: CGPoint(x: 32.5, y: 7.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 32.5, y: 38.5))
        bezierPath.addLine(to: CGPoint(x: 40.5, y: 38.5))
        bezierPath.addLine(to: CGPoint(x: 44.5, y: 45.5))
        bezierPath.addLine(to: CGPoint(x: 40.5, y: 52.5))
        bezierPath.addLine(to: CGPoint(x: 32.5, y: 52.5))
        bezierPath.addLine(to: CGPoint(x: 28.5, y: 45.5))
        bezierPath.addLine(to: CGPoint(x: 32.5, y: 38.5))
        bezierPath.close()
        TBMStyleKit.honeycombesStrokeColor1.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.miterLimit = 4
        bezierPath.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPlay_markCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 41, height: 41), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 41, height: 41), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 41, y: resizedFrame.height / 41)


        //// Color Declarations
        let markPGradientColor1 = UIColor(red: 1.000, green: 0.594, blue: 0.000, alpha: 1.000)
        let markPGradientColor2 = UIColor(red: 0.976, green: 0.580, blue: 0.000, alpha: 1.000)

        //// Gradient Declarations
        let indicator_linear = CGGradient(colorsSpace: nil, colors: [markPGradientColor1.cgColor, markPGradientColor2.cgColor] as CFArray, locations: [0, 1])!

        //// Oval Drawing
        context.saveGState()
        context.setAlpha(0.2)

        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 0.05, y: 0.1, width: 40.1, height: 40))
        markPGradientColor1.setFill()
        ovalPath.fill()

        context.restoreGState()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 3.7, y: 3.72, width: 32.8, height: 32.7))
        TBMStyleKit.markPGradientColor4.setFill()
        oval2Path.fill()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 7.35, y: 7.4, width: 25.5, height: 25.5))
        context.saveGState()
        oval3Path.addClip()
        context.drawLinearGradient(indicator_linear,
            start: CGPoint(x: 30.35, y: 39.64),
            end: CGPoint(x: 43.96, y: 19.14),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 16.54, y: 15.32))
        bezierPath.addLine(to: CGPoint(x: 20.36, y: 15.32))
        bezierPath.addCurve(to: CGPoint(x: 21.65, y: 15.35), controlPoint1: CGPoint(x: 20.9, y: 15.32), controlPoint2: CGPoint(x: 21.33, y: 15.33))
        bezierPath.addCurve(to: CGPoint(x: 22.72, y: 15.52), controlPoint1: CGPoint(x: 21.99, y: 15.38), controlPoint2: CGPoint(x: 22.34, y: 15.43))
        bezierPath.addCurve(to: CGPoint(x: 23.63, y: 15.89), controlPoint1: CGPoint(x: 23.1, y: 15.6), controlPoint2: CGPoint(x: 23.41, y: 15.73))
        bezierPath.addCurve(to: CGPoint(x: 24.25, y: 16.58), controlPoint1: CGPoint(x: 23.87, y: 16.06), controlPoint2: CGPoint(x: 24.08, y: 16.29))
        bezierPath.addCurve(to: CGPoint(x: 24.48, y: 17.62), controlPoint1: CGPoint(x: 24.4, y: 16.85), controlPoint2: CGPoint(x: 24.48, y: 17.2))
        bezierPath.addLine(to: CGPoint(x: 24.48, y: 20.05))
        bezierPath.addCurve(to: CGPoint(x: 23.35, y: 22.16), controlPoint1: CGPoint(x: 24.48, y: 21.02), controlPoint2: CGPoint(x: 24.1, y: 21.73))
        bezierPath.addCurve(to: CGPoint(x: 20.03, y: 22.79), controlPoint1: CGPoint(x: 22.6, y: 22.58), controlPoint2: CGPoint(x: 21.5, y: 22.79))
        bezierPath.addLine(to: CGPoint(x: 18.29, y: 22.79))
        bezierPath.addLine(to: CGPoint(x: 18.29, y: 27))
        bezierPath.addLine(to: CGPoint(x: 16.54, y: 27))
        bezierPath.addLine(to: CGPoint(x: 16.54, y: 15.32))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 20.27, y: 21.69))
        bezierPath.addCurve(to: CGPoint(x: 22.09, y: 21.28), controlPoint1: CGPoint(x: 21.02, y: 21.69), controlPoint2: CGPoint(x: 21.63, y: 21.55))
        bezierPath.addCurve(to: CGPoint(x: 22.77, y: 19.96), controlPoint1: CGPoint(x: 22.54, y: 21), controlPoint2: CGPoint(x: 22.77, y: 20.56))
        bezierPath.addLine(to: CGPoint(x: 22.77, y: 17.84))
        bezierPath.addCurve(to: CGPoint(x: 22.52, y: 17.05), controlPoint1: CGPoint(x: 22.77, y: 17.51), controlPoint2: CGPoint(x: 22.69, y: 17.25))
        bezierPath.addCurve(to: CGPoint(x: 21.8, y: 16.6), controlPoint1: CGPoint(x: 22.35, y: 16.83), controlPoint2: CGPoint(x: 22.11, y: 16.68))
        bezierPath.addCurve(to: CGPoint(x: 21.04, y: 16.45), controlPoint1: CGPoint(x: 21.5, y: 16.52), controlPoint2: CGPoint(x: 21.25, y: 16.48))
        bezierPath.addCurve(to: CGPoint(x: 20.23, y: 16.42), controlPoint1: CGPoint(x: 20.84, y: 16.43), controlPoint2: CGPoint(x: 20.57, y: 16.42))
        bezierPath.addLine(to: CGPoint(x: 18.27, y: 16.42))
        bezierPath.addLine(to: CGPoint(x: 18.27, y: 21.69))
        bezierPath.addLine(to: CGPoint(x: 20.27, y: 21.69))
        bezierPath.close()
        TBMStyleKit.primaryTextColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawLeaderboard_markCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 41, height: 41), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 41, height: 41), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 41, y: resizedFrame.height / 41)


        //// Color Declarations
        let gradientColor4 = UIColor(red: 0.322, green: 0.647, blue: 0.769, alpha: 0.500)
        let gradientColor5 = UIColor(red: 0.384, green: 0.729, blue: 0.769, alpha: 0.500)
        let gradientColor8 = UIColor(red: 0.443, green: 0.808, blue: 0.769, alpha: 0.500)
        let gradientColor9 = UIColor(red: 0.322, green: 0.647, blue: 0.769, alpha: 1.000)
        let gradientColor10 = UIColor(red: 0.384, green: 0.729, blue: 0.769, alpha: 1.000)
        let gradientColor11 = UIColor(red: 0.443, green: 0.808, blue: 0.769, alpha: 1.000)
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Gradient Declarations
        let paint1_linear = CGGradient(colorsSpace: nil, colors: [gradientColor4.cgColor, gradientColor5.cgColor, gradientColor8.cgColor] as CFArray, locations: [0, 0.49, 1])!
        let paint2_linear = CGGradient(colorsSpace: nil, colors: [gradientColor9.cgColor, gradientColor10.cgColor, gradientColor11.cgColor] as CFArray, locations: [0, 0.49, 1])!

        //// Oval Drawing
        context.saveGState()
        context.setAlpha(0.2)

        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 0.05, y: 0.1, width: 40.1, height: 40))
        context.saveGState()
        ovalPath.addClip()
        context.drawLinearGradient(paint2_linear,
            start: CGPoint(x: 24.51, y: 2.94),
            end: CGPoint(x: 6.14, y: 30.96),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 4.05, y: 4.07, width: 32.8, height: 32.7))
        context.saveGState()
        oval2Path.addClip()
        context.drawLinearGradient(paint1_linear,
            start: CGPoint(x: 24.07, y: 6.42),
            end: CGPoint(x: 9.04, y: 29.35),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 7.05, y: 8.15, width: 25.5, height: 25.5))
        context.saveGState()
        oval3Path.addClip()
        context.drawLinearGradient(paint2_linear,
            start: CGPoint(x: 22.63, y: 9.91),
            end: CGPoint(x: 10.94, y: 27.74),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 16.26, y: 15.32))
        bezierPath.addLine(to: CGPoint(x: 19.07, y: 15.32))
        bezierPath.addLine(to: CGPoint(x: 19.07, y: 25))
        bezierPath.addLine(to: CGPoint(x: 24.81, y: 25))
        bezierPath.addLine(to: CGPoint(x: 24.81, y: 27))
        bezierPath.addLine(to: CGPoint(x: 16.26, y: 27))
        bezierPath.addLine(to: CGPoint(x: 16.26, y: 15.32))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawOptions_markCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 41, height: 41), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 41, height: 41), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 41, y: resizedFrame.height / 41)


        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let gradientColor12 = UIColor(red: 0.443, green: 0.584, blue: 0.969, alpha: 0.500)
        let gradientColor13 = UIColor(red: 0.235, green: 0.322, blue: 0.839, alpha: 0.500)
        let gradientColor14 = UIColor(red: 0.443, green: 0.584, blue: 0.969, alpha: 1.000)
        let gradientColor15 = UIColor(red: 0.235, green: 0.322, blue: 0.839, alpha: 1.000)
        let gradientColor16 = UIColor(red: 0.498, green: 0.620, blue: 0.961, alpha: 1.000)
        let gradientColor17 = UIColor(red: 0.133, green: 0.216, blue: 0.702, alpha: 1.000)

        //// Gradient Declarations
        let paint1_linear2 = CGGradient(colorsSpace: nil, colors: [gradientColor12.cgColor, gradientColor13.cgColor] as CFArray, locations: [0, 1])!
        let paint0_linear2 = CGGradient(colorsSpace: nil, colors: [gradientColor14.cgColor, gradientColor15.cgColor] as CFArray, locations: [0, 1])!
        let paint2_linear2 = CGGradient(colorsSpace: nil, colors: [gradientColor16.cgColor, gradientColor17.cgColor] as CFArray, locations: [0, 1])!

        //// Oval Drawing
        context.saveGState()
        context.setAlpha(0.2)

        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 0.05, y: 0.1, width: 40.1, height: 40))
        context.saveGState()
        ovalPath.addClip()
        context.drawLinearGradient(paint0_linear2,
            start: CGPoint(x: 36.58, y: 51.05),
            end: CGPoint(x: 58.44, y: 18.1),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 3.7, y: 3.72, width: 32.8, height: 32.7))
        context.saveGState()
        oval2Path.addClip()
        context.drawLinearGradient(paint1_linear2,
            start: CGPoint(x: 33.58, y: 45.42),
            end: CGPoint(x: 51.47, y: 18.46),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 7.05, y: 7.05, width: 25.5, height: 25.5))
        context.saveGState()
        oval3Path.addClip()
        context.drawLinearGradient(paint2_linear2,
            start: CGPoint(x: 30.31, y: 39.42),
            end: CGPoint(x: 44.22, y: 18.45),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 19.53, y: 27.18))
        bezierPath.addCurve(to: CGPoint(x: 17.73, y: 27.05), controlPoint1: CGPoint(x: 18.89, y: 27.18), controlPoint2: CGPoint(x: 18.29, y: 27.14))
        bezierPath.addCurve(to: CGPoint(x: 16.04, y: 26.62), controlPoint1: CGPoint(x: 17.19, y: 26.97), controlPoint2: CGPoint(x: 16.63, y: 26.83))
        bezierPath.addCurve(to: CGPoint(x: 14.55, y: 25.58), controlPoint1: CGPoint(x: 15.41, y: 26.41), controlPoint2: CGPoint(x: 14.91, y: 26.06))
        bezierPath.addCurve(to: CGPoint(x: 14.01, y: 23.8), controlPoint1: CGPoint(x: 14.19, y: 25.09), controlPoint2: CGPoint(x: 14.01, y: 24.49))
        bezierPath.addLine(to: CGPoint(x: 14.01, y: 18.68))
        bezierPath.addCurve(to: CGPoint(x: 14.39, y: 17.14), controlPoint1: CGPoint(x: 14.01, y: 18.11), controlPoint2: CGPoint(x: 14.13, y: 17.59))
        bezierPath.addCurve(to: CGPoint(x: 15.39, y: 16.06), controlPoint1: CGPoint(x: 14.65, y: 16.68), controlPoint2: CGPoint(x: 14.99, y: 16.32))
        bezierPath.addCurve(to: CGPoint(x: 16.73, y: 15.48), controlPoint1: CGPoint(x: 15.75, y: 15.83), controlPoint2: CGPoint(x: 16.2, y: 15.64))
        bezierPath.addCurve(to: CGPoint(x: 18.2, y: 15.19), controlPoint1: CGPoint(x: 17.25, y: 15.32), controlPoint2: CGPoint(x: 17.75, y: 15.23))
        bezierPath.addCurve(to: CGPoint(x: 19.53, y: 15.14), controlPoint1: CGPoint(x: 18.62, y: 15.16), controlPoint2: CGPoint(x: 19.07, y: 15.14))
        bezierPath.addCurve(to: CGPoint(x: 20.97, y: 15.21), controlPoint1: CGPoint(x: 20.09, y: 15.14), controlPoint2: CGPoint(x: 20.57, y: 15.16))
        bezierPath.addCurve(to: CGPoint(x: 22.34, y: 15.46), controlPoint1: CGPoint(x: 21.38, y: 15.25), controlPoint2: CGPoint(x: 21.84, y: 15.33))
        bezierPath.addCurve(to: CGPoint(x: 23.76, y: 16.07), controlPoint1: CGPoint(x: 22.92, y: 15.63), controlPoint2: CGPoint(x: 23.39, y: 15.83))
        bezierPath.addCurve(to: CGPoint(x: 24.7, y: 17.08), controlPoint1: CGPoint(x: 24.14, y: 16.31), controlPoint2: CGPoint(x: 24.45, y: 16.65))
        bezierPath.addCurve(to: CGPoint(x: 25.1, y: 18.68), controlPoint1: CGPoint(x: 24.96, y: 17.53), controlPoint2: CGPoint(x: 25.1, y: 18.06))
        bezierPath.addLine(to: CGPoint(x: 25.1, y: 23.8))
        bezierPath.addCurve(to: CGPoint(x: 24.57, y: 25.47), controlPoint1: CGPoint(x: 25.1, y: 24.44), controlPoint2: CGPoint(x: 24.92, y: 25))
        bezierPath.addCurve(to: CGPoint(x: 23.17, y: 26.53), controlPoint1: CGPoint(x: 24.24, y: 25.94), controlPoint2: CGPoint(x: 23.77, y: 26.29))
        bezierPath.addCurve(to: CGPoint(x: 19.53, y: 27.18), controlPoint1: CGPoint(x: 22.09, y: 26.96), controlPoint2: CGPoint(x: 20.88, y: 27.18))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 19.57, y: 25.18))
        bezierPath.addCurve(to: CGPoint(x: 20.56, y: 25.15), controlPoint1: CGPoint(x: 19.97, y: 25.18), controlPoint2: CGPoint(x: 20.3, y: 25.17))
        bezierPath.addCurve(to: CGPoint(x: 21.41, y: 24.97), controlPoint1: CGPoint(x: 20.84, y: 25.11), controlPoint2: CGPoint(x: 21.12, y: 25.05))
        bezierPath.addCurve(to: CGPoint(x: 22.05, y: 24.55), controlPoint1: CGPoint(x: 21.69, y: 24.88), controlPoint2: CGPoint(x: 21.91, y: 24.74))
        bezierPath.addCurve(to: CGPoint(x: 22.29, y: 23.8), controlPoint1: CGPoint(x: 22.21, y: 24.35), controlPoint2: CGPoint(x: 22.29, y: 24.1))
        bezierPath.addLine(to: CGPoint(x: 22.29, y: 18.67))
        bezierPath.addCurve(to: CGPoint(x: 21.62, y: 17.5), controlPoint1: CGPoint(x: 22.29, y: 18.11), controlPoint2: CGPoint(x: 22.07, y: 17.72))
        bezierPath.addCurve(to: CGPoint(x: 19.55, y: 17.14), controlPoint1: CGPoint(x: 21.18, y: 17.26), controlPoint2: CGPoint(x: 20.49, y: 17.14))
        bezierPath.addCurve(to: CGPoint(x: 17.48, y: 17.48), controlPoint1: CGPoint(x: 18.62, y: 17.14), controlPoint2: CGPoint(x: 17.93, y: 17.25))
        bezierPath.addCurve(to: CGPoint(x: 16.82, y: 18.67), controlPoint1: CGPoint(x: 17.04, y: 17.71), controlPoint2: CGPoint(x: 16.82, y: 18.1))
        bezierPath.addLine(to: CGPoint(x: 16.82, y: 23.8))
        bezierPath.addCurve(to: CGPoint(x: 17.05, y: 24.55), controlPoint1: CGPoint(x: 16.82, y: 24.1), controlPoint2: CGPoint(x: 16.89, y: 24.35))
        bezierPath.addCurve(to: CGPoint(x: 17.73, y: 24.97), controlPoint1: CGPoint(x: 17.21, y: 24.74), controlPoint2: CGPoint(x: 17.43, y: 24.88))
        bezierPath.addCurve(to: CGPoint(x: 18.56, y: 25.15), controlPoint1: CGPoint(x: 18.02, y: 25.05), controlPoint2: CGPoint(x: 18.3, y: 25.11))
        bezierPath.addCurve(to: CGPoint(x: 19.57, y: 25.18), controlPoint1: CGPoint(x: 18.84, y: 25.17), controlPoint2: CGPoint(x: 19.17, y: 25.18))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawBottomHoneycombs(frame: CGRect = CGRect(x: 0, y: 0, width: 404, height: 154)) {
        //// General Declarations
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let strokeColor2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)


        //// Subframes
        let group2: CGRect = CGRect(x: frame.minX, y: frame.minY, width: fastFloor((frame.width) * 1.00124) + 0.5, height: fastFloor((frame.height) * 1.00000 + 0.5))


        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: group2.minX + 0.01065 * group2.width, y: group2.minY + 0.10995 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.00000 * group2.width, y: group2.minY + 0.14776 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.00133 * group2.width, y: group2.minY + 0.99675 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.16644 * group2.width, y: group2.minY + 0.99675 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.18908 * group2.width, y: group2.minY + 0.91426 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.16245 * group2.width, y: group2.minY + 0.80427 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.14647 * group2.width, y: group2.minY + 0.81802 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.14248 * group2.width, y: group2.minY + 0.79740 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.15313 * group2.width, y: group2.minY + 0.77333 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.13848 * group2.width, y: group2.minY + 0.71146 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.15446 * group2.width, y: group2.minY + 0.65647 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.12650 * group2.width, y: group2.minY + 0.55679 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.03995 * group2.width, y: group2.minY + 0.55679 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.04794 * group2.width, y: group2.minY + 0.51211 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.07324 * group2.width, y: group2.minY + 0.51211 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.08788 * group2.width, y: group2.minY + 0.45367 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.07324 * group2.width, y: group2.minY + 0.39868 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.08522 * group2.width, y: group2.minY + 0.34368 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.07324 * group2.width, y: group2.minY + 0.29213 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.08522 * group2.width, y: group2.minY + 0.23713 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.07324 * group2.width, y: group2.minY + 0.17870 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.08788 * group2.width, y: group2.minY + 0.13058 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.10919 * group2.width, y: group2.minY + 0.13058 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.12517 * group2.width, y: group2.minY + 0.06871 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.11052 * group2.width, y: group2.minY + 0.01027 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.08522 * group2.width, y: group2.minY + 0.01027 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.07057 * group2.width, y: group2.minY + 0.06527 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.04660 * group2.width, y: group2.minY + 0.05839 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.03196 * group2.width, y: group2.minY + 0.11339 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.01065 * group2.width, y: group2.minY + 0.10995 * group2.height))
        bezierPath.close()
        fillColor2.setFill()
        bezierPath.fill()
        strokeColor2.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.miterLimit = 4
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: group2.minX + 0.83622 * group2.width, y: group2.minY + 0.96575 * group2.height))
        bezier2Path.addLine(to: CGPoint(x: group2.minX + 0.17443 * group2.width, y: group2.minY + 0.96575 * group2.height))
        bezier2Path.addLine(to: CGPoint(x: group2.minX + 0.16778 * group2.width, y: group2.minY + 0.99658 * group2.height))
        bezier2Path.addLine(to: CGPoint(x: group2.minX + 0.84820 * group2.width, y: group2.minY + 1.00000 * group2.height))
        bezier2Path.addLine(to: CGPoint(x: group2.minX + 0.83622 * group2.width, y: group2.minY + 0.96575 * group2.height))
        bezier2Path.close()
        fillColor2.setFill()
        bezier2Path.fill()
        strokeColor2.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.miterLimit = 4
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: group2.minX + 0.81225 * group2.width, y: group2.minY + 0.88014 * group2.height))
        bezier3Path.addCurve(to: CGPoint(x: group2.minX + 0.83222 * group2.width, y: group2.minY + 0.95890 * group2.height), controlPoint1: CGPoint(x: group2.minX + 0.81846 * group2.width, y: group2.minY + 0.90411 * group2.height), controlPoint2: CGPoint(x: group2.minX + 0.83116 * group2.width, y: group2.minY + 0.95342 * group2.height))
        bezier3Path.addLine(to: CGPoint(x: group2.minX + 0.84953 * group2.width, y: group2.minY + 0.99658 * group2.height))
        bezier3Path.addLine(to: CGPoint(x: group2.minX + 0.99601 * group2.width, y: group2.minY + 0.99658 * group2.height))
        bezier3Path.addLine(to: CGPoint(x: group2.minX + 0.99601 * group2.width, y: group2.minY + 0.60616 * group2.height))
        bezier3Path.addLine(to: CGPoint(x: group2.minX + 0.97603 * group2.width, y: group2.minY + 0.60616 * group2.height))
        bezier3Path.addLine(to: CGPoint(x: group2.minX + 0.96405 * group2.width, y: group2.minY + 0.56164 * group2.height))
        bezier3Path.addLine(to: CGPoint(x: group2.minX + 0.90679 * group2.width, y: group2.minY + 0.56164 * group2.height))
        bezier3Path.addLine(to: CGPoint(x: group2.minX + 0.88149 * group2.width, y: group2.minY + 0.65068 * group2.height))
        bezier3Path.addLine(to: CGPoint(x: group2.minX + 0.89214 * group2.width, y: group2.minY + 0.68836 * group2.height))
        bezier3Path.addLine(to: CGPoint(x: group2.minX + 0.89214 * group2.width, y: group2.minY + 0.73288 * group2.height))
        bezier3Path.addLine(to: CGPoint(x: group2.minX + 0.87883 * group2.width, y: group2.minY + 0.71575 * group2.height))
        bezier3Path.addLine(to: CGPoint(x: group2.minX + 0.86152 * group2.width, y: group2.minY + 0.79110 * group2.height))
        bezier3Path.addLine(to: CGPoint(x: group2.minX + 0.83222 * group2.width, y: group2.minY + 0.79795 * group2.height))
        bezier3Path.addLine(to: CGPoint(x: group2.minX + 0.81225 * group2.width, y: group2.minY + 0.88014 * group2.height))
        bezier3Path.close()
        fillColor2.setFill()
        bezier3Path.fill()
        strokeColor2.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.miterLimit = 4
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: group2.minX + 0.91611 * group2.width, y: group2.minY + 0.63014 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.90812 * group2.width, y: group2.minY + 0.66781 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.91877 * group2.width, y: group2.minY + 0.71575 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.94008 * group2.width, y: group2.minY + 0.71575 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.95073 * group2.width, y: group2.minY + 0.66781 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.94141 * group2.width, y: group2.minY + 0.63014 * group2.height))
        bezier4Path.move(to: CGPoint(x: group2.minX + 0.94674 * group2.width, y: group2.minY + 0.63014 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.95473 * group2.width, y: group2.minY + 0.66438 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.97870 * group2.width, y: group2.minY + 0.66438 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.99201 * group2.width, y: group2.minY + 0.72260 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.98003 * group2.width, y: group2.minY + 0.77397 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.99201 * group2.width, y: group2.minY + 0.82877 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.98003 * group2.width, y: group2.minY + 0.88014 * group2.height))
        bezier4Path.move(to: CGPoint(x: group2.minX + 0.88282 * group2.width, y: group2.minY + 0.88699 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.90413 * group2.width, y: group2.minY + 0.88699 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.91478 * group2.width, y: group2.minY + 0.93493 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.90413 * group2.width, y: group2.minY + 0.98288 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.88282 * group2.width, y: group2.minY + 0.98288 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.87217 * group2.width, y: group2.minY + 0.93493 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.88282 * group2.width, y: group2.minY + 0.88699 * group2.height))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: group2.minX + 0.91877 * group2.width, y: group2.minY + 0.83219 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.94008 * group2.width, y: group2.minY + 0.83219 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.95073 * group2.width, y: group2.minY + 0.88014 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.94008 * group2.width, y: group2.minY + 0.92808 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.91877 * group2.width, y: group2.minY + 0.92808 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.90812 * group2.width, y: group2.minY + 0.88014 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.91877 * group2.width, y: group2.minY + 0.83219 * group2.height))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: group2.minX + 0.88282 * group2.width, y: group2.minY + 0.77740 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.89348 * group2.width, y: group2.minY + 0.77740 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.90413 * group2.width, y: group2.minY + 0.77740 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.91478 * group2.width, y: group2.minY + 0.82534 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.90413 * group2.width, y: group2.minY + 0.87329 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.88282 * group2.width, y: group2.minY + 0.87329 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.87217 * group2.width, y: group2.minY + 0.82534 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.87750 * group2.width, y: group2.minY + 0.80137 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.88282 * group2.width, y: group2.minY + 0.77740 * group2.height))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: group2.minX + 0.91877 * group2.width, y: group2.minY + 0.72603 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.94008 * group2.width, y: group2.minY + 0.72603 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.95073 * group2.width, y: group2.minY + 0.77397 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.94008 * group2.width, y: group2.minY + 0.82192 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.91877 * group2.width, y: group2.minY + 0.82192 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.90812 * group2.width, y: group2.minY + 0.77397 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.91877 * group2.width, y: group2.minY + 0.72603 * group2.height))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: group2.minX + 0.95473 * group2.width, y: group2.minY + 0.78082 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.97603 * group2.width, y: group2.minY + 0.78082 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.98668 * group2.width, y: group2.minY + 0.82877 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.97603 * group2.width, y: group2.minY + 0.87671 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.95473 * group2.width, y: group2.minY + 0.87671 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.94407 * group2.width, y: group2.minY + 0.82877 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.95473 * group2.width, y: group2.minY + 0.78082 * group2.height))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: group2.minX + 0.95473 * group2.width, y: group2.minY + 0.67466 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.97603 * group2.width, y: group2.minY + 0.67466 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.98668 * group2.width, y: group2.minY + 0.72260 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.97603 * group2.width, y: group2.minY + 0.77055 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.95473 * group2.width, y: group2.minY + 0.77055 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.94407 * group2.width, y: group2.minY + 0.72260 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.95473 * group2.width, y: group2.minY + 0.67466 * group2.height))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: group2.minX + 0.95473 * group2.width, y: group2.minY + 0.88699 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.97603 * group2.width, y: group2.minY + 0.88699 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.98668 * group2.width, y: group2.minY + 0.93493 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.97603 * group2.width, y: group2.minY + 0.98288 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.95473 * group2.width, y: group2.minY + 0.98288 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.94407 * group2.width, y: group2.minY + 0.93493 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.95473 * group2.width, y: group2.minY + 0.88699 * group2.height))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: group2.minX + 0.84687 * group2.width, y: group2.minY + 0.83219 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.86818 * group2.width, y: group2.minY + 0.83219 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.87883 * group2.width, y: group2.minY + 0.88014 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.86818 * group2.width, y: group2.minY + 0.92808 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.84687 * group2.width, y: group2.minY + 0.92808 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.83622 * group2.width, y: group2.minY + 0.88014 * group2.height))
        bezier4Path.addLine(to: CGPoint(x: group2.minX + 0.84687 * group2.width, y: group2.minY + 0.83219 * group2.height))
        bezier4Path.close()
        TBMStyleKit.gradientColor3.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.miterLimit = 4
        bezier4Path.stroke()


        //// Group
        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: group2.minX + 1.00000 * group2.width, y: group2.minY + 0.63632 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.96671 * group2.width, y: group2.minY + 0.63632 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.95872 * group2.width, y: group2.minY + 0.59883 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.91079 * group2.width, y: group2.minY + 0.59883 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.89880 * group2.width, y: group2.minY + 0.66017 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.91079 * group2.width, y: group2.minY + 0.71129 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.90546 * group2.width, y: group2.minY + 0.75219 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.88016 * group2.width, y: group2.minY + 0.74196 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.86684 * group2.width, y: group2.minY + 0.80671 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.83888 * group2.width, y: group2.minY + 0.81353 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.82557 * group2.width, y: group2.minY + 0.87147 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.84288 * group2.width, y: group2.minY + 0.94303 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.86285 * group2.width, y: group2.minY + 0.94303 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.87084 * group2.width, y: group2.minY + 0.97711 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.16245 * group2.width, y: group2.minY + 0.98052 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.17710 * group2.width, y: group2.minY + 0.91918 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.15313 * group2.width, y: group2.minY + 0.82716 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.13316 * group2.width, y: group2.minY + 0.82716 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.12916 * group2.width, y: group2.minY + 0.81012 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.14533 * group2.width, y: group2.minY + 0.75900 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.12916 * group2.width, y: group2.minY + 0.70448 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.14248 * group2.width, y: group2.minY + 0.64995 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.11718 * group2.width, y: group2.minY + 0.56134 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.07837 * group2.width, y: group2.minY + 0.56134 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.06791 * group2.width, y: group2.minY + 0.60905 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.05992 * group2.width, y: group2.minY + 0.60905 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.04527 * group2.width, y: group2.minY + 0.56134 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.00799 * group2.width, y: group2.minY + 0.56134 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.00000 * group2.width, y: group2.minY + 0.58861 * group2.height))
        bezier5Path.move(to: CGPoint(x: group2.minX + 0.01274 * group2.width, y: group2.minY + 0.73175 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.01731 * group2.width, y: group2.minY + 0.71129 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.03862 * group2.width, y: group2.minY + 0.71129 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.04927 * group2.width, y: group2.minY + 0.75900 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.03862 * group2.width, y: group2.minY + 0.80671 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.01731 * group2.width, y: group2.minY + 0.80671 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.00666 * group2.width, y: group2.minY + 0.75900 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.01274 * group2.width, y: group2.minY + 0.73175 * group2.height))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: group2.minX + 0.05345 * group2.width, y: group2.minY + 0.65677 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.07476 * group2.width, y: group2.minY + 0.65677 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.08541 * group2.width, y: group2.minY + 0.70448 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.07476 * group2.width, y: group2.minY + 0.75219 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.05345 * group2.width, y: group2.minY + 0.75219 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.04280 * group2.width, y: group2.minY + 0.70448 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.05345 * group2.width, y: group2.minY + 0.65677 * group2.height))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: group2.minX + 0.01731 * group2.width, y: group2.minY + 0.60224 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.03862 * group2.width, y: group2.minY + 0.60224 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.04927 * group2.width, y: group2.minY + 0.64995 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.03862 * group2.width, y: group2.minY + 0.69766 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.01731 * group2.width, y: group2.minY + 0.69766 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.00666 * group2.width, y: group2.minY + 0.64995 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.01731 * group2.width, y: group2.minY + 0.60224 * group2.height))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: group2.minX + 0.08902 * group2.width, y: group2.minY + 0.71129 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.11033 * group2.width, y: group2.minY + 0.71129 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.12098 * group2.width, y: group2.minY + 0.75900 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.11033 * group2.width, y: group2.minY + 0.80671 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.08902 * group2.width, y: group2.minY + 0.80671 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.07837 * group2.width, y: group2.minY + 0.75900 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.08902 * group2.width, y: group2.minY + 0.71129 * group2.height))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: group2.minX + 0.08902 * group2.width, y: group2.minY + 0.60224 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.11033 * group2.width, y: group2.minY + 0.60224 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.12098 * group2.width, y: group2.minY + 0.64995 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.11033 * group2.width, y: group2.minY + 0.69766 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.08902 * group2.width, y: group2.minY + 0.69766 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.07837 * group2.width, y: group2.minY + 0.64995 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.08902 * group2.width, y: group2.minY + 0.60224 * group2.height))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: group2.minX + 0.11337 * group2.width, y: group2.minY + 0.58861 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.12669 * group2.width, y: group2.minY + 0.64995 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.11470 * group2.width, y: group2.minY + 0.70448 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.12669 * group2.width, y: group2.minY + 0.75900 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.11470 * group2.width, y: group2.minY + 0.81353 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.12536 * group2.width, y: group2.minY + 0.85783 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.14799 * group2.width, y: group2.minY + 0.85783 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.16245 * group2.width, y: group2.minY + 0.91918 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.14913 * group2.width, y: group2.minY + 0.97711 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.00266 * group2.width, y: group2.minY + 0.98052 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.00266 * group2.width, y: group2.minY + 0.62950 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.01332 * group2.width, y: group2.minY + 0.58520 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.03995 * group2.width, y: group2.minY + 0.58520 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.05345 * group2.width, y: group2.minY + 0.63973 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.07476 * group2.width, y: group2.minY + 0.63973 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.08541 * group2.width, y: group2.minY + 0.58861 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.11337 * group2.width, y: group2.minY + 0.58861 * group2.height))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: group2.minX + 0.08339 * group2.width, y: group2.minY + 0.84217 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.08902 * group2.width, y: group2.minY + 0.81694 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.11033 * group2.width, y: group2.minY + 0.81694 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.12098 * group2.width, y: group2.minY + 0.86465 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.11033 * group2.width, y: group2.minY + 0.91236 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.08902 * group2.width, y: group2.minY + 0.91236 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.07837 * group2.width, y: group2.minY + 0.86465 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.08339 * group2.width, y: group2.minY + 0.84217 * group2.height))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: group2.minX + 0.05345 * group2.width, y: group2.minY + 0.76241 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.07476 * group2.width, y: group2.minY + 0.76241 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.08541 * group2.width, y: group2.minY + 0.81012 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.07476 * group2.width, y: group2.minY + 0.85783 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.05345 * group2.width, y: group2.minY + 0.85783 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.04280 * group2.width, y: group2.minY + 0.81012 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.05345 * group2.width, y: group2.minY + 0.76241 * group2.height))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: group2.minX + 0.12403 * group2.width, y: group2.minY + 0.87147 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.14533 * group2.width, y: group2.minY + 0.87147 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.15598 * group2.width, y: group2.minY + 0.91918 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.14533 * group2.width, y: group2.minY + 0.96689 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.12403 * group2.width, y: group2.minY + 0.96689 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.11337 * group2.width, y: group2.minY + 0.91918 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.12403 * group2.width, y: group2.minY + 0.87147 * group2.height))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: group2.minX + 0.00666 * group2.width, y: group2.minY + 0.79649 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.01332 * group2.width, y: group2.minY + 0.82375 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.03862 * group2.width, y: group2.minY + 0.82375 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.05060 * group2.width, y: group2.minY + 0.87487 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.07476 * group2.width, y: group2.minY + 0.87487 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.08541 * group2.width, y: group2.minY + 0.92940 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.10786 * group2.width, y: group2.minY + 0.92940 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.11718 * group2.width, y: group2.minY + 0.96689 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.00799 * group2.width, y: group2.minY + 0.97030 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.00666 * group2.width, y: group2.minY + 0.79649 * group2.height))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: group2.minX + 0.00798 * group2.width, y: group2.minY + 0.47620 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.01332 * group2.width, y: group2.minY + 0.45229 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.03462 * group2.width, y: group2.minY + 0.45229 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.04527 * group2.width, y: group2.minY + 0.50000 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.03462 * group2.width, y: group2.minY + 0.54771 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.01332 * group2.width, y: group2.minY + 0.54771 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.00266 * group2.width, y: group2.minY + 0.50000 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.00798 * group2.width, y: group2.minY + 0.47620 * group2.height))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: group2.minX + 0.00783 * group2.width, y: group2.minY + 0.37120 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.01332 * group2.width, y: group2.minY + 0.34664 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.03462 * group2.width, y: group2.minY + 0.34664 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.04527 * group2.width, y: group2.minY + 0.39435 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.03462 * group2.width, y: group2.minY + 0.44207 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.01332 * group2.width, y: group2.minY + 0.44207 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.00266 * group2.width, y: group2.minY + 0.39435 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.00783 * group2.width, y: group2.minY + 0.37120 * group2.height))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: group2.minX + 0.05060 * group2.width, y: group2.minY + 0.40117 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.07190 * group2.width, y: group2.minY + 0.40117 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.08256 * group2.width, y: group2.minY + 0.44888 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.07190 * group2.width, y: group2.minY + 0.49659 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.05060 * group2.width, y: group2.minY + 0.49659 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.03995 * group2.width, y: group2.minY + 0.44888 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.05060 * group2.width, y: group2.minY + 0.40117 * group2.height))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: group2.minX + 0.04927 * group2.width, y: group2.minY + 0.29212 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.07057 * group2.width, y: group2.minY + 0.29212 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.08123 * group2.width, y: group2.minY + 0.33983 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.07057 * group2.width, y: group2.minY + 0.38754 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.04927 * group2.width, y: group2.minY + 0.38754 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.03862 * group2.width, y: group2.minY + 0.33983 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.04927 * group2.width, y: group2.minY + 0.29212 * group2.height))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: group2.minX + 0.04927 * group2.width, y: group2.minY + 0.18647 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.07057 * group2.width, y: group2.minY + 0.18647 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.08123 * group2.width, y: group2.minY + 0.23418 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.07057 * group2.width, y: group2.minY + 0.28189 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.04927 * group2.width, y: group2.minY + 0.28189 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.03862 * group2.width, y: group2.minY + 0.23418 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.04927 * group2.width, y: group2.minY + 0.18647 * group2.height))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: group2.minX + 0.01332 * group2.width, y: group2.minY + 0.13194 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.03462 * group2.width, y: group2.minY + 0.13194 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.04527 * group2.width, y: group2.minY + 0.17965 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.03462 * group2.width, y: group2.minY + 0.22736 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.02327 * group2.width, y: group2.minY + 0.22736 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.01332 * group2.width, y: group2.minY + 0.22736 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.00266 * group2.width, y: group2.minY + 0.17965 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.01332 * group2.width, y: group2.minY + 0.13194 * group2.height))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: group2.minX + 0.05060 * group2.width, y: group2.minY + 0.07401 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.07190 * group2.width, y: group2.minY + 0.07401 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.08256 * group2.width, y: group2.minY + 0.12172 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.07190 * group2.width, y: group2.minY + 0.16943 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.05060 * group2.width, y: group2.minY + 0.16943 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.03995 * group2.width, y: group2.minY + 0.12172 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.05060 * group2.width, y: group2.minY + 0.07401 * group2.height))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: group2.minX + 0.08655 * group2.width, y: group2.minY + 0.01948 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.10786 * group2.width, y: group2.minY + 0.01948 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.11851 * group2.width, y: group2.minY + 0.06719 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.10786 * group2.width, y: group2.minY + 0.11490 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.08655 * group2.width, y: group2.minY + 0.11490 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.07590 * group2.width, y: group2.minY + 0.06719 * group2.height))
        bezier5Path.addLine(to: CGPoint(x: group2.minX + 0.08655 * group2.width, y: group2.minY + 0.01948 * group2.height))
        bezier5Path.close()
        TBMStyleKit.gradientColor3.setStroke()
        bezier5Path.lineWidth = 1
        bezier5Path.miterLimit = 4
        bezier5Path.stroke()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: group2.minX + 0.02349 * group2.width, y: group2.minY + 0.22403 * group2.height))
        bezier7Path.addLine(to: CGPoint(x: group2.minX + 0.02349 * group2.width, y: group2.minY + 0.24351 * group2.height))
        TBMStyleKit.gradientColor3.setStroke()
        bezier7Path.lineWidth = 1
        bezier7Path.stroke()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: group2.minX + 0.03585 * group2.width, y: group2.minY + 0.30195 * group2.height))
        bezier8Path.addLine(to: CGPoint(x: group2.minX + 0.04326 * group2.width, y: group2.minY + 0.31494 * group2.height))
        TBMStyleKit.gradientColor3.setStroke()
        bezier8Path.lineWidth = 1
        bezier8Path.stroke()




        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: group2.minX + 0.00000 * group2.width, y: group2.minY + 0.13356 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.00932 * group2.width, y: group2.minY + 0.09932 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.03063 * group2.width, y: group2.minY + 0.10274 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.04527 * group2.width, y: group2.minY + 0.04795 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.06924 * group2.width, y: group2.minY + 0.05479 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.08256 * group2.width, y: group2.minY + 0.00000 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.11318 * group2.width, y: group2.minY + 0.00000 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.13049 * group2.width, y: group2.minY + 0.06849 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.11052 * group2.width, y: group2.minY + 0.14041 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.08788 * group2.width, y: group2.minY + 0.14041 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.07723 * group2.width, y: group2.minY + 0.18151 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.08921 * group2.width, y: group2.minY + 0.23630 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.07723 * group2.width, y: group2.minY + 0.29110 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.08921 * group2.width, y: group2.minY + 0.34247 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.07723 * group2.width, y: group2.minY + 0.39726 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.09055 * group2.width, y: group2.minY + 0.45205 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.07457 * group2.width, y: group2.minY + 0.51712 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.05060 * group2.width, y: group2.minY + 0.51712 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.04527 * group2.width, y: group2.minY + 0.54452 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.12783 * group2.width, y: group2.minY + 0.54452 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.15979 * group2.width, y: group2.minY + 0.65411 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.14248 * group2.width, y: group2.minY + 0.70890 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.15846 * group2.width, y: group2.minY + 0.77055 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.14647 * group2.width, y: group2.minY + 0.79795 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.14780 * group2.width, y: group2.minY + 0.80479 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.16378 * group2.width, y: group2.minY + 0.79110 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.19308 * group2.width, y: group2.minY + 0.91096 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.18109 * group2.width, y: group2.minY + 0.95890 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.82690 * group2.width, y: group2.minY + 0.95890 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.80692 * group2.width, y: group2.minY + 0.87671 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.83089 * group2.width, y: group2.minY + 0.78767 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.85885 * group2.width, y: group2.minY + 0.78082 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.87750 * group2.width, y: group2.minY + 0.70205 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.88815 * group2.width, y: group2.minY + 0.71575 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.88815 * group2.width, y: group2.minY + 0.68836 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.87750 * group2.width, y: group2.minY + 0.65068 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.90413 * group2.width, y: group2.minY + 0.55137 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.96671 * group2.width, y: group2.minY + 0.55137 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.97870 * group2.width, y: group2.minY + 0.59589 * group2.height))
        bezier6Path.addLine(to: CGPoint(x: group2.minX + 0.99601 * group2.width, y: group2.minY + 0.59589 * group2.height))
        TBMStyleKit.gradientColor2.setStroke()
        bezier6Path.lineWidth = 1
        bezier6Path.miterLimit = 4
        bezier6Path.stroke()
    }

    @objc dynamic public class func drawTopCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 384, height: 350), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 384, height: 350), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 384, y: resizedFrame.height / 350)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 384, resizedFrame.height / 350)


        //// Color Declarations
        let gradientColor18 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let gradientColor19 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.010)
        let color2 = UIColor(red: 0.000, green: 0.970, blue: 1.000, alpha: 1.000)
        let paint0_linear3Color = UIColor(red: 0.174, green: 0.236, blue: 0.606, alpha: 1.000)
        let paint0_linear3Color2 = UIColor(red: 0.063, green: 0.042, blue: 0.432, alpha: 1.000)

        //// Gradient Declarations
        let paint8_radial = CGGradient(colorsSpace: nil, colors: [gradientColor18.cgColor, gradientColor19.cgColor] as CFArray, locations: [0, 1])!
        let paint0_linear3 = CGGradient(colorsSpace: nil, colors: [TBMStyleKit.gradientColor.cgColor, TBMStyleKit.gradientColor.blended(withFraction: 0.5, of: paint0_linear3Color).cgColor, paint0_linear3Color.cgColor, paint0_linear3Color2.cgColor] as CFArray, locations: [0, 0.33, 0.64, 1])!

        //// Shadow Declarations
        let shadow2 = NSShadow()
        shadow2.shadowColor = UIColor.black
        shadow2.shadowOffset = CGSize(width: 3, height: 4)
        shadow2.shadowBlurRadius = 5

        //// Group
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 386, y: 228))
        bezierPath.addCurve(to: CGPoint(x: 379, y: 316), controlPoint1: CGPoint(x: 386, y: 228), controlPoint2: CGPoint(x: 389.74, y: 283.43))
        bezierPath.addCurve(to: CGPoint(x: 360, y: 339), controlPoint1: CGPoint(x: 374.75, y: 328.87), controlPoint2: CGPoint(x: 371.66, y: 338.05))
        bezierPath.addCurve(to: CGPoint(x: 328, y: 268), controlPoint1: CGPoint(x: 341.79, y: 340.49), controlPoint2: CGPoint(x: 339.7, y: 287.97))
        bezierPath.addCurve(to: CGPoint(x: 287, y: 239.7), controlPoint1: CGPoint(x: 310.13, y: 237.5), controlPoint2: CGPoint(x: 299.33, y: 236.62))
        bezierPath.addCurve(to: CGPoint(x: 224.33, y: 321.29), controlPoint1: CGPoint(x: 255, y: 247.71), controlPoint2: CGPoint(x: 253.87, y: 321.29))
        bezierPath.addCurve(to: CGPoint(x: 173.62, y: 282.95), controlPoint1: CGPoint(x: 194.79, y: 321.29), controlPoint2: CGPoint(x: 182.21, y: 282.99))
        bezierPath.addCurve(to: CGPoint(x: 130.83, y: 278.92), controlPoint1: CGPoint(x: 168.08, y: 282.92), controlPoint2: CGPoint(x: 156.03, y: 268.08))
        bezierPath.addCurve(to: CGPoint(x: 85.38, y: 310), controlPoint1: CGPoint(x: 115.55, y: 285.5), controlPoint2: CGPoint(x: 100.91, y: 303.1))
        bezierPath.addCurve(to: CGPoint(x: 44, y: 310), controlPoint1: CGPoint(x: 71.85, y: 316.01), controlPoint2: CGPoint(x: 57.44, y: 311.97))
        bezierPath.addCurve(to: CGPoint(x: -7, y: 239.7), controlPoint1: CGPoint(x: -49.44, y: 296.33), controlPoint2: CGPoint(x: -18.38, y: 276.04))
        bezierPath.addCurve(to: CGPoint(x: -6, y: 0), controlPoint1: CGPoint(x: -3.54, y: 228.65), controlPoint2: CGPoint(x: -3.54, y: 15.68))
        bezierPath.addCurve(to: CGPoint(x: 386.23, y: -8), controlPoint1: CGPoint(x: -11.36, y: -34.12), controlPoint2: CGPoint(x: 328, y: -8))
        bezierPath.addCurve(to: CGPoint(x: 386.23, y: 111), controlPoint1: CGPoint(x: 416.07, y: -8), controlPoint2: CGPoint(x: 386.23, y: 111))
        bezierPath.addLine(to: CGPoint(x: 386, y: 228))
        bezierPath.close()
        context.saveGState()
        bezierPath.addClip()
        context.drawLinearGradient(paint0_linear3,
            start: CGPoint(x: 11.89, y: 283.15),
            end: CGPoint(x: 11.89, y: -17.51),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 2
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let starPath = UIBezierPath()
        starPath.move(to: CGPoint(x: 57.65, y: 270.65))
        starPath.addLine(to: CGPoint(x: 58.43, y: 273.87))
        starPath.addLine(to: CGPoint(x: 61.65, y: 274.65))
        starPath.addLine(to: CGPoint(x: 58.43, y: 275.43))
        starPath.addLine(to: CGPoint(x: 57.65, y: 278.65))
        starPath.addLine(to: CGPoint(x: 56.87, y: 275.43))
        starPath.addLine(to: CGPoint(x: 53.65, y: 274.65))
        starPath.addLine(to: CGPoint(x: 56.87, y: 273.87))
        starPath.close()
        context.saveGState()
        starPath.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 57.54, y: 274.77), startRadius: 0,
            endCenter: CGPoint(x: 57.54, y: 274.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 3
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 2 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star2Path = UIBezierPath()
        star2Path.move(to: CGPoint(x: 207.65, y: 264.65))
        star2Path.addLine(to: CGPoint(x: 208.43, y: 267.87))
        star2Path.addLine(to: CGPoint(x: 211.65, y: 268.65))
        star2Path.addLine(to: CGPoint(x: 208.43, y: 269.43))
        star2Path.addLine(to: CGPoint(x: 207.65, y: 272.65))
        star2Path.addLine(to: CGPoint(x: 206.87, y: 269.43))
        star2Path.addLine(to: CGPoint(x: 203.65, y: 268.65))
        star2Path.addLine(to: CGPoint(x: 206.87, y: 267.87))
        star2Path.close()
        context.saveGState()
        star2Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 207.54, y: 268.77), startRadius: 0,
            endCenter: CGPoint(x: 207.54, y: 268.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 4
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 3 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star3Path = UIBezierPath()
        star3Path.move(to: CGPoint(x: 327.65, y: 212.65))
        star3Path.addLine(to: CGPoint(x: 328.43, y: 215.87))
        star3Path.addLine(to: CGPoint(x: 331.65, y: 216.65))
        star3Path.addLine(to: CGPoint(x: 328.43, y: 217.43))
        star3Path.addLine(to: CGPoint(x: 327.65, y: 220.65))
        star3Path.addLine(to: CGPoint(x: 326.87, y: 217.43))
        star3Path.addLine(to: CGPoint(x: 323.65, y: 216.65))
        star3Path.addLine(to: CGPoint(x: 326.87, y: 215.87))
        star3Path.close()
        context.saveGState()
        star3Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 327.54, y: 216.77), startRadius: 0,
            endCenter: CGPoint(x: 327.54, y: 216.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 5
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 4 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star4Path = UIBezierPath()
        star4Path.move(to: CGPoint(x: 296.65, y: 170.65))
        star4Path.addLine(to: CGPoint(x: 297.43, y: 173.87))
        star4Path.addLine(to: CGPoint(x: 300.65, y: 174.65))
        star4Path.addLine(to: CGPoint(x: 297.43, y: 175.43))
        star4Path.addLine(to: CGPoint(x: 296.65, y: 178.65))
        star4Path.addLine(to: CGPoint(x: 295.87, y: 175.43))
        star4Path.addLine(to: CGPoint(x: 292.65, y: 174.65))
        star4Path.addLine(to: CGPoint(x: 295.87, y: 173.87))
        star4Path.close()
        context.saveGState()
        star4Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 296.54, y: 174.77), startRadius: 0,
            endCenter: CGPoint(x: 296.54, y: 174.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 6
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 5 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star5Path = UIBezierPath()
        star5Path.move(to: CGPoint(x: 203.65, y: 206.65))
        star5Path.addLine(to: CGPoint(x: 204.43, y: 209.87))
        star5Path.addLine(to: CGPoint(x: 207.65, y: 210.65))
        star5Path.addLine(to: CGPoint(x: 204.43, y: 211.43))
        star5Path.addLine(to: CGPoint(x: 203.65, y: 214.65))
        star5Path.addLine(to: CGPoint(x: 202.87, y: 211.43))
        star5Path.addLine(to: CGPoint(x: 199.65, y: 210.65))
        star5Path.addLine(to: CGPoint(x: 202.87, y: 209.87))
        star5Path.close()
        context.saveGState()
        star5Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 203.54, y: 210.77), startRadius: 0,
            endCenter: CGPoint(x: 203.54, y: 210.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 7
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 6 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star6Path = UIBezierPath()
        star6Path.move(to: CGPoint(x: 323.65, y: 117.65))
        star6Path.addLine(to: CGPoint(x: 324.43, y: 120.87))
        star6Path.addLine(to: CGPoint(x: 327.65, y: 121.65))
        star6Path.addLine(to: CGPoint(x: 324.43, y: 122.43))
        star6Path.addLine(to: CGPoint(x: 323.65, y: 125.65))
        star6Path.addLine(to: CGPoint(x: 322.87, y: 122.43))
        star6Path.addLine(to: CGPoint(x: 319.65, y: 121.65))
        star6Path.addLine(to: CGPoint(x: 322.87, y: 120.87))
        star6Path.close()
        context.saveGState()
        star6Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 323.54, y: 121.77), startRadius: 0,
            endCenter: CGPoint(x: 323.54, y: 121.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 8
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 7 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star7Path = UIBezierPath()
        star7Path.move(to: CGPoint(x: 267.25, y: 200.25))
        star7Path.addLine(to: CGPoint(x: 267.85, y: 202.65))
        star7Path.addLine(to: CGPoint(x: 270.25, y: 203.25))
        star7Path.addLine(to: CGPoint(x: 267.85, y: 203.85))
        star7Path.addLine(to: CGPoint(x: 267.25, y: 206.25))
        star7Path.addLine(to: CGPoint(x: 266.65, y: 203.85))
        star7Path.addLine(to: CGPoint(x: 264.25, y: 203.25))
        star7Path.addLine(to: CGPoint(x: 266.65, y: 202.65))
        star7Path.close()
        context.saveGState()
        star7Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 267.15, y: 203.33), startRadius: 0,
            endCenter: CGPoint(x: 267.15, y: 203.33), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 9
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 8 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star8Path = UIBezierPath()
        star8Path.move(to: CGPoint(x: 126.25, y: 221.25))
        star8Path.addLine(to: CGPoint(x: 126.85, y: 223.65))
        star8Path.addLine(to: CGPoint(x: 129.25, y: 224.25))
        star8Path.addLine(to: CGPoint(x: 126.85, y: 224.85))
        star8Path.addLine(to: CGPoint(x: 126.25, y: 227.25))
        star8Path.addLine(to: CGPoint(x: 125.65, y: 224.85))
        star8Path.addLine(to: CGPoint(x: 123.25, y: 224.25))
        star8Path.addLine(to: CGPoint(x: 125.65, y: 223.65))
        star8Path.close()
        context.saveGState()
        star8Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 126.16, y: 224.33), startRadius: 0,
            endCenter: CGPoint(x: 126.16, y: 224.33), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 10
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 9 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star9Path = UIBezierPath()
        star9Path.move(to: CGPoint(x: 164.25, y: 239.25))
        star9Path.addLine(to: CGPoint(x: 164.85, y: 241.65))
        star9Path.addLine(to: CGPoint(x: 167.25, y: 242.25))
        star9Path.addLine(to: CGPoint(x: 164.85, y: 242.85))
        star9Path.addLine(to: CGPoint(x: 164.25, y: 245.25))
        star9Path.addLine(to: CGPoint(x: 163.65, y: 242.85))
        star9Path.addLine(to: CGPoint(x: 161.25, y: 242.25))
        star9Path.addLine(to: CGPoint(x: 163.65, y: 241.65))
        star9Path.close()
        context.saveGState()
        star9Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 164.16, y: 242.33), startRadius: 0,
            endCenter: CGPoint(x: 164.16, y: 242.33), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 11
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 10 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star10Path = UIBezierPath()
        star10Path.move(to: CGPoint(x: 244.25, y: 239.25))
        star10Path.addLine(to: CGPoint(x: 244.85, y: 241.65))
        star10Path.addLine(to: CGPoint(x: 247.25, y: 242.25))
        star10Path.addLine(to: CGPoint(x: 244.85, y: 242.85))
        star10Path.addLine(to: CGPoint(x: 244.25, y: 245.25))
        star10Path.addLine(to: CGPoint(x: 243.65, y: 242.85))
        star10Path.addLine(to: CGPoint(x: 241.25, y: 242.25))
        star10Path.addLine(to: CGPoint(x: 243.65, y: 241.65))
        star10Path.close()
        context.saveGState()
        star10Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 244.16, y: 242.33), startRadius: 0,
            endCenter: CGPoint(x: 244.16, y: 242.33), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 12
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 11 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star11Path = UIBezierPath()
        star11Path.move(to: CGPoint(x: 274.25, y: 99.25))
        star11Path.addLine(to: CGPoint(x: 274.85, y: 101.65))
        star11Path.addLine(to: CGPoint(x: 277.25, y: 102.25))
        star11Path.addLine(to: CGPoint(x: 274.85, y: 102.85))
        star11Path.addLine(to: CGPoint(x: 274.25, y: 105.25))
        star11Path.addLine(to: CGPoint(x: 273.65, y: 102.85))
        star11Path.addLine(to: CGPoint(x: 271.25, y: 102.25))
        star11Path.addLine(to: CGPoint(x: 273.65, y: 101.65))
        star11Path.close()
        context.saveGState()
        star11Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 274.15, y: 102.33), startRadius: 0,
            endCenter: CGPoint(x: 274.15, y: 102.33), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 13
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 12 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star12Path = UIBezierPath()
        star12Path.move(to: CGPoint(x: 34.25, y: 129.25))
        star12Path.addLine(to: CGPoint(x: 34.85, y: 131.65))
        star12Path.addLine(to: CGPoint(x: 37.25, y: 132.25))
        star12Path.addLine(to: CGPoint(x: 34.85, y: 132.85))
        star12Path.addLine(to: CGPoint(x: 34.25, y: 135.25))
        star12Path.addLine(to: CGPoint(x: 33.65, y: 132.85))
        star12Path.addLine(to: CGPoint(x: 31.25, y: 132.25))
        star12Path.addLine(to: CGPoint(x: 33.65, y: 131.65))
        star12Path.close()
        context.saveGState()
        star12Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 34.16, y: 132.33), startRadius: 0,
            endCenter: CGPoint(x: 34.16, y: 132.33), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 14
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 13 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star13Path = UIBezierPath()
        star13Path.move(to: CGPoint(x: 74.25, y: 109.25))
        star13Path.addLine(to: CGPoint(x: 74.85, y: 111.65))
        star13Path.addLine(to: CGPoint(x: 77.25, y: 112.25))
        star13Path.addLine(to: CGPoint(x: 74.85, y: 112.85))
        star13Path.addLine(to: CGPoint(x: 74.25, y: 115.25))
        star13Path.addLine(to: CGPoint(x: 73.65, y: 112.85))
        star13Path.addLine(to: CGPoint(x: 71.25, y: 112.25))
        star13Path.addLine(to: CGPoint(x: 73.65, y: 111.65))
        star13Path.close()
        context.saveGState()
        star13Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 74.16, y: 112.33), startRadius: 0,
            endCenter: CGPoint(x: 74.16, y: 112.33), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 15
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 14 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star14Path = UIBezierPath()
        star14Path.move(to: CGPoint(x: 55.65, y: 200.65))
        star14Path.addLine(to: CGPoint(x: 56.43, y: 203.87))
        star14Path.addLine(to: CGPoint(x: 59.65, y: 204.65))
        star14Path.addLine(to: CGPoint(x: 56.43, y: 205.43))
        star14Path.addLine(to: CGPoint(x: 55.65, y: 208.65))
        star14Path.addLine(to: CGPoint(x: 54.87, y: 205.43))
        star14Path.addLine(to: CGPoint(x: 51.65, y: 204.65))
        star14Path.addLine(to: CGPoint(x: 54.87, y: 203.87))
        star14Path.close()
        context.saveGState()
        star14Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 55.54, y: 204.77), startRadius: 0,
            endCenter: CGPoint(x: 55.54, y: 204.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 16
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 15 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star15Path = UIBezierPath()
        star15Path.move(to: CGPoint(x: 79.65, y: 240.65))
        star15Path.addLine(to: CGPoint(x: 80.43, y: 243.87))
        star15Path.addLine(to: CGPoint(x: 83.65, y: 244.65))
        star15Path.addLine(to: CGPoint(x: 80.43, y: 245.43))
        star15Path.addLine(to: CGPoint(x: 79.65, y: 248.65))
        star15Path.addLine(to: CGPoint(x: 78.87, y: 245.43))
        star15Path.addLine(to: CGPoint(x: 75.65, y: 244.65))
        star15Path.addLine(to: CGPoint(x: 78.87, y: 243.87))
        star15Path.close()
        context.saveGState()
        star15Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 79.54, y: 244.77), startRadius: 0,
            endCenter: CGPoint(x: 79.54, y: 244.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 17
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 16 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star16Path = UIBezierPath()
        star16Path.move(to: CGPoint(x: 57.65, y: 270.65))
        star16Path.addLine(to: CGPoint(x: 58.43, y: 273.87))
        star16Path.addLine(to: CGPoint(x: 61.65, y: 274.65))
        star16Path.addLine(to: CGPoint(x: 58.43, y: 275.43))
        star16Path.addLine(to: CGPoint(x: 57.65, y: 278.65))
        star16Path.addLine(to: CGPoint(x: 56.87, y: 275.43))
        star16Path.addLine(to: CGPoint(x: 53.65, y: 274.65))
        star16Path.addLine(to: CGPoint(x: 56.87, y: 273.87))
        star16Path.close()
        context.saveGState()
        star16Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 57.54, y: 274.77), startRadius: 0,
            endCenter: CGPoint(x: 57.54, y: 274.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 18
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 17 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star17Path = UIBezierPath()
        star17Path.move(to: CGPoint(x: 207.65, y: 264.65))
        star17Path.addLine(to: CGPoint(x: 208.43, y: 267.87))
        star17Path.addLine(to: CGPoint(x: 211.65, y: 268.65))
        star17Path.addLine(to: CGPoint(x: 208.43, y: 269.43))
        star17Path.addLine(to: CGPoint(x: 207.65, y: 272.65))
        star17Path.addLine(to: CGPoint(x: 206.87, y: 269.43))
        star17Path.addLine(to: CGPoint(x: 203.65, y: 268.65))
        star17Path.addLine(to: CGPoint(x: 206.87, y: 267.87))
        star17Path.close()
        context.saveGState()
        star17Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 207.54, y: 268.77), startRadius: 0,
            endCenter: CGPoint(x: 207.54, y: 268.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 19
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 18 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star18Path = UIBezierPath()
        star18Path.move(to: CGPoint(x: 327.65, y: 212.65))
        star18Path.addLine(to: CGPoint(x: 328.43, y: 215.87))
        star18Path.addLine(to: CGPoint(x: 331.65, y: 216.65))
        star18Path.addLine(to: CGPoint(x: 328.43, y: 217.43))
        star18Path.addLine(to: CGPoint(x: 327.65, y: 220.65))
        star18Path.addLine(to: CGPoint(x: 326.87, y: 217.43))
        star18Path.addLine(to: CGPoint(x: 323.65, y: 216.65))
        star18Path.addLine(to: CGPoint(x: 326.87, y: 215.87))
        star18Path.close()
        context.saveGState()
        star18Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 327.54, y: 216.77), startRadius: 0,
            endCenter: CGPoint(x: 327.54, y: 216.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 20
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 19 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star19Path = UIBezierPath()
        star19Path.move(to: CGPoint(x: 296.65, y: 170.65))
        star19Path.addLine(to: CGPoint(x: 297.43, y: 173.87))
        star19Path.addLine(to: CGPoint(x: 300.65, y: 174.65))
        star19Path.addLine(to: CGPoint(x: 297.43, y: 175.43))
        star19Path.addLine(to: CGPoint(x: 296.65, y: 178.65))
        star19Path.addLine(to: CGPoint(x: 295.87, y: 175.43))
        star19Path.addLine(to: CGPoint(x: 292.65, y: 174.65))
        star19Path.addLine(to: CGPoint(x: 295.87, y: 173.87))
        star19Path.close()
        context.saveGState()
        star19Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 296.54, y: 174.77), startRadius: 0,
            endCenter: CGPoint(x: 296.54, y: 174.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 21
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 20 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star20Path = UIBezierPath()
        star20Path.move(to: CGPoint(x: 203.65, y: 206.65))
        star20Path.addLine(to: CGPoint(x: 204.43, y: 209.87))
        star20Path.addLine(to: CGPoint(x: 207.65, y: 210.65))
        star20Path.addLine(to: CGPoint(x: 204.43, y: 211.43))
        star20Path.addLine(to: CGPoint(x: 203.65, y: 214.65))
        star20Path.addLine(to: CGPoint(x: 202.87, y: 211.43))
        star20Path.addLine(to: CGPoint(x: 199.65, y: 210.65))
        star20Path.addLine(to: CGPoint(x: 202.87, y: 209.87))
        star20Path.close()
        context.saveGState()
        star20Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 203.54, y: 210.77), startRadius: 0,
            endCenter: CGPoint(x: 203.54, y: 210.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 22
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 21 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star21Path = UIBezierPath()
        star21Path.move(to: CGPoint(x: 323.65, y: 117.65))
        star21Path.addLine(to: CGPoint(x: 324.43, y: 120.87))
        star21Path.addLine(to: CGPoint(x: 327.65, y: 121.65))
        star21Path.addLine(to: CGPoint(x: 324.43, y: 122.43))
        star21Path.addLine(to: CGPoint(x: 323.65, y: 125.65))
        star21Path.addLine(to: CGPoint(x: 322.87, y: 122.43))
        star21Path.addLine(to: CGPoint(x: 319.65, y: 121.65))
        star21Path.addLine(to: CGPoint(x: 322.87, y: 120.87))
        star21Path.close()
        context.saveGState()
        star21Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 323.54, y: 121.77), startRadius: 0,
            endCenter: CGPoint(x: 323.54, y: 121.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 23
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 22 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star22Path = UIBezierPath()
        star22Path.move(to: CGPoint(x: 267.25, y: 200.25))
        star22Path.addLine(to: CGPoint(x: 267.85, y: 202.65))
        star22Path.addLine(to: CGPoint(x: 270.25, y: 203.25))
        star22Path.addLine(to: CGPoint(x: 267.85, y: 203.85))
        star22Path.addLine(to: CGPoint(x: 267.25, y: 206.25))
        star22Path.addLine(to: CGPoint(x: 266.65, y: 203.85))
        star22Path.addLine(to: CGPoint(x: 264.25, y: 203.25))
        star22Path.addLine(to: CGPoint(x: 266.65, y: 202.65))
        star22Path.close()
        context.saveGState()
        star22Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 267.15, y: 203.33), startRadius: 0,
            endCenter: CGPoint(x: 267.15, y: 203.33), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 24
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 23 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star23Path = UIBezierPath()
        star23Path.move(to: CGPoint(x: 126.25, y: 221.25))
        star23Path.addLine(to: CGPoint(x: 126.85, y: 223.65))
        star23Path.addLine(to: CGPoint(x: 129.25, y: 224.25))
        star23Path.addLine(to: CGPoint(x: 126.85, y: 224.85))
        star23Path.addLine(to: CGPoint(x: 126.25, y: 227.25))
        star23Path.addLine(to: CGPoint(x: 125.65, y: 224.85))
        star23Path.addLine(to: CGPoint(x: 123.25, y: 224.25))
        star23Path.addLine(to: CGPoint(x: 125.65, y: 223.65))
        star23Path.close()
        context.saveGState()
        star23Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 126.16, y: 224.33), startRadius: 0,
            endCenter: CGPoint(x: 126.16, y: 224.33), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 25
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 24 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star24Path = UIBezierPath()
        star24Path.move(to: CGPoint(x: 164.25, y: 239.25))
        star24Path.addLine(to: CGPoint(x: 164.85, y: 241.65))
        star24Path.addLine(to: CGPoint(x: 167.25, y: 242.25))
        star24Path.addLine(to: CGPoint(x: 164.85, y: 242.85))
        star24Path.addLine(to: CGPoint(x: 164.25, y: 245.25))
        star24Path.addLine(to: CGPoint(x: 163.65, y: 242.85))
        star24Path.addLine(to: CGPoint(x: 161.25, y: 242.25))
        star24Path.addLine(to: CGPoint(x: 163.65, y: 241.65))
        star24Path.close()
        context.saveGState()
        star24Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 164.16, y: 242.33), startRadius: 0,
            endCenter: CGPoint(x: 164.16, y: 242.33), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 26
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 25 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star25Path = UIBezierPath()
        star25Path.move(to: CGPoint(x: 244.25, y: 239.25))
        star25Path.addLine(to: CGPoint(x: 244.85, y: 241.65))
        star25Path.addLine(to: CGPoint(x: 247.25, y: 242.25))
        star25Path.addLine(to: CGPoint(x: 244.85, y: 242.85))
        star25Path.addLine(to: CGPoint(x: 244.25, y: 245.25))
        star25Path.addLine(to: CGPoint(x: 243.65, y: 242.85))
        star25Path.addLine(to: CGPoint(x: 241.25, y: 242.25))
        star25Path.addLine(to: CGPoint(x: 243.65, y: 241.65))
        star25Path.close()
        context.saveGState()
        star25Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 244.16, y: 242.33), startRadius: 0,
            endCenter: CGPoint(x: 244.16, y: 242.33), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 27
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 26 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star26Path = UIBezierPath()
        star26Path.move(to: CGPoint(x: 274.25, y: 99.25))
        star26Path.addLine(to: CGPoint(x: 274.85, y: 101.65))
        star26Path.addLine(to: CGPoint(x: 277.25, y: 102.25))
        star26Path.addLine(to: CGPoint(x: 274.85, y: 102.85))
        star26Path.addLine(to: CGPoint(x: 274.25, y: 105.25))
        star26Path.addLine(to: CGPoint(x: 273.65, y: 102.85))
        star26Path.addLine(to: CGPoint(x: 271.25, y: 102.25))
        star26Path.addLine(to: CGPoint(x: 273.65, y: 101.65))
        star26Path.close()
        context.saveGState()
        star26Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 274.15, y: 102.33), startRadius: 0,
            endCenter: CGPoint(x: 274.15, y: 102.33), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 28
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 27 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star27Path = UIBezierPath()
        star27Path.move(to: CGPoint(x: 34.25, y: 129.25))
        star27Path.addLine(to: CGPoint(x: 34.85, y: 131.65))
        star27Path.addLine(to: CGPoint(x: 37.25, y: 132.25))
        star27Path.addLine(to: CGPoint(x: 34.85, y: 132.85))
        star27Path.addLine(to: CGPoint(x: 34.25, y: 135.25))
        star27Path.addLine(to: CGPoint(x: 33.65, y: 132.85))
        star27Path.addLine(to: CGPoint(x: 31.25, y: 132.25))
        star27Path.addLine(to: CGPoint(x: 33.65, y: 131.65))
        star27Path.close()
        context.saveGState()
        star27Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 34.16, y: 132.33), startRadius: 0,
            endCenter: CGPoint(x: 34.16, y: 132.33), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 29
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 28 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star28Path = UIBezierPath()
        star28Path.move(to: CGPoint(x: 74.25, y: 109.25))
        star28Path.addLine(to: CGPoint(x: 74.85, y: 111.65))
        star28Path.addLine(to: CGPoint(x: 77.25, y: 112.25))
        star28Path.addLine(to: CGPoint(x: 74.85, y: 112.85))
        star28Path.addLine(to: CGPoint(x: 74.25, y: 115.25))
        star28Path.addLine(to: CGPoint(x: 73.65, y: 112.85))
        star28Path.addLine(to: CGPoint(x: 71.25, y: 112.25))
        star28Path.addLine(to: CGPoint(x: 73.65, y: 111.65))
        star28Path.close()
        context.saveGState()
        star28Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 74.16, y: 112.33), startRadius: 0,
            endCenter: CGPoint(x: 74.16, y: 112.33), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 30
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 29 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star29Path = UIBezierPath()
        star29Path.move(to: CGPoint(x: 55.65, y: 200.65))
        star29Path.addLine(to: CGPoint(x: 56.43, y: 203.87))
        star29Path.addLine(to: CGPoint(x: 59.65, y: 204.65))
        star29Path.addLine(to: CGPoint(x: 56.43, y: 205.43))
        star29Path.addLine(to: CGPoint(x: 55.65, y: 208.65))
        star29Path.addLine(to: CGPoint(x: 54.87, y: 205.43))
        star29Path.addLine(to: CGPoint(x: 51.65, y: 204.65))
        star29Path.addLine(to: CGPoint(x: 54.87, y: 203.87))
        star29Path.close()
        context.saveGState()
        star29Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 55.54, y: 204.77), startRadius: 0,
            endCenter: CGPoint(x: 55.54, y: 204.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 31
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 30 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star30Path = UIBezierPath()
        star30Path.move(to: CGPoint(x: 79.65, y: 240.65))
        star30Path.addLine(to: CGPoint(x: 80.43, y: 243.87))
        star30Path.addLine(to: CGPoint(x: 83.65, y: 244.65))
        star30Path.addLine(to: CGPoint(x: 80.43, y: 245.43))
        star30Path.addLine(to: CGPoint(x: 79.65, y: 248.65))
        star30Path.addLine(to: CGPoint(x: 78.87, y: 245.43))
        star30Path.addLine(to: CGPoint(x: 75.65, y: 244.65))
        star30Path.addLine(to: CGPoint(x: 78.87, y: 243.87))
        star30Path.close()
        context.saveGState()
        star30Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 79.54, y: 244.77), startRadius: 0,
            endCenter: CGPoint(x: 79.54, y: 244.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 32
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 31 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star31Path = UIBezierPath()
        star31Path.move(to: CGPoint(x: 57.65, y: 270.65))
        star31Path.addLine(to: CGPoint(x: 58.43, y: 273.87))
        star31Path.addLine(to: CGPoint(x: 61.65, y: 274.65))
        star31Path.addLine(to: CGPoint(x: 58.43, y: 275.43))
        star31Path.addLine(to: CGPoint(x: 57.65, y: 278.65))
        star31Path.addLine(to: CGPoint(x: 56.87, y: 275.43))
        star31Path.addLine(to: CGPoint(x: 53.65, y: 274.65))
        star31Path.addLine(to: CGPoint(x: 56.87, y: 273.87))
        star31Path.close()
        context.saveGState()
        star31Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 57.54, y: 274.77), startRadius: 0,
            endCenter: CGPoint(x: 57.54, y: 274.77), endRadius: 1.87,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 33
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 32 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star32Path = UIBezierPath()
        star32Path.move(to: CGPoint(x: 207.65, y: 264.65))
        star32Path.addLine(to: CGPoint(x: 208.43, y: 267.87))
        star32Path.addLine(to: CGPoint(x: 211.65, y: 268.65))
        star32Path.addLine(to: CGPoint(x: 208.43, y: 269.43))
        star32Path.addLine(to: CGPoint(x: 207.65, y: 272.65))
        star32Path.addLine(to: CGPoint(x: 206.87, y: 269.43))
        star32Path.addLine(to: CGPoint(x: 203.65, y: 268.65))
        star32Path.addLine(to: CGPoint(x: 206.87, y: 267.87))
        star32Path.close()
        context.saveGState()
        star32Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 207.54, y: 268.77), startRadius: 0,
            endCenter: CGPoint(x: 207.54, y: 268.77), endRadius: 1.87,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 34
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 33 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star33Path = UIBezierPath()
        star33Path.move(to: CGPoint(x: 327.65, y: 212.65))
        star33Path.addLine(to: CGPoint(x: 328.43, y: 215.87))
        star33Path.addLine(to: CGPoint(x: 331.65, y: 216.65))
        star33Path.addLine(to: CGPoint(x: 328.43, y: 217.43))
        star33Path.addLine(to: CGPoint(x: 327.65, y: 220.65))
        star33Path.addLine(to: CGPoint(x: 326.87, y: 217.43))
        star33Path.addLine(to: CGPoint(x: 323.65, y: 216.65))
        star33Path.addLine(to: CGPoint(x: 326.87, y: 215.87))
        star33Path.close()
        context.saveGState()
        star33Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 327.54, y: 216.77), startRadius: 0,
            endCenter: CGPoint(x: 327.54, y: 216.77), endRadius: 1.87,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 35
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 34 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star34Path = UIBezierPath()
        star34Path.move(to: CGPoint(x: 296.65, y: 170.65))
        star34Path.addLine(to: CGPoint(x: 297.43, y: 173.87))
        star34Path.addLine(to: CGPoint(x: 300.65, y: 174.65))
        star34Path.addLine(to: CGPoint(x: 297.43, y: 175.43))
        star34Path.addLine(to: CGPoint(x: 296.65, y: 178.65))
        star34Path.addLine(to: CGPoint(x: 295.87, y: 175.43))
        star34Path.addLine(to: CGPoint(x: 292.65, y: 174.65))
        star34Path.addLine(to: CGPoint(x: 295.87, y: 173.87))
        star34Path.close()
        context.saveGState()
        star34Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 296.54, y: 174.77), startRadius: 0,
            endCenter: CGPoint(x: 296.54, y: 174.77), endRadius: 1.87,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 36
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 35 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star35Path = UIBezierPath()
        star35Path.move(to: CGPoint(x: 203.65, y: 206.65))
        star35Path.addLine(to: CGPoint(x: 204.43, y: 209.87))
        star35Path.addLine(to: CGPoint(x: 207.65, y: 210.65))
        star35Path.addLine(to: CGPoint(x: 204.43, y: 211.43))
        star35Path.addLine(to: CGPoint(x: 203.65, y: 214.65))
        star35Path.addLine(to: CGPoint(x: 202.87, y: 211.43))
        star35Path.addLine(to: CGPoint(x: 199.65, y: 210.65))
        star35Path.addLine(to: CGPoint(x: 202.87, y: 209.87))
        star35Path.close()
        context.saveGState()
        star35Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 203.54, y: 210.77), startRadius: 0,
            endCenter: CGPoint(x: 203.54, y: 210.77), endRadius: 1.87,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 37
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 36 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star36Path = UIBezierPath()
        star36Path.move(to: CGPoint(x: 323.65, y: 117.65))
        star36Path.addLine(to: CGPoint(x: 324.43, y: 120.87))
        star36Path.addLine(to: CGPoint(x: 327.65, y: 121.65))
        star36Path.addLine(to: CGPoint(x: 324.43, y: 122.43))
        star36Path.addLine(to: CGPoint(x: 323.65, y: 125.65))
        star36Path.addLine(to: CGPoint(x: 322.87, y: 122.43))
        star36Path.addLine(to: CGPoint(x: 319.65, y: 121.65))
        star36Path.addLine(to: CGPoint(x: 322.87, y: 120.87))
        star36Path.close()
        context.saveGState()
        star36Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 323.54, y: 121.77), startRadius: 0,
            endCenter: CGPoint(x: 323.54, y: 121.77), endRadius: 1.87,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 38
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 37 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star37Path = UIBezierPath()
        star37Path.move(to: CGPoint(x: 267.25, y: 200.25))
        star37Path.addLine(to: CGPoint(x: 267.85, y: 202.65))
        star37Path.addLine(to: CGPoint(x: 270.25, y: 203.25))
        star37Path.addLine(to: CGPoint(x: 267.85, y: 203.85))
        star37Path.addLine(to: CGPoint(x: 267.25, y: 206.25))
        star37Path.addLine(to: CGPoint(x: 266.65, y: 203.85))
        star37Path.addLine(to: CGPoint(x: 264.25, y: 203.25))
        star37Path.addLine(to: CGPoint(x: 266.65, y: 202.65))
        star37Path.close()
        context.saveGState()
        star37Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 267.15, y: 203.33), startRadius: 0,
            endCenter: CGPoint(x: 267.15, y: 203.33), endRadius: 1.4,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 39
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 38 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star38Path = UIBezierPath()
        star38Path.move(to: CGPoint(x: 126.25, y: 221.25))
        star38Path.addLine(to: CGPoint(x: 126.85, y: 223.65))
        star38Path.addLine(to: CGPoint(x: 129.25, y: 224.25))
        star38Path.addLine(to: CGPoint(x: 126.85, y: 224.85))
        star38Path.addLine(to: CGPoint(x: 126.25, y: 227.25))
        star38Path.addLine(to: CGPoint(x: 125.65, y: 224.85))
        star38Path.addLine(to: CGPoint(x: 123.25, y: 224.25))
        star38Path.addLine(to: CGPoint(x: 125.65, y: 223.65))
        star38Path.close()
        context.saveGState()
        star38Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 126.16, y: 224.33), startRadius: 0,
            endCenter: CGPoint(x: 126.16, y: 224.33), endRadius: 1.4,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 40
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 39 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star39Path = UIBezierPath()
        star39Path.move(to: CGPoint(x: 164.25, y: 239.25))
        star39Path.addLine(to: CGPoint(x: 164.85, y: 241.65))
        star39Path.addLine(to: CGPoint(x: 167.25, y: 242.25))
        star39Path.addLine(to: CGPoint(x: 164.85, y: 242.85))
        star39Path.addLine(to: CGPoint(x: 164.25, y: 245.25))
        star39Path.addLine(to: CGPoint(x: 163.65, y: 242.85))
        star39Path.addLine(to: CGPoint(x: 161.25, y: 242.25))
        star39Path.addLine(to: CGPoint(x: 163.65, y: 241.65))
        star39Path.close()
        context.saveGState()
        star39Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 164.16, y: 242.33), startRadius: 0,
            endCenter: CGPoint(x: 164.16, y: 242.33), endRadius: 1.4,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 41
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 40 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star40Path = UIBezierPath()
        star40Path.move(to: CGPoint(x: 244.25, y: 239.25))
        star40Path.addLine(to: CGPoint(x: 244.85, y: 241.65))
        star40Path.addLine(to: CGPoint(x: 247.25, y: 242.25))
        star40Path.addLine(to: CGPoint(x: 244.85, y: 242.85))
        star40Path.addLine(to: CGPoint(x: 244.25, y: 245.25))
        star40Path.addLine(to: CGPoint(x: 243.65, y: 242.85))
        star40Path.addLine(to: CGPoint(x: 241.25, y: 242.25))
        star40Path.addLine(to: CGPoint(x: 243.65, y: 241.65))
        star40Path.close()
        context.saveGState()
        star40Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 244.16, y: 242.33), startRadius: 0,
            endCenter: CGPoint(x: 244.16, y: 242.33), endRadius: 1.4,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 42
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 41 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star41Path = UIBezierPath()
        star41Path.move(to: CGPoint(x: 274.25, y: 99.25))
        star41Path.addLine(to: CGPoint(x: 274.85, y: 101.65))
        star41Path.addLine(to: CGPoint(x: 277.25, y: 102.25))
        star41Path.addLine(to: CGPoint(x: 274.85, y: 102.85))
        star41Path.addLine(to: CGPoint(x: 274.25, y: 105.25))
        star41Path.addLine(to: CGPoint(x: 273.65, y: 102.85))
        star41Path.addLine(to: CGPoint(x: 271.25, y: 102.25))
        star41Path.addLine(to: CGPoint(x: 273.65, y: 101.65))
        star41Path.close()
        context.saveGState()
        star41Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 274.15, y: 102.33), startRadius: 0,
            endCenter: CGPoint(x: 274.15, y: 102.33), endRadius: 1.4,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 43
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 42 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star42Path = UIBezierPath()
        star42Path.move(to: CGPoint(x: 34.25, y: 129.25))
        star42Path.addLine(to: CGPoint(x: 34.85, y: 131.65))
        star42Path.addLine(to: CGPoint(x: 37.25, y: 132.25))
        star42Path.addLine(to: CGPoint(x: 34.85, y: 132.85))
        star42Path.addLine(to: CGPoint(x: 34.25, y: 135.25))
        star42Path.addLine(to: CGPoint(x: 33.65, y: 132.85))
        star42Path.addLine(to: CGPoint(x: 31.25, y: 132.25))
        star42Path.addLine(to: CGPoint(x: 33.65, y: 131.65))
        star42Path.close()
        context.saveGState()
        star42Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 34.16, y: 132.33), startRadius: 0,
            endCenter: CGPoint(x: 34.16, y: 132.33), endRadius: 1.4,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 44
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 43 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star43Path = UIBezierPath()
        star43Path.move(to: CGPoint(x: 74.25, y: 109.25))
        star43Path.addLine(to: CGPoint(x: 74.85, y: 111.65))
        star43Path.addLine(to: CGPoint(x: 77.25, y: 112.25))
        star43Path.addLine(to: CGPoint(x: 74.85, y: 112.85))
        star43Path.addLine(to: CGPoint(x: 74.25, y: 115.25))
        star43Path.addLine(to: CGPoint(x: 73.65, y: 112.85))
        star43Path.addLine(to: CGPoint(x: 71.25, y: 112.25))
        star43Path.addLine(to: CGPoint(x: 73.65, y: 111.65))
        star43Path.close()
        context.saveGState()
        star43Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 74.16, y: 112.33), startRadius: 0,
            endCenter: CGPoint(x: 74.16, y: 112.33), endRadius: 1.4,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 45
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 44 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star44Path = UIBezierPath()
        star44Path.move(to: CGPoint(x: 55.65, y: 200.65))
        star44Path.addLine(to: CGPoint(x: 56.43, y: 203.87))
        star44Path.addLine(to: CGPoint(x: 59.65, y: 204.65))
        star44Path.addLine(to: CGPoint(x: 56.43, y: 205.43))
        star44Path.addLine(to: CGPoint(x: 55.65, y: 208.65))
        star44Path.addLine(to: CGPoint(x: 54.87, y: 205.43))
        star44Path.addLine(to: CGPoint(x: 51.65, y: 204.65))
        star44Path.addLine(to: CGPoint(x: 54.87, y: 203.87))
        star44Path.close()
        context.saveGState()
        star44Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 55.54, y: 204.77), startRadius: 0,
            endCenter: CGPoint(x: 55.54, y: 204.77), endRadius: 1.87,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 46
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 45 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star45Path = UIBezierPath()
        star45Path.move(to: CGPoint(x: 79.65, y: 240.65))
        star45Path.addLine(to: CGPoint(x: 80.43, y: 243.87))
        star45Path.addLine(to: CGPoint(x: 83.65, y: 244.65))
        star45Path.addLine(to: CGPoint(x: 80.43, y: 245.43))
        star45Path.addLine(to: CGPoint(x: 79.65, y: 248.65))
        star45Path.addLine(to: CGPoint(x: 78.87, y: 245.43))
        star45Path.addLine(to: CGPoint(x: 75.65, y: 244.65))
        star45Path.addLine(to: CGPoint(x: 78.87, y: 243.87))
        star45Path.close()
        context.saveGState()
        star45Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 79.54, y: 244.77), startRadius: 0,
            endCenter: CGPoint(x: 79.54, y: 244.77), endRadius: 1.87,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: -36, y: 281.18))
        bezier2Path.addCurve(to: CGPoint(x: 68.67, y: 314.47), controlPoint1: CGPoint(x: -36, y: 281.18), controlPoint2: CGPoint(x: 36.71, y: 314.75))
        bezier2Path.addCurve(to: CGPoint(x: 150.34, y: 270.27), controlPoint1: CGPoint(x: 100.63, y: 314.18), controlPoint2: CGPoint(x: 124.72, y: 270.27))
        bezier2Path.addCurve(to: CGPoint(x: 224.15, y: 321.74), controlPoint1: CGPoint(x: 175.96, y: 270.27), controlPoint2: CGPoint(x: 189.34, y: 321.74))
        bezier2Path.addCurve(to: CGPoint(x: 296.25, y: 236.07), controlPoint1: CGPoint(x: 258.97, y: 321.74), controlPoint2: CGPoint(x: 252.4, y: 236.07))
        bezier2Path.addCurve(to: CGPoint(x: 360.47, y: 338.9), controlPoint1: CGPoint(x: 339.93, y: 236.07), controlPoint2: CGPoint(x: 336.62, y: 338.9))
        bezier2Path.addCurve(to: CGPoint(x: 409.91, y: 259.63), controlPoint1: CGPoint(x: 384.32, y: 338.9), controlPoint2: CGPoint(x: 364.02, y: 317.97))
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow2.shadowOffset.width * resizedShadowScale, height: shadow2.shadowOffset.height * resizedShadowScale), blur: shadow2.shadowBlurRadius * resizedShadowScale, color: (shadow2.shadowColor as! UIColor).cgColor)
        color2.setStroke()
        bezier2Path.lineWidth = 5
        bezier2Path.miterLimit = 4
        bezier2Path.stroke()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawAuditoryHintIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 63, height: 38), resizing: ResizingBehavior = .aspectFit, auditoryHintIconScale: CGFloat = 1, auditoryHintIconOpacity: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 63, height: 38), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 63, y: resizedFrame.height / 38)


        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let strokeColor6 = UIColor(red: 0.945, green: 0.945, blue: 0.945, alpha: 1.000)

        //// Rectangle Drawing


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 62.58, y: 18.64))
        bezierPath.addCurve(to: CGPoint(x: 53.57, y: 31.86), controlPoint1: CGPoint(x: 62.58, y: 23.73), controlPoint2: CGPoint(x: 59.2, y: 28.42))
        bezierPath.addCurve(to: CGPoint(x: 31.51, y: 37.44), controlPoint1: CGPoint(x: 47.95, y: 35.3), controlPoint2: CGPoint(x: 40.15, y: 37.44))
        bezierPath.addCurve(to: CGPoint(x: 9.44, y: 31.86), controlPoint1: CGPoint(x: 22.86, y: 37.44), controlPoint2: CGPoint(x: 15.06, y: 35.3))
        bezierPath.addCurve(to: CGPoint(x: 0.43, y: 18.64), controlPoint1: CGPoint(x: 3.81, y: 28.42), controlPoint2: CGPoint(x: 0.43, y: 23.73))
        bezierPath.addCurve(to: CGPoint(x: 9.44, y: 5.42), controlPoint1: CGPoint(x: 0.43, y: 13.55), controlPoint2: CGPoint(x: 3.81, y: 8.86))
        bezierPath.addCurve(to: CGPoint(x: 31.51, y: -0.16), controlPoint1: CGPoint(x: 15.06, y: 1.98), controlPoint2: CGPoint(x: 22.86, y: -0.16))
        bezierPath.addCurve(to: CGPoint(x: 53.57, y: 5.42), controlPoint1: CGPoint(x: 40.15, y: -0.16), controlPoint2: CGPoint(x: 47.95, y: 1.98))
        bezierPath.addCurve(to: CGPoint(x: 62.58, y: 18.64), controlPoint1: CGPoint(x: 59.2, y: 8.86), controlPoint2: CGPoint(x: 62.58, y: 13.55))
        bezierPath.close()
        fillColor2.setFill()
        bezierPath.fill()
        strokeColor6.setStroke()
        bezierPath.lineWidth = auditoryHintIconScale
        bezierPath.miterLimit = 4
        bezierPath.stroke()


        //// Bezier 2 Drawing
        context.saveGState()
        context.translateBy(x: 31.61, y: 19.9)
        context.scaleBy(x: auditoryHintIconScale, y: auditoryHintIconScale)

        context.saveGState()
        context.setAlpha(auditoryHintIconOpacity)

        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 2.45, y: -7.88))
        bezier2Path.addCurve(to: CGPoint(x: 4.45, y: -4.03), controlPoint1: CGPoint(x: 3.54, y: -7.05), controlPoint2: CGPoint(x: 4.31, y: -5.65))
        bezier2Path.addCurve(to: CGPoint(x: 5.92, y: -3.64), controlPoint1: CGPoint(x: 4.9, y: -3.78), controlPoint2: CGPoint(x: 5.39, y: -3.64))
        bezier2Path.addCurve(to: CGPoint(x: 9.39, y: -7.82), controlPoint1: CGPoint(x: 7.84, y: -3.64), controlPoint2: CGPoint(x: 9.39, y: -5.51))
        bezier2Path.addCurve(to: CGPoint(x: 5.92, y: -12), controlPoint1: CGPoint(x: 9.39, y: -10.13), controlPoint2: CGPoint(x: 7.84, y: -12))
        bezier2Path.addCurve(to: CGPoint(x: 2.45, y: -7.88), controlPoint1: CGPoint(x: 4.02, y: -12), controlPoint2: CGPoint(x: 2.48, y: -10.16))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 0.17, y: 0.68))
        bezier2Path.addCurve(to: CGPoint(x: 3.65, y: -3.5), controlPoint1: CGPoint(x: 2.09, y: 0.68), controlPoint2: CGPoint(x: 3.65, y: -1.19))
        bezier2Path.addCurve(to: CGPoint(x: 0.17, y: -7.68), controlPoint1: CGPoint(x: 3.65, y: -5.81), controlPoint2: CGPoint(x: 2.09, y: -7.68))
        bezier2Path.addCurve(to: CGPoint(x: -3.3, y: -3.5), controlPoint1: CGPoint(x: -1.74, y: -7.68), controlPoint2: CGPoint(x: -3.3, y: -5.81))
        bezier2Path.addCurve(to: CGPoint(x: 0.17, y: 0.68), controlPoint1: CGPoint(x: -3.3, y: -1.19), controlPoint2: CGPoint(x: -1.74, y: 0.68))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 1.65, y: 0.97))
        bezier2Path.addLine(to: CGPoint(x: -1.3, y: 0.97))
        bezier2Path.addCurve(to: CGPoint(x: -5.75, y: 6.32), controlPoint1: CGPoint(x: -3.75, y: 0.97), controlPoint2: CGPoint(x: -5.75, y: 3.37))
        bezier2Path.addLine(to: CGPoint(x: -5.75, y: 10.66))
        bezier2Path.addLine(to: CGPoint(x: -5.74, y: 10.73))
        bezier2Path.addLine(to: CGPoint(x: -5.49, y: 10.83))
        bezier2Path.addCurve(to: CGPoint(x: 0.56, y: 12), controlPoint1: CGPoint(x: -3.15, y: 11.71), controlPoint2: CGPoint(x: -1.12, y: 12))
        bezier2Path.addCurve(to: CGPoint(x: 5.84, y: 10.81), controlPoint1: CGPoint(x: 3.83, y: 12), controlPoint2: CGPoint(x: 5.72, y: 10.88))
        bezier2Path.addLine(to: CGPoint(x: 6.07, y: 10.66))
        bezier2Path.addLine(to: CGPoint(x: 6.09, y: 10.66))
        bezier2Path.addLine(to: CGPoint(x: 6.09, y: 6.32))
        bezier2Path.addCurve(to: CGPoint(x: 1.65, y: 0.97), controlPoint1: CGPoint(x: 6.09, y: 3.37), controlPoint2: CGPoint(x: 4.1, y: 0.97))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 7.39, y: -3.35))
        bezier2Path.addLine(to: CGPoint(x: 4.47, y: -3.35))
        bezier2Path.addCurve(to: CGPoint(x: 3.15, y: 0.24), controlPoint1: CGPoint(x: 4.44, y: -1.94), controlPoint2: CGPoint(x: 3.94, y: -0.67))
        bezier2Path.addCurve(to: CGPoint(x: 6.92, y: 6.33), controlPoint1: CGPoint(x: 5.33, y: 1.02), controlPoint2: CGPoint(x: 6.92, y: 3.46))
        bezier2Path.addLine(to: CGPoint(x: 6.92, y: 7.67))
        bezier2Path.addCurve(to: CGPoint(x: 11.58, y: 6.49), controlPoint1: CGPoint(x: 9.81, y: 7.54), controlPoint2: CGPoint(x: 11.47, y: 6.55))
        bezier2Path.addLine(to: CGPoint(x: 11.82, y: 6.35))
        bezier2Path.addLine(to: CGPoint(x: 11.84, y: 6.35))
        bezier2Path.addLine(to: CGPoint(x: 11.84, y: 2.01))
        bezier2Path.addCurve(to: CGPoint(x: 7.39, y: -3.35), controlPoint1: CGPoint(x: 11.84, y: -0.95), controlPoint2: CGPoint(x: 9.85, y: -3.35))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: -5.92, y: -3.63))
        bezier2Path.addCurve(to: CGPoint(x: -4.07, y: -4.28), controlPoint1: CGPoint(x: -5.24, y: -3.63), controlPoint2: CGPoint(x: -4.61, y: -3.87))
        bezier2Path.addCurve(to: CGPoint(x: -2.46, y: -7.58), controlPoint1: CGPoint(x: -3.9, y: -5.62), controlPoint2: CGPoint(x: -3.31, y: -6.79))
        bezier2Path.addCurve(to: CGPoint(x: -2.45, y: -7.82), controlPoint1: CGPoint(x: -2.45, y: -7.66), controlPoint2: CGPoint(x: -2.45, y: -7.74))
        bezier2Path.addCurve(to: CGPoint(x: -5.92, y: -12), controlPoint1: CGPoint(x: -2.45, y: -10.13), controlPoint2: CGPoint(x: -4, y: -12))
        bezier2Path.addCurve(to: CGPoint(x: -9.39, y: -7.82), controlPoint1: CGPoint(x: -7.84, y: -12), controlPoint2: CGPoint(x: -9.39, y: -10.13))
        bezier2Path.addCurve(to: CGPoint(x: -5.92, y: -3.63), controlPoint1: CGPoint(x: -9.39, y: -5.51), controlPoint2: CGPoint(x: -7.84, y: -3.63))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: -2.8, y: 0.24))
        bezier2Path.addCurve(to: CGPoint(x: -4.12, y: -3.33), controlPoint1: CGPoint(x: -3.59, y: -0.67), controlPoint2: CGPoint(x: -4.08, y: -1.93))
        bezier2Path.addCurve(to: CGPoint(x: -4.45, y: -3.35), controlPoint1: CGPoint(x: -4.23, y: -3.34), controlPoint2: CGPoint(x: -4.34, y: -3.35))
        bezier2Path.addLine(to: CGPoint(x: -7.39, y: -3.35))
        bezier2Path.addCurve(to: CGPoint(x: -11.84, y: 2.01), controlPoint1: CGPoint(x: -9.85, y: -3.35), controlPoint2: CGPoint(x: -11.84, y: -0.95))
        bezier2Path.addLine(to: CGPoint(x: -11.84, y: 6.35))
        bezier2Path.addLine(to: CGPoint(x: -11.83, y: 6.41))
        bezier2Path.addLine(to: CGPoint(x: -11.58, y: 6.51))
        bezier2Path.addCurve(to: CGPoint(x: -6.57, y: 7.64), controlPoint1: CGPoint(x: -9.71, y: 7.21), controlPoint2: CGPoint(x: -8.03, y: 7.54))
        bezier2Path.addLine(to: CGPoint(x: -6.57, y: 6.33))
        bezier2Path.addCurve(to: CGPoint(x: -2.8, y: 0.24), controlPoint1: CGPoint(x: -6.57, y: 3.46), controlPoint2: CGPoint(x: -4.98, y: 1.02))
        bezier2Path.close()
        fillColor.setFill()
        bezier2Path.fill()

        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawFiftyPercent(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 65, height: 38), resizing: ResizingBehavior = .aspectFit, fiftyPercentHintIconScale: CGFloat = 1, fiftyPercentHintOpacity: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 65, height: 38), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 65, y: resizedFrame.height / 38)


        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let strokeColor6 = UIColor(red: 0.945, green: 0.945, blue: 0.945, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 63.5, y: 18.74))
        bezierPath.addCurve(to: CGPoint(x: 54.37, y: 31.96), controlPoint1: CGPoint(x: 63.5, y: 23.83), controlPoint2: CGPoint(x: 60.08, y: 28.52))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 37.54), controlPoint1: CGPoint(x: 48.67, y: 35.4), controlPoint2: CGPoint(x: 40.76, y: 37.54))
        bezierPath.addCurve(to: CGPoint(x: 9.63, y: 31.96), controlPoint1: CGPoint(x: 23.24, y: 37.54), controlPoint2: CGPoint(x: 15.33, y: 35.4))
        bezierPath.addCurve(to: CGPoint(x: 0.5, y: 18.74), controlPoint1: CGPoint(x: 3.92, y: 28.52), controlPoint2: CGPoint(x: 0.5, y: 23.83))
        bezierPath.addCurve(to: CGPoint(x: 9.63, y: 5.52), controlPoint1: CGPoint(x: 0.5, y: 13.66), controlPoint2: CGPoint(x: 3.92, y: 8.97))
        bezierPath.addCurve(to: CGPoint(x: 32, y: -0.06), controlPoint1: CGPoint(x: 15.33, y: 2.08), controlPoint2: CGPoint(x: 23.24, y: -0.06))
        bezierPath.addCurve(to: CGPoint(x: 54.37, y: 5.52), controlPoint1: CGPoint(x: 40.76, y: -0.06), controlPoint2: CGPoint(x: 48.67, y: 2.08))
        bezierPath.addCurve(to: CGPoint(x: 63.5, y: 18.74), controlPoint1: CGPoint(x: 60.08, y: 8.97), controlPoint2: CGPoint(x: 63.5, y: 13.66))
        bezierPath.close()
        fillColor2.setFill()
        bezierPath.fill()
        strokeColor6.setStroke()
        bezierPath.lineWidth = fiftyPercentHintIconScale
        bezierPath.miterLimit = 4
        bezierPath.stroke()


        //// Bezier 2 Drawing
        context.saveGState()
        context.translateBy(x: 31.62, y: 19.29)
        context.scaleBy(x: fiftyPercentHintIconScale, y: fiftyPercentHintIconScale)

        context.saveGState()
        context.setAlpha(fiftyPercentHintOpacity)

        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: -14.93, y: -1.23))
        bezier2Path.addCurve(to: CGPoint(x: -12.72, y: -0.44), controlPoint1: CGPoint(x: -14.06, y: -1.23), controlPoint2: CGPoint(x: -13.32, y: -0.97))
        bezier2Path.addCurve(to: CGPoint(x: -11.83, y: 1.74), controlPoint1: CGPoint(x: -12.12, y: 0.08), controlPoint2: CGPoint(x: -11.83, y: 0.81))
        bezier2Path.addCurve(to: CGPoint(x: -12.77, y: 3.94), controlPoint1: CGPoint(x: -11.83, y: 2.68), controlPoint2: CGPoint(x: -12.14, y: 3.41))
        bezier2Path.addCurve(to: CGPoint(x: -15.08, y: 4.73), controlPoint1: CGPoint(x: -13.4, y: 4.47), controlPoint2: CGPoint(x: -14.17, y: 4.73))
        bezier2Path.addCurve(to: CGPoint(x: -17.03, y: 4.24), controlPoint1: CGPoint(x: -15.81, y: 4.73), controlPoint2: CGPoint(x: -16.46, y: 4.57))
        bezier2Path.addCurve(to: CGPoint(x: -18.25, y: 2.78), controlPoint1: CGPoint(x: -17.59, y: 3.91), controlPoint2: CGPoint(x: -18, y: 3.42))
        bezier2Path.addLine(to: CGPoint(x: -16.71, y: 1.88))
        bezier2Path.addCurve(to: CGPoint(x: -15.08, y: 2.98), controlPoint1: CGPoint(x: -16.49, y: 2.61), controlPoint2: CGPoint(x: -15.94, y: 2.98))
        bezier2Path.addCurve(to: CGPoint(x: -14.01, y: 2.65), controlPoint1: CGPoint(x: -14.62, y: 2.98), controlPoint2: CGPoint(x: -14.26, y: 2.87))
        bezier2Path.addCurve(to: CGPoint(x: -13.62, y: 1.74), controlPoint1: CGPoint(x: -13.75, y: 2.43), controlPoint2: CGPoint(x: -13.62, y: 2.12))
        bezier2Path.addCurve(to: CGPoint(x: -14, y: 0.84), controlPoint1: CGPoint(x: -13.62, y: 1.37), controlPoint2: CGPoint(x: -13.75, y: 1.07))
        bezier2Path.addCurve(to: CGPoint(x: -15.02, y: 0.51), controlPoint1: CGPoint(x: -14.25, y: 0.62), controlPoint2: CGPoint(x: -14.59, y: 0.51))
        bezier2Path.addLine(to: CGPoint(x: -17.78, y: 0.51))
        bezier2Path.addLine(to: CGPoint(x: -17.42, y: -4.55))
        bezier2Path.addLine(to: CGPoint(x: -12.25, y: -4.55))
        bezier2Path.addLine(to: CGPoint(x: -12.25, y: -2.87))
        bezier2Path.addLine(to: CGPoint(x: -15.75, y: -2.87))
        bezier2Path.addLine(to: CGPoint(x: -15.87, y: -1.23))
        bezier2Path.addLine(to: CGPoint(x: -14.93, y: -1.23))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: -7.43, y: 4.73))
        bezier2Path.addCurve(to: CGPoint(x: -10.11, y: 3.44), controlPoint1: CGPoint(x: -8.57, y: 4.73), controlPoint2: CGPoint(x: -9.46, y: 4.3))
        bezier2Path.addCurve(to: CGPoint(x: -11.07, y: 0), controlPoint1: CGPoint(x: -10.75, y: 2.58), controlPoint2: CGPoint(x: -11.07, y: 1.43))
        bezier2Path.addCurve(to: CGPoint(x: -10.11, y: -3.43), controlPoint1: CGPoint(x: -11.07, y: -1.43), controlPoint2: CGPoint(x: -10.75, y: -2.57))
        bezier2Path.addCurve(to: CGPoint(x: -7.43, y: -4.73), controlPoint1: CGPoint(x: -9.46, y: -4.3), controlPoint2: CGPoint(x: -8.57, y: -4.73))
        bezier2Path.addCurve(to: CGPoint(x: -4.75, y: -3.43), controlPoint1: CGPoint(x: -6.29, y: -4.73), controlPoint2: CGPoint(x: -5.39, y: -4.3))
        bezier2Path.addCurve(to: CGPoint(x: -3.79, y: 0), controlPoint1: CGPoint(x: -4.11, y: -2.57), controlPoint2: CGPoint(x: -3.79, y: -1.43))
        bezier2Path.addCurve(to: CGPoint(x: -4.75, y: 3.44), controlPoint1: CGPoint(x: -3.79, y: 1.43), controlPoint2: CGPoint(x: -4.11, y: 2.58))
        bezier2Path.addCurve(to: CGPoint(x: -7.43, y: 4.73), controlPoint1: CGPoint(x: -5.39, y: 4.3), controlPoint2: CGPoint(x: -6.29, y: 4.73))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: -8.81, y: 2.22))
        bezier2Path.addCurve(to: CGPoint(x: -7.43, y: 2.98), controlPoint1: CGPoint(x: -8.5, y: 2.73), controlPoint2: CGPoint(x: -8.04, y: 2.98))
        bezier2Path.addCurve(to: CGPoint(x: -6.05, y: 2.21), controlPoint1: CGPoint(x: -6.82, y: 2.98), controlPoint2: CGPoint(x: -6.37, y: 2.72))
        bezier2Path.addCurve(to: CGPoint(x: -5.57, y: 0), controlPoint1: CGPoint(x: -5.73, y: 1.7), controlPoint2: CGPoint(x: -5.57, y: 0.96))
        bezier2Path.addCurve(to: CGPoint(x: -6.05, y: -2.22), controlPoint1: CGPoint(x: -5.57, y: -0.97), controlPoint2: CGPoint(x: -5.73, y: -1.71))
        bezier2Path.addCurve(to: CGPoint(x: -7.43, y: -2.99), controlPoint1: CGPoint(x: -6.37, y: -2.73), controlPoint2: CGPoint(x: -6.82, y: -2.99))
        bezier2Path.addCurve(to: CGPoint(x: -8.81, y: -2.22), controlPoint1: CGPoint(x: -8.04, y: -2.99), controlPoint2: CGPoint(x: -8.5, y: -2.73))
        bezier2Path.addCurve(to: CGPoint(x: -9.28, y: 0), controlPoint1: CGPoint(x: -9.12, y: -1.71), controlPoint2: CGPoint(x: -9.28, y: -0.97))
        bezier2Path.addCurve(to: CGPoint(x: -8.81, y: 2.22), controlPoint1: CGPoint(x: -9.28, y: 0.97), controlPoint2: CGPoint(x: -9.12, y: 1.71))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: -2.17, y: 5.85))
        bezier2Path.addLine(to: CGPoint(x: -2.91, y: 5.85))
        bezier2Path.addLine(to: CGPoint(x: 2.29, y: -5.85))
        bezier2Path.addLine(to: CGPoint(x: 3.03, y: -5.85))
        bezier2Path.addLine(to: CGPoint(x: -2.17, y: 5.85))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 7.11, y: -1.23))
        bezier2Path.addCurve(to: CGPoint(x: 9.32, y: -0.44), controlPoint1: CGPoint(x: 7.98, y: -1.23), controlPoint2: CGPoint(x: 8.72, y: -0.97))
        bezier2Path.addCurve(to: CGPoint(x: 10.21, y: 1.74), controlPoint1: CGPoint(x: 9.91, y: 0.08), controlPoint2: CGPoint(x: 10.21, y: 0.81))
        bezier2Path.addCurve(to: CGPoint(x: 9.26, y: 3.94), controlPoint1: CGPoint(x: 10.21, y: 2.68), controlPoint2: CGPoint(x: 9.9, y: 3.41))
        bezier2Path.addCurve(to: CGPoint(x: 6.96, y: 4.73), controlPoint1: CGPoint(x: 8.64, y: 4.47), controlPoint2: CGPoint(x: 7.87, y: 4.73))
        bezier2Path.addCurve(to: CGPoint(x: 5.01, y: 4.24), controlPoint1: CGPoint(x: 6.23, y: 4.73), controlPoint2: CGPoint(x: 5.58, y: 4.57))
        bezier2Path.addCurve(to: CGPoint(x: 3.79, y: 2.78), controlPoint1: CGPoint(x: 4.45, y: 3.91), controlPoint2: CGPoint(x: 4.04, y: 3.42))
        bezier2Path.addLine(to: CGPoint(x: 5.33, y: 1.88))
        bezier2Path.addCurve(to: CGPoint(x: 6.96, y: 2.98), controlPoint1: CGPoint(x: 5.55, y: 2.61), controlPoint2: CGPoint(x: 6.1, y: 2.98))
        bezier2Path.addCurve(to: CGPoint(x: 8.03, y: 2.65), controlPoint1: CGPoint(x: 7.42, y: 2.98), controlPoint2: CGPoint(x: 7.78, y: 2.87))
        bezier2Path.addCurve(to: CGPoint(x: 8.42, y: 1.74), controlPoint1: CGPoint(x: 8.29, y: 2.43), controlPoint2: CGPoint(x: 8.42, y: 2.12))
        bezier2Path.addCurve(to: CGPoint(x: 8.04, y: 0.84), controlPoint1: CGPoint(x: 8.42, y: 1.37), controlPoint2: CGPoint(x: 8.29, y: 1.07))
        bezier2Path.addCurve(to: CGPoint(x: 7.02, y: 0.51), controlPoint1: CGPoint(x: 7.79, y: 0.62), controlPoint2: CGPoint(x: 7.45, y: 0.51))
        bezier2Path.addLine(to: CGPoint(x: 4.26, y: 0.51))
        bezier2Path.addLine(to: CGPoint(x: 4.62, y: -4.55))
        bezier2Path.addLine(to: CGPoint(x: 9.78, y: -4.55))
        bezier2Path.addLine(to: CGPoint(x: 9.78, y: -2.87))
        bezier2Path.addLine(to: CGPoint(x: 6.29, y: -2.87))
        bezier2Path.addLine(to: CGPoint(x: 6.17, y: -1.23))
        bezier2Path.addLine(to: CGPoint(x: 7.11, y: -1.23))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 14.61, y: 4.73))
        bezier2Path.addCurve(to: CGPoint(x: 11.93, y: 3.44), controlPoint1: CGPoint(x: 13.47, y: 4.73), controlPoint2: CGPoint(x: 12.58, y: 4.3))
        bezier2Path.addCurve(to: CGPoint(x: 10.97, y: 0), controlPoint1: CGPoint(x: 11.29, y: 2.58), controlPoint2: CGPoint(x: 10.97, y: 1.43))
        bezier2Path.addCurve(to: CGPoint(x: 11.93, y: -3.43), controlPoint1: CGPoint(x: 10.97, y: -1.43), controlPoint2: CGPoint(x: 11.29, y: -2.57))
        bezier2Path.addCurve(to: CGPoint(x: 14.61, y: -4.73), controlPoint1: CGPoint(x: 12.58, y: -4.3), controlPoint2: CGPoint(x: 13.47, y: -4.73))
        bezier2Path.addCurve(to: CGPoint(x: 17.29, y: -3.43), controlPoint1: CGPoint(x: 15.75, y: -4.73), controlPoint2: CGPoint(x: 16.64, y: -4.3))
        bezier2Path.addCurve(to: CGPoint(x: 18.25, y: 0), controlPoint1: CGPoint(x: 17.93, y: -2.57), controlPoint2: CGPoint(x: 18.25, y: -1.43))
        bezier2Path.addCurve(to: CGPoint(x: 17.29, y: 3.44), controlPoint1: CGPoint(x: 18.25, y: 1.43), controlPoint2: CGPoint(x: 17.93, y: 2.58))
        bezier2Path.addCurve(to: CGPoint(x: 14.61, y: 4.73), controlPoint1: CGPoint(x: 16.64, y: 4.3), controlPoint2: CGPoint(x: 15.75, y: 4.73))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 13.23, y: 2.22))
        bezier2Path.addCurve(to: CGPoint(x: 14.61, y: 2.98), controlPoint1: CGPoint(x: 13.54, y: 2.73), controlPoint2: CGPoint(x: 14, y: 2.98))
        bezier2Path.addCurve(to: CGPoint(x: 15.99, y: 2.21), controlPoint1: CGPoint(x: 15.21, y: 2.98), controlPoint2: CGPoint(x: 15.67, y: 2.72))
        bezier2Path.addCurve(to: CGPoint(x: 16.47, y: 0), controlPoint1: CGPoint(x: 16.31, y: 1.7), controlPoint2: CGPoint(x: 16.47, y: 0.96))
        bezier2Path.addCurve(to: CGPoint(x: 15.99, y: -2.22), controlPoint1: CGPoint(x: 16.47, y: -0.97), controlPoint2: CGPoint(x: 16.31, y: -1.71))
        bezier2Path.addCurve(to: CGPoint(x: 14.61, y: -2.99), controlPoint1: CGPoint(x: 15.67, y: -2.73), controlPoint2: CGPoint(x: 15.21, y: -2.99))
        bezier2Path.addCurve(to: CGPoint(x: 13.23, y: -2.22), controlPoint1: CGPoint(x: 14, y: -2.99), controlPoint2: CGPoint(x: 13.54, y: -2.73))
        bezier2Path.addCurve(to: CGPoint(x: 12.76, y: 0), controlPoint1: CGPoint(x: 12.92, y: -1.71), controlPoint2: CGPoint(x: 12.76, y: -0.97))
        bezier2Path.addCurve(to: CGPoint(x: 13.23, y: 2.22), controlPoint1: CGPoint(x: 12.76, y: 0.97), controlPoint2: CGPoint(x: 12.92, y: 1.71))
        bezier2Path.close()
        fillColor.setFill()
        bezier2Path.fill()

        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCallFriend(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 64, height: 40), resizing: ResizingBehavior = .aspectFit, callFriendHintIconScale: CGFloat = 1, callFriendsHintOpacity: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 64, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 64, y: resizedFrame.height / 40)


        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let strokeColor6 = UIColor(red: 0.945, green: 0.945, blue: 0.945, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 63.5, y: 19.74))
        bezierPath.addCurve(to: CGPoint(x: 54.37, y: 32.96), controlPoint1: CGPoint(x: 63.5, y: 24.83), controlPoint2: CGPoint(x: 60.08, y: 29.52))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 38.54), controlPoint1: CGPoint(x: 48.67, y: 36.4), controlPoint2: CGPoint(x: 40.76, y: 38.54))
        bezierPath.addCurve(to: CGPoint(x: 9.63, y: 32.96), controlPoint1: CGPoint(x: 23.24, y: 38.54), controlPoint2: CGPoint(x: 15.33, y: 36.4))
        bezierPath.addCurve(to: CGPoint(x: 0.5, y: 19.74), controlPoint1: CGPoint(x: 3.92, y: 29.52), controlPoint2: CGPoint(x: 0.5, y: 24.83))
        bezierPath.addCurve(to: CGPoint(x: 9.63, y: 6.52), controlPoint1: CGPoint(x: 0.5, y: 14.66), controlPoint2: CGPoint(x: 3.92, y: 9.97))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 0.94), controlPoint1: CGPoint(x: 15.33, y: 3.08), controlPoint2: CGPoint(x: 23.24, y: 0.94))
        bezierPath.addCurve(to: CGPoint(x: 54.37, y: 6.52), controlPoint1: CGPoint(x: 40.76, y: 0.94), controlPoint2: CGPoint(x: 48.67, y: 3.08))
        bezierPath.addCurve(to: CGPoint(x: 63.5, y: 19.74), controlPoint1: CGPoint(x: 60.08, y: 9.97), controlPoint2: CGPoint(x: 63.5, y: 14.66))
        bezierPath.close()
        fillColor2.setFill()
        bezierPath.fill()
        strokeColor6.setStroke()
        bezierPath.lineWidth = callFriendHintIconScale
        bezierPath.miterLimit = 4
        bezierPath.stroke()


        //// Bezier 2 Drawing
        context.saveGState()
        context.translateBy(x: 29.29, y: 24.14)
        context.scaleBy(x: callFriendHintIconScale, y: callFriendHintIconScale)

        context.saveGState()
        context.setAlpha(callFriendsHintOpacity)

        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 14.25, y: 2.95))
        bezier2Path.addLine(to: CGPoint(x: 11.59, y: 1.17))
        bezier2Path.addLine(to: CGPoint(x: 9.22, y: -0.41))
        bezier2Path.addCurve(to: CGPoint(x: 7.81, y: -0.18), controlPoint1: CGPoint(x: 8.76, y: -0.71), controlPoint2: CGPoint(x: 8.15, y: -0.61))
        bezier2Path.addLine(to: CGPoint(x: 6.35, y: 1.7))
        bezier2Path.addCurve(to: CGPoint(x: 5.02, y: 1.98), controlPoint1: CGPoint(x: 6.04, y: 2.11), controlPoint2: CGPoint(x: 5.47, y: 2.23))
        bezier2Path.addCurve(to: CGPoint(x: 0.26, y: -1.69), controlPoint1: CGPoint(x: 4.03, y: 1.43), controlPoint2: CGPoint(x: 2.85, y: 0.91))
        bezier2Path.addCurve(to: CGPoint(x: -3.41, y: -6.44), controlPoint1: CGPoint(x: -2.33, y: -4.28), controlPoint2: CGPoint(x: -2.85, y: -5.45))
        bezier2Path.addCurve(to: CGPoint(x: -3.13, y: -7.78), controlPoint1: CGPoint(x: -3.66, y: -6.9), controlPoint2: CGPoint(x: -3.54, y: -7.46))
        bezier2Path.addLine(to: CGPoint(x: -1.25, y: -9.24))
        bezier2Path.addCurve(to: CGPoint(x: -1.02, y: -10.65), controlPoint1: CGPoint(x: -0.82, y: -9.58), controlPoint2: CGPoint(x: -0.72, y: -10.19))
        bezier2Path.addLine(to: CGPoint(x: -2.55, y: -12.94))
        bezier2Path.addLine(to: CGPoint(x: -4.37, y: -15.67))
        bezier2Path.addCurve(to: CGPoint(x: -5.78, y: -15.99), controlPoint1: CGPoint(x: -4.68, y: -16.14), controlPoint2: CGPoint(x: -5.3, y: -16.28))
        bezier2Path.addLine(to: CGPoint(x: -7.88, y: -14.73))
        bezier2Path.addCurve(to: CGPoint(x: -9.05, y: -13.22), controlPoint1: CGPoint(x: -8.45, y: -14.39), controlPoint2: CGPoint(x: -8.87, y: -13.85))
        bezier2Path.addCurve(to: CGPoint(x: -2.33, y: 0.91), controlPoint1: CGPoint(x: -9.62, y: -11.12), controlPoint2: CGPoint(x: -9.74, y: -6.5))
        bezier2Path.addCurve(to: CGPoint(x: 11.79, y: 7.62), controlPoint1: CGPoint(x: 5.08, y: 8.31), controlPoint2: CGPoint(x: 9.7, y: 8.2))
        bezier2Path.addCurve(to: CGPoint(x: 13.3, y: 6.46), controlPoint1: CGPoint(x: 12.43, y: 7.44), controlPoint2: CGPoint(x: 12.97, y: 7.03))
        bezier2Path.addLine(to: CGPoint(x: 14.56, y: 4.36))
        bezier2Path.addCurve(to: CGPoint(x: 14.25, y: 2.95), controlPoint1: CGPoint(x: 14.85, y: 3.88), controlPoint2: CGPoint(x: 14.71, y: 3.26))
        bezier2Path.close()
        fillColor.setFill()
        bezier2Path.fill()

        context.restoreGState()

        context.restoreGState()


        //// Bezier 3 Drawing
        context.saveGState()
        context.setAlpha(callFriendsHintOpacity)

        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 33.65, y: 11.72))
        bezier3Path.addCurve(to: CGPoint(x: 40.69, y: 18.76), controlPoint1: CGPoint(x: 37.54, y: 11.73), controlPoint2: CGPoint(x: 40.68, y: 14.88))
        bezier3Path.addCurve(to: CGPoint(x: 41.1, y: 19.17), controlPoint1: CGPoint(x: 40.69, y: 18.99), controlPoint2: CGPoint(x: 40.87, y: 19.17))
        bezier3Path.addCurve(to: CGPoint(x: 41.52, y: 18.76), controlPoint1: CGPoint(x: 41.33, y: 19.17), controlPoint2: CGPoint(x: 41.52, y: 18.99))
        bezier3Path.addCurve(to: CGPoint(x: 33.65, y: 10.9), controlPoint1: CGPoint(x: 41.51, y: 14.42), controlPoint2: CGPoint(x: 37.99, y: 10.9))
        bezier3Path.addCurve(to: CGPoint(x: 33.24, y: 11.31), controlPoint1: CGPoint(x: 33.43, y: 10.9), controlPoint2: CGPoint(x: 33.24, y: 11.08))
        bezier3Path.addCurve(to: CGPoint(x: 33.65, y: 11.72), controlPoint1: CGPoint(x: 33.24, y: 11.54), controlPoint2: CGPoint(x: 33.43, y: 11.72))
        bezier3Path.close()
        fillColor.setFill()
        bezier3Path.fill()

        context.restoreGState()


        //// Bezier 4 Drawing
        context.saveGState()
        context.setAlpha(callFriendsHintOpacity)

        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 33.65, y: 14.21))
        bezier4Path.addCurve(to: CGPoint(x: 38.21, y: 18.76), controlPoint1: CGPoint(x: 36.17, y: 14.21), controlPoint2: CGPoint(x: 38.2, y: 16.25))
        bezier4Path.addCurve(to: CGPoint(x: 38.62, y: 19.17), controlPoint1: CGPoint(x: 38.21, y: 18.99), controlPoint2: CGPoint(x: 38.39, y: 19.17))
        bezier4Path.addCurve(to: CGPoint(x: 39.03, y: 18.76), controlPoint1: CGPoint(x: 38.85, y: 19.17), controlPoint2: CGPoint(x: 39.03, y: 18.99))
        bezier4Path.addCurve(to: CGPoint(x: 33.65, y: 13.38), controlPoint1: CGPoint(x: 39.03, y: 15.79), controlPoint2: CGPoint(x: 36.62, y: 13.38))
        bezier4Path.addCurve(to: CGPoint(x: 33.24, y: 13.79), controlPoint1: CGPoint(x: 33.43, y: 13.38), controlPoint2: CGPoint(x: 33.24, y: 13.56))
        bezier4Path.addCurve(to: CGPoint(x: 33.65, y: 14.21), controlPoint1: CGPoint(x: 33.24, y: 14.02), controlPoint2: CGPoint(x: 33.43, y: 14.21))
        bezier4Path.close()
        fillColor.setFill()
        bezier4Path.fill()

        context.restoreGState()


        //// Bezier 5 Drawing
        context.saveGState()
        context.setAlpha(callFriendsHintOpacity)

        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 33.65, y: 16.69))
        bezier5Path.addCurve(to: CGPoint(x: 35.72, y: 18.76), controlPoint1: CGPoint(x: 34.8, y: 16.69), controlPoint2: CGPoint(x: 35.72, y: 17.62))
        bezier5Path.addCurve(to: CGPoint(x: 36.14, y: 19.17), controlPoint1: CGPoint(x: 35.72, y: 18.99), controlPoint2: CGPoint(x: 35.91, y: 19.17))
        bezier5Path.addCurve(to: CGPoint(x: 36.55, y: 18.76), controlPoint1: CGPoint(x: 36.37, y: 19.17), controlPoint2: CGPoint(x: 36.55, y: 18.99))
        bezier5Path.addCurve(to: CGPoint(x: 33.65, y: 15.86), controlPoint1: CGPoint(x: 36.55, y: 17.16), controlPoint2: CGPoint(x: 35.25, y: 15.86))
        bezier5Path.addCurve(to: CGPoint(x: 33.24, y: 16.28), controlPoint1: CGPoint(x: 33.43, y: 15.86), controlPoint2: CGPoint(x: 33.24, y: 16.05))
        bezier5Path.addCurve(to: CGPoint(x: 33.65, y: 16.69), controlPoint1: CGPoint(x: 33.24, y: 16.5), controlPoint2: CGPoint(x: 33.43, y: 16.69))
        bezier5Path.close()
        fillColor.setFill()
        bezier5Path.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSymbolA(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        let color14 = UIColor(red: 0.333, green: 0.333, blue: 0.333, alpha: 1.000)

        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 26, height: 26))
        color14.setFill()
        oval2Path.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 12.78, y: 8))
        bezier2Path.addLine(to: CGPoint(x: 17.36, y: 8))
        bezier2Path.addLine(to: CGPoint(x: 23, y: 21))
        bezier2Path.addLine(to: CGPoint(x: 19.19, y: 21))
        bezier2Path.addLine(to: CGPoint(x: 17.8, y: 17.57))
        bezier2Path.addLine(to: CGPoint(x: 12.08, y: 17.57))
        bezier2Path.addLine(to: CGPoint(x: 10.71, y: 21))
        bezier2Path.addLine(to: CGPoint(x: 7, y: 21))
        bezier2Path.addLine(to: CGPoint(x: 12.78, y: 8))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 16.98, y: 15.49))
        bezier2Path.addLine(to: CGPoint(x: 15, y: 10.6))
        bezier2Path.addLine(to: CGPoint(x: 14.9, y: 10.6))
        bezier2Path.addLine(to: CGPoint(x: 12.93, y: 15.49))
        bezier2Path.addLine(to: CGPoint(x: 16.98, y: 15.49))
        bezier2Path.close()
        UIColor.white.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSymbolB(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 26, height: 26))
        UIColor.darkGray.setFill()
        oval2Path.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 10, y: 8))
        bezier2Path.addLine(to: CGPoint(x: 15.48, y: 8))
        bezier2Path.addCurve(to: CGPoint(x: 18.46, y: 8.28), controlPoint1: CGPoint(x: 16.77, y: 8), controlPoint2: CGPoint(x: 17.76, y: 8.09))
        bezier2Path.addCurve(to: CGPoint(x: 19.96, y: 9.14), controlPoint1: CGPoint(x: 19.17, y: 8.45), controlPoint2: CGPoint(x: 19.67, y: 8.74))
        bezier2Path.addCurve(to: CGPoint(x: 20.4, y: 10.78), controlPoint1: CGPoint(x: 20.25, y: 9.53), controlPoint2: CGPoint(x: 20.4, y: 10.08))
        bezier2Path.addLine(to: CGPoint(x: 20.4, y: 12.39))
        bezier2Path.addCurve(to: CGPoint(x: 19.94, y: 13.41), controlPoint1: CGPoint(x: 20.4, y: 12.75), controlPoint2: CGPoint(x: 20.24, y: 13.09))
        bezier2Path.addCurve(to: CGPoint(x: 18.9, y: 14.07), controlPoint1: CGPoint(x: 19.65, y: 13.73), controlPoint2: CGPoint(x: 19.3, y: 13.95))
        bezier2Path.addLine(to: CGPoint(x: 18.9, y: 14.17))
        bezier2Path.addCurve(to: CGPoint(x: 20.33, y: 14.83), controlPoint1: CGPoint(x: 19.42, y: 14.22), controlPoint2: CGPoint(x: 19.9, y: 14.44))
        bezier2Path.addCurve(to: CGPoint(x: 21, y: 16.09), controlPoint1: CGPoint(x: 20.78, y: 15.2), controlPoint2: CGPoint(x: 21, y: 15.63))
        bezier2Path.addLine(to: CGPoint(x: 21, y: 18.1))
        bezier2Path.addCurve(to: CGPoint(x: 19.69, y: 20.34), controlPoint1: CGPoint(x: 21, y: 19.15), controlPoint2: CGPoint(x: 20.56, y: 19.9))
        bezier2Path.addCurve(to: CGPoint(x: 15.62, y: 21), controlPoint1: CGPoint(x: 18.81, y: 20.78), controlPoint2: CGPoint(x: 17.46, y: 21))
        bezier2Path.addLine(to: CGPoint(x: 10, y: 21))
        bezier2Path.addLine(to: CGPoint(x: 10, y: 8))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 15.48, y: 13.29))
        bezier2Path.addCurve(to: CGPoint(x: 16.62, y: 13.17), controlPoint1: CGPoint(x: 15.99, y: 13.29), controlPoint2: CGPoint(x: 16.37, y: 13.25))
        bezier2Path.addCurve(to: CGPoint(x: 17.12, y: 12.79), controlPoint1: CGPoint(x: 16.87, y: 13.09), controlPoint2: CGPoint(x: 17.04, y: 12.96))
        bezier2Path.addCurve(to: CGPoint(x: 17.27, y: 11.99), controlPoint1: CGPoint(x: 17.22, y: 12.6), controlPoint2: CGPoint(x: 17.27, y: 12.33))
        bezier2Path.addLine(to: CGPoint(x: 17.27, y: 11.35))
        bezier2Path.addCurve(to: CGPoint(x: 17.15, y: 10.66), controlPoint1: CGPoint(x: 17.27, y: 11.04), controlPoint2: CGPoint(x: 17.23, y: 10.81))
        bezier2Path.addCurve(to: CGPoint(x: 16.62, y: 10.32), controlPoint1: CGPoint(x: 17.06, y: 10.5), controlPoint2: CGPoint(x: 16.89, y: 10.39))
        bezier2Path.addCurve(to: CGPoint(x: 15.42, y: 10.22), controlPoint1: CGPoint(x: 16.37, y: 10.26), controlPoint2: CGPoint(x: 15.97, y: 10.22))
        bezier2Path.addLine(to: CGPoint(x: 13.25, y: 10.22))
        bezier2Path.addLine(to: CGPoint(x: 13.25, y: 13.29))
        bezier2Path.addLine(to: CGPoint(x: 15.48, y: 13.29))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 15.56, y: 18.78))
        bezier2Path.addCurve(to: CGPoint(x: 17.25, y: 18.52), controlPoint1: CGPoint(x: 16.35, y: 18.78), controlPoint2: CGPoint(x: 16.92, y: 18.69))
        bezier2Path.addCurve(to: CGPoint(x: 17.75, y: 17.67), controlPoint1: CGPoint(x: 17.58, y: 18.34), controlPoint2: CGPoint(x: 17.75, y: 18.06))
        bezier2Path.addLine(to: CGPoint(x: 17.75, y: 16.63))
        bezier2Path.addCurve(to: CGPoint(x: 17.35, y: 15.61), controlPoint1: CGPoint(x: 17.75, y: 16.15), controlPoint2: CGPoint(x: 17.62, y: 15.81))
        bezier2Path.addCurve(to: CGPoint(x: 16, y: 15.31), controlPoint1: CGPoint(x: 17.1, y: 15.41), controlPoint2: CGPoint(x: 16.65, y: 15.31))
        bezier2Path.addLine(to: CGPoint(x: 13.25, y: 15.31))
        bezier2Path.addLine(to: CGPoint(x: 13.25, y: 18.78))
        bezier2Path.addLine(to: CGPoint(x: 15.56, y: 18.78))
        bezier2Path.close()
        fillColor.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSymbolC(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 26, height: 26))
        UIColor.darkGray.setFill()
        oval2Path.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 15.52, y: 21))
        bezier2Path.addCurve(to: CGPoint(x: 13.84, y: 20.92), controlPoint1: CGPoint(x: 14.89, y: 21), controlPoint2: CGPoint(x: 14.33, y: 20.97))
        bezier2Path.addCurve(to: CGPoint(x: 12.24, y: 20.63), controlPoint1: CGPoint(x: 13.35, y: 20.87), controlPoint2: CGPoint(x: 12.82, y: 20.77))
        bezier2Path.addCurve(to: CGPoint(x: 10.61, y: 20.03), controlPoint1: CGPoint(x: 11.58, y: 20.48), controlPoint2: CGPoint(x: 11.04, y: 20.27))
        bezier2Path.addCurve(to: CGPoint(x: 9.55, y: 18.96), controlPoint1: CGPoint(x: 10.19, y: 19.77), controlPoint2: CGPoint(x: 9.83, y: 19.41))
        bezier2Path.addCurve(to: CGPoint(x: 9.1, y: 17.35), controlPoint1: CGPoint(x: 9.25, y: 18.51), controlPoint2: CGPoint(x: 9.1, y: 17.97))
        bezier2Path.addLine(to: CGPoint(x: 9.1, y: 11.81))
        bezier2Path.addCurve(to: CGPoint(x: 15.52, y: 8), controlPoint1: CGPoint(x: 9.1, y: 9.27), controlPoint2: CGPoint(x: 11.24, y: 8))
        bezier2Path.addCurve(to: CGPoint(x: 19.91, y: 8.43), controlPoint1: CGPoint(x: 16.62, y: 8), controlPoint2: CGPoint(x: 18.08, y: 8.14))
        bezier2Path.addLine(to: CGPoint(x: 19.91, y: 10.7))
        bezier2Path.addCurve(to: CGPoint(x: 15.56, y: 10.16), controlPoint1: CGPoint(x: 18.27, y: 10.34), controlPoint2: CGPoint(x: 16.81, y: 10.16))
        bezier2Path.addCurve(to: CGPoint(x: 14.33, y: 10.2), controlPoint1: CGPoint(x: 15.04, y: 10.16), controlPoint2: CGPoint(x: 14.62, y: 10.17))
        bezier2Path.addCurve(to: CGPoint(x: 13.43, y: 10.39), controlPoint1: CGPoint(x: 14.04, y: 10.22), controlPoint2: CGPoint(x: 13.74, y: 10.29))
        bezier2Path.addCurve(to: CGPoint(x: 12.43, y: 11.77), controlPoint1: CGPoint(x: 12.76, y: 10.6), controlPoint2: CGPoint(x: 12.43, y: 11.06))
        bezier2Path.addLine(to: CGPoint(x: 12.43, y: 17.13))
        bezier2Path.addCurve(to: CGPoint(x: 15.86, y: 18.84), controlPoint1: CGPoint(x: 12.43, y: 18.27), controlPoint2: CGPoint(x: 13.57, y: 18.84))
        bezier2Path.addCurve(to: CGPoint(x: 20, y: 18.28), controlPoint1: CGPoint(x: 16.84, y: 18.84), controlPoint2: CGPoint(x: 18.22, y: 18.66))
        bezier2Path.addLine(to: CGPoint(x: 20, y: 20.57))
        bezier2Path.addCurve(to: CGPoint(x: 15.52, y: 21), controlPoint1: CGPoint(x: 18.48, y: 20.86), controlPoint2: CGPoint(x: 16.99, y: 21))
        bezier2Path.close()
        fillColor.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSymbolD(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 26, height: 26))
        UIColor.darkGray.setFill()
        oval2Path.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 8.59, y: 8))
        bezier2Path.addLine(to: CGPoint(x: 14.93, y: 8))
        bezier2Path.addCurve(to: CGPoint(x: 19.06, y: 8.36), controlPoint1: CGPoint(x: 16.67, y: 8), controlPoint2: CGPoint(x: 18.05, y: 8.12))
        bezier2Path.addCurve(to: CGPoint(x: 21.29, y: 9.56), controlPoint1: CGPoint(x: 20.07, y: 8.59), controlPoint2: CGPoint(x: 20.81, y: 8.99))
        bezier2Path.addCurve(to: CGPoint(x: 22, y: 11.95), controlPoint1: CGPoint(x: 21.76, y: 10.14), controlPoint2: CGPoint(x: 22, y: 10.93))
        bezier2Path.addLine(to: CGPoint(x: 22, y: 17.23))
        bezier2Path.addCurve(to: CGPoint(x: 21.33, y: 19.54), controlPoint1: CGPoint(x: 22, y: 18.22), controlPoint2: CGPoint(x: 21.78, y: 18.99))
        bezier2Path.addCurve(to: CGPoint(x: 19.15, y: 20.68), controlPoint1: CGPoint(x: 20.89, y: 20.07), controlPoint2: CGPoint(x: 20.16, y: 20.45))
        bezier2Path.addCurve(to: CGPoint(x: 14.95, y: 21), controlPoint1: CGPoint(x: 18.14, y: 20.89), controlPoint2: CGPoint(x: 16.74, y: 21))
        bezier2Path.addLine(to: CGPoint(x: 8.59, y: 21))
        bezier2Path.addLine(to: CGPoint(x: 8.59, y: 8))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 14.79, y: 18.78))
        bezier2Path.addCurve(to: CGPoint(x: 16.99, y: 18.68), controlPoint1: CGPoint(x: 15.77, y: 18.78), controlPoint2: CGPoint(x: 16.5, y: 18.74))
        bezier2Path.addCurve(to: CGPoint(x: 18.07, y: 18.24), controlPoint1: CGPoint(x: 17.5, y: 18.6), controlPoint2: CGPoint(x: 17.86, y: 18.45))
        bezier2Path.addCurve(to: CGPoint(x: 18.42, y: 17.23), controlPoint1: CGPoint(x: 18.3, y: 18.02), controlPoint2: CGPoint(x: 18.42, y: 17.69))
        bezier2Path.addLine(to: CGPoint(x: 18.42, y: 11.89))
        bezier2Path.addCurve(to: CGPoint(x: 17.57, y: 10.6), controlPoint1: CGPoint(x: 18.42, y: 11.27), controlPoint2: CGPoint(x: 18.13, y: 10.84))
        bezier2Path.addCurve(to: CGPoint(x: 14.9, y: 10.22), controlPoint1: CGPoint(x: 17.02, y: 10.35), controlPoint2: CGPoint(x: 16.13, y: 10.22))
        bezier2Path.addLine(to: CGPoint(x: 12.17, y: 10.22))
        bezier2Path.addLine(to: CGPoint(x: 12.17, y: 18.78))
        bezier2Path.addLine(to: CGPoint(x: 14.79, y: 18.78))
        bezier2Path.close()
        fillColor.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawBlockLeftAngle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, blockGreenTintColor: CGFloat = 0, blockRedTintColor: CGFloat = 0, blockYellowTintColor: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        let fillColor2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let gradientColor18 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let gradientColor23 = UIColor(red: 0.235, green: 0.125, blue: 0.769, alpha: 1.000)
        let gradientColor24 = UIColor(red: 0.247, green: 0.384, blue: 0.753, alpha: 1.000)
        let blockRedColor = UIColor(red: 0.329, green: 0.045, blue: 0.045, alpha: 1.000)
        let blockGreenColor = UIColor(red: 0.064, green: 0.280, blue: 0.200, alpha: 1.000)
        let blockYellowColor = UIColor(red: 0.222, green: 0.236, blue: 0.059, alpha: 1.000)

        //// Gradient Declarations
        let paint0_linear4 = CGGradient(colorsSpace: nil, colors: [gradientColor23.cgColor, TBMStyleKit.gradientColor2.cgColor, gradientColor24.cgColor, gradientColor18.cgColor] as CFArray, locations: [0.25, 0.63, 0.73, 1])!

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 23, y: 0.97))
        bezierPath.addLine(to: CGPoint(x: 30, y: 0.97))
        bezierPath.addLine(to: CGPoint(x: 30, y: 29))
        bezierPath.addLine(to: CGPoint(x: 23.5, y: 29))
        bezierPath.addLine(to: CGPoint(x: 21, y: 26.58))
        bezierPath.addLine(to: CGPoint(x: 16, y: 16.43))
        bezierPath.addLine(to: CGPoint(x: 7, y: 14.98))
        bezierPath.addLine(to: CGPoint(x: 16, y: 13.53))
        bezierPath.addLine(to: CGPoint(x: 20, y: 5.8))
        bezierPath.addLine(to: CGPoint(x: 23, y: 0.97))
        bezierPath.close()
        fillColor2.setFill()
        bezierPath.fill()


        //// GreenBackground Drawing
        context.saveGState()
        context.setAlpha(blockGreenTintColor)

        let greenBackgroundPath = UIBezierPath()
        greenBackgroundPath.move(to: CGPoint(x: 23, y: 0.97))
        greenBackgroundPath.addLine(to: CGPoint(x: 30, y: 0.97))
        greenBackgroundPath.addLine(to: CGPoint(x: 30, y: 29))
        greenBackgroundPath.addLine(to: CGPoint(x: 23.5, y: 29))
        greenBackgroundPath.addLine(to: CGPoint(x: 21, y: 26.58))
        greenBackgroundPath.addLine(to: CGPoint(x: 16, y: 16.43))
        greenBackgroundPath.addLine(to: CGPoint(x: 7, y: 14.98))
        greenBackgroundPath.addLine(to: CGPoint(x: 16, y: 13.53))
        greenBackgroundPath.addLine(to: CGPoint(x: 20, y: 5.8))
        greenBackgroundPath.addLine(to: CGPoint(x: 23, y: 0.97))
        greenBackgroundPath.close()
        blockGreenColor.setFill()
        greenBackgroundPath.fill()

        context.restoreGState()


        //// RedBackground Drawing
        context.saveGState()
        context.setAlpha(blockRedTintColor)

        let redBackgroundPath = UIBezierPath()
        redBackgroundPath.move(to: CGPoint(x: 23, y: 0.97))
        redBackgroundPath.addLine(to: CGPoint(x: 30, y: 0.97))
        redBackgroundPath.addLine(to: CGPoint(x: 30, y: 29))
        redBackgroundPath.addLine(to: CGPoint(x: 23.5, y: 29))
        redBackgroundPath.addLine(to: CGPoint(x: 21, y: 26.58))
        redBackgroundPath.addLine(to: CGPoint(x: 16, y: 16.43))
        redBackgroundPath.addLine(to: CGPoint(x: 7, y: 14.98))
        redBackgroundPath.addLine(to: CGPoint(x: 16, y: 13.53))
        redBackgroundPath.addLine(to: CGPoint(x: 20, y: 5.8))
        redBackgroundPath.addLine(to: CGPoint(x: 23, y: 0.97))
        redBackgroundPath.close()
        blockRedColor.setFill()
        redBackgroundPath.fill()

        context.restoreGState()


        //// YellowBackground Drawing
        context.saveGState()
        context.setAlpha(blockYellowTintColor)

        let yellowBackgroundPath = UIBezierPath()
        yellowBackgroundPath.move(to: CGPoint(x: 23, y: 0.97))
        yellowBackgroundPath.addLine(to: CGPoint(x: 30, y: 0.97))
        yellowBackgroundPath.addLine(to: CGPoint(x: 30, y: 29))
        yellowBackgroundPath.addLine(to: CGPoint(x: 23.5, y: 29))
        yellowBackgroundPath.addLine(to: CGPoint(x: 21, y: 26.58))
        yellowBackgroundPath.addLine(to: CGPoint(x: 16, y: 16.43))
        yellowBackgroundPath.addLine(to: CGPoint(x: 7, y: 14.98))
        yellowBackgroundPath.addLine(to: CGPoint(x: 16, y: 13.53))
        yellowBackgroundPath.addLine(to: CGPoint(x: 20, y: 5.8))
        yellowBackgroundPath.addLine(to: CGPoint(x: 23, y: 0.97))
        yellowBackgroundPath.close()
        blockYellowColor.setFill()
        yellowBackgroundPath.fill()

        context.restoreGState()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 15.64, y: 13.93))
        bezier2Path.addCurve(to: CGPoint(x: 12.28, y: 14.72), controlPoint1: CGPoint(x: 14.88, y: 14.33), controlPoint2: CGPoint(x: 13.64, y: 14.56))
        bezier2Path.addCurve(to: CGPoint(x: 7.83, y: 14.98), controlPoint1: CGPoint(x: 10.9, y: 14.87), controlPoint2: CGPoint(x: 9.32, y: 14.95))
        bezier2Path.addCurve(to: CGPoint(x: 7.65, y: 14.98), controlPoint1: CGPoint(x: 7.77, y: 14.98), controlPoint2: CGPoint(x: 7.71, y: 14.98))
        bezier2Path.addCurve(to: CGPoint(x: 7.83, y: 14.99), controlPoint1: CGPoint(x: 7.71, y: 14.99), controlPoint2: CGPoint(x: 7.77, y: 14.99))
        bezier2Path.addCurve(to: CGPoint(x: 12.28, y: 15.25), controlPoint1: CGPoint(x: 9.32, y: 15.02), controlPoint2: CGPoint(x: 10.9, y: 15.09))
        bezier2Path.addCurve(to: CGPoint(x: 15.64, y: 16.03), controlPoint1: CGPoint(x: 13.64, y: 15.4), controlPoint2: CGPoint(x: 14.88, y: 15.64))
        bezier2Path.addCurve(to: CGPoint(x: 18.35, y: 19.1), controlPoint1: CGPoint(x: 16.8, y: 16.64), controlPoint2: CGPoint(x: 17.66, y: 17.8))
        bezier2Path.addCurve(to: CGPoint(x: 20.06, y: 23.13), controlPoint1: CGPoint(x: 19, y: 20.33), controlPoint2: CGPoint(x: 19.54, y: 21.76))
        bezier2Path.addLine(to: CGPoint(x: 20.06, y: 23.13))
        bezier2Path.addLine(to: CGPoint(x: 20.17, y: 23.41))
        bezier2Path.addCurve(to: CGPoint(x: 21.88, y: 27.26), controlPoint1: CGPoint(x: 20.72, y: 24.88), controlPoint2: CGPoint(x: 21.25, y: 26.24))
        bezier2Path.addCurve(to: CGPoint(x: 23.87, y: 28.9), controlPoint1: CGPoint(x: 22.51, y: 28.29), controlPoint2: CGPoint(x: 23.15, y: 28.83))
        bezier2Path.addCurve(to: CGPoint(x: 30, y: 29), controlPoint1: CGPoint(x: 24.33, y: 28.94), controlPoint2: CGPoint(x: 26.5, y: 28.98))
        bezier2Path.addLine(to: CGPoint(x: 29.99, y: 29.97))
        bezier2Path.addCurve(to: CGPoint(x: 23.77, y: 29.86), controlPoint1: CGPoint(x: 26.53, y: 29.94), controlPoint2: CGPoint(x: 24.29, y: 29.91))
        bezier2Path.addCurve(to: CGPoint(x: 21.02, y: 27.75), controlPoint1: CGPoint(x: 22.55, y: 29.74), controlPoint2: CGPoint(x: 21.69, y: 28.84))
        bezier2Path.addCurve(to: CGPoint(x: 19.23, y: 23.74), controlPoint1: CGPoint(x: 20.34, y: 26.64), controlPoint2: CGPoint(x: 19.78, y: 25.19))
        bezier2Path.addLine(to: CGPoint(x: 19.13, y: 23.48))
        bezier2Path.addLine(to: CGPoint(x: 19.13, y: 23.48))
        bezier2Path.addCurve(to: CGPoint(x: 17.46, y: 19.54), controlPoint1: CGPoint(x: 18.6, y: 22.1), controlPoint2: CGPoint(x: 18.08, y: 20.72))
        bezier2Path.addCurve(to: CGPoint(x: 15.17, y: 16.88), controlPoint1: CGPoint(x: 16.8, y: 18.28), controlPoint2: CGPoint(x: 16.06, y: 17.34))
        bezier2Path.addCurve(to: CGPoint(x: 12.16, y: 16.21), controlPoint1: CGPoint(x: 14.59, y: 16.59), controlPoint2: CGPoint(x: 13.52, y: 16.36))
        bezier2Path.addLine(to: CGPoint(x: 0.13, y: 14.98))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 14.98))
        bezier2Path.addLine(to: CGPoint(x: 0.07, y: 14.97))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 14.97))
        bezier2Path.addLine(to: CGPoint(x: 0.13, y: 14.97))
        bezier2Path.addLine(to: CGPoint(x: 12.16, y: 13.76))
        bezier2Path.addCurve(to: CGPoint(x: 15.17, y: 13.08), controlPoint1: CGPoint(x: 13.52, y: 13.61), controlPoint2: CGPoint(x: 14.59, y: 13.38))
        bezier2Path.addCurve(to: CGPoint(x: 17.46, y: 10.42), controlPoint1: CGPoint(x: 16.06, y: 12.62), controlPoint2: CGPoint(x: 16.8, y: 11.68))
        bezier2Path.addCurve(to: CGPoint(x: 19.13, y: 6.49), controlPoint1: CGPoint(x: 18.08, y: 9.25), controlPoint2: CGPoint(x: 18.6, y: 7.87))
        bezier2Path.addLine(to: CGPoint(x: 19.13, y: 6.49))
        bezier2Path.addLine(to: CGPoint(x: 19.23, y: 6.22))
        bezier2Path.addCurve(to: CGPoint(x: 21.02, y: 2.22), controlPoint1: CGPoint(x: 19.78, y: 4.77), controlPoint2: CGPoint(x: 20.34, y: 3.33))
        bezier2Path.addCurve(to: CGPoint(x: 23.77, y: 0.11), controlPoint1: CGPoint(x: 21.69, y: 1.12), controlPoint2: CGPoint(x: 22.55, y: 0.22))
        bezier2Path.addCurve(to: CGPoint(x: 29.99, y: 0), controlPoint1: CGPoint(x: 24.29, y: 0.06), controlPoint2: CGPoint(x: 26.53, y: 0.03))
        bezier2Path.addLine(to: CGPoint(x: 30, y: 0.97))
        bezier2Path.addCurve(to: CGPoint(x: 23.87, y: 1.07), controlPoint1: CGPoint(x: 26.5, y: 0.99), controlPoint2: CGPoint(x: 24.33, y: 1.03))
        bezier2Path.addCurve(to: CGPoint(x: 21.88, y: 2.71), controlPoint1: CGPoint(x: 23.15, y: 1.14), controlPoint2: CGPoint(x: 22.51, y: 1.68))
        bezier2Path.addCurve(to: CGPoint(x: 20.17, y: 6.56), controlPoint1: CGPoint(x: 21.25, y: 3.73), controlPoint2: CGPoint(x: 20.72, y: 5.09))
        bezier2Path.addLine(to: CGPoint(x: 20.06, y: 6.84))
        bezier2Path.addLine(to: CGPoint(x: 20.06, y: 6.84))
        bezier2Path.addCurve(to: CGPoint(x: 18.35, y: 10.86), controlPoint1: CGPoint(x: 19.54, y: 8.2), controlPoint2: CGPoint(x: 19, y: 9.63))
        bezier2Path.addCurve(to: CGPoint(x: 15.64, y: 13.93), controlPoint1: CGPoint(x: 17.66, y: 12.17), controlPoint2: CGPoint(x: 16.8, y: 13.33))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 2.85, y: 14.98))
        bezier2Path.addLine(to: CGPoint(x: 3.91, y: 14.98))
        bezier2Path.addCurve(to: CGPoint(x: 4.05, y: 14.98), controlPoint1: CGPoint(x: 3.95, y: 14.98), controlPoint2: CGPoint(x: 4, y: 14.98))
        bezier2Path.addCurve(to: CGPoint(x: 3.91, y: 14.99), controlPoint1: CGPoint(x: 4, y: 14.98), controlPoint2: CGPoint(x: 3.95, y: 14.99))
        bezier2Path.addLine(to: CGPoint(x: 2.85, y: 14.98))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        context.saveGState()
        bezier2Path.addClip()
        context.drawLinearGradient(paint0_linear4,
            start: CGPoint(x: -3.5, y: 14.97),
            end: CGPoint(x: 28.47, y: 15.89),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawBlockRightAngle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, blockGreenTintColor: CGFloat = 0, blockRedTintColor: CGFloat = 0, blockYellowTintColor: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        let fillColor2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let gradientColor18 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let gradientColor23 = UIColor(red: 0.235, green: 0.125, blue: 0.769, alpha: 1.000)
        let gradientColor24 = UIColor(red: 0.247, green: 0.384, blue: 0.753, alpha: 1.000)
        let blockRedColor = UIColor(red: 0.329, green: 0.045, blue: 0.045, alpha: 1.000)
        let blockGreenColor = UIColor(red: 0.064, green: 0.280, blue: 0.200, alpha: 1.000)
        let blockYellowColor = UIColor(red: 0.222, green: 0.236, blue: 0.059, alpha: 1.000)

        //// Gradient Declarations
        let paint0_linear5 = CGGradient(colorsSpace: nil, colors: [gradientColor23.cgColor, TBMStyleKit.gradientColor2.cgColor, gradientColor24.cgColor, gradientColor18.cgColor] as CFArray, locations: [0.25, 0.63, 0.73, 1])!

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 7, y: 0.97))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0.97))
        bezierPath.addLine(to: CGPoint(x: 0, y: 29))
        bezierPath.addLine(to: CGPoint(x: 6.5, y: 29))
        bezierPath.addLine(to: CGPoint(x: 9, y: 26.58))
        bezierPath.addLine(to: CGPoint(x: 14, y: 16.43))
        bezierPath.addLine(to: CGPoint(x: 23, y: 14.98))
        bezierPath.addLine(to: CGPoint(x: 14, y: 13.53))
        bezierPath.addLine(to: CGPoint(x: 10, y: 5.8))
        bezierPath.addLine(to: CGPoint(x: 7, y: 0.97))
        bezierPath.close()
        fillColor2.setFill()
        bezierPath.fill()


        //// GreenBackground Drawing
        context.saveGState()
        context.setAlpha(blockGreenTintColor)

        let greenBackgroundPath = UIBezierPath()
        greenBackgroundPath.move(to: CGPoint(x: 7, y: 0.97))
        greenBackgroundPath.addLine(to: CGPoint(x: 0, y: 0.97))
        greenBackgroundPath.addLine(to: CGPoint(x: 0, y: 29))
        greenBackgroundPath.addLine(to: CGPoint(x: 6.5, y: 29))
        greenBackgroundPath.addLine(to: CGPoint(x: 9, y: 26.58))
        greenBackgroundPath.addLine(to: CGPoint(x: 14, y: 16.43))
        greenBackgroundPath.addLine(to: CGPoint(x: 23, y: 14.98))
        greenBackgroundPath.addLine(to: CGPoint(x: 14, y: 13.53))
        greenBackgroundPath.addLine(to: CGPoint(x: 10, y: 5.8))
        greenBackgroundPath.addLine(to: CGPoint(x: 7, y: 0.97))
        greenBackgroundPath.close()
        blockGreenColor.setFill()
        greenBackgroundPath.fill()

        context.restoreGState()


        //// RedBackground Drawing
        context.saveGState()
        context.setAlpha(blockRedTintColor)

        let redBackgroundPath = UIBezierPath()
        redBackgroundPath.move(to: CGPoint(x: 7, y: 0.97))
        redBackgroundPath.addLine(to: CGPoint(x: 0, y: 0.97))
        redBackgroundPath.addLine(to: CGPoint(x: 0, y: 29))
        redBackgroundPath.addLine(to: CGPoint(x: 6.5, y: 29))
        redBackgroundPath.addLine(to: CGPoint(x: 9, y: 26.58))
        redBackgroundPath.addLine(to: CGPoint(x: 14, y: 16.43))
        redBackgroundPath.addLine(to: CGPoint(x: 23, y: 14.98))
        redBackgroundPath.addLine(to: CGPoint(x: 14, y: 13.53))
        redBackgroundPath.addLine(to: CGPoint(x: 10, y: 5.8))
        redBackgroundPath.addLine(to: CGPoint(x: 7, y: 0.97))
        redBackgroundPath.close()
        blockRedColor.setFill()
        redBackgroundPath.fill()

        context.restoreGState()


        //// YellowBackground Drawing
        context.saveGState()
        context.setAlpha(blockYellowTintColor)

        let yellowBackgroundPath = UIBezierPath()
        yellowBackgroundPath.move(to: CGPoint(x: 7, y: 0.97))
        yellowBackgroundPath.addLine(to: CGPoint(x: 0, y: 0.97))
        yellowBackgroundPath.addLine(to: CGPoint(x: 0, y: 29))
        yellowBackgroundPath.addLine(to: CGPoint(x: 6.5, y: 29))
        yellowBackgroundPath.addLine(to: CGPoint(x: 9, y: 26.58))
        yellowBackgroundPath.addLine(to: CGPoint(x: 14, y: 16.43))
        yellowBackgroundPath.addLine(to: CGPoint(x: 23, y: 14.98))
        yellowBackgroundPath.addLine(to: CGPoint(x: 14, y: 13.53))
        yellowBackgroundPath.addLine(to: CGPoint(x: 10, y: 5.8))
        yellowBackgroundPath.addLine(to: CGPoint(x: 7, y: 0.97))
        yellowBackgroundPath.close()
        blockYellowColor.setFill()
        yellowBackgroundPath.fill()

        context.restoreGState()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 14.36, y: 13.93))
        bezier2Path.addCurve(to: CGPoint(x: 17.72, y: 14.72), controlPoint1: CGPoint(x: 15.12, y: 14.33), controlPoint2: CGPoint(x: 16.36, y: 14.56))
        bezier2Path.addCurve(to: CGPoint(x: 22.17, y: 14.98), controlPoint1: CGPoint(x: 19.1, y: 14.87), controlPoint2: CGPoint(x: 20.68, y: 14.95))
        bezier2Path.addCurve(to: CGPoint(x: 22.36, y: 14.98), controlPoint1: CGPoint(x: 22.23, y: 14.98), controlPoint2: CGPoint(x: 22.29, y: 14.98))
        bezier2Path.addCurve(to: CGPoint(x: 22.17, y: 14.99), controlPoint1: CGPoint(x: 22.29, y: 14.99), controlPoint2: CGPoint(x: 22.23, y: 14.99))
        bezier2Path.addCurve(to: CGPoint(x: 17.72, y: 15.25), controlPoint1: CGPoint(x: 20.68, y: 15.02), controlPoint2: CGPoint(x: 19.1, y: 15.09))
        bezier2Path.addCurve(to: CGPoint(x: 14.36, y: 16.03), controlPoint1: CGPoint(x: 16.36, y: 15.4), controlPoint2: CGPoint(x: 15.12, y: 15.64))
        bezier2Path.addCurve(to: CGPoint(x: 11.65, y: 19.1), controlPoint1: CGPoint(x: 13.2, y: 16.64), controlPoint2: CGPoint(x: 12.34, y: 17.8))
        bezier2Path.addCurve(to: CGPoint(x: 9.94, y: 23.13), controlPoint1: CGPoint(x: 11, y: 20.33), controlPoint2: CGPoint(x: 10.46, y: 21.76))
        bezier2Path.addLine(to: CGPoint(x: 9.94, y: 23.13))
        bezier2Path.addLine(to: CGPoint(x: 9.83, y: 23.41))
        bezier2Path.addCurve(to: CGPoint(x: 8.12, y: 27.26), controlPoint1: CGPoint(x: 9.28, y: 24.88), controlPoint2: CGPoint(x: 8.75, y: 26.24))
        bezier2Path.addCurve(to: CGPoint(x: 6.13, y: 28.9), controlPoint1: CGPoint(x: 7.49, y: 28.29), controlPoint2: CGPoint(x: 6.85, y: 28.83))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 29), controlPoint1: CGPoint(x: 5.67, y: 28.94), controlPoint2: CGPoint(x: 3.5, y: 28.98))
        bezier2Path.addLine(to: CGPoint(x: 0.01, y: 29.97))
        bezier2Path.addCurve(to: CGPoint(x: 6.23, y: 29.86), controlPoint1: CGPoint(x: 3.47, y: 29.94), controlPoint2: CGPoint(x: 5.71, y: 29.91))
        bezier2Path.addCurve(to: CGPoint(x: 8.98, y: 27.75), controlPoint1: CGPoint(x: 7.45, y: 29.74), controlPoint2: CGPoint(x: 8.31, y: 28.84))
        bezier2Path.addCurve(to: CGPoint(x: 10.77, y: 23.74), controlPoint1: CGPoint(x: 9.66, y: 26.64), controlPoint2: CGPoint(x: 10.22, y: 25.19))
        bezier2Path.addLine(to: CGPoint(x: 10.87, y: 23.48))
        bezier2Path.addLine(to: CGPoint(x: 10.87, y: 23.48))
        bezier2Path.addCurve(to: CGPoint(x: 12.54, y: 19.54), controlPoint1: CGPoint(x: 11.4, y: 22.1), controlPoint2: CGPoint(x: 11.92, y: 20.72))
        bezier2Path.addCurve(to: CGPoint(x: 14.83, y: 16.88), controlPoint1: CGPoint(x: 13.2, y: 18.28), controlPoint2: CGPoint(x: 13.94, y: 17.34))
        bezier2Path.addCurve(to: CGPoint(x: 17.84, y: 16.21), controlPoint1: CGPoint(x: 15.41, y: 16.59), controlPoint2: CGPoint(x: 16.48, y: 16.36))
        bezier2Path.addLine(to: CGPoint(x: 29.87, y: 14.98))
        bezier2Path.addLine(to: CGPoint(x: 30, y: 14.98))
        bezier2Path.addLine(to: CGPoint(x: 29.93, y: 14.97))
        bezier2Path.addLine(to: CGPoint(x: 30, y: 14.97))
        bezier2Path.addLine(to: CGPoint(x: 29.87, y: 14.97))
        bezier2Path.addLine(to: CGPoint(x: 17.84, y: 13.76))
        bezier2Path.addCurve(to: CGPoint(x: 14.83, y: 13.08), controlPoint1: CGPoint(x: 16.48, y: 13.61), controlPoint2: CGPoint(x: 15.41, y: 13.38))
        bezier2Path.addCurve(to: CGPoint(x: 12.54, y: 10.42), controlPoint1: CGPoint(x: 13.94, y: 12.62), controlPoint2: CGPoint(x: 13.2, y: 11.68))
        bezier2Path.addCurve(to: CGPoint(x: 10.87, y: 6.49), controlPoint1: CGPoint(x: 11.92, y: 9.25), controlPoint2: CGPoint(x: 11.4, y: 7.87))
        bezier2Path.addLine(to: CGPoint(x: 10.87, y: 6.49))
        bezier2Path.addLine(to: CGPoint(x: 10.77, y: 6.22))
        bezier2Path.addCurve(to: CGPoint(x: 8.98, y: 2.22), controlPoint1: CGPoint(x: 10.22, y: 4.77), controlPoint2: CGPoint(x: 9.66, y: 3.33))
        bezier2Path.addCurve(to: CGPoint(x: 6.23, y: 0.11), controlPoint1: CGPoint(x: 8.31, y: 1.12), controlPoint2: CGPoint(x: 7.45, y: 0.22))
        bezier2Path.addCurve(to: CGPoint(x: 0.01, y: 0), controlPoint1: CGPoint(x: 5.71, y: 0.06), controlPoint2: CGPoint(x: 3.47, y: 0.03))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 0.97))
        bezier2Path.addCurve(to: CGPoint(x: 6.13, y: 1.07), controlPoint1: CGPoint(x: 3.5, y: 0.99), controlPoint2: CGPoint(x: 5.67, y: 1.03))
        bezier2Path.addCurve(to: CGPoint(x: 8.12, y: 2.71), controlPoint1: CGPoint(x: 6.85, y: 1.14), controlPoint2: CGPoint(x: 7.49, y: 1.68))
        bezier2Path.addCurve(to: CGPoint(x: 9.83, y: 6.56), controlPoint1: CGPoint(x: 8.75, y: 3.73), controlPoint2: CGPoint(x: 9.28, y: 5.09))
        bezier2Path.addLine(to: CGPoint(x: 9.94, y: 6.84))
        bezier2Path.addLine(to: CGPoint(x: 9.94, y: 6.84))
        bezier2Path.addCurve(to: CGPoint(x: 11.65, y: 10.86), controlPoint1: CGPoint(x: 10.46, y: 8.2), controlPoint2: CGPoint(x: 11, y: 9.63))
        bezier2Path.addCurve(to: CGPoint(x: 14.36, y: 13.93), controlPoint1: CGPoint(x: 12.34, y: 12.17), controlPoint2: CGPoint(x: 13.2, y: 13.33))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 27.15, y: 14.98))
        bezier2Path.addLine(to: CGPoint(x: 26.09, y: 14.98))
        bezier2Path.addCurve(to: CGPoint(x: 25.95, y: 14.98), controlPoint1: CGPoint(x: 26.05, y: 14.98), controlPoint2: CGPoint(x: 26, y: 14.98))
        bezier2Path.addCurve(to: CGPoint(x: 26.09, y: 14.99), controlPoint1: CGPoint(x: 26, y: 14.98), controlPoint2: CGPoint(x: 26.05, y: 14.99))
        bezier2Path.addLine(to: CGPoint(x: 27.15, y: 14.98))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        context.saveGState()
        bezier2Path.addClip()
        context.drawLinearGradient(paint0_linear5,
            start: CGPoint(x: 33.5, y: 14.97),
            end: CGPoint(x: 1.53, y: 15.89),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawMoneyRound1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 141, height: 157), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 141, height: 157), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 141, y: resizedFrame.height / 157)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 141, resizedFrame.height / 157)


        //// Color Declarations
        let gradientColor25 = UIColor(red: 0.992, green: 0.898, blue: 0.576, alpha: 1.000)
        let gradientColor26 = UIColor(red: 1.000, green: 0.878, blue: 0.529, alpha: 1.000)
        let gradientColor27 = UIColor(red: 1.000, green: 0.902, blue: 0.537, alpha: 1.000)
        let gradientColor28 = UIColor(red: 0.984, green: 0.698, blue: 0.337, alpha: 1.000)
        let gradientColor29 = UIColor(red: 0.643, green: 0.294, blue: 0.047, alpha: 1.000)
        let gradientColor30 = UIColor(red: 0.514, green: 0.196, blue: 0.024, alpha: 1.000)
        let gradientColor31 = UIColor(red: 0.439, green: 0.145, blue: 0.024, alpha: 1.000)
        let gradientColor32 = UIColor(red: 0.486, green: 0.180, blue: 0.035, alpha: 1.000)
        let gradientColor33 = UIColor(red: 0.776, green: 0.408, blue: 0.122, alpha: 1.000)
        let gradientColor34 = UIColor(red: 0.992, green: 0.596, blue: 0.192, alpha: 1.000)
        let gradientColor35 = UIColor(red: 1.000, green: 0.635, blue: 0.208, alpha: 1.000)
        let gradientColor36 = UIColor(red: 0.945, green: 0.533, blue: 0.169, alpha: 1.000)
        let gradientColor37 = UIColor(red: 0.580, green: 0.251, blue: 0.063, alpha: 1.000)
        let gradientColor38 = UIColor(red: 0.427, green: 0.141, blue: 0.020, alpha: 1.000)
        let fillColor4 = UIColor(red: 0.231, green: 0.114, blue: 0.024, alpha: 1.000)
        let shadow6Color = UIColor(red: 0.684, green: 0.571, blue: 0.182, alpha: 1.000)

        //// Gradient Declarations
        let kMyMoney_iconCanvasgbezier36 = CGGradient(colorsSpace: nil, colors: [gradientColor25.cgColor, gradientColor26.cgColor, gradientColor27.cgColor, gradientColor28.cgColor, gradientColor29.cgColor, gradientColor30.cgColor, gradientColor31.cgColor, gradientColor31.cgColor, gradientColor32.cgColor, gradientColor33.cgColor, gradientColor34.cgColor, gradientColor35.cgColor, gradientColor36.cgColor, gradientColor37.cgColor, gradientColor38.cgColor] as CFArray, locations: [0, 0.1, 0.2, 0.28, 0.41, 0.48, 0.55, 0.58, 0.61, 0.66, 0.7, 0.78, 0.85, 0.91, 1])!

        //// Shadow Declarations
        let shadow6 = NSShadow()
        shadow6.shadowColor = shadow6Color
        shadow6.shadowOffset = CGSize(width: 3, height: 3)
        shadow6.shadowBlurRadius = 5

        //// kMyMoney_iconCanvas-group 6
        //// kMyMoney_iconCanvas-bezier124 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier124Path = UIBezierPath()
        kMyMoney_iconCanvasbezier124Path.move(to: CGPoint(x: 4.98, y: 135.1))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: 4.98, y: 138.34))
        kMyMoney_iconCanvasbezier124Path.addCurve(to: CGPoint(x: 41.71, y: 152.36), controlPoint1: CGPoint(x: 4.98, y: 146.08), controlPoint2: CGPoint(x: 21.42, y: 152.36))
        kMyMoney_iconCanvasbezier124Path.addCurve(to: CGPoint(x: 78.45, y: 138.34), controlPoint1: CGPoint(x: 62, y: 152.36), controlPoint2: CGPoint(x: 78.45, y: 146.08))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: 78.45, y: 135.1))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: 4.98, y: 135.1))
        kMyMoney_iconCanvasbezier124Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier124Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 4.98, y: 143.73),
            end: CGPoint(x: 41.82, y: 143.73),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval67 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval67Path = UIBezierPath(ovalIn: CGRect(x: 5.45, y: 122.43, width: 72.8, height: 21))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval67Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier125 Drawing
        let kMyMoney_iconCanvasbezier125Path = UIBezierPath()
        kMyMoney_iconCanvasbezier125Path.move(to: CGPoint(x: 5.13, y: 133.09))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: 5.13, y: 136.34))
        kMyMoney_iconCanvasbezier125Path.addCurve(to: CGPoint(x: 41.86, y: 150.35), controlPoint1: CGPoint(x: 5.13, y: 144.08), controlPoint2: CGPoint(x: 21.57, y: 150.35))
        kMyMoney_iconCanvasbezier125Path.addCurve(to: CGPoint(x: 78.61, y: 136.34), controlPoint1: CGPoint(x: 62.15, y: 150.35), controlPoint2: CGPoint(x: 78.61, y: 144.08))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: 78.61, y: 133.09))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: 5.13, y: 133.09))
        kMyMoney_iconCanvasbezier125Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier125Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 5.13, y: 141.72),
            end: CGPoint(x: 41.98, y: 141.72),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval68 Drawing
        let kMyMoney_iconCanvasoval68Path = UIBezierPath(ovalIn: CGRect(x: 5.15, y: 122.43, width: 73.4, height: 25.2))
        context.saveGState()
        kMyMoney_iconCanvasoval68Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 54.56, y: 114.66),
            end: CGPoint(x: 54.56, y: 191.13),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// Text Drawing
        context.saveGState()
        context.translateBy(x: 40.8, y: 133.75)
        context.scaleBy(x: 1.2, y: 0.5)

        let textRect = CGRect(x: -16.5, y: -16.5, width: 33, height: 33)
        let textTextContent = "100"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            .font: UIFont.systemFont(ofSize: 16.5, weight: .bold),
            .foregroundColor: UIColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        let textTextRect: CGRect = CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: textTextRect, withAttributes: textFontAttributes)
        context.restoreGState()
        
        ////// Text Text Inner Shadow
        context.saveGState()
        context.clip(to: textRect)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow6.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let textOpaqueTextShadow = (shadow6.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow6.shadowOffset.width * resizedShadowScale, height: shadow6.shadowOffset.height * resizedShadowScale), blur: shadow6.shadowBlurRadius * resizedShadowScale, color: textOpaqueTextShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        textOpaqueTextShadow.setFill()

        let textInnerShadowFontAttributes = [
            .font: UIFont.systemFont(ofSize: 16.5, weight: .bold),
            .foregroundColor: (shadow6.shadowColor as! UIColor),
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]
        textTextContent.draw(in: textTextRect, withAttributes: textInnerShadowFontAttributes)

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawMoneyRound2(frame: CGRect = CGRect(x: 0, y: 0, width: 141, height: 157)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let gradientColor25 = UIColor(red: 0.992, green: 0.898, blue: 0.576, alpha: 1.000)
        let gradientColor26 = UIColor(red: 1.000, green: 0.878, blue: 0.529, alpha: 1.000)
        let gradientColor27 = UIColor(red: 1.000, green: 0.902, blue: 0.537, alpha: 1.000)
        let gradientColor28 = UIColor(red: 0.984, green: 0.698, blue: 0.337, alpha: 1.000)
        let gradientColor29 = UIColor(red: 0.643, green: 0.294, blue: 0.047, alpha: 1.000)
        let gradientColor30 = UIColor(red: 0.514, green: 0.196, blue: 0.024, alpha: 1.000)
        let gradientColor31 = UIColor(red: 0.439, green: 0.145, blue: 0.024, alpha: 1.000)
        let gradientColor32 = UIColor(red: 0.486, green: 0.180, blue: 0.035, alpha: 1.000)
        let gradientColor33 = UIColor(red: 0.776, green: 0.408, blue: 0.122, alpha: 1.000)
        let gradientColor34 = UIColor(red: 0.992, green: 0.596, blue: 0.192, alpha: 1.000)
        let gradientColor35 = UIColor(red: 1.000, green: 0.635, blue: 0.208, alpha: 1.000)
        let gradientColor36 = UIColor(red: 0.945, green: 0.533, blue: 0.169, alpha: 1.000)
        let gradientColor37 = UIColor(red: 0.580, green: 0.251, blue: 0.063, alpha: 1.000)
        let gradientColor38 = UIColor(red: 0.427, green: 0.141, blue: 0.020, alpha: 1.000)
        let fillColor4 = UIColor(red: 0.231, green: 0.114, blue: 0.024, alpha: 1.000)
        let shadow6Color = UIColor(red: 0.684, green: 0.571, blue: 0.182, alpha: 1.000)

        //// Gradient Declarations
        let kMyMoney_iconCanvasgbezier36 = CGGradient(colorsSpace: nil, colors: [gradientColor25.cgColor, gradientColor26.cgColor, gradientColor27.cgColor, gradientColor28.cgColor, gradientColor29.cgColor, gradientColor30.cgColor, gradientColor31.cgColor, gradientColor31.cgColor, gradientColor32.cgColor, gradientColor33.cgColor, gradientColor34.cgColor, gradientColor35.cgColor, gradientColor36.cgColor, gradientColor37.cgColor, gradientColor38.cgColor] as CFArray, locations: [0, 0.1, 0.2, 0.28, 0.41, 0.48, 0.55, 0.58, 0.61, 0.66, 0.7, 0.78, 0.85, 0.91, 1])!

        //// Shadow Declarations
        let shadow6 = NSShadow()
        shadow6.shadowColor = shadow6Color
        shadow6.shadowOffset = CGSize(width: 3, height: 3)
        shadow6.shadowBlurRadius = 5

        //// kMyMoney_iconCanvas-group 6
        //// kMyMoney_iconCanvas-bezier124 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier124Path = UIBezierPath()
        kMyMoney_iconCanvasbezier124Path.move(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 136))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 138.86))
        kMyMoney_iconCanvasbezier124Path.addCurve(to: CGPoint(x: frame.minX + 41.71, y: frame.minY + 151.19), controlPoint1: CGPoint(x: frame.minX + 4.98, y: frame.minY + 145.67), controlPoint2: CGPoint(x: frame.minX + 21.42, y: frame.minY + 151.19))
        kMyMoney_iconCanvasbezier124Path.addCurve(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 138.86), controlPoint1: CGPoint(x: frame.minX + 62, y: frame.minY + 151.19), controlPoint2: CGPoint(x: frame.minX + 78.45, y: frame.minY + 145.67))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 136))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 136))
        kMyMoney_iconCanvasbezier124Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier124Path.addClip()
        let kMyMoney_iconCanvasbezier124Bounds: CGRect = kMyMoney_iconCanvasbezier124Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier124Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier124Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier124Bounds.midY + 0 * kMyMoney_iconCanvasbezier124Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier124Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier124Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier124Bounds.midY + 0 * kMyMoney_iconCanvasbezier124Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval67 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval67Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 5.45, y: frame.minY + 124.08, width: 72.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval67Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier125 Drawing
        let kMyMoney_iconCanvasbezier125Path = UIBezierPath()
        kMyMoney_iconCanvasbezier125Path.move(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 133.7))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 136.55))
        kMyMoney_iconCanvasbezier125Path.addCurve(to: CGPoint(x: frame.minX + 41.86, y: frame.minY + 148.88), controlPoint1: CGPoint(x: frame.minX + 5.13, y: frame.minY + 143.36), controlPoint2: CGPoint(x: frame.minX + 21.57, y: frame.minY + 148.88))
        kMyMoney_iconCanvasbezier125Path.addCurve(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 136.55), controlPoint1: CGPoint(x: frame.minX + 62.15, y: frame.minY + 148.88), controlPoint2: CGPoint(x: frame.minX + 78.61, y: frame.minY + 143.36))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 133.7))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 133.7))
        kMyMoney_iconCanvasbezier125Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier125Path.addClip()
        let kMyMoney_iconCanvasbezier125Bounds: CGRect = kMyMoney_iconCanvasbezier125Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier125Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier125Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier125Bounds.midY + -0 * kMyMoney_iconCanvasbezier125Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier125Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier125Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier125Bounds.midY + -0 * kMyMoney_iconCanvasbezier125Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval68 Drawing
        let kMyMoney_iconCanvasoval68Rect = CGRect(x: frame.minX + 5.15, y: frame.minY + 121.43, width: 73.4, height: 24.2)
        let kMyMoney_iconCanvasoval68Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval68Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval68Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval68Rect.midX + 12.71 * kMyMoney_iconCanvasoval68Rect.width / 73.4, y: kMyMoney_iconCanvasoval68Rect.midY + -19.56 * kMyMoney_iconCanvasoval68Rect.height / 24.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval68Rect.midX + 12.71 * kMyMoney_iconCanvasoval68Rect.width / 73.4, y: kMyMoney_iconCanvasoval68Rect.midY + 53.87 * kMyMoney_iconCanvasoval68Rect.height / 24.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group
        //// kMyMoney_iconCanvas-bezier Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezierPath = UIBezierPath()
        kMyMoney_iconCanvasbezierPath.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 128))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 130.86))
        kMyMoney_iconCanvasbezierPath.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 143.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 137.67), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 143.19))
        kMyMoney_iconCanvasbezierPath.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 130.86), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 143.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 137.67))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 128))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 128))
        kMyMoney_iconCanvasbezierPath.close()
        context.saveGState()
        kMyMoney_iconCanvasbezierPath.addClip()
        let kMyMoney_iconCanvasbezierBounds: CGRect = kMyMoney_iconCanvasbezierPath.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezierBounds.midX + -36.73 * kMyMoney_iconCanvasbezierBounds.width / 73.47, y: kMyMoney_iconCanvasbezierBounds.midY + 0 * kMyMoney_iconCanvasbezierBounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezierBounds.midX + 0.1 * kMyMoney_iconCanvasbezierBounds.width / 73.47, y: kMyMoney_iconCanvasbezierBounds.midY + 0 * kMyMoney_iconCanvasbezierBounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasovalPath = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 116.08, width: 72.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasovalPath.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 2 Drawing
        let kMyMoney_iconCanvasbezier2Path = UIBezierPath()
        kMyMoney_iconCanvasbezier2Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 125.7))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 128.55))
        kMyMoney_iconCanvasbezier2Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 140.88), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 135.36), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 140.88))
        kMyMoney_iconCanvasbezier2Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 128.55), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 140.88), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 135.36))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 125.7))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 125.7))
        kMyMoney_iconCanvasbezier2Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier2Path.addClip()
        let kMyMoney_iconCanvasbezier2Bounds: CGRect = kMyMoney_iconCanvasbezier2Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier2Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier2Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier2Bounds.midY + -0 * kMyMoney_iconCanvasbezier2Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier2Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier2Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier2Bounds.midY + -0 * kMyMoney_iconCanvasbezier2Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 2 Drawing
        let kMyMoney_iconCanvasoval2Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 113.43, width: 73.4, height: 24.2)
        let kMyMoney_iconCanvasoval2Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval2Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval2Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval2Rect.midX + 12.71 * kMyMoney_iconCanvasoval2Rect.width / 73.4, y: kMyMoney_iconCanvasoval2Rect.midY + -19.56 * kMyMoney_iconCanvasoval2Rect.height / 24.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval2Rect.midX + 12.71 * kMyMoney_iconCanvasoval2Rect.width / 73.4, y: kMyMoney_iconCanvasoval2Rect.midY + 53.87 * kMyMoney_iconCanvasoval2Rect.height / 24.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// Text 2 Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 48.8, y: frame.minY + 124.75)
        context.scaleBy(x: 1.2, y: 0.5)

        let text2Rect = CGRect(x: -16.5, y: -16.5, width: 33, height: 33)
        let text2TextContent = "200"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [
            .font: UIFont.systemFont(ofSize: 16.5, weight: .bold),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text2Style,
        ] as [NSAttributedString.Key: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        let text2TextRect: CGRect = CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight)
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: text2TextRect, withAttributes: text2FontAttributes)
        context.restoreGState()
        
        ////// Text 2 Text Inner Shadow
        context.saveGState()
        context.clip(to: text2Rect)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow6.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let text2OpaqueTextShadow = (shadow6.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: shadow6.shadowOffset, blur: shadow6.shadowBlurRadius, color: text2OpaqueTextShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        text2OpaqueTextShadow.setFill()

        let text2InnerShadowFontAttributes = [
            .font: UIFont.systemFont(ofSize: 16.5, weight: .bold),
            .foregroundColor: (shadow6.shadowColor as! UIColor),
            .paragraphStyle: text2Style,
        ] as [NSAttributedString.Key: Any]
        text2TextContent.draw(in: text2TextRect, withAttributes: text2InnerShadowFontAttributes)

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        context.restoreGState()
    }

    @objc dynamic public class func drawMoneyRound3(frame: CGRect = CGRect(x: 0, y: 0, width: 141, height: 157)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let gradientColor25 = UIColor(red: 0.992, green: 0.898, blue: 0.576, alpha: 1.000)
        let gradientColor26 = UIColor(red: 1.000, green: 0.878, blue: 0.529, alpha: 1.000)
        let gradientColor27 = UIColor(red: 1.000, green: 0.902, blue: 0.537, alpha: 1.000)
        let gradientColor28 = UIColor(red: 0.984, green: 0.698, blue: 0.337, alpha: 1.000)
        let gradientColor29 = UIColor(red: 0.643, green: 0.294, blue: 0.047, alpha: 1.000)
        let gradientColor30 = UIColor(red: 0.514, green: 0.196, blue: 0.024, alpha: 1.000)
        let gradientColor31 = UIColor(red: 0.439, green: 0.145, blue: 0.024, alpha: 1.000)
        let gradientColor32 = UIColor(red: 0.486, green: 0.180, blue: 0.035, alpha: 1.000)
        let gradientColor33 = UIColor(red: 0.776, green: 0.408, blue: 0.122, alpha: 1.000)
        let gradientColor34 = UIColor(red: 0.992, green: 0.596, blue: 0.192, alpha: 1.000)
        let gradientColor35 = UIColor(red: 1.000, green: 0.635, blue: 0.208, alpha: 1.000)
        let gradientColor36 = UIColor(red: 0.945, green: 0.533, blue: 0.169, alpha: 1.000)
        let gradientColor37 = UIColor(red: 0.580, green: 0.251, blue: 0.063, alpha: 1.000)
        let gradientColor38 = UIColor(red: 0.427, green: 0.141, blue: 0.020, alpha: 1.000)
        let fillColor4 = UIColor(red: 0.231, green: 0.114, blue: 0.024, alpha: 1.000)
        let shadow6Color = UIColor(red: 0.684, green: 0.571, blue: 0.182, alpha: 1.000)

        //// Gradient Declarations
        let kMyMoney_iconCanvasgbezier36 = CGGradient(colorsSpace: nil, colors: [gradientColor25.cgColor, gradientColor26.cgColor, gradientColor27.cgColor, gradientColor28.cgColor, gradientColor29.cgColor, gradientColor30.cgColor, gradientColor31.cgColor, gradientColor31.cgColor, gradientColor32.cgColor, gradientColor33.cgColor, gradientColor34.cgColor, gradientColor35.cgColor, gradientColor36.cgColor, gradientColor37.cgColor, gradientColor38.cgColor] as CFArray, locations: [0, 0.1, 0.2, 0.28, 0.41, 0.48, 0.55, 0.58, 0.61, 0.66, 0.7, 0.78, 0.85, 0.91, 1])!

        //// Shadow Declarations
        let shadow6 = NSShadow()
        shadow6.shadowColor = shadow6Color
        shadow6.shadowOffset = CGSize(width: 3, height: 3)
        shadow6.shadowBlurRadius = 5

        //// kMyMoney_iconCanvas-group 6
        //// kMyMoney_iconCanvas-bezier124 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier124Path = UIBezierPath()
        kMyMoney_iconCanvasbezier124Path.move(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 136))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 138.86))
        kMyMoney_iconCanvasbezier124Path.addCurve(to: CGPoint(x: frame.minX + 41.71, y: frame.minY + 151.19), controlPoint1: CGPoint(x: frame.minX + 4.98, y: frame.minY + 145.67), controlPoint2: CGPoint(x: frame.minX + 21.42, y: frame.minY + 151.19))
        kMyMoney_iconCanvasbezier124Path.addCurve(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 138.86), controlPoint1: CGPoint(x: frame.minX + 62, y: frame.minY + 151.19), controlPoint2: CGPoint(x: frame.minX + 78.45, y: frame.minY + 145.67))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 136))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 136))
        kMyMoney_iconCanvasbezier124Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier124Path.addClip()
        let kMyMoney_iconCanvasbezier124Bounds: CGRect = kMyMoney_iconCanvasbezier124Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier124Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier124Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier124Bounds.midY + 0 * kMyMoney_iconCanvasbezier124Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier124Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier124Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier124Bounds.midY + 0 * kMyMoney_iconCanvasbezier124Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval67 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval67Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 5.45, y: frame.minY + 124.08, width: 72.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval67Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier125 Drawing
        let kMyMoney_iconCanvasbezier125Path = UIBezierPath()
        kMyMoney_iconCanvasbezier125Path.move(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 133.7))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 136.55))
        kMyMoney_iconCanvasbezier125Path.addCurve(to: CGPoint(x: frame.minX + 41.86, y: frame.minY + 148.88), controlPoint1: CGPoint(x: frame.minX + 5.13, y: frame.minY + 143.36), controlPoint2: CGPoint(x: frame.minX + 21.57, y: frame.minY + 148.88))
        kMyMoney_iconCanvasbezier125Path.addCurve(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 136.55), controlPoint1: CGPoint(x: frame.minX + 62.15, y: frame.minY + 148.88), controlPoint2: CGPoint(x: frame.minX + 78.61, y: frame.minY + 143.36))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 133.7))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 133.7))
        kMyMoney_iconCanvasbezier125Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier125Path.addClip()
        let kMyMoney_iconCanvasbezier125Bounds: CGRect = kMyMoney_iconCanvasbezier125Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier125Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier125Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier125Bounds.midY + -0 * kMyMoney_iconCanvasbezier125Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier125Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier125Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier125Bounds.midY + -0 * kMyMoney_iconCanvasbezier125Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval68 Drawing
        let kMyMoney_iconCanvasoval68Rect = CGRect(x: frame.minX + 5.15, y: frame.minY + 121.43, width: 73.4, height: 24.2)
        let kMyMoney_iconCanvasoval68Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval68Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval68Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval68Rect.midX + 12.71 * kMyMoney_iconCanvasoval68Rect.width / 73.4, y: kMyMoney_iconCanvasoval68Rect.midY + -19.56 * kMyMoney_iconCanvasoval68Rect.height / 24.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval68Rect.midX + 12.71 * kMyMoney_iconCanvasoval68Rect.width / 73.4, y: kMyMoney_iconCanvasoval68Rect.midY + 53.87 * kMyMoney_iconCanvasoval68Rect.height / 24.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group
        //// kMyMoney_iconCanvas-bezier Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezierPath = UIBezierPath()
        kMyMoney_iconCanvasbezierPath.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 125))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 127.86))
        kMyMoney_iconCanvasbezierPath.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 140.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 134.67), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 140.19))
        kMyMoney_iconCanvasbezierPath.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 127.86), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 140.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 134.67))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 125))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 125))
        kMyMoney_iconCanvasbezierPath.close()
        context.saveGState()
        kMyMoney_iconCanvasbezierPath.addClip()
        let kMyMoney_iconCanvasbezierBounds: CGRect = kMyMoney_iconCanvasbezierPath.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezierBounds.midX + -36.73 * kMyMoney_iconCanvasbezierBounds.width / 73.47, y: kMyMoney_iconCanvasbezierBounds.midY + 0 * kMyMoney_iconCanvasbezierBounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezierBounds.midX + 0.1 * kMyMoney_iconCanvasbezierBounds.width / 73.47, y: kMyMoney_iconCanvasbezierBounds.midY + 0 * kMyMoney_iconCanvasbezierBounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasovalPath = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 114.08, width: 72.8, height: 24.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasovalPath.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 2 Drawing
        let kMyMoney_iconCanvasbezier2Path = UIBezierPath()
        kMyMoney_iconCanvasbezier2Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 122.7))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 125.55))
        kMyMoney_iconCanvasbezier2Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 137.88), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 132.36), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 137.88))
        kMyMoney_iconCanvasbezier2Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 125.55), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 137.88), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 132.36))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 122.7))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 122.7))
        kMyMoney_iconCanvasbezier2Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier2Path.addClip()
        let kMyMoney_iconCanvasbezier2Bounds: CGRect = kMyMoney_iconCanvasbezier2Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier2Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier2Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier2Bounds.midY + -0 * kMyMoney_iconCanvasbezier2Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier2Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier2Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier2Bounds.midY + -0 * kMyMoney_iconCanvasbezier2Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 2 Drawing
        let kMyMoney_iconCanvasoval2Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 110.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval2Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval2Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval2Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval2Rect.midX + 12.71 * kMyMoney_iconCanvasoval2Rect.width / 73.4, y: kMyMoney_iconCanvasoval2Rect.midY + -20.36 * kMyMoney_iconCanvasoval2Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval2Rect.midX + 12.71 * kMyMoney_iconCanvasoval2Rect.width / 73.4, y: kMyMoney_iconCanvasoval2Rect.midY + 56.1 * kMyMoney_iconCanvasoval2Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 2
        //// kMyMoney_iconCanvas-bezier 3 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier3Path = UIBezierPath()
        kMyMoney_iconCanvasbezier3Path.move(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 114))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 116.86))
        kMyMoney_iconCanvasbezier3Path.addCurve(to: CGPoint(x: frame.minX + 41.71, y: frame.minY + 129.19), controlPoint1: CGPoint(x: frame.minX + 4.98, y: frame.minY + 123.67), controlPoint2: CGPoint(x: frame.minX + 21.42, y: frame.minY + 129.19))
        kMyMoney_iconCanvasbezier3Path.addCurve(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 116.86), controlPoint1: CGPoint(x: frame.minX + 62, y: frame.minY + 129.19), controlPoint2: CGPoint(x: frame.minX + 78.45, y: frame.minY + 123.67))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 114))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 114))
        kMyMoney_iconCanvasbezier3Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier3Path.addClip()
        let kMyMoney_iconCanvasbezier3Bounds: CGRect = kMyMoney_iconCanvasbezier3Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier3Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier3Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier3Bounds.midY + 0 * kMyMoney_iconCanvasbezier3Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier3Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier3Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier3Bounds.midY + 0 * kMyMoney_iconCanvasbezier3Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 3 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval3Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 5.45, y: frame.minY + 102.08, width: 72.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval3Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 4 Drawing
        let kMyMoney_iconCanvasbezier4Path = UIBezierPath()
        kMyMoney_iconCanvasbezier4Path.move(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 111.7))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 114.55))
        kMyMoney_iconCanvasbezier4Path.addCurve(to: CGPoint(x: frame.minX + 41.86, y: frame.minY + 126.88), controlPoint1: CGPoint(x: frame.minX + 5.13, y: frame.minY + 121.36), controlPoint2: CGPoint(x: frame.minX + 21.57, y: frame.minY + 126.88))
        kMyMoney_iconCanvasbezier4Path.addCurve(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 114.55), controlPoint1: CGPoint(x: frame.minX + 62.15, y: frame.minY + 126.88), controlPoint2: CGPoint(x: frame.minX + 78.61, y: frame.minY + 121.36))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 111.7))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 111.7))
        kMyMoney_iconCanvasbezier4Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier4Path.addClip()
        let kMyMoney_iconCanvasbezier4Bounds: CGRect = kMyMoney_iconCanvasbezier4Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier4Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier4Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier4Bounds.midY + -0 * kMyMoney_iconCanvasbezier4Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier4Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier4Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier4Bounds.midY + -0 * kMyMoney_iconCanvasbezier4Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 4 Drawing
        let kMyMoney_iconCanvasoval4Rect = CGRect(x: frame.minX + 5.15, y: frame.minY + 99.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval4Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval4Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval4Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval4Rect.midX + 12.71 * kMyMoney_iconCanvasoval4Rect.width / 73.4, y: kMyMoney_iconCanvasoval4Rect.midY + -20.36 * kMyMoney_iconCanvasoval4Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval4Rect.midX + 12.71 * kMyMoney_iconCanvasoval4Rect.width / 73.4, y: kMyMoney_iconCanvasoval4Rect.midY + 56.1 * kMyMoney_iconCanvasoval4Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 3
        //// kMyMoney_iconCanvas-bezier 5 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier5Path = UIBezierPath()
        kMyMoney_iconCanvasbezier5Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 101))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 103.86))
        kMyMoney_iconCanvasbezier5Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 116.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 110.67), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 116.19))
        kMyMoney_iconCanvasbezier5Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 103.86), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 116.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 110.67))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 101))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 101))
        kMyMoney_iconCanvasbezier5Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier5Path.addClip()
        let kMyMoney_iconCanvasbezier5Bounds: CGRect = kMyMoney_iconCanvasbezier5Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier5Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier5Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier5Bounds.midY + 0 * kMyMoney_iconCanvasbezier5Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier5Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier5Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier5Bounds.midY + 0 * kMyMoney_iconCanvasbezier5Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 5 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval5Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 89.08, width: 72.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval5Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 6 Drawing
        let kMyMoney_iconCanvasbezier6Path = UIBezierPath()
        kMyMoney_iconCanvasbezier6Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 98.7))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 101.55))
        kMyMoney_iconCanvasbezier6Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 113.88), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 108.36), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 113.88))
        kMyMoney_iconCanvasbezier6Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 101.55), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 113.88), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 108.36))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 98.7))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 98.7))
        kMyMoney_iconCanvasbezier6Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier6Path.addClip()
        let kMyMoney_iconCanvasbezier6Bounds: CGRect = kMyMoney_iconCanvasbezier6Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier6Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier6Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier6Bounds.midY + -0 * kMyMoney_iconCanvasbezier6Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier6Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier6Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier6Bounds.midY + -0 * kMyMoney_iconCanvasbezier6Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 6 Drawing
        let kMyMoney_iconCanvasoval6Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 86.43, width: 73.4, height: 24.2)
        let kMyMoney_iconCanvasoval6Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval6Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval6Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval6Rect.midX + 12.71 * kMyMoney_iconCanvasoval6Rect.width / 73.4, y: kMyMoney_iconCanvasoval6Rect.midY + -19.56 * kMyMoney_iconCanvasoval6Rect.height / 24.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval6Rect.midX + 12.71 * kMyMoney_iconCanvasoval6Rect.width / 73.4, y: kMyMoney_iconCanvasoval6Rect.midY + 53.87 * kMyMoney_iconCanvasoval6Rect.height / 24.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// Text Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 48.8, y: frame.minY + 97.75)
        context.scaleBy(x: 1.2, y: 0.5)

        let textRect = CGRect(x: -16.5, y: -16.5, width: 33, height: 33)
        let textTextContent = "500"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            .font: UIFont.systemFont(ofSize: 16.5, weight: .bold),
            .foregroundColor: UIColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        let textTextRect: CGRect = CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: textTextRect, withAttributes: textFontAttributes)
        context.restoreGState()
        
        ////// Text Text Inner Shadow
        context.saveGState()
        context.clip(to: textRect)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow6.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let textOpaqueTextShadow = (shadow6.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: shadow6.shadowOffset, blur: shadow6.shadowBlurRadius, color: textOpaqueTextShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        textOpaqueTextShadow.setFill()

        let textInnerShadowFontAttributes = [
            .font: UIFont.systemFont(ofSize: 16.5, weight: .bold),
            .foregroundColor: (shadow6.shadowColor as! UIColor),
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]
        textTextContent.draw(in: textTextRect, withAttributes: textInnerShadowFontAttributes)

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        context.restoreGState()
    }

    @objc dynamic public class func drawMoneyRound4(frame: CGRect = CGRect(x: 0, y: 0, width: 141, height: 157)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let gradientColor25 = UIColor(red: 0.992, green: 0.898, blue: 0.576, alpha: 1.000)
        let gradientColor26 = UIColor(red: 1.000, green: 0.878, blue: 0.529, alpha: 1.000)
        let gradientColor27 = UIColor(red: 1.000, green: 0.902, blue: 0.537, alpha: 1.000)
        let gradientColor28 = UIColor(red: 0.984, green: 0.698, blue: 0.337, alpha: 1.000)
        let gradientColor29 = UIColor(red: 0.643, green: 0.294, blue: 0.047, alpha: 1.000)
        let gradientColor30 = UIColor(red: 0.514, green: 0.196, blue: 0.024, alpha: 1.000)
        let gradientColor31 = UIColor(red: 0.439, green: 0.145, blue: 0.024, alpha: 1.000)
        let gradientColor32 = UIColor(red: 0.486, green: 0.180, blue: 0.035, alpha: 1.000)
        let gradientColor33 = UIColor(red: 0.776, green: 0.408, blue: 0.122, alpha: 1.000)
        let gradientColor34 = UIColor(red: 0.992, green: 0.596, blue: 0.192, alpha: 1.000)
        let gradientColor35 = UIColor(red: 1.000, green: 0.635, blue: 0.208, alpha: 1.000)
        let gradientColor36 = UIColor(red: 0.945, green: 0.533, blue: 0.169, alpha: 1.000)
        let gradientColor37 = UIColor(red: 0.580, green: 0.251, blue: 0.063, alpha: 1.000)
        let gradientColor38 = UIColor(red: 0.427, green: 0.141, blue: 0.020, alpha: 1.000)
        let fillColor4 = UIColor(red: 0.231, green: 0.114, blue: 0.024, alpha: 1.000)
        let shadow6Color = UIColor(red: 0.684, green: 0.571, blue: 0.182, alpha: 1.000)

        //// Gradient Declarations
        let kMyMoney_iconCanvasgbezier36 = CGGradient(colorsSpace: nil, colors: [gradientColor25.cgColor, gradientColor26.cgColor, gradientColor27.cgColor, gradientColor28.cgColor, gradientColor29.cgColor, gradientColor30.cgColor, gradientColor31.cgColor, gradientColor31.cgColor, gradientColor32.cgColor, gradientColor33.cgColor, gradientColor34.cgColor, gradientColor35.cgColor, gradientColor36.cgColor, gradientColor37.cgColor, gradientColor38.cgColor] as CFArray, locations: [0, 0.1, 0.2, 0.28, 0.41, 0.48, 0.55, 0.58, 0.61, 0.66, 0.7, 0.78, 0.85, 0.91, 1])!

        //// Shadow Declarations
        let shadow6 = NSShadow()
        shadow6.shadowColor = shadow6Color
        shadow6.shadowOffset = CGSize(width: 3, height: 3)
        shadow6.shadowBlurRadius = 5

        //// kMyMoney_iconCanvas-group 6
        //// kMyMoney_iconCanvas-bezier124 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier124Path = UIBezierPath()
        kMyMoney_iconCanvasbezier124Path.move(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 136.49))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 139.45))
        kMyMoney_iconCanvasbezier124Path.addCurve(to: CGPoint(x: frame.minX + 41.71, y: frame.minY + 152.19), controlPoint1: CGPoint(x: frame.minX + 4.98, y: frame.minY + 146.48), controlPoint2: CGPoint(x: frame.minX + 21.42, y: frame.minY + 152.19))
        kMyMoney_iconCanvasbezier124Path.addCurve(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 139.45), controlPoint1: CGPoint(x: frame.minX + 62, y: frame.minY + 152.19), controlPoint2: CGPoint(x: frame.minX + 78.45, y: frame.minY + 146.48))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 136.49))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 136.49))
        kMyMoney_iconCanvasbezier124Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier124Path.addClip()
        let kMyMoney_iconCanvasbezier124Bounds: CGRect = kMyMoney_iconCanvasbezier124Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier124Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier124Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier124Bounds.midY + 0 * kMyMoney_iconCanvasbezier124Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier124Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier124Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier124Bounds.midY + 0 * kMyMoney_iconCanvasbezier124Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval67 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval67Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 5.45, y: frame.minY + 124.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval67Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier125 Drawing
        let kMyMoney_iconCanvasbezier125Path = UIBezierPath()
        kMyMoney_iconCanvasbezier125Path.move(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 134.11))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 137.06))
        kMyMoney_iconCanvasbezier125Path.addCurve(to: CGPoint(x: frame.minX + 41.86, y: frame.minY + 149.8), controlPoint1: CGPoint(x: frame.minX + 5.13, y: frame.minY + 144.1), controlPoint2: CGPoint(x: frame.minX + 21.57, y: frame.minY + 149.8))
        kMyMoney_iconCanvasbezier125Path.addCurve(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 137.06), controlPoint1: CGPoint(x: frame.minX + 62.15, y: frame.minY + 149.8), controlPoint2: CGPoint(x: frame.minX + 78.61, y: frame.minY + 144.1))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 134.11))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 134.11))
        kMyMoney_iconCanvasbezier125Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier125Path.addClip()
        let kMyMoney_iconCanvasbezier125Bounds: CGRect = kMyMoney_iconCanvasbezier125Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier125Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier125Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier125Bounds.midY + -0 * kMyMoney_iconCanvasbezier125Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier125Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier125Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier125Bounds.midY + -0 * kMyMoney_iconCanvasbezier125Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval68 Drawing
        let kMyMoney_iconCanvasoval68Rect = CGRect(x: frame.minX + 5.15, y: frame.minY + 121.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval68Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval68Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval68Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval68Rect.midX + 12.71 * kMyMoney_iconCanvasoval68Rect.width / 73.4, y: kMyMoney_iconCanvasoval68Rect.midY + -20.36 * kMyMoney_iconCanvasoval68Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval68Rect.midX + 12.71 * kMyMoney_iconCanvasoval68Rect.width / 73.4, y: kMyMoney_iconCanvasoval68Rect.midY + 56.1 * kMyMoney_iconCanvasoval68Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group
        //// kMyMoney_iconCanvas-bezier Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezierPath = UIBezierPath()
        kMyMoney_iconCanvasbezierPath.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 129))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 131.86))
        kMyMoney_iconCanvasbezierPath.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 144.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 138.67), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 144.19))
        kMyMoney_iconCanvasbezierPath.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 131.86), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 144.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 138.67))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 129))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 129))
        kMyMoney_iconCanvasbezierPath.close()
        context.saveGState()
        kMyMoney_iconCanvasbezierPath.addClip()
        let kMyMoney_iconCanvasbezierBounds: CGRect = kMyMoney_iconCanvasbezierPath.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezierBounds.midX + -36.73 * kMyMoney_iconCanvasbezierBounds.width / 73.47, y: kMyMoney_iconCanvasbezierBounds.midY + 0 * kMyMoney_iconCanvasbezierBounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezierBounds.midX + 0.1 * kMyMoney_iconCanvasbezierBounds.width / 73.47, y: kMyMoney_iconCanvasbezierBounds.midY + 0 * kMyMoney_iconCanvasbezierBounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasovalPath = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 117.08, width: 72.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasovalPath.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 2 Drawing
        let kMyMoney_iconCanvasbezier2Path = UIBezierPath()
        kMyMoney_iconCanvasbezier2Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 126.7))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 129.55))
        kMyMoney_iconCanvasbezier2Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 141.88), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 136.36), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 141.88))
        kMyMoney_iconCanvasbezier2Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 129.55), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 141.88), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 136.36))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 126.7))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 126.7))
        kMyMoney_iconCanvasbezier2Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier2Path.addClip()
        let kMyMoney_iconCanvasbezier2Bounds: CGRect = kMyMoney_iconCanvasbezier2Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier2Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier2Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier2Bounds.midY + -0 * kMyMoney_iconCanvasbezier2Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier2Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier2Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier2Bounds.midY + -0 * kMyMoney_iconCanvasbezier2Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 2 Drawing
        let kMyMoney_iconCanvasoval2Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 114.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval2Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval2Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval2Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval2Rect.midX + 12.71 * kMyMoney_iconCanvasoval2Rect.width / 73.4, y: kMyMoney_iconCanvasoval2Rect.midY + -20.36 * kMyMoney_iconCanvasoval2Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval2Rect.midX + 12.71 * kMyMoney_iconCanvasoval2Rect.width / 73.4, y: kMyMoney_iconCanvasoval2Rect.midY + 56.1 * kMyMoney_iconCanvasoval2Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 2
        //// kMyMoney_iconCanvas-bezier 3 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier3Path = UIBezierPath()
        kMyMoney_iconCanvasbezier3Path.move(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 114))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 116.86))
        kMyMoney_iconCanvasbezier3Path.addCurve(to: CGPoint(x: frame.minX + 41.71, y: frame.minY + 129.19), controlPoint1: CGPoint(x: frame.minX + 4.98, y: frame.minY + 123.67), controlPoint2: CGPoint(x: frame.minX + 21.42, y: frame.minY + 129.19))
        kMyMoney_iconCanvasbezier3Path.addCurve(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 116.86), controlPoint1: CGPoint(x: frame.minX + 62, y: frame.minY + 129.19), controlPoint2: CGPoint(x: frame.minX + 78.45, y: frame.minY + 123.67))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 114))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 114))
        kMyMoney_iconCanvasbezier3Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier3Path.addClip()
        let kMyMoney_iconCanvasbezier3Bounds: CGRect = kMyMoney_iconCanvasbezier3Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier3Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier3Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier3Bounds.midY + 0 * kMyMoney_iconCanvasbezier3Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier3Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier3Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier3Bounds.midY + 0 * kMyMoney_iconCanvasbezier3Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 3 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval3Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 5.45, y: frame.minY + 102.08, width: 72.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval3Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 4 Drawing
        let kMyMoney_iconCanvasbezier4Path = UIBezierPath()
        kMyMoney_iconCanvasbezier4Path.move(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 111.7))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 114.55))
        kMyMoney_iconCanvasbezier4Path.addCurve(to: CGPoint(x: frame.minX + 41.86, y: frame.minY + 126.88), controlPoint1: CGPoint(x: frame.minX + 5.13, y: frame.minY + 121.36), controlPoint2: CGPoint(x: frame.minX + 21.57, y: frame.minY + 126.88))
        kMyMoney_iconCanvasbezier4Path.addCurve(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 114.55), controlPoint1: CGPoint(x: frame.minX + 62.15, y: frame.minY + 126.88), controlPoint2: CGPoint(x: frame.minX + 78.61, y: frame.minY + 121.36))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 111.7))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 111.7))
        kMyMoney_iconCanvasbezier4Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier4Path.addClip()
        let kMyMoney_iconCanvasbezier4Bounds: CGRect = kMyMoney_iconCanvasbezier4Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier4Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier4Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier4Bounds.midY + -0 * kMyMoney_iconCanvasbezier4Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier4Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier4Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier4Bounds.midY + -0 * kMyMoney_iconCanvasbezier4Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 4 Drawing
        let kMyMoney_iconCanvasoval4Rect = CGRect(x: frame.minX + 5.15, y: frame.minY + 99.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval4Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval4Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval4Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval4Rect.midX + 12.71 * kMyMoney_iconCanvasoval4Rect.width / 73.4, y: kMyMoney_iconCanvasoval4Rect.midY + -20.36 * kMyMoney_iconCanvasoval4Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval4Rect.midX + 12.71 * kMyMoney_iconCanvasoval4Rect.width / 73.4, y: kMyMoney_iconCanvasoval4Rect.midY + 56.1 * kMyMoney_iconCanvasoval4Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 3
        //// kMyMoney_iconCanvas-bezier 5 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier5Path = UIBezierPath()
        kMyMoney_iconCanvasbezier5Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 101.49))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 104.45))
        kMyMoney_iconCanvasbezier5Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 117.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 111.48), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 117.19))
        kMyMoney_iconCanvasbezier5Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 104.45), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 117.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 111.48))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 101.49))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 101.49))
        kMyMoney_iconCanvasbezier5Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier5Path.addClip()
        let kMyMoney_iconCanvasbezier5Bounds: CGRect = kMyMoney_iconCanvasbezier5Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier5Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier5Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier5Bounds.midY + 0 * kMyMoney_iconCanvasbezier5Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier5Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier5Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier5Bounds.midY + 0 * kMyMoney_iconCanvasbezier5Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 5 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval5Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 89.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval5Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 6 Drawing
        let kMyMoney_iconCanvasbezier6Path = UIBezierPath()
        kMyMoney_iconCanvasbezier6Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 99.11))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 102.06))
        kMyMoney_iconCanvasbezier6Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 114.8), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 109.1), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 114.8))
        kMyMoney_iconCanvasbezier6Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 102.06), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 114.8), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 109.1))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 99.11))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 99.11))
        kMyMoney_iconCanvasbezier6Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier6Path.addClip()
        let kMyMoney_iconCanvasbezier6Bounds: CGRect = kMyMoney_iconCanvasbezier6Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier6Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier6Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier6Bounds.midY + -0 * kMyMoney_iconCanvasbezier6Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier6Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier6Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier6Bounds.midY + -0 * kMyMoney_iconCanvasbezier6Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 6 Drawing
        let kMyMoney_iconCanvasoval6Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 86.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval6Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval6Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval6Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval6Rect.midX + 12.71 * kMyMoney_iconCanvasoval6Rect.width / 73.4, y: kMyMoney_iconCanvasoval6Rect.midY + -20.36 * kMyMoney_iconCanvasoval6Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval6Rect.midX + 12.71 * kMyMoney_iconCanvasoval6Rect.width / 73.4, y: kMyMoney_iconCanvasoval6Rect.midY + 56.1 * kMyMoney_iconCanvasoval6Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 4
        //// kMyMoney_iconCanvas-bezier 7 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier7Path = UIBezierPath()
        kMyMoney_iconCanvasbezier7Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 86.49))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 89.45))
        kMyMoney_iconCanvasbezier7Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 102.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 96.48), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 102.19))
        kMyMoney_iconCanvasbezier7Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 89.45), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 102.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 96.48))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 86.49))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 86.49))
        kMyMoney_iconCanvasbezier7Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier7Path.addClip()
        let kMyMoney_iconCanvasbezier7Bounds: CGRect = kMyMoney_iconCanvasbezier7Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier7Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier7Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier7Bounds.midY + 0 * kMyMoney_iconCanvasbezier7Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier7Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier7Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier7Bounds.midY + 0 * kMyMoney_iconCanvasbezier7Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 7 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval7Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 74.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval7Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 8 Drawing
        let kMyMoney_iconCanvasbezier8Path = UIBezierPath()
        kMyMoney_iconCanvasbezier8Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 84.11))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 87.06))
        kMyMoney_iconCanvasbezier8Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 99.8), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 94.1), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 99.8))
        kMyMoney_iconCanvasbezier8Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 87.06), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 99.8), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 94.1))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 84.11))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 84.11))
        kMyMoney_iconCanvasbezier8Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier8Path.addClip()
        let kMyMoney_iconCanvasbezier8Bounds: CGRect = kMyMoney_iconCanvasbezier8Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier8Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier8Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier8Bounds.midY + -0 * kMyMoney_iconCanvasbezier8Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier8Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier8Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier8Bounds.midY + -0 * kMyMoney_iconCanvasbezier8Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 8 Drawing
        let kMyMoney_iconCanvasoval8Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 71.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval8Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval8Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval8Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval8Rect.midX + 12.71 * kMyMoney_iconCanvasoval8Rect.width / 73.4, y: kMyMoney_iconCanvasoval8Rect.midY + -20.36 * kMyMoney_iconCanvasoval8Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval8Rect.midX + 12.71 * kMyMoney_iconCanvasoval8Rect.width / 73.4, y: kMyMoney_iconCanvasoval8Rect.midY + 56.1 * kMyMoney_iconCanvasoval8Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// Text 2 Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 49, y: frame.minY + 82.75)
        context.scaleBy(x: 1.2, y: 0.5)

        let text2Rect = CGRect(x: -20.83, y: -16.5, width: 41.67, height: 33)
        let text2TextContent = "1000"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [
            .font: UIFont.systemFont(ofSize: 16.5, weight: .bold),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text2Style,
        ] as [NSAttributedString.Key: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        let text2TextRect: CGRect = CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight)
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: text2TextRect, withAttributes: text2FontAttributes)
        context.restoreGState()
        
        ////// Text 2 Text Inner Shadow
        context.saveGState()
        context.clip(to: text2Rect)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow6.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let text2OpaqueTextShadow = (shadow6.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: shadow6.shadowOffset, blur: shadow6.shadowBlurRadius, color: text2OpaqueTextShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        text2OpaqueTextShadow.setFill()

        let text2InnerShadowFontAttributes = [
            .font: UIFont.systemFont(ofSize: 16.5, weight: .bold),
            .foregroundColor: (shadow6.shadowColor as! UIColor),
            .paragraphStyle: text2Style,
        ] as [NSAttributedString.Key: Any]
        text2TextContent.draw(in: text2TextRect, withAttributes: text2InnerShadowFontAttributes)

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        context.restoreGState()
    }

    @objc dynamic public class func drawMoneyRound5(frame: CGRect = CGRect(x: 0, y: 0, width: 141, height: 157)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let gradientColor25 = UIColor(red: 0.992, green: 0.898, blue: 0.576, alpha: 1.000)
        let gradientColor26 = UIColor(red: 1.000, green: 0.878, blue: 0.529, alpha: 1.000)
        let gradientColor27 = UIColor(red: 1.000, green: 0.902, blue: 0.537, alpha: 1.000)
        let gradientColor28 = UIColor(red: 0.984, green: 0.698, blue: 0.337, alpha: 1.000)
        let gradientColor29 = UIColor(red: 0.643, green: 0.294, blue: 0.047, alpha: 1.000)
        let gradientColor30 = UIColor(red: 0.514, green: 0.196, blue: 0.024, alpha: 1.000)
        let gradientColor31 = UIColor(red: 0.439, green: 0.145, blue: 0.024, alpha: 1.000)
        let gradientColor32 = UIColor(red: 0.486, green: 0.180, blue: 0.035, alpha: 1.000)
        let gradientColor33 = UIColor(red: 0.776, green: 0.408, blue: 0.122, alpha: 1.000)
        let gradientColor34 = UIColor(red: 0.992, green: 0.596, blue: 0.192, alpha: 1.000)
        let gradientColor35 = UIColor(red: 1.000, green: 0.635, blue: 0.208, alpha: 1.000)
        let gradientColor36 = UIColor(red: 0.945, green: 0.533, blue: 0.169, alpha: 1.000)
        let gradientColor37 = UIColor(red: 0.580, green: 0.251, blue: 0.063, alpha: 1.000)
        let gradientColor38 = UIColor(red: 0.427, green: 0.141, blue: 0.020, alpha: 1.000)
        let fillColor4 = UIColor(red: 0.231, green: 0.114, blue: 0.024, alpha: 1.000)
        let shadow6Color = UIColor(red: 0.684, green: 0.571, blue: 0.182, alpha: 1.000)

        //// Gradient Declarations
        let kMyMoney_iconCanvasgbezier36 = CGGradient(colorsSpace: nil, colors: [gradientColor25.cgColor, gradientColor26.cgColor, gradientColor27.cgColor, gradientColor28.cgColor, gradientColor29.cgColor, gradientColor30.cgColor, gradientColor31.cgColor, gradientColor31.cgColor, gradientColor32.cgColor, gradientColor33.cgColor, gradientColor34.cgColor, gradientColor35.cgColor, gradientColor36.cgColor, gradientColor37.cgColor, gradientColor38.cgColor] as CFArray, locations: [0, 0.1, 0.2, 0.28, 0.41, 0.48, 0.55, 0.58, 0.61, 0.66, 0.7, 0.78, 0.85, 0.91, 1])!

        //// Shadow Declarations
        let shadow6 = NSShadow()
        shadow6.shadowColor = shadow6Color
        shadow6.shadowOffset = CGSize(width: 3, height: 3)
        shadow6.shadowBlurRadius = 5

        //// kMyMoney_iconCanvas-group 6
        //// kMyMoney_iconCanvas-bezier124 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier124Path = UIBezierPath()
        kMyMoney_iconCanvasbezier124Path.move(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 136.49))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 139.45))
        kMyMoney_iconCanvasbezier124Path.addCurve(to: CGPoint(x: frame.minX + 41.71, y: frame.minY + 152.19), controlPoint1: CGPoint(x: frame.minX + 4.98, y: frame.minY + 146.48), controlPoint2: CGPoint(x: frame.minX + 21.42, y: frame.minY + 152.19))
        kMyMoney_iconCanvasbezier124Path.addCurve(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 139.45), controlPoint1: CGPoint(x: frame.minX + 62, y: frame.minY + 152.19), controlPoint2: CGPoint(x: frame.minX + 78.45, y: frame.minY + 146.48))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 136.49))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 136.49))
        kMyMoney_iconCanvasbezier124Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier124Path.addClip()
        let kMyMoney_iconCanvasbezier124Bounds: CGRect = kMyMoney_iconCanvasbezier124Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier124Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier124Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier124Bounds.midY + 0 * kMyMoney_iconCanvasbezier124Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier124Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier124Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier124Bounds.midY + 0 * kMyMoney_iconCanvasbezier124Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval67 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval67Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 5.45, y: frame.minY + 124.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval67Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier125 Drawing
        let kMyMoney_iconCanvasbezier125Path = UIBezierPath()
        kMyMoney_iconCanvasbezier125Path.move(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 134.11))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 137.06))
        kMyMoney_iconCanvasbezier125Path.addCurve(to: CGPoint(x: frame.minX + 41.86, y: frame.minY + 149.8), controlPoint1: CGPoint(x: frame.minX + 5.13, y: frame.minY + 144.1), controlPoint2: CGPoint(x: frame.minX + 21.57, y: frame.minY + 149.8))
        kMyMoney_iconCanvasbezier125Path.addCurve(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 137.06), controlPoint1: CGPoint(x: frame.minX + 62.15, y: frame.minY + 149.8), controlPoint2: CGPoint(x: frame.minX + 78.61, y: frame.minY + 144.1))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 134.11))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 134.11))
        kMyMoney_iconCanvasbezier125Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier125Path.addClip()
        let kMyMoney_iconCanvasbezier125Bounds: CGRect = kMyMoney_iconCanvasbezier125Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier125Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier125Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier125Bounds.midY + -0 * kMyMoney_iconCanvasbezier125Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier125Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier125Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier125Bounds.midY + -0 * kMyMoney_iconCanvasbezier125Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval68 Drawing
        let kMyMoney_iconCanvasoval68Rect = CGRect(x: frame.minX + 5.15, y: frame.minY + 121.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval68Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval68Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval68Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval68Rect.midX + 12.71 * kMyMoney_iconCanvasoval68Rect.width / 73.4, y: kMyMoney_iconCanvasoval68Rect.midY + -20.36 * kMyMoney_iconCanvasoval68Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval68Rect.midX + 12.71 * kMyMoney_iconCanvasoval68Rect.width / 73.4, y: kMyMoney_iconCanvasoval68Rect.midY + 56.1 * kMyMoney_iconCanvasoval68Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group
        //// kMyMoney_iconCanvas-bezier Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezierPath = UIBezierPath()
        kMyMoney_iconCanvasbezierPath.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 129))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 131.86))
        kMyMoney_iconCanvasbezierPath.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 144.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 138.67), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 144.19))
        kMyMoney_iconCanvasbezierPath.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 131.86), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 144.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 138.67))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 129))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 129))
        kMyMoney_iconCanvasbezierPath.close()
        context.saveGState()
        kMyMoney_iconCanvasbezierPath.addClip()
        let kMyMoney_iconCanvasbezierBounds: CGRect = kMyMoney_iconCanvasbezierPath.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezierBounds.midX + -36.73 * kMyMoney_iconCanvasbezierBounds.width / 73.47, y: kMyMoney_iconCanvasbezierBounds.midY + 0 * kMyMoney_iconCanvasbezierBounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezierBounds.midX + 0.1 * kMyMoney_iconCanvasbezierBounds.width / 73.47, y: kMyMoney_iconCanvasbezierBounds.midY + 0 * kMyMoney_iconCanvasbezierBounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasovalPath = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 117.08, width: 72.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasovalPath.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 2 Drawing
        let kMyMoney_iconCanvasbezier2Path = UIBezierPath()
        kMyMoney_iconCanvasbezier2Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 126.7))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 129.55))
        kMyMoney_iconCanvasbezier2Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 141.88), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 136.36), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 141.88))
        kMyMoney_iconCanvasbezier2Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 129.55), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 141.88), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 136.36))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 126.7))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 126.7))
        kMyMoney_iconCanvasbezier2Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier2Path.addClip()
        let kMyMoney_iconCanvasbezier2Bounds: CGRect = kMyMoney_iconCanvasbezier2Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier2Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier2Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier2Bounds.midY + -0 * kMyMoney_iconCanvasbezier2Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier2Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier2Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier2Bounds.midY + -0 * kMyMoney_iconCanvasbezier2Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 2 Drawing
        let kMyMoney_iconCanvasoval2Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 114.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval2Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval2Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval2Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval2Rect.midX + 12.71 * kMyMoney_iconCanvasoval2Rect.width / 73.4, y: kMyMoney_iconCanvasoval2Rect.midY + -20.36 * kMyMoney_iconCanvasoval2Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval2Rect.midX + 12.71 * kMyMoney_iconCanvasoval2Rect.width / 73.4, y: kMyMoney_iconCanvasoval2Rect.midY + 56.1 * kMyMoney_iconCanvasoval2Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 2
        //// kMyMoney_iconCanvas-bezier 3 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier3Path = UIBezierPath()
        kMyMoney_iconCanvasbezier3Path.move(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 114))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 116.86))
        kMyMoney_iconCanvasbezier3Path.addCurve(to: CGPoint(x: frame.minX + 41.71, y: frame.minY + 129.19), controlPoint1: CGPoint(x: frame.minX + 4.98, y: frame.minY + 123.67), controlPoint2: CGPoint(x: frame.minX + 21.42, y: frame.minY + 129.19))
        kMyMoney_iconCanvasbezier3Path.addCurve(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 116.86), controlPoint1: CGPoint(x: frame.minX + 62, y: frame.minY + 129.19), controlPoint2: CGPoint(x: frame.minX + 78.45, y: frame.minY + 123.67))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 114))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 114))
        kMyMoney_iconCanvasbezier3Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier3Path.addClip()
        let kMyMoney_iconCanvasbezier3Bounds: CGRect = kMyMoney_iconCanvasbezier3Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier3Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier3Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier3Bounds.midY + 0 * kMyMoney_iconCanvasbezier3Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier3Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier3Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier3Bounds.midY + 0 * kMyMoney_iconCanvasbezier3Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 3 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval3Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 5.45, y: frame.minY + 102.08, width: 72.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval3Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 4 Drawing
        let kMyMoney_iconCanvasbezier4Path = UIBezierPath()
        kMyMoney_iconCanvasbezier4Path.move(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 111.7))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 114.55))
        kMyMoney_iconCanvasbezier4Path.addCurve(to: CGPoint(x: frame.minX + 41.86, y: frame.minY + 126.88), controlPoint1: CGPoint(x: frame.minX + 5.13, y: frame.minY + 121.36), controlPoint2: CGPoint(x: frame.minX + 21.57, y: frame.minY + 126.88))
        kMyMoney_iconCanvasbezier4Path.addCurve(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 114.55), controlPoint1: CGPoint(x: frame.minX + 62.15, y: frame.minY + 126.88), controlPoint2: CGPoint(x: frame.minX + 78.61, y: frame.minY + 121.36))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 111.7))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 111.7))
        kMyMoney_iconCanvasbezier4Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier4Path.addClip()
        let kMyMoney_iconCanvasbezier4Bounds: CGRect = kMyMoney_iconCanvasbezier4Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier4Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier4Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier4Bounds.midY + -0 * kMyMoney_iconCanvasbezier4Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier4Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier4Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier4Bounds.midY + -0 * kMyMoney_iconCanvasbezier4Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 4 Drawing
        let kMyMoney_iconCanvasoval4Rect = CGRect(x: frame.minX + 5.15, y: frame.minY + 99.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval4Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval4Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval4Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval4Rect.midX + 12.71 * kMyMoney_iconCanvasoval4Rect.width / 73.4, y: kMyMoney_iconCanvasoval4Rect.midY + -20.36 * kMyMoney_iconCanvasoval4Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval4Rect.midX + 12.71 * kMyMoney_iconCanvasoval4Rect.width / 73.4, y: kMyMoney_iconCanvasoval4Rect.midY + 56.1 * kMyMoney_iconCanvasoval4Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 3
        //// kMyMoney_iconCanvas-bezier 5 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier5Path = UIBezierPath()
        kMyMoney_iconCanvasbezier5Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 102))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 104.86))
        kMyMoney_iconCanvasbezier5Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 117.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 111.67), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 117.19))
        kMyMoney_iconCanvasbezier5Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 104.86), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 117.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 111.67))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 102))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 102))
        kMyMoney_iconCanvasbezier5Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier5Path.addClip()
        let kMyMoney_iconCanvasbezier5Bounds: CGRect = kMyMoney_iconCanvasbezier5Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier5Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier5Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier5Bounds.midY + 0 * kMyMoney_iconCanvasbezier5Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier5Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier5Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier5Bounds.midY + 0 * kMyMoney_iconCanvasbezier5Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 5 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval5Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 90.08, width: 72.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval5Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 6 Drawing
        let kMyMoney_iconCanvasbezier6Path = UIBezierPath()
        kMyMoney_iconCanvasbezier6Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 99.7))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 102.55))
        kMyMoney_iconCanvasbezier6Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 114.88), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 109.36), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 114.88))
        kMyMoney_iconCanvasbezier6Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 102.55), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 114.88), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 109.36))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 99.7))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 99.7))
        kMyMoney_iconCanvasbezier6Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier6Path.addClip()
        let kMyMoney_iconCanvasbezier6Bounds: CGRect = kMyMoney_iconCanvasbezier6Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier6Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier6Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier6Bounds.midY + -0 * kMyMoney_iconCanvasbezier6Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier6Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier6Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier6Bounds.midY + -0 * kMyMoney_iconCanvasbezier6Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 6 Drawing
        let kMyMoney_iconCanvasoval6Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 87.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval6Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval6Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval6Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval6Rect.midX + 12.71 * kMyMoney_iconCanvasoval6Rect.width / 73.4, y: kMyMoney_iconCanvasoval6Rect.midY + -20.36 * kMyMoney_iconCanvasoval6Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval6Rect.midX + 12.71 * kMyMoney_iconCanvasoval6Rect.width / 73.4, y: kMyMoney_iconCanvasoval6Rect.midY + 56.1 * kMyMoney_iconCanvasoval6Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 4
        //// kMyMoney_iconCanvas-bezier 7 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier7Path = UIBezierPath()
        kMyMoney_iconCanvasbezier7Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 87))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 89.86))
        kMyMoney_iconCanvasbezier7Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 102.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 96.67), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 102.19))
        kMyMoney_iconCanvasbezier7Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 89.86), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 102.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 96.67))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 87))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 87))
        kMyMoney_iconCanvasbezier7Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier7Path.addClip()
        let kMyMoney_iconCanvasbezier7Bounds: CGRect = kMyMoney_iconCanvasbezier7Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier7Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier7Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier7Bounds.midY + 0 * kMyMoney_iconCanvasbezier7Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier7Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier7Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier7Bounds.midY + 0 * kMyMoney_iconCanvasbezier7Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 7 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval7Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 75.08, width: 72.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval7Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 8 Drawing
        let kMyMoney_iconCanvasbezier8Path = UIBezierPath()
        kMyMoney_iconCanvasbezier8Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 84.7))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 87.55))
        kMyMoney_iconCanvasbezier8Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 99.88), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 94.36), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 99.88))
        kMyMoney_iconCanvasbezier8Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 87.55), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 99.88), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 94.36))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 84.7))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 84.7))
        kMyMoney_iconCanvasbezier8Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier8Path.addClip()
        let kMyMoney_iconCanvasbezier8Bounds: CGRect = kMyMoney_iconCanvasbezier8Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier8Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier8Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier8Bounds.midY + -0 * kMyMoney_iconCanvasbezier8Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier8Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier8Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier8Bounds.midY + -0 * kMyMoney_iconCanvasbezier8Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 8 Drawing
        let kMyMoney_iconCanvasoval8Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 72.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval8Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval8Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval8Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval8Rect.midX + 12.71 * kMyMoney_iconCanvasoval8Rect.width / 73.4, y: kMyMoney_iconCanvasoval8Rect.midY + -20.36 * kMyMoney_iconCanvasoval8Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval8Rect.midX + 12.71 * kMyMoney_iconCanvasoval8Rect.width / 73.4, y: kMyMoney_iconCanvasoval8Rect.midY + 56.1 * kMyMoney_iconCanvasoval8Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 5
        //// kMyMoney_iconCanvas-bezier 9 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier9Path = UIBezierPath()
        kMyMoney_iconCanvasbezier9Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 74.49))
        kMyMoney_iconCanvasbezier9Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 77.45))
        kMyMoney_iconCanvasbezier9Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 90.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 84.48), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 90.19))
        kMyMoney_iconCanvasbezier9Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 77.45), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 90.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 84.48))
        kMyMoney_iconCanvasbezier9Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 74.49))
        kMyMoney_iconCanvasbezier9Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 74.49))
        kMyMoney_iconCanvasbezier9Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier9Path.addClip()
        let kMyMoney_iconCanvasbezier9Bounds: CGRect = kMyMoney_iconCanvasbezier9Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier9Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier9Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier9Bounds.midY + 0 * kMyMoney_iconCanvasbezier9Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier9Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier9Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier9Bounds.midY + 0 * kMyMoney_iconCanvasbezier9Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 9 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval9Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 63.08, width: 72.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval9Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 10 Drawing
        let kMyMoney_iconCanvasbezier10Path = UIBezierPath()
        kMyMoney_iconCanvasbezier10Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 72.11))
        kMyMoney_iconCanvasbezier10Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 75.06))
        kMyMoney_iconCanvasbezier10Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 87.8), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 82.1), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 87.8))
        kMyMoney_iconCanvasbezier10Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 75.06), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 87.8), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 82.1))
        kMyMoney_iconCanvasbezier10Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 72.11))
        kMyMoney_iconCanvasbezier10Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 72.11))
        kMyMoney_iconCanvasbezier10Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier10Path.addClip()
        let kMyMoney_iconCanvasbezier10Bounds: CGRect = kMyMoney_iconCanvasbezier10Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier10Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier10Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier10Bounds.midY + -0 * kMyMoney_iconCanvasbezier10Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier10Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier10Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier10Bounds.midY + -0 * kMyMoney_iconCanvasbezier10Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 10 Drawing
        let kMyMoney_iconCanvasoval10Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 59.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval10Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval10Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval10Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval10Rect.midX + 12.71 * kMyMoney_iconCanvasoval10Rect.width / 73.4, y: kMyMoney_iconCanvasoval10Rect.midY + -20.36 * kMyMoney_iconCanvasoval10Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval10Rect.midX + 12.71 * kMyMoney_iconCanvasoval10Rect.width / 73.4, y: kMyMoney_iconCanvasoval10Rect.midY + 56.1 * kMyMoney_iconCanvasoval10Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// Text Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 53.3, y: frame.minY + 71.75)
        context.scaleBy(x: 1.2, y: 0.5)

        let textRect = CGRect(x: -24.42, y: -16.5, width: 48.83, height: 33)
        let textTextContent = "2000"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            .font: UIFont.systemFont(ofSize: 16.5, weight: .bold),
            .foregroundColor: UIColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        let textTextRect: CGRect = CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: textTextRect, withAttributes: textFontAttributes)
        context.restoreGState()
        
        ////// Text Text Inner Shadow
        context.saveGState()
        context.clip(to: textRect)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow6.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let textOpaqueTextShadow = (shadow6.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: shadow6.shadowOffset, blur: shadow6.shadowBlurRadius, color: textOpaqueTextShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        textOpaqueTextShadow.setFill()

        let textInnerShadowFontAttributes = [
            .font: UIFont.systemFont(ofSize: 16.5, weight: .bold),
            .foregroundColor: (shadow6.shadowColor as! UIColor),
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]
        textTextContent.draw(in: textTextRect, withAttributes: textInnerShadowFontAttributes)

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        context.restoreGState()
    }

    @objc dynamic public class func drawMoneyRound6(frame: CGRect = CGRect(x: 0, y: 0, width: 141, height: 157)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let gradientColor25 = UIColor(red: 0.992, green: 0.898, blue: 0.576, alpha: 1.000)
        let gradientColor26 = UIColor(red: 1.000, green: 0.878, blue: 0.529, alpha: 1.000)
        let gradientColor27 = UIColor(red: 1.000, green: 0.902, blue: 0.537, alpha: 1.000)
        let gradientColor28 = UIColor(red: 0.984, green: 0.698, blue: 0.337, alpha: 1.000)
        let gradientColor29 = UIColor(red: 0.643, green: 0.294, blue: 0.047, alpha: 1.000)
        let gradientColor30 = UIColor(red: 0.514, green: 0.196, blue: 0.024, alpha: 1.000)
        let gradientColor31 = UIColor(red: 0.439, green: 0.145, blue: 0.024, alpha: 1.000)
        let gradientColor32 = UIColor(red: 0.486, green: 0.180, blue: 0.035, alpha: 1.000)
        let gradientColor33 = UIColor(red: 0.776, green: 0.408, blue: 0.122, alpha: 1.000)
        let gradientColor34 = UIColor(red: 0.992, green: 0.596, blue: 0.192, alpha: 1.000)
        let gradientColor35 = UIColor(red: 1.000, green: 0.635, blue: 0.208, alpha: 1.000)
        let gradientColor36 = UIColor(red: 0.945, green: 0.533, blue: 0.169, alpha: 1.000)
        let gradientColor37 = UIColor(red: 0.580, green: 0.251, blue: 0.063, alpha: 1.000)
        let gradientColor38 = UIColor(red: 0.427, green: 0.141, blue: 0.020, alpha: 1.000)
        let fillColor4 = UIColor(red: 0.231, green: 0.114, blue: 0.024, alpha: 1.000)
        let shadow6Color = UIColor(red: 0.684, green: 0.571, blue: 0.182, alpha: 1.000)

        //// Gradient Declarations
        let kMyMoney_iconCanvasgbezier36 = CGGradient(colorsSpace: nil, colors: [gradientColor25.cgColor, gradientColor26.cgColor, gradientColor27.cgColor, gradientColor28.cgColor, gradientColor29.cgColor, gradientColor30.cgColor, gradientColor31.cgColor, gradientColor31.cgColor, gradientColor32.cgColor, gradientColor33.cgColor, gradientColor34.cgColor, gradientColor35.cgColor, gradientColor36.cgColor, gradientColor37.cgColor, gradientColor38.cgColor] as CFArray, locations: [0, 0.1, 0.2, 0.28, 0.41, 0.48, 0.55, 0.58, 0.61, 0.66, 0.7, 0.78, 0.85, 0.91, 1])!

        //// Shadow Declarations
        let shadow6 = NSShadow()
        shadow6.shadowColor = shadow6Color
        shadow6.shadowOffset = CGSize(width: 3, height: 3)
        shadow6.shadowBlurRadius = 5

        //// kMyMoney_iconCanvas-group 6
        //// kMyMoney_iconCanvas-bezier124 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier124Path = UIBezierPath()
        kMyMoney_iconCanvasbezier124Path.move(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 137))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 139.86))
        kMyMoney_iconCanvasbezier124Path.addCurve(to: CGPoint(x: frame.minX + 41.71, y: frame.minY + 152.19), controlPoint1: CGPoint(x: frame.minX + 4.98, y: frame.minY + 146.67), controlPoint2: CGPoint(x: frame.minX + 21.42, y: frame.minY + 152.19))
        kMyMoney_iconCanvasbezier124Path.addCurve(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 139.86), controlPoint1: CGPoint(x: frame.minX + 62, y: frame.minY + 152.19), controlPoint2: CGPoint(x: frame.minX + 78.45, y: frame.minY + 146.67))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 137))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 137))
        kMyMoney_iconCanvasbezier124Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier124Path.addClip()
        let kMyMoney_iconCanvasbezier124Bounds: CGRect = kMyMoney_iconCanvasbezier124Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier124Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier124Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier124Bounds.midY + 0 * kMyMoney_iconCanvasbezier124Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier124Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier124Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier124Bounds.midY + 0 * kMyMoney_iconCanvasbezier124Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval67 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval67Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 5.45, y: frame.minY + 125.08, width: 72.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval67Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier125 Drawing
        let kMyMoney_iconCanvasbezier125Path = UIBezierPath()
        kMyMoney_iconCanvasbezier125Path.move(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 134.7))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 137.55))
        kMyMoney_iconCanvasbezier125Path.addCurve(to: CGPoint(x: frame.minX + 41.86, y: frame.minY + 149.88), controlPoint1: CGPoint(x: frame.minX + 5.13, y: frame.minY + 144.36), controlPoint2: CGPoint(x: frame.minX + 21.57, y: frame.minY + 149.88))
        kMyMoney_iconCanvasbezier125Path.addCurve(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 137.55), controlPoint1: CGPoint(x: frame.minX + 62.15, y: frame.minY + 149.88), controlPoint2: CGPoint(x: frame.minX + 78.61, y: frame.minY + 144.36))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 134.7))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 134.7))
        kMyMoney_iconCanvasbezier125Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier125Path.addClip()
        let kMyMoney_iconCanvasbezier125Bounds: CGRect = kMyMoney_iconCanvasbezier125Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier125Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier125Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier125Bounds.midY + -0 * kMyMoney_iconCanvasbezier125Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier125Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier125Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier125Bounds.midY + -0 * kMyMoney_iconCanvasbezier125Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval68 Drawing
        let kMyMoney_iconCanvasoval68Rect = CGRect(x: frame.minX + 5.15, y: frame.minY + 122.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval68Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval68Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval68Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval68Rect.midX + 12.71 * kMyMoney_iconCanvasoval68Rect.width / 73.4, y: kMyMoney_iconCanvasoval68Rect.midY + -20.36 * kMyMoney_iconCanvasoval68Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval68Rect.midX + 12.71 * kMyMoney_iconCanvasoval68Rect.width / 73.4, y: kMyMoney_iconCanvasoval68Rect.midY + 56.1 * kMyMoney_iconCanvasoval68Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group
        //// kMyMoney_iconCanvas-bezier Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezierPath = UIBezierPath()
        kMyMoney_iconCanvasbezierPath.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 129))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 131.86))
        kMyMoney_iconCanvasbezierPath.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 144.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 138.67), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 144.19))
        kMyMoney_iconCanvasbezierPath.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 131.86), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 144.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 138.67))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 129))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 129))
        kMyMoney_iconCanvasbezierPath.close()
        context.saveGState()
        kMyMoney_iconCanvasbezierPath.addClip()
        let kMyMoney_iconCanvasbezierBounds: CGRect = kMyMoney_iconCanvasbezierPath.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezierBounds.midX + -36.73 * kMyMoney_iconCanvasbezierBounds.width / 73.47, y: kMyMoney_iconCanvasbezierBounds.midY + 0 * kMyMoney_iconCanvasbezierBounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezierBounds.midX + 0.1 * kMyMoney_iconCanvasbezierBounds.width / 73.47, y: kMyMoney_iconCanvasbezierBounds.midY + 0 * kMyMoney_iconCanvasbezierBounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasovalPath = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 117.08, width: 72.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasovalPath.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 2 Drawing
        let kMyMoney_iconCanvasbezier2Path = UIBezierPath()
        kMyMoney_iconCanvasbezier2Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 126.7))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 129.55))
        kMyMoney_iconCanvasbezier2Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 141.88), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 136.36), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 141.88))
        kMyMoney_iconCanvasbezier2Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 129.55), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 141.88), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 136.36))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 126.7))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 126.7))
        kMyMoney_iconCanvasbezier2Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier2Path.addClip()
        let kMyMoney_iconCanvasbezier2Bounds: CGRect = kMyMoney_iconCanvasbezier2Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier2Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier2Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier2Bounds.midY + -0 * kMyMoney_iconCanvasbezier2Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier2Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier2Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier2Bounds.midY + -0 * kMyMoney_iconCanvasbezier2Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 2 Drawing
        let kMyMoney_iconCanvasoval2Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 114.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval2Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval2Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval2Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval2Rect.midX + 12.71 * kMyMoney_iconCanvasoval2Rect.width / 73.4, y: kMyMoney_iconCanvasoval2Rect.midY + -20.36 * kMyMoney_iconCanvasoval2Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval2Rect.midX + 12.71 * kMyMoney_iconCanvasoval2Rect.width / 73.4, y: kMyMoney_iconCanvasoval2Rect.midY + 56.1 * kMyMoney_iconCanvasoval2Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 2
        //// kMyMoney_iconCanvas-bezier 3 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier3Path = UIBezierPath()
        kMyMoney_iconCanvasbezier3Path.move(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 114))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 116.86))
        kMyMoney_iconCanvasbezier3Path.addCurve(to: CGPoint(x: frame.minX + 41.71, y: frame.minY + 129.19), controlPoint1: CGPoint(x: frame.minX + 4.98, y: frame.minY + 123.67), controlPoint2: CGPoint(x: frame.minX + 21.42, y: frame.minY + 129.19))
        kMyMoney_iconCanvasbezier3Path.addCurve(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 116.86), controlPoint1: CGPoint(x: frame.minX + 62, y: frame.minY + 129.19), controlPoint2: CGPoint(x: frame.minX + 78.45, y: frame.minY + 123.67))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 114))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 114))
        kMyMoney_iconCanvasbezier3Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier3Path.addClip()
        let kMyMoney_iconCanvasbezier3Bounds: CGRect = kMyMoney_iconCanvasbezier3Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier3Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier3Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier3Bounds.midY + 0 * kMyMoney_iconCanvasbezier3Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier3Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier3Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier3Bounds.midY + 0 * kMyMoney_iconCanvasbezier3Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 3 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval3Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 5.45, y: frame.minY + 102.08, width: 72.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval3Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 4 Drawing
        let kMyMoney_iconCanvasbezier4Path = UIBezierPath()
        kMyMoney_iconCanvasbezier4Path.move(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 111.7))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 114.55))
        kMyMoney_iconCanvasbezier4Path.addCurve(to: CGPoint(x: frame.minX + 41.86, y: frame.minY + 126.88), controlPoint1: CGPoint(x: frame.minX + 5.13, y: frame.minY + 121.36), controlPoint2: CGPoint(x: frame.minX + 21.57, y: frame.minY + 126.88))
        kMyMoney_iconCanvasbezier4Path.addCurve(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 114.55), controlPoint1: CGPoint(x: frame.minX + 62.15, y: frame.minY + 126.88), controlPoint2: CGPoint(x: frame.minX + 78.61, y: frame.minY + 121.36))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 111.7))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 111.7))
        kMyMoney_iconCanvasbezier4Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier4Path.addClip()
        let kMyMoney_iconCanvasbezier4Bounds: CGRect = kMyMoney_iconCanvasbezier4Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier4Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier4Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier4Bounds.midY + -0 * kMyMoney_iconCanvasbezier4Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier4Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier4Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier4Bounds.midY + -0 * kMyMoney_iconCanvasbezier4Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 4 Drawing
        let kMyMoney_iconCanvasoval4Rect = CGRect(x: frame.minX + 5.15, y: frame.minY + 99.43, width: 73.4, height: 24.2)
        let kMyMoney_iconCanvasoval4Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval4Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval4Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval4Rect.midX + 12.71 * kMyMoney_iconCanvasoval4Rect.width / 73.4, y: kMyMoney_iconCanvasoval4Rect.midY + -19.56 * kMyMoney_iconCanvasoval4Rect.height / 24.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval4Rect.midX + 12.71 * kMyMoney_iconCanvasoval4Rect.width / 73.4, y: kMyMoney_iconCanvasoval4Rect.midY + 53.87 * kMyMoney_iconCanvasoval4Rect.height / 24.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 3
        //// kMyMoney_iconCanvas-bezier 5 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier5Path = UIBezierPath()
        kMyMoney_iconCanvasbezier5Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 102))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 104.86))
        kMyMoney_iconCanvasbezier5Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 117.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 111.67), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 117.19))
        kMyMoney_iconCanvasbezier5Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 104.86), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 117.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 111.67))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 102))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 102))
        kMyMoney_iconCanvasbezier5Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier5Path.addClip()
        let kMyMoney_iconCanvasbezier5Bounds: CGRect = kMyMoney_iconCanvasbezier5Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier5Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier5Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier5Bounds.midY + 0 * kMyMoney_iconCanvasbezier5Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier5Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier5Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier5Bounds.midY + 0 * kMyMoney_iconCanvasbezier5Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 5 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval5Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 90.08, width: 72.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval5Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 6 Drawing
        let kMyMoney_iconCanvasbezier6Path = UIBezierPath()
        kMyMoney_iconCanvasbezier6Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 99.7))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 102.55))
        kMyMoney_iconCanvasbezier6Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 114.88), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 109.36), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 114.88))
        kMyMoney_iconCanvasbezier6Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 102.55), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 114.88), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 109.36))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 99.7))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 99.7))
        kMyMoney_iconCanvasbezier6Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier6Path.addClip()
        let kMyMoney_iconCanvasbezier6Bounds: CGRect = kMyMoney_iconCanvasbezier6Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier6Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier6Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier6Bounds.midY + -0 * kMyMoney_iconCanvasbezier6Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier6Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier6Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier6Bounds.midY + -0 * kMyMoney_iconCanvasbezier6Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 6 Drawing
        let kMyMoney_iconCanvasoval6Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 87.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval6Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval6Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval6Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval6Rect.midX + 12.71 * kMyMoney_iconCanvasoval6Rect.width / 73.4, y: kMyMoney_iconCanvasoval6Rect.midY + -20.36 * kMyMoney_iconCanvasoval6Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval6Rect.midX + 12.71 * kMyMoney_iconCanvasoval6Rect.width / 73.4, y: kMyMoney_iconCanvasoval6Rect.midY + 56.1 * kMyMoney_iconCanvasoval6Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 4
        //// kMyMoney_iconCanvas-bezier 7 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier7Path = UIBezierPath()
        kMyMoney_iconCanvasbezier7Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 87))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 89.86))
        kMyMoney_iconCanvasbezier7Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 102.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 96.67), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 102.19))
        kMyMoney_iconCanvasbezier7Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 89.86), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 102.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 96.67))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 87))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 87))
        kMyMoney_iconCanvasbezier7Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier7Path.addClip()
        let kMyMoney_iconCanvasbezier7Bounds: CGRect = kMyMoney_iconCanvasbezier7Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier7Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier7Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier7Bounds.midY + 0 * kMyMoney_iconCanvasbezier7Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier7Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier7Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier7Bounds.midY + 0 * kMyMoney_iconCanvasbezier7Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 7 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval7Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 75.08, width: 72.8, height: 24.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval7Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 8 Drawing
        let kMyMoney_iconCanvasbezier8Path = UIBezierPath()
        kMyMoney_iconCanvasbezier8Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 84.7))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 87.55))
        kMyMoney_iconCanvasbezier8Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 99.88), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 94.36), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 99.88))
        kMyMoney_iconCanvasbezier8Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 87.55), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 99.88), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 94.36))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 84.7))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 84.7))
        kMyMoney_iconCanvasbezier8Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier8Path.addClip()
        let kMyMoney_iconCanvasbezier8Bounds: CGRect = kMyMoney_iconCanvasbezier8Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier8Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier8Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier8Bounds.midY + -0 * kMyMoney_iconCanvasbezier8Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier8Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier8Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier8Bounds.midY + -0 * kMyMoney_iconCanvasbezier8Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 8 Drawing
        let kMyMoney_iconCanvasoval8Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 72.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval8Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval8Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval8Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval8Rect.midX + 12.71 * kMyMoney_iconCanvasoval8Rect.width / 73.4, y: kMyMoney_iconCanvasoval8Rect.midY + -20.36 * kMyMoney_iconCanvasoval8Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval8Rect.midX + 12.71 * kMyMoney_iconCanvasoval8Rect.width / 73.4, y: kMyMoney_iconCanvasoval8Rect.midY + 56.1 * kMyMoney_iconCanvasoval8Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 5
        //// kMyMoney_iconCanvas-bezier 9 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier9Path = UIBezierPath()
        kMyMoney_iconCanvasbezier9Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 74.49))
        kMyMoney_iconCanvasbezier9Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 77.45))
        kMyMoney_iconCanvasbezier9Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 90.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 84.48), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 90.19))
        kMyMoney_iconCanvasbezier9Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 77.45), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 90.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 84.48))
        kMyMoney_iconCanvasbezier9Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 74.49))
        kMyMoney_iconCanvasbezier9Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 74.49))
        kMyMoney_iconCanvasbezier9Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier9Path.addClip()
        let kMyMoney_iconCanvasbezier9Bounds: CGRect = kMyMoney_iconCanvasbezier9Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier9Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier9Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier9Bounds.midY + 0 * kMyMoney_iconCanvasbezier9Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier9Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier9Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier9Bounds.midY + 0 * kMyMoney_iconCanvasbezier9Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 9 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval9Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 62.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval9Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 10 Drawing
        let kMyMoney_iconCanvasbezier10Path = UIBezierPath()
        kMyMoney_iconCanvasbezier10Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 72.11))
        kMyMoney_iconCanvasbezier10Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 75.06))
        kMyMoney_iconCanvasbezier10Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 87.8), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 82.1), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 87.8))
        kMyMoney_iconCanvasbezier10Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 75.06), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 87.8), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 82.1))
        kMyMoney_iconCanvasbezier10Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 72.11))
        kMyMoney_iconCanvasbezier10Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 72.11))
        kMyMoney_iconCanvasbezier10Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier10Path.addClip()
        let kMyMoney_iconCanvasbezier10Bounds: CGRect = kMyMoney_iconCanvasbezier10Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier10Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier10Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier10Bounds.midY + -0 * kMyMoney_iconCanvasbezier10Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier10Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier10Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier10Bounds.midY + -0 * kMyMoney_iconCanvasbezier10Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 10 Drawing
        let kMyMoney_iconCanvasoval10Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 59.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval10Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval10Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval10Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval10Rect.midX + 12.71 * kMyMoney_iconCanvasoval10Rect.width / 73.4, y: kMyMoney_iconCanvasoval10Rect.midY + -20.36 * kMyMoney_iconCanvasoval10Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval10Rect.midX + 12.71 * kMyMoney_iconCanvasoval10Rect.width / 73.4, y: kMyMoney_iconCanvasoval10Rect.midY + 56.1 * kMyMoney_iconCanvasoval10Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 7
        //// kMyMoney_iconCanvas-bezier 11 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier11Path = UIBezierPath()
        kMyMoney_iconCanvasbezier11Path.move(to: CGPoint(x: frame.minX + 19.98, y: frame.minY + 67))
        kMyMoney_iconCanvasbezier11Path.addLine(to: CGPoint(x: frame.minX + 19.98, y: frame.minY + 69.86))
        kMyMoney_iconCanvasbezier11Path.addCurve(to: CGPoint(x: frame.minX + 56.71, y: frame.minY + 82.19), controlPoint1: CGPoint(x: frame.minX + 19.98, y: frame.minY + 76.67), controlPoint2: CGPoint(x: frame.minX + 36.42, y: frame.minY + 82.19))
        kMyMoney_iconCanvasbezier11Path.addCurve(to: CGPoint(x: frame.minX + 93.45, y: frame.minY + 69.86), controlPoint1: CGPoint(x: frame.minX + 77, y: frame.minY + 82.19), controlPoint2: CGPoint(x: frame.minX + 93.45, y: frame.minY + 76.67))
        kMyMoney_iconCanvasbezier11Path.addLine(to: CGPoint(x: frame.minX + 93.45, y: frame.minY + 67))
        kMyMoney_iconCanvasbezier11Path.addLine(to: CGPoint(x: frame.minX + 19.98, y: frame.minY + 67))
        kMyMoney_iconCanvasbezier11Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier11Path.addClip()
        let kMyMoney_iconCanvasbezier11Bounds: CGRect = kMyMoney_iconCanvasbezier11Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier11Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier11Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier11Bounds.midY + 0 * kMyMoney_iconCanvasbezier11Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier11Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier11Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier11Bounds.midY + 0 * kMyMoney_iconCanvasbezier11Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 11 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval11Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 20.45, y: frame.minY + 55.08, width: 72.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval11Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 12 Drawing
        let kMyMoney_iconCanvasbezier12Path = UIBezierPath()
        kMyMoney_iconCanvasbezier12Path.move(to: CGPoint(x: frame.minX + 20.13, y: frame.minY + 64.7))
        kMyMoney_iconCanvasbezier12Path.addLine(to: CGPoint(x: frame.minX + 20.13, y: frame.minY + 67.55))
        kMyMoney_iconCanvasbezier12Path.addCurve(to: CGPoint(x: frame.minX + 56.86, y: frame.minY + 79.88), controlPoint1: CGPoint(x: frame.minX + 20.13, y: frame.minY + 74.36), controlPoint2: CGPoint(x: frame.minX + 36.57, y: frame.minY + 79.88))
        kMyMoney_iconCanvasbezier12Path.addCurve(to: CGPoint(x: frame.minX + 93.61, y: frame.minY + 67.55), controlPoint1: CGPoint(x: frame.minX + 77.15, y: frame.minY + 79.88), controlPoint2: CGPoint(x: frame.minX + 93.61, y: frame.minY + 74.36))
        kMyMoney_iconCanvasbezier12Path.addLine(to: CGPoint(x: frame.minX + 93.61, y: frame.minY + 64.7))
        kMyMoney_iconCanvasbezier12Path.addLine(to: CGPoint(x: frame.minX + 20.13, y: frame.minY + 64.7))
        kMyMoney_iconCanvasbezier12Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier12Path.addClip()
        let kMyMoney_iconCanvasbezier12Bounds: CGRect = kMyMoney_iconCanvasbezier12Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier12Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier12Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier12Bounds.midY + -0 * kMyMoney_iconCanvasbezier12Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier12Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier12Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier12Bounds.midY + -0 * kMyMoney_iconCanvasbezier12Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 12 Drawing
        let kMyMoney_iconCanvasoval12Rect = CGRect(x: frame.minX + 20.15, y: frame.minY + 52.43, width: 73.4, height: 24.2)
        let kMyMoney_iconCanvasoval12Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval12Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval12Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval12Rect.midX + 12.71 * kMyMoney_iconCanvasoval12Rect.width / 73.4, y: kMyMoney_iconCanvasoval12Rect.midY + -19.56 * kMyMoney_iconCanvasoval12Rect.height / 24.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval12Rect.midX + 12.71 * kMyMoney_iconCanvasoval12Rect.width / 73.4, y: kMyMoney_iconCanvasoval12Rect.midY + 53.87 * kMyMoney_iconCanvasoval12Rect.height / 24.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// Text 2 Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 57.3, y: frame.minY + 62.75)
        context.scaleBy(x: 1.2, y: 0.5)

        let text2Rect = CGRect(x: -24.42, y: -16.5, width: 48.83, height: 33)
        let text2TextContent = "4000"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [
            .font: UIFont.systemFont(ofSize: 16.5, weight: .bold),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text2Style,
        ] as [NSAttributedString.Key: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        let text2TextRect: CGRect = CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight)
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: text2TextRect, withAttributes: text2FontAttributes)
        context.restoreGState()
        
        ////// Text 2 Text Inner Shadow
        context.saveGState()
        context.clip(to: text2Rect)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow6.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let text2OpaqueTextShadow = (shadow6.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: shadow6.shadowOffset, blur: shadow6.shadowBlurRadius, color: text2OpaqueTextShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        text2OpaqueTextShadow.setFill()

        let text2InnerShadowFontAttributes = [
            .font: UIFont.systemFont(ofSize: 16.5, weight: .bold),
            .foregroundColor: (shadow6.shadowColor as! UIColor),
            .paragraphStyle: text2Style,
        ] as [NSAttributedString.Key: Any]
        text2TextContent.draw(in: text2TextRect, withAttributes: text2InnerShadowFontAttributes)

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        context.restoreGState()
    }

    @objc dynamic public class func drawMoneyRound7(frame: CGRect = CGRect(x: 0, y: 0, width: 141, height: 157)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let gradientColor25 = UIColor(red: 0.992, green: 0.898, blue: 0.576, alpha: 1.000)
        let gradientColor26 = UIColor(red: 1.000, green: 0.878, blue: 0.529, alpha: 1.000)
        let gradientColor27 = UIColor(red: 1.000, green: 0.902, blue: 0.537, alpha: 1.000)
        let gradientColor28 = UIColor(red: 0.984, green: 0.698, blue: 0.337, alpha: 1.000)
        let gradientColor29 = UIColor(red: 0.643, green: 0.294, blue: 0.047, alpha: 1.000)
        let gradientColor30 = UIColor(red: 0.514, green: 0.196, blue: 0.024, alpha: 1.000)
        let gradientColor31 = UIColor(red: 0.439, green: 0.145, blue: 0.024, alpha: 1.000)
        let gradientColor32 = UIColor(red: 0.486, green: 0.180, blue: 0.035, alpha: 1.000)
        let gradientColor33 = UIColor(red: 0.776, green: 0.408, blue: 0.122, alpha: 1.000)
        let gradientColor34 = UIColor(red: 0.992, green: 0.596, blue: 0.192, alpha: 1.000)
        let gradientColor35 = UIColor(red: 1.000, green: 0.635, blue: 0.208, alpha: 1.000)
        let gradientColor36 = UIColor(red: 0.945, green: 0.533, blue: 0.169, alpha: 1.000)
        let gradientColor37 = UIColor(red: 0.580, green: 0.251, blue: 0.063, alpha: 1.000)
        let gradientColor38 = UIColor(red: 0.427, green: 0.141, blue: 0.020, alpha: 1.000)
        let fillColor4 = UIColor(red: 0.231, green: 0.114, blue: 0.024, alpha: 1.000)
        let shadow6Color = UIColor(red: 0.684, green: 0.571, blue: 0.182, alpha: 1.000)

        //// Gradient Declarations
        let kMyMoney_iconCanvasgbezier36 = CGGradient(colorsSpace: nil, colors: [gradientColor25.cgColor, gradientColor26.cgColor, gradientColor27.cgColor, gradientColor28.cgColor, gradientColor29.cgColor, gradientColor30.cgColor, gradientColor31.cgColor, gradientColor31.cgColor, gradientColor32.cgColor, gradientColor33.cgColor, gradientColor34.cgColor, gradientColor35.cgColor, gradientColor36.cgColor, gradientColor37.cgColor, gradientColor38.cgColor] as CFArray, locations: [0, 0.1, 0.2, 0.28, 0.41, 0.48, 0.55, 0.58, 0.61, 0.66, 0.7, 0.78, 0.85, 0.91, 1])!

        //// Shadow Declarations
        let shadow6 = NSShadow()
        shadow6.shadowColor = shadow6Color
        shadow6.shadowOffset = CGSize(width: 3, height: 3)
        shadow6.shadowBlurRadius = 5

        //// kMyMoney_iconCanvas-group 6
        //// kMyMoney_iconCanvas-bezier124 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier124Path = UIBezierPath()
        kMyMoney_iconCanvasbezier124Path.move(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 137))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 139.86))
        kMyMoney_iconCanvasbezier124Path.addCurve(to: CGPoint(x: frame.minX + 41.71, y: frame.minY + 152.19), controlPoint1: CGPoint(x: frame.minX + 4.98, y: frame.minY + 146.67), controlPoint2: CGPoint(x: frame.minX + 21.42, y: frame.minY + 152.19))
        kMyMoney_iconCanvasbezier124Path.addCurve(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 139.86), controlPoint1: CGPoint(x: frame.minX + 62, y: frame.minY + 152.19), controlPoint2: CGPoint(x: frame.minX + 78.45, y: frame.minY + 146.67))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 137))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 137))
        kMyMoney_iconCanvasbezier124Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier124Path.addClip()
        let kMyMoney_iconCanvasbezier124Bounds: CGRect = kMyMoney_iconCanvasbezier124Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier124Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier124Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier124Bounds.midY + 0 * kMyMoney_iconCanvasbezier124Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier124Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier124Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier124Bounds.midY + 0 * kMyMoney_iconCanvasbezier124Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval67 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval67Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 5.45, y: frame.minY + 125.08, width: 72.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval67Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier125 Drawing
        let kMyMoney_iconCanvasbezier125Path = UIBezierPath()
        kMyMoney_iconCanvasbezier125Path.move(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 134.7))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 137.55))
        kMyMoney_iconCanvasbezier125Path.addCurve(to: CGPoint(x: frame.minX + 41.86, y: frame.minY + 149.88), controlPoint1: CGPoint(x: frame.minX + 5.13, y: frame.minY + 144.36), controlPoint2: CGPoint(x: frame.minX + 21.57, y: frame.minY + 149.88))
        kMyMoney_iconCanvasbezier125Path.addCurve(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 137.55), controlPoint1: CGPoint(x: frame.minX + 62.15, y: frame.minY + 149.88), controlPoint2: CGPoint(x: frame.minX + 78.61, y: frame.minY + 144.36))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 134.7))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 134.7))
        kMyMoney_iconCanvasbezier125Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier125Path.addClip()
        let kMyMoney_iconCanvasbezier125Bounds: CGRect = kMyMoney_iconCanvasbezier125Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier125Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier125Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier125Bounds.midY + -0 * kMyMoney_iconCanvasbezier125Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier125Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier125Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier125Bounds.midY + -0 * kMyMoney_iconCanvasbezier125Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval68 Drawing
        let kMyMoney_iconCanvasoval68Rect = CGRect(x: frame.minX + 5.15, y: frame.minY + 122.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval68Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval68Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval68Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval68Rect.midX + 12.71 * kMyMoney_iconCanvasoval68Rect.width / 73.4, y: kMyMoney_iconCanvasoval68Rect.midY + -20.36 * kMyMoney_iconCanvasoval68Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval68Rect.midX + 12.71 * kMyMoney_iconCanvasoval68Rect.width / 73.4, y: kMyMoney_iconCanvasoval68Rect.midY + 56.1 * kMyMoney_iconCanvasoval68Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group
        //// kMyMoney_iconCanvas-bezier Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezierPath = UIBezierPath()
        kMyMoney_iconCanvasbezierPath.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 129))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 131.86))
        kMyMoney_iconCanvasbezierPath.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 144.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 138.67), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 144.19))
        kMyMoney_iconCanvasbezierPath.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 131.86), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 144.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 138.67))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 129))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 129))
        kMyMoney_iconCanvasbezierPath.close()
        context.saveGState()
        kMyMoney_iconCanvasbezierPath.addClip()
        let kMyMoney_iconCanvasbezierBounds: CGRect = kMyMoney_iconCanvasbezierPath.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezierBounds.midX + -36.73 * kMyMoney_iconCanvasbezierBounds.width / 73.47, y: kMyMoney_iconCanvasbezierBounds.midY + 0 * kMyMoney_iconCanvasbezierBounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezierBounds.midX + 0.1 * kMyMoney_iconCanvasbezierBounds.width / 73.47, y: kMyMoney_iconCanvasbezierBounds.midY + 0 * kMyMoney_iconCanvasbezierBounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasovalPath = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 117.08, width: 72.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasovalPath.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 2 Drawing
        let kMyMoney_iconCanvasbezier2Path = UIBezierPath()
        kMyMoney_iconCanvasbezier2Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 126.7))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 129.55))
        kMyMoney_iconCanvasbezier2Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 141.88), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 136.36), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 141.88))
        kMyMoney_iconCanvasbezier2Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 129.55), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 141.88), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 136.36))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 126.7))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 126.7))
        kMyMoney_iconCanvasbezier2Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier2Path.addClip()
        let kMyMoney_iconCanvasbezier2Bounds: CGRect = kMyMoney_iconCanvasbezier2Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier2Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier2Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier2Bounds.midY + -0 * kMyMoney_iconCanvasbezier2Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier2Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier2Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier2Bounds.midY + -0 * kMyMoney_iconCanvasbezier2Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 2 Drawing
        let kMyMoney_iconCanvasoval2Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 114.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval2Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval2Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval2Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval2Rect.midX + 12.71 * kMyMoney_iconCanvasoval2Rect.width / 73.4, y: kMyMoney_iconCanvasoval2Rect.midY + -20.36 * kMyMoney_iconCanvasoval2Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval2Rect.midX + 12.71 * kMyMoney_iconCanvasoval2Rect.width / 73.4, y: kMyMoney_iconCanvasoval2Rect.midY + 56.1 * kMyMoney_iconCanvasoval2Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 2
        //// kMyMoney_iconCanvas-bezier 3 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier3Path = UIBezierPath()
        kMyMoney_iconCanvasbezier3Path.move(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 114))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 116.86))
        kMyMoney_iconCanvasbezier3Path.addCurve(to: CGPoint(x: frame.minX + 41.71, y: frame.minY + 129.19), controlPoint1: CGPoint(x: frame.minX + 4.98, y: frame.minY + 123.67), controlPoint2: CGPoint(x: frame.minX + 21.42, y: frame.minY + 129.19))
        kMyMoney_iconCanvasbezier3Path.addCurve(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 116.86), controlPoint1: CGPoint(x: frame.minX + 62, y: frame.minY + 129.19), controlPoint2: CGPoint(x: frame.minX + 78.45, y: frame.minY + 123.67))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 114))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 114))
        kMyMoney_iconCanvasbezier3Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier3Path.addClip()
        let kMyMoney_iconCanvasbezier3Bounds: CGRect = kMyMoney_iconCanvasbezier3Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier3Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier3Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier3Bounds.midY + 0 * kMyMoney_iconCanvasbezier3Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier3Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier3Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier3Bounds.midY + 0 * kMyMoney_iconCanvasbezier3Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 3 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval3Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 5.45, y: frame.minY + 102.08, width: 72.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval3Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 4 Drawing
        let kMyMoney_iconCanvasbezier4Path = UIBezierPath()
        kMyMoney_iconCanvasbezier4Path.move(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 111.7))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 114.55))
        kMyMoney_iconCanvasbezier4Path.addCurve(to: CGPoint(x: frame.minX + 41.86, y: frame.minY + 126.88), controlPoint1: CGPoint(x: frame.minX + 5.13, y: frame.minY + 121.36), controlPoint2: CGPoint(x: frame.minX + 21.57, y: frame.minY + 126.88))
        kMyMoney_iconCanvasbezier4Path.addCurve(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 114.55), controlPoint1: CGPoint(x: frame.minX + 62.15, y: frame.minY + 126.88), controlPoint2: CGPoint(x: frame.minX + 78.61, y: frame.minY + 121.36))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 111.7))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 111.7))
        kMyMoney_iconCanvasbezier4Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier4Path.addClip()
        let kMyMoney_iconCanvasbezier4Bounds: CGRect = kMyMoney_iconCanvasbezier4Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier4Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier4Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier4Bounds.midY + -0 * kMyMoney_iconCanvasbezier4Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier4Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier4Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier4Bounds.midY + -0 * kMyMoney_iconCanvasbezier4Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 4 Drawing
        let kMyMoney_iconCanvasoval4Rect = CGRect(x: frame.minX + 5.15, y: frame.minY + 99.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval4Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval4Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval4Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval4Rect.midX + 12.71 * kMyMoney_iconCanvasoval4Rect.width / 73.4, y: kMyMoney_iconCanvasoval4Rect.midY + -20.36 * kMyMoney_iconCanvasoval4Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval4Rect.midX + 12.71 * kMyMoney_iconCanvasoval4Rect.width / 73.4, y: kMyMoney_iconCanvasoval4Rect.midY + 56.1 * kMyMoney_iconCanvasoval4Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 3
        //// kMyMoney_iconCanvas-bezier 5 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier5Path = UIBezierPath()
        kMyMoney_iconCanvasbezier5Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 102))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 104.86))
        kMyMoney_iconCanvasbezier5Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 117.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 111.67), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 117.19))
        kMyMoney_iconCanvasbezier5Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 104.86), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 117.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 111.67))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 102))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 102))
        kMyMoney_iconCanvasbezier5Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier5Path.addClip()
        let kMyMoney_iconCanvasbezier5Bounds: CGRect = kMyMoney_iconCanvasbezier5Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier5Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier5Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier5Bounds.midY + 0 * kMyMoney_iconCanvasbezier5Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier5Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier5Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier5Bounds.midY + 0 * kMyMoney_iconCanvasbezier5Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 5 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval5Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 90.08, width: 72.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval5Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 6 Drawing
        let kMyMoney_iconCanvasbezier6Path = UIBezierPath()
        kMyMoney_iconCanvasbezier6Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 99.7))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 102.55))
        kMyMoney_iconCanvasbezier6Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 114.88), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 109.36), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 114.88))
        kMyMoney_iconCanvasbezier6Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 102.55), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 114.88), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 109.36))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 99.7))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 99.7))
        kMyMoney_iconCanvasbezier6Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier6Path.addClip()
        let kMyMoney_iconCanvasbezier6Bounds: CGRect = kMyMoney_iconCanvasbezier6Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier6Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier6Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier6Bounds.midY + -0 * kMyMoney_iconCanvasbezier6Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier6Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier6Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier6Bounds.midY + -0 * kMyMoney_iconCanvasbezier6Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 6 Drawing
        let kMyMoney_iconCanvasoval6Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 87.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval6Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval6Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval6Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval6Rect.midX + 12.71 * kMyMoney_iconCanvasoval6Rect.width / 73.4, y: kMyMoney_iconCanvasoval6Rect.midY + -20.36 * kMyMoney_iconCanvasoval6Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval6Rect.midX + 12.71 * kMyMoney_iconCanvasoval6Rect.width / 73.4, y: kMyMoney_iconCanvasoval6Rect.midY + 56.1 * kMyMoney_iconCanvasoval6Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 4
        //// kMyMoney_iconCanvas-bezier 7 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier7Path = UIBezierPath()
        kMyMoney_iconCanvasbezier7Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 86.49))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 89.45))
        kMyMoney_iconCanvasbezier7Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 102.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 96.48), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 102.19))
        kMyMoney_iconCanvasbezier7Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 89.45), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 102.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 96.48))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 86.49))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 86.49))
        kMyMoney_iconCanvasbezier7Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier7Path.addClip()
        let kMyMoney_iconCanvasbezier7Bounds: CGRect = kMyMoney_iconCanvasbezier7Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier7Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier7Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier7Bounds.midY + 0 * kMyMoney_iconCanvasbezier7Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier7Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier7Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier7Bounds.midY + 0 * kMyMoney_iconCanvasbezier7Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 7 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval7Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 74.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval7Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 8 Drawing
        let kMyMoney_iconCanvasbezier8Path = UIBezierPath()
        kMyMoney_iconCanvasbezier8Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 84.11))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 87.06))
        kMyMoney_iconCanvasbezier8Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 99.8), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 94.1), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 99.8))
        kMyMoney_iconCanvasbezier8Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 87.06), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 99.8), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 94.1))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 84.11))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 84.11))
        kMyMoney_iconCanvasbezier8Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier8Path.addClip()
        let kMyMoney_iconCanvasbezier8Bounds: CGRect = kMyMoney_iconCanvasbezier8Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier8Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier8Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier8Bounds.midY + -0 * kMyMoney_iconCanvasbezier8Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier8Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier8Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier8Bounds.midY + -0 * kMyMoney_iconCanvasbezier8Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 8 Drawing
        let kMyMoney_iconCanvasoval8Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 71.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval8Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval8Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval8Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval8Rect.midX + 12.71 * kMyMoney_iconCanvasoval8Rect.width / 73.4, y: kMyMoney_iconCanvasoval8Rect.midY + -20.36 * kMyMoney_iconCanvasoval8Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval8Rect.midX + 12.71 * kMyMoney_iconCanvasoval8Rect.width / 73.4, y: kMyMoney_iconCanvasoval8Rect.midY + 56.1 * kMyMoney_iconCanvasoval8Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 5
        //// kMyMoney_iconCanvas-bezier 9 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier9Path = UIBezierPath()
        kMyMoney_iconCanvasbezier9Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 74.49))
        kMyMoney_iconCanvasbezier9Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 77.45))
        kMyMoney_iconCanvasbezier9Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 90.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 84.48), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 90.19))
        kMyMoney_iconCanvasbezier9Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 77.45), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 90.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 84.48))
        kMyMoney_iconCanvasbezier9Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 74.49))
        kMyMoney_iconCanvasbezier9Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 74.49))
        kMyMoney_iconCanvasbezier9Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier9Path.addClip()
        let kMyMoney_iconCanvasbezier9Bounds: CGRect = kMyMoney_iconCanvasbezier9Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier9Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier9Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier9Bounds.midY + 0 * kMyMoney_iconCanvasbezier9Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier9Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier9Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier9Bounds.midY + 0 * kMyMoney_iconCanvasbezier9Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 9 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval9Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 62.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval9Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 10 Drawing
        let kMyMoney_iconCanvasbezier10Path = UIBezierPath()
        kMyMoney_iconCanvasbezier10Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 72.11))
        kMyMoney_iconCanvasbezier10Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 75.06))
        kMyMoney_iconCanvasbezier10Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 87.8), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 82.1), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 87.8))
        kMyMoney_iconCanvasbezier10Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 75.06), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 87.8), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 82.1))
        kMyMoney_iconCanvasbezier10Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 72.11))
        kMyMoney_iconCanvasbezier10Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 72.11))
        kMyMoney_iconCanvasbezier10Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier10Path.addClip()
        let kMyMoney_iconCanvasbezier10Bounds: CGRect = kMyMoney_iconCanvasbezier10Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier10Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier10Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier10Bounds.midY + -0 * kMyMoney_iconCanvasbezier10Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier10Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier10Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier10Bounds.midY + -0 * kMyMoney_iconCanvasbezier10Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 10 Drawing
        let kMyMoney_iconCanvasoval10Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 59.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval10Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval10Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval10Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval10Rect.midX + 12.71 * kMyMoney_iconCanvasoval10Rect.width / 73.4, y: kMyMoney_iconCanvasoval10Rect.midY + -20.36 * kMyMoney_iconCanvasoval10Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval10Rect.midX + 12.71 * kMyMoney_iconCanvasoval10Rect.width / 73.4, y: kMyMoney_iconCanvasoval10Rect.midY + 56.1 * kMyMoney_iconCanvasoval10Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 7
        //// kMyMoney_iconCanvas-bezier 11 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier11Path = UIBezierPath()
        kMyMoney_iconCanvasbezier11Path.move(to: CGPoint(x: frame.minX + 19.98, y: frame.minY + 64.47))
        kMyMoney_iconCanvasbezier11Path.addLine(to: CGPoint(x: frame.minX + 19.98, y: frame.minY + 67.62))
        kMyMoney_iconCanvasbezier11Path.addCurve(to: CGPoint(x: frame.minX + 56.71, y: frame.minY + 81.19), controlPoint1: CGPoint(x: frame.minX + 19.98, y: frame.minY + 75.11), controlPoint2: CGPoint(x: frame.minX + 36.42, y: frame.minY + 81.19))
        kMyMoney_iconCanvasbezier11Path.addCurve(to: CGPoint(x: frame.minX + 93.45, y: frame.minY + 67.62), controlPoint1: CGPoint(x: frame.minX + 77, y: frame.minY + 81.19), controlPoint2: CGPoint(x: frame.minX + 93.45, y: frame.minY + 75.11))
        kMyMoney_iconCanvasbezier11Path.addLine(to: CGPoint(x: frame.minX + 93.45, y: frame.minY + 64.47))
        kMyMoney_iconCanvasbezier11Path.addLine(to: CGPoint(x: frame.minX + 19.98, y: frame.minY + 64.47))
        kMyMoney_iconCanvasbezier11Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier11Path.addClip()
        let kMyMoney_iconCanvasbezier11Bounds: CGRect = kMyMoney_iconCanvasbezier11Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier11Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier11Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier11Bounds.midY + 0 * kMyMoney_iconCanvasbezier11Bounds.height / 16.72),
            end: CGPoint(x: kMyMoney_iconCanvasbezier11Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier11Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier11Bounds.midY + 0 * kMyMoney_iconCanvasbezier11Bounds.height / 16.72),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 11 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval11Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 20.45, y: frame.minY + 52.08, width: 72.8, height: 27.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval11Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 12 Drawing
        let kMyMoney_iconCanvasbezier12Path = UIBezierPath()
        kMyMoney_iconCanvasbezier12Path.move(to: CGPoint(x: frame.minX + 20.13, y: frame.minY + 61.93))
        kMyMoney_iconCanvasbezier12Path.addLine(to: CGPoint(x: frame.minX + 20.13, y: frame.minY + 65.07))
        kMyMoney_iconCanvasbezier12Path.addCurve(to: CGPoint(x: frame.minX + 56.86, y: frame.minY + 78.65), controlPoint1: CGPoint(x: frame.minX + 20.13, y: frame.minY + 72.57), controlPoint2: CGPoint(x: frame.minX + 36.57, y: frame.minY + 78.65))
        kMyMoney_iconCanvasbezier12Path.addCurve(to: CGPoint(x: frame.minX + 93.61, y: frame.minY + 65.07), controlPoint1: CGPoint(x: frame.minX + 77.15, y: frame.minY + 78.65), controlPoint2: CGPoint(x: frame.minX + 93.61, y: frame.minY + 72.57))
        kMyMoney_iconCanvasbezier12Path.addLine(to: CGPoint(x: frame.minX + 93.61, y: frame.minY + 61.93))
        kMyMoney_iconCanvasbezier12Path.addLine(to: CGPoint(x: frame.minX + 20.13, y: frame.minY + 61.93))
        kMyMoney_iconCanvasbezier12Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier12Path.addClip()
        let kMyMoney_iconCanvasbezier12Bounds: CGRect = kMyMoney_iconCanvasbezier12Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier12Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier12Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier12Bounds.midY + -0 * kMyMoney_iconCanvasbezier12Bounds.height / 16.72),
            end: CGPoint(x: kMyMoney_iconCanvasbezier12Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier12Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier12Bounds.midY + -0 * kMyMoney_iconCanvasbezier12Bounds.height / 16.72),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 12 Drawing
        let kMyMoney_iconCanvasoval12Rect = CGRect(x: frame.minX + 20.15, y: frame.minY + 48.43, width: 73.4, height: 27.2)
        let kMyMoney_iconCanvasoval12Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval12Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval12Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval12Rect.midX + 12.71 * kMyMoney_iconCanvasoval12Rect.width / 73.4, y: kMyMoney_iconCanvasoval12Rect.midY + -21.98 * kMyMoney_iconCanvasoval12Rect.height / 27.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval12Rect.midX + 12.71 * kMyMoney_iconCanvasoval12Rect.width / 73.4, y: kMyMoney_iconCanvasoval12Rect.midY + 60.55 * kMyMoney_iconCanvasoval12Rect.height / 27.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 8
        //// kMyMoney_iconCanvas-bezier 13 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier13Path = UIBezierPath()
        kMyMoney_iconCanvasbezier13Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 56))
        kMyMoney_iconCanvasbezier13Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 58.86))
        kMyMoney_iconCanvasbezier13Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 71.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 65.67), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 71.19))
        kMyMoney_iconCanvasbezier13Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 58.86), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 71.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 65.67))
        kMyMoney_iconCanvasbezier13Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 56))
        kMyMoney_iconCanvasbezier13Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 56))
        kMyMoney_iconCanvasbezier13Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier13Path.addClip()
        let kMyMoney_iconCanvasbezier13Bounds: CGRect = kMyMoney_iconCanvasbezier13Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier13Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier13Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier13Bounds.midY + 0 * kMyMoney_iconCanvasbezier13Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier13Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier13Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier13Bounds.midY + 0 * kMyMoney_iconCanvasbezier13Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 13 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval13Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 44.08, width: 72.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval13Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 14 Drawing
        let kMyMoney_iconCanvasbezier14Path = UIBezierPath()
        kMyMoney_iconCanvasbezier14Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 53.7))
        kMyMoney_iconCanvasbezier14Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 56.55))
        kMyMoney_iconCanvasbezier14Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 68.88), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 63.36), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 68.88))
        kMyMoney_iconCanvasbezier14Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 56.55), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 68.88), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 63.36))
        kMyMoney_iconCanvasbezier14Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 53.7))
        kMyMoney_iconCanvasbezier14Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 53.7))
        kMyMoney_iconCanvasbezier14Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier14Path.addClip()
        let kMyMoney_iconCanvasbezier14Bounds: CGRect = kMyMoney_iconCanvasbezier14Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier14Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier14Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier14Bounds.midY + -0 * kMyMoney_iconCanvasbezier14Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier14Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier14Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier14Bounds.midY + -0 * kMyMoney_iconCanvasbezier14Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 14 Drawing
        let kMyMoney_iconCanvasoval14Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 41.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval14Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval14Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval14Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval14Rect.midX + 12.71 * kMyMoney_iconCanvasoval14Rect.width / 73.4, y: kMyMoney_iconCanvasoval14Rect.midY + -20.36 * kMyMoney_iconCanvasoval14Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval14Rect.midX + 12.71 * kMyMoney_iconCanvasoval14Rect.width / 73.4, y: kMyMoney_iconCanvasoval14Rect.midY + 56.1 * kMyMoney_iconCanvasoval14Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// Text Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 48.3, y: frame.minY + 53.75)
        context.scaleBy(x: 1.2, y: 0.5)

        let textRect = CGRect(x: -24.42, y: -16.5, width: 48.83, height: 33)
        let textTextContent = "8000"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            .font: UIFont.systemFont(ofSize: 16.5, weight: .bold),
            .foregroundColor: UIColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        let textTextRect: CGRect = CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: textTextRect, withAttributes: textFontAttributes)
        context.restoreGState()
        
        ////// Text Text Inner Shadow
        context.saveGState()
        context.clip(to: textRect)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow6.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let textOpaqueTextShadow = (shadow6.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: shadow6.shadowOffset, blur: shadow6.shadowBlurRadius, color: textOpaqueTextShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        textOpaqueTextShadow.setFill()

        let textInnerShadowFontAttributes = [
            .font: UIFont.systemFont(ofSize: 16.5, weight: .bold),
            .foregroundColor: (shadow6.shadowColor as! UIColor),
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]
        textTextContent.draw(in: textTextRect, withAttributes: textInnerShadowFontAttributes)

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        context.restoreGState()
    }

    @objc dynamic public class func drawMoneyRound8(frame: CGRect = CGRect(x: 0, y: 0, width: 141, height: 157)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let gradientColor25 = UIColor(red: 0.992, green: 0.898, blue: 0.576, alpha: 1.000)
        let gradientColor26 = UIColor(red: 1.000, green: 0.878, blue: 0.529, alpha: 1.000)
        let gradientColor27 = UIColor(red: 1.000, green: 0.902, blue: 0.537, alpha: 1.000)
        let gradientColor28 = UIColor(red: 0.984, green: 0.698, blue: 0.337, alpha: 1.000)
        let gradientColor29 = UIColor(red: 0.643, green: 0.294, blue: 0.047, alpha: 1.000)
        let gradientColor30 = UIColor(red: 0.514, green: 0.196, blue: 0.024, alpha: 1.000)
        let gradientColor31 = UIColor(red: 0.439, green: 0.145, blue: 0.024, alpha: 1.000)
        let gradientColor32 = UIColor(red: 0.486, green: 0.180, blue: 0.035, alpha: 1.000)
        let gradientColor33 = UIColor(red: 0.776, green: 0.408, blue: 0.122, alpha: 1.000)
        let gradientColor34 = UIColor(red: 0.992, green: 0.596, blue: 0.192, alpha: 1.000)
        let gradientColor35 = UIColor(red: 1.000, green: 0.635, blue: 0.208, alpha: 1.000)
        let gradientColor36 = UIColor(red: 0.945, green: 0.533, blue: 0.169, alpha: 1.000)
        let gradientColor37 = UIColor(red: 0.580, green: 0.251, blue: 0.063, alpha: 1.000)
        let gradientColor38 = UIColor(red: 0.427, green: 0.141, blue: 0.020, alpha: 1.000)
        let fillColor4 = UIColor(red: 0.231, green: 0.114, blue: 0.024, alpha: 1.000)
        let shadow6Color = UIColor(red: 0.684, green: 0.571, blue: 0.182, alpha: 1.000)

        //// Gradient Declarations
        let kMyMoney_iconCanvasgbezier36 = CGGradient(colorsSpace: nil, colors: [gradientColor25.cgColor, gradientColor26.cgColor, gradientColor27.cgColor, gradientColor28.cgColor, gradientColor29.cgColor, gradientColor30.cgColor, gradientColor31.cgColor, gradientColor31.cgColor, gradientColor32.cgColor, gradientColor33.cgColor, gradientColor34.cgColor, gradientColor35.cgColor, gradientColor36.cgColor, gradientColor37.cgColor, gradientColor38.cgColor] as CFArray, locations: [0, 0.1, 0.2, 0.28, 0.41, 0.48, 0.55, 0.58, 0.61, 0.66, 0.7, 0.78, 0.85, 0.91, 1])!

        //// Shadow Declarations
        let shadow6 = NSShadow()
        shadow6.shadowColor = shadow6Color
        shadow6.shadowOffset = CGSize(width: 3, height: 3)
        shadow6.shadowBlurRadius = 5

        //// kMyMoney_iconCanvas-group 6
        //// kMyMoney_iconCanvas-bezier124 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier124Path = UIBezierPath()
        kMyMoney_iconCanvasbezier124Path.move(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 135.98))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 139.03))
        kMyMoney_iconCanvasbezier124Path.addCurve(to: CGPoint(x: frame.minX + 41.71, y: frame.minY + 152.19), controlPoint1: CGPoint(x: frame.minX + 4.98, y: frame.minY + 146.3), controlPoint2: CGPoint(x: frame.minX + 21.42, y: frame.minY + 152.19))
        kMyMoney_iconCanvasbezier124Path.addCurve(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 139.03), controlPoint1: CGPoint(x: frame.minX + 62, y: frame.minY + 152.19), controlPoint2: CGPoint(x: frame.minX + 78.45, y: frame.minY + 146.3))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 135.98))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 135.98))
        kMyMoney_iconCanvasbezier124Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier124Path.addClip()
        let kMyMoney_iconCanvasbezier124Bounds: CGRect = kMyMoney_iconCanvasbezier124Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier124Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier124Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier124Bounds.midY + 0 * kMyMoney_iconCanvasbezier124Bounds.height / 16.21),
            end: CGPoint(x: kMyMoney_iconCanvasbezier124Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier124Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier124Bounds.midY + 0 * kMyMoney_iconCanvasbezier124Bounds.height / 16.21),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval67 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval67Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 5.45, y: frame.minY + 124.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval67Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier125 Drawing
        let kMyMoney_iconCanvasbezier125Path = UIBezierPath()
        kMyMoney_iconCanvasbezier125Path.move(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 133.52))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 136.57))
        kMyMoney_iconCanvasbezier125Path.addCurve(to: CGPoint(x: frame.minX + 41.86, y: frame.minY + 149.73), controlPoint1: CGPoint(x: frame.minX + 5.13, y: frame.minY + 143.83), controlPoint2: CGPoint(x: frame.minX + 21.57, y: frame.minY + 149.73))
        kMyMoney_iconCanvasbezier125Path.addCurve(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 136.57), controlPoint1: CGPoint(x: frame.minX + 62.15, y: frame.minY + 149.73), controlPoint2: CGPoint(x: frame.minX + 78.61, y: frame.minY + 143.83))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 133.52))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 133.52))
        kMyMoney_iconCanvasbezier125Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier125Path.addClip()
        let kMyMoney_iconCanvasbezier125Bounds: CGRect = kMyMoney_iconCanvasbezier125Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier125Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier125Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier125Bounds.midY + -0 * kMyMoney_iconCanvasbezier125Bounds.height / 16.21),
            end: CGPoint(x: kMyMoney_iconCanvasbezier125Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier125Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier125Bounds.midY + -0 * kMyMoney_iconCanvasbezier125Bounds.height / 16.21),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval68 Drawing
        let kMyMoney_iconCanvasoval68Rect = CGRect(x: frame.minX + 5.15, y: frame.minY + 120.43, width: 73.4, height: 26.2)
        let kMyMoney_iconCanvasoval68Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval68Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval68Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval68Rect.midX + 12.71 * kMyMoney_iconCanvasoval68Rect.width / 73.4, y: kMyMoney_iconCanvasoval68Rect.midY + -21.17 * kMyMoney_iconCanvasoval68Rect.height / 26.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval68Rect.midX + 12.71 * kMyMoney_iconCanvasoval68Rect.width / 73.4, y: kMyMoney_iconCanvasoval68Rect.midY + 58.33 * kMyMoney_iconCanvasoval68Rect.height / 26.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 10
        //// kMyMoney_iconCanvas-bezier89 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier89Path = UIBezierPath()
        kMyMoney_iconCanvasbezier89Path.move(to: CGPoint(x: frame.minX + 70.98, y: frame.minY + 112.98))
        kMyMoney_iconCanvasbezier89Path.addLine(to: CGPoint(x: frame.minX + 70.98, y: frame.minY + 116.03))
        kMyMoney_iconCanvasbezier89Path.addCurve(to: CGPoint(x: frame.minX + 102.22, y: frame.minY + 129.19), controlPoint1: CGPoint(x: frame.minX + 70.98, y: frame.minY + 123.3), controlPoint2: CGPoint(x: frame.minX + 84.96, y: frame.minY + 129.19))
        kMyMoney_iconCanvasbezier89Path.addCurve(to: CGPoint(x: frame.minX + 133.47, y: frame.minY + 116.03), controlPoint1: CGPoint(x: frame.minX + 119.48, y: frame.minY + 129.19), controlPoint2: CGPoint(x: frame.minX + 133.47, y: frame.minY + 123.3))
        kMyMoney_iconCanvasbezier89Path.addLine(to: CGPoint(x: frame.minX + 133.47, y: frame.minY + 112.98))
        kMyMoney_iconCanvasbezier89Path.addLine(to: CGPoint(x: frame.minX + 70.98, y: frame.minY + 112.98))
        kMyMoney_iconCanvasbezier89Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier89Path.addClip()
        let kMyMoney_iconCanvasbezier89Bounds: CGRect = kMyMoney_iconCanvasbezier89Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier89Bounds.midX + -31.24 * kMyMoney_iconCanvasbezier89Bounds.width / 62.49, y: kMyMoney_iconCanvasbezier89Bounds.midY + 0 * kMyMoney_iconCanvasbezier89Bounds.height / 16.21),
            end: CGPoint(x: kMyMoney_iconCanvasbezier89Bounds.midX + 0.09 * kMyMoney_iconCanvasbezier89Bounds.width / 62.49, y: kMyMoney_iconCanvasbezier89Bounds.midY + 0 * kMyMoney_iconCanvasbezier89Bounds.height / 16.21),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 17 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval17Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 71.45, y: frame.minY + 100.08, width: 61.8, height: 27.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval17Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier128 Drawing
        let kMyMoney_iconCanvasbezier128Path = UIBezierPath()
        kMyMoney_iconCanvasbezier128Path.move(to: CGPoint(x: frame.minX + 71.11, y: frame.minY + 110.52))
        kMyMoney_iconCanvasbezier128Path.addLine(to: CGPoint(x: frame.minX + 71.11, y: frame.minY + 113.57))
        kMyMoney_iconCanvasbezier128Path.addCurve(to: CGPoint(x: frame.minX + 102.35, y: frame.minY + 126.73), controlPoint1: CGPoint(x: frame.minX + 71.11, y: frame.minY + 120.83), controlPoint2: CGPoint(x: frame.minX + 85.09, y: frame.minY + 126.73))
        kMyMoney_iconCanvasbezier128Path.addCurve(to: CGPoint(x: frame.minX + 133.61, y: frame.minY + 113.57), controlPoint1: CGPoint(x: frame.minX + 119.61, y: frame.minY + 126.73), controlPoint2: CGPoint(x: frame.minX + 133.61, y: frame.minY + 120.83))
        kMyMoney_iconCanvasbezier128Path.addLine(to: CGPoint(x: frame.minX + 133.61, y: frame.minY + 110.52))
        kMyMoney_iconCanvasbezier128Path.addLine(to: CGPoint(x: frame.minX + 71.11, y: frame.minY + 110.52))
        kMyMoney_iconCanvasbezier128Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier128Path.addClip()
        let kMyMoney_iconCanvasbezier128Bounds: CGRect = kMyMoney_iconCanvasbezier128Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier128Bounds.midX + -31.25 * kMyMoney_iconCanvasbezier128Bounds.width / 62.5, y: kMyMoney_iconCanvasbezier128Bounds.midY + -0 * kMyMoney_iconCanvasbezier128Bounds.height / 16.22),
            end: CGPoint(x: kMyMoney_iconCanvasbezier128Bounds.midX + 0.09 * kMyMoney_iconCanvasbezier128Bounds.width / 62.5, y: kMyMoney_iconCanvasbezier128Bounds.midY + -0 * kMyMoney_iconCanvasbezier128Bounds.height / 16.22),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval71 Drawing
        let kMyMoney_iconCanvasoval71Rect = CGRect(x: frame.minX + 71.15, y: frame.minY + 97.43, width: 62.4, height: 26.2)
        let kMyMoney_iconCanvasoval71Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval71Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval71Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval71Rect.midX + 10.8 * kMyMoney_iconCanvasoval71Rect.width / 62.4, y: kMyMoney_iconCanvasoval71Rect.midY + -21.17 * kMyMoney_iconCanvasoval71Rect.height / 26.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval71Rect.midX + 10.8 * kMyMoney_iconCanvasoval71Rect.width / 62.4, y: kMyMoney_iconCanvasoval71Rect.midY + 58.32 * kMyMoney_iconCanvasoval71Rect.height / 26.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 11
        //// kMyMoney_iconCanvas-bezier126 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier126Path = UIBezierPath()
        kMyMoney_iconCanvasbezier126Path.move(to: CGPoint(x: frame.minX + 67.98, y: frame.minY + 105))
        kMyMoney_iconCanvasbezier126Path.addLine(to: CGPoint(x: frame.minX + 67.98, y: frame.minY + 107.86))
        kMyMoney_iconCanvasbezier126Path.addCurve(to: CGPoint(x: frame.minX + 99.22, y: frame.minY + 120.19), controlPoint1: CGPoint(x: frame.minX + 67.98, y: frame.minY + 114.67), controlPoint2: CGPoint(x: frame.minX + 81.96, y: frame.minY + 120.19))
        kMyMoney_iconCanvasbezier126Path.addCurve(to: CGPoint(x: frame.minX + 130.47, y: frame.minY + 107.86), controlPoint1: CGPoint(x: frame.minX + 116.48, y: frame.minY + 120.19), controlPoint2: CGPoint(x: frame.minX + 130.47, y: frame.minY + 114.67))
        kMyMoney_iconCanvasbezier126Path.addLine(to: CGPoint(x: frame.minX + 130.47, y: frame.minY + 105))
        kMyMoney_iconCanvasbezier126Path.addLine(to: CGPoint(x: frame.minX + 67.98, y: frame.minY + 105))
        kMyMoney_iconCanvasbezier126Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier126Path.addClip()
        let kMyMoney_iconCanvasbezier126Bounds: CGRect = kMyMoney_iconCanvasbezier126Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier126Bounds.midX + -31.24 * kMyMoney_iconCanvasbezier126Bounds.width / 62.49, y: kMyMoney_iconCanvasbezier126Bounds.midY + 0 * kMyMoney_iconCanvasbezier126Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier126Bounds.midX + 0.09 * kMyMoney_iconCanvasbezier126Bounds.width / 62.49, y: kMyMoney_iconCanvasbezier126Bounds.midY + 0 * kMyMoney_iconCanvasbezier126Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval69 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval69Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 68.45, y: frame.minY + 93.08, width: 61.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval69Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier127 Drawing
        let kMyMoney_iconCanvasbezier127Path = UIBezierPath()
        kMyMoney_iconCanvasbezier127Path.move(to: CGPoint(x: frame.minX + 68.11, y: frame.minY + 102.69))
        kMyMoney_iconCanvasbezier127Path.addLine(to: CGPoint(x: frame.minX + 68.11, y: frame.minY + 105.56))
        kMyMoney_iconCanvasbezier127Path.addCurve(to: CGPoint(x: frame.minX + 99.35, y: frame.minY + 117.89), controlPoint1: CGPoint(x: frame.minX + 68.11, y: frame.minY + 112.36), controlPoint2: CGPoint(x: frame.minX + 82.09, y: frame.minY + 117.89))
        kMyMoney_iconCanvasbezier127Path.addCurve(to: CGPoint(x: frame.minX + 130.61, y: frame.minY + 105.56), controlPoint1: CGPoint(x: frame.minX + 116.61, y: frame.minY + 117.89), controlPoint2: CGPoint(x: frame.minX + 130.61, y: frame.minY + 112.36))
        kMyMoney_iconCanvasbezier127Path.addLine(to: CGPoint(x: frame.minX + 130.61, y: frame.minY + 102.69))
        kMyMoney_iconCanvasbezier127Path.addLine(to: CGPoint(x: frame.minX + 68.11, y: frame.minY + 102.69))
        kMyMoney_iconCanvasbezier127Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier127Path.addClip()
        let kMyMoney_iconCanvasbezier127Bounds: CGRect = kMyMoney_iconCanvasbezier127Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier127Bounds.midX + -31.25 * kMyMoney_iconCanvasbezier127Bounds.width / 62.5, y: kMyMoney_iconCanvasbezier127Bounds.midY + -0 * kMyMoney_iconCanvasbezier127Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier127Bounds.midX + 0.09 * kMyMoney_iconCanvasbezier127Bounds.width / 62.5, y: kMyMoney_iconCanvasbezier127Bounds.midY + -0 * kMyMoney_iconCanvasbezier127Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval70 Drawing
        let kMyMoney_iconCanvasoval70Rect = CGRect(x: frame.minX + 68.15, y: frame.minY + 90.43, width: 62.4, height: 25.2)
        let kMyMoney_iconCanvasoval70Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval70Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval70Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval70Rect.midX + 10.8 * kMyMoney_iconCanvasoval70Rect.width / 62.4, y: kMyMoney_iconCanvasoval70Rect.midY + -20.36 * kMyMoney_iconCanvasoval70Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval70Rect.midX + 10.8 * kMyMoney_iconCanvasoval70Rect.width / 62.4, y: kMyMoney_iconCanvasoval70Rect.midY + 56.1 * kMyMoney_iconCanvasoval70Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group
        //// kMyMoney_iconCanvas-bezier Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezierPath = UIBezierPath()
        kMyMoney_iconCanvasbezierPath.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 127.47))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 130.62))
        kMyMoney_iconCanvasbezierPath.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 144.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 138.11), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 144.19))
        kMyMoney_iconCanvasbezierPath.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 130.62), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 144.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 138.11))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 127.47))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 127.47))
        kMyMoney_iconCanvasbezierPath.close()
        context.saveGState()
        kMyMoney_iconCanvasbezierPath.addClip()
        let kMyMoney_iconCanvasbezierBounds: CGRect = kMyMoney_iconCanvasbezierPath.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezierBounds.midX + -36.73 * kMyMoney_iconCanvasbezierBounds.width / 73.47, y: kMyMoney_iconCanvasbezierBounds.midY + 0 * kMyMoney_iconCanvasbezierBounds.height / 16.72),
            end: CGPoint(x: kMyMoney_iconCanvasbezierBounds.midX + 0.1 * kMyMoney_iconCanvasbezierBounds.width / 73.47, y: kMyMoney_iconCanvasbezierBounds.midY + 0 * kMyMoney_iconCanvasbezierBounds.height / 16.72),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasovalPath = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 115.08, width: 72.8, height: 27.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasovalPath.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 2 Drawing
        let kMyMoney_iconCanvasbezier2Path = UIBezierPath()
        kMyMoney_iconCanvasbezier2Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 124.93))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 128.07))
        kMyMoney_iconCanvasbezier2Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 141.65), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 135.57), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 141.65))
        kMyMoney_iconCanvasbezier2Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 128.07), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 141.65), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 135.57))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 124.93))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 124.93))
        kMyMoney_iconCanvasbezier2Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier2Path.addClip()
        let kMyMoney_iconCanvasbezier2Bounds: CGRect = kMyMoney_iconCanvasbezier2Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier2Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier2Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier2Bounds.midY + -0 * kMyMoney_iconCanvasbezier2Bounds.height / 16.72),
            end: CGPoint(x: kMyMoney_iconCanvasbezier2Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier2Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier2Bounds.midY + -0 * kMyMoney_iconCanvasbezier2Bounds.height / 16.72),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 2 Drawing
        let kMyMoney_iconCanvasoval2Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 111.43, width: 73.4, height: 27.2)
        let kMyMoney_iconCanvasoval2Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval2Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval2Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval2Rect.midX + 12.71 * kMyMoney_iconCanvasoval2Rect.width / 73.4, y: kMyMoney_iconCanvasoval2Rect.midY + -21.98 * kMyMoney_iconCanvasoval2Rect.height / 27.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval2Rect.midX + 12.71 * kMyMoney_iconCanvasoval2Rect.width / 73.4, y: kMyMoney_iconCanvasoval2Rect.midY + 60.55 * kMyMoney_iconCanvasoval2Rect.height / 27.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 2
        //// kMyMoney_iconCanvas-bezier 3 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier3Path = UIBezierPath()
        kMyMoney_iconCanvasbezier3Path.move(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 112.98))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 116.03))
        kMyMoney_iconCanvasbezier3Path.addCurve(to: CGPoint(x: frame.minX + 41.71, y: frame.minY + 129.19), controlPoint1: CGPoint(x: frame.minX + 4.98, y: frame.minY + 123.3), controlPoint2: CGPoint(x: frame.minX + 21.42, y: frame.minY + 129.19))
        kMyMoney_iconCanvasbezier3Path.addCurve(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 116.03), controlPoint1: CGPoint(x: frame.minX + 62, y: frame.minY + 129.19), controlPoint2: CGPoint(x: frame.minX + 78.45, y: frame.minY + 123.3))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 112.98))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 112.98))
        kMyMoney_iconCanvasbezier3Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier3Path.addClip()
        let kMyMoney_iconCanvasbezier3Bounds: CGRect = kMyMoney_iconCanvasbezier3Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier3Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier3Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier3Bounds.midY + 0 * kMyMoney_iconCanvasbezier3Bounds.height / 16.21),
            end: CGPoint(x: kMyMoney_iconCanvasbezier3Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier3Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier3Bounds.midY + 0 * kMyMoney_iconCanvasbezier3Bounds.height / 16.21),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 3 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval3Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 5.45, y: frame.minY + 101.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval3Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 4 Drawing
        let kMyMoney_iconCanvasbezier4Path = UIBezierPath()
        kMyMoney_iconCanvasbezier4Path.move(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 110.52))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 113.57))
        kMyMoney_iconCanvasbezier4Path.addCurve(to: CGPoint(x: frame.minX + 41.86, y: frame.minY + 126.73), controlPoint1: CGPoint(x: frame.minX + 5.13, y: frame.minY + 120.83), controlPoint2: CGPoint(x: frame.minX + 21.57, y: frame.minY + 126.73))
        kMyMoney_iconCanvasbezier4Path.addCurve(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 113.57), controlPoint1: CGPoint(x: frame.minX + 62.15, y: frame.minY + 126.73), controlPoint2: CGPoint(x: frame.minX + 78.61, y: frame.minY + 120.83))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 110.52))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 110.52))
        kMyMoney_iconCanvasbezier4Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier4Path.addClip()
        let kMyMoney_iconCanvasbezier4Bounds: CGRect = kMyMoney_iconCanvasbezier4Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier4Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier4Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier4Bounds.midY + -0 * kMyMoney_iconCanvasbezier4Bounds.height / 16.21),
            end: CGPoint(x: kMyMoney_iconCanvasbezier4Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier4Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier4Bounds.midY + -0 * kMyMoney_iconCanvasbezier4Bounds.height / 16.21),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 4 Drawing
        let kMyMoney_iconCanvasoval4Rect = CGRect(x: frame.minX + 5.15, y: frame.minY + 97.43, width: 73.4, height: 26.2)
        let kMyMoney_iconCanvasoval4Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval4Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval4Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval4Rect.midX + 12.71 * kMyMoney_iconCanvasoval4Rect.width / 73.4, y: kMyMoney_iconCanvasoval4Rect.midY + -21.17 * kMyMoney_iconCanvasoval4Rect.height / 26.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval4Rect.midX + 12.71 * kMyMoney_iconCanvasoval4Rect.width / 73.4, y: kMyMoney_iconCanvasoval4Rect.midY + 58.33 * kMyMoney_iconCanvasoval4Rect.height / 26.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 3
        //// kMyMoney_iconCanvas-bezier 5 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier5Path = UIBezierPath()
        kMyMoney_iconCanvasbezier5Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 99.45))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 102.79))
        kMyMoney_iconCanvasbezier5Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 117.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 110.74), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 117.19))
        kMyMoney_iconCanvasbezier5Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 102.79), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 117.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 110.74))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 99.45))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 99.45))
        kMyMoney_iconCanvasbezier5Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier5Path.addClip()
        let kMyMoney_iconCanvasbezier5Bounds: CGRect = kMyMoney_iconCanvasbezier5Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier5Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier5Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier5Bounds.midY + 0 * kMyMoney_iconCanvasbezier5Bounds.height / 17.74),
            end: CGPoint(x: kMyMoney_iconCanvasbezier5Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier5Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier5Bounds.midY + 0 * kMyMoney_iconCanvasbezier5Bounds.height / 17.74),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 5 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval5Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 86.08, width: 72.8, height: 28.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval5Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 6 Drawing
        let kMyMoney_iconCanvasbezier6Path = UIBezierPath()
        kMyMoney_iconCanvasbezier6Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 96.76))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 100.09))
        kMyMoney_iconCanvasbezier6Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 114.49), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 108.04), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 114.49))
        kMyMoney_iconCanvasbezier6Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 100.09), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 114.49), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 108.04))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 96.76))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 96.76))
        kMyMoney_iconCanvasbezier6Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier6Path.addClip()
        let kMyMoney_iconCanvasbezier6Bounds: CGRect = kMyMoney_iconCanvasbezier6Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier6Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier6Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier6Bounds.midY + -0 * kMyMoney_iconCanvasbezier6Bounds.height / 17.74),
            end: CGPoint(x: kMyMoney_iconCanvasbezier6Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier6Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier6Bounds.midY + -0 * kMyMoney_iconCanvasbezier6Bounds.height / 17.74),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 6 Drawing
        let kMyMoney_iconCanvasoval6Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 82.43, width: 73.4, height: 29.2)
        let kMyMoney_iconCanvasoval6Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval6Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval6Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval6Rect.midX + 12.71 * kMyMoney_iconCanvasoval6Rect.width / 73.4, y: kMyMoney_iconCanvasoval6Rect.midY + -23.6 * kMyMoney_iconCanvasoval6Rect.height / 29.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval6Rect.midX + 12.71 * kMyMoney_iconCanvasoval6Rect.width / 73.4, y: kMyMoney_iconCanvasoval6Rect.midY + 65 * kMyMoney_iconCanvasoval6Rect.height / 29.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 4
        //// kMyMoney_iconCanvas-bezier 7 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier7Path = UIBezierPath()
        kMyMoney_iconCanvasbezier7Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 86.49))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 89.45))
        kMyMoney_iconCanvasbezier7Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 102.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 96.48), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 102.19))
        kMyMoney_iconCanvasbezier7Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 89.45), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 102.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 96.48))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 86.49))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 86.49))
        kMyMoney_iconCanvasbezier7Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier7Path.addClip()
        let kMyMoney_iconCanvasbezier7Bounds: CGRect = kMyMoney_iconCanvasbezier7Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier7Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier7Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier7Bounds.midY + 0 * kMyMoney_iconCanvasbezier7Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier7Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier7Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier7Bounds.midY + 0 * kMyMoney_iconCanvasbezier7Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 7 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval7Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 74.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval7Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 8 Drawing
        let kMyMoney_iconCanvasbezier8Path = UIBezierPath()
        kMyMoney_iconCanvasbezier8Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 84.11))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 87.06))
        kMyMoney_iconCanvasbezier8Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 99.8), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 94.1), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 99.8))
        kMyMoney_iconCanvasbezier8Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 87.06), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 99.8), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 94.1))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 84.11))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 84.11))
        kMyMoney_iconCanvasbezier8Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier8Path.addClip()
        let kMyMoney_iconCanvasbezier8Bounds: CGRect = kMyMoney_iconCanvasbezier8Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier8Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier8Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier8Bounds.midY + -0 * kMyMoney_iconCanvasbezier8Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier8Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier8Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier8Bounds.midY + -0 * kMyMoney_iconCanvasbezier8Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 8 Drawing
        let kMyMoney_iconCanvasoval8Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 71.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval8Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval8Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval8Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval8Rect.midX + 12.71 * kMyMoney_iconCanvasoval8Rect.width / 73.4, y: kMyMoney_iconCanvasoval8Rect.midY + -20.36 * kMyMoney_iconCanvasoval8Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval8Rect.midX + 12.71 * kMyMoney_iconCanvasoval8Rect.width / 73.4, y: kMyMoney_iconCanvasoval8Rect.midY + 56.1 * kMyMoney_iconCanvasoval8Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 5
        //// kMyMoney_iconCanvas-bezier 9 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier9Path = UIBezierPath()
        kMyMoney_iconCanvasbezier9Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 75.51))
        kMyMoney_iconCanvasbezier9Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 78.27))
        kMyMoney_iconCanvasbezier9Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 90.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 84.85), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 90.19))
        kMyMoney_iconCanvasbezier9Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 78.27), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 90.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 84.85))
        kMyMoney_iconCanvasbezier9Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 75.51))
        kMyMoney_iconCanvasbezier9Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 75.51))
        kMyMoney_iconCanvasbezier9Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier9Path.addClip()
        let kMyMoney_iconCanvasbezier9Bounds: CGRect = kMyMoney_iconCanvasbezier9Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier9Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier9Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier9Bounds.midY + 0 * kMyMoney_iconCanvasbezier9Bounds.height / 14.68),
            end: CGPoint(x: kMyMoney_iconCanvasbezier9Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier9Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier9Bounds.midY + 0 * kMyMoney_iconCanvasbezier9Bounds.height / 14.68),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 9 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval9Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 64.08, width: 72.8, height: 24.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval9Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 10 Drawing
        let kMyMoney_iconCanvasbezier10Path = UIBezierPath()
        kMyMoney_iconCanvasbezier10Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 73.28))
        kMyMoney_iconCanvasbezier10Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 76.04))
        kMyMoney_iconCanvasbezier10Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 87.96), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 82.62), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 87.96))
        kMyMoney_iconCanvasbezier10Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 76.04), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 87.96), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 82.62))
        kMyMoney_iconCanvasbezier10Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 73.28))
        kMyMoney_iconCanvasbezier10Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 73.28))
        kMyMoney_iconCanvasbezier10Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier10Path.addClip()
        let kMyMoney_iconCanvasbezier10Bounds: CGRect = kMyMoney_iconCanvasbezier10Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier10Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier10Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier10Bounds.midY + -0 * kMyMoney_iconCanvasbezier10Bounds.height / 14.68),
            end: CGPoint(x: kMyMoney_iconCanvasbezier10Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier10Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier10Bounds.midY + -0 * kMyMoney_iconCanvasbezier10Bounds.height / 14.68),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 10 Drawing
        let kMyMoney_iconCanvasoval10Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 61.43, width: 73.4, height: 24.2)
        let kMyMoney_iconCanvasoval10Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval10Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval10Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval10Rect.midX + 12.71 * kMyMoney_iconCanvasoval10Rect.width / 73.4, y: kMyMoney_iconCanvasoval10Rect.midY + -19.56 * kMyMoney_iconCanvasoval10Rect.height / 24.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval10Rect.midX + 12.71 * kMyMoney_iconCanvasoval10Rect.width / 73.4, y: kMyMoney_iconCanvasoval10Rect.midY + 53.87 * kMyMoney_iconCanvasoval10Rect.height / 24.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 7
        //// kMyMoney_iconCanvas-bezier 11 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier11Path = UIBezierPath()
        kMyMoney_iconCanvasbezier11Path.move(to: CGPoint(x: frame.minX + 19.98, y: frame.minY + 65.98))
        kMyMoney_iconCanvasbezier11Path.addLine(to: CGPoint(x: frame.minX + 19.98, y: frame.minY + 69.03))
        kMyMoney_iconCanvasbezier11Path.addCurve(to: CGPoint(x: frame.minX + 56.71, y: frame.minY + 82.19), controlPoint1: CGPoint(x: frame.minX + 19.98, y: frame.minY + 76.3), controlPoint2: CGPoint(x: frame.minX + 36.42, y: frame.minY + 82.19))
        kMyMoney_iconCanvasbezier11Path.addCurve(to: CGPoint(x: frame.minX + 93.45, y: frame.minY + 69.03), controlPoint1: CGPoint(x: frame.minX + 77, y: frame.minY + 82.19), controlPoint2: CGPoint(x: frame.minX + 93.45, y: frame.minY + 76.3))
        kMyMoney_iconCanvasbezier11Path.addLine(to: CGPoint(x: frame.minX + 93.45, y: frame.minY + 65.98))
        kMyMoney_iconCanvasbezier11Path.addLine(to: CGPoint(x: frame.minX + 19.98, y: frame.minY + 65.98))
        kMyMoney_iconCanvasbezier11Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier11Path.addClip()
        let kMyMoney_iconCanvasbezier11Bounds: CGRect = kMyMoney_iconCanvasbezier11Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier11Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier11Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier11Bounds.midY + 0 * kMyMoney_iconCanvasbezier11Bounds.height / 16.21),
            end: CGPoint(x: kMyMoney_iconCanvasbezier11Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier11Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier11Bounds.midY + 0 * kMyMoney_iconCanvasbezier11Bounds.height / 16.21),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 11 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval11Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 20.45, y: frame.minY + 54.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval11Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 12 Drawing
        let kMyMoney_iconCanvasbezier12Path = UIBezierPath()
        kMyMoney_iconCanvasbezier12Path.move(to: CGPoint(x: frame.minX + 20.13, y: frame.minY + 63.52))
        kMyMoney_iconCanvasbezier12Path.addLine(to: CGPoint(x: frame.minX + 20.13, y: frame.minY + 66.57))
        kMyMoney_iconCanvasbezier12Path.addCurve(to: CGPoint(x: frame.minX + 56.86, y: frame.minY + 79.73), controlPoint1: CGPoint(x: frame.minX + 20.13, y: frame.minY + 73.83), controlPoint2: CGPoint(x: frame.minX + 36.57, y: frame.minY + 79.73))
        kMyMoney_iconCanvasbezier12Path.addCurve(to: CGPoint(x: frame.minX + 93.61, y: frame.minY + 66.57), controlPoint1: CGPoint(x: frame.minX + 77.15, y: frame.minY + 79.73), controlPoint2: CGPoint(x: frame.minX + 93.61, y: frame.minY + 73.83))
        kMyMoney_iconCanvasbezier12Path.addLine(to: CGPoint(x: frame.minX + 93.61, y: frame.minY + 63.52))
        kMyMoney_iconCanvasbezier12Path.addLine(to: CGPoint(x: frame.minX + 20.13, y: frame.minY + 63.52))
        kMyMoney_iconCanvasbezier12Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier12Path.addClip()
        let kMyMoney_iconCanvasbezier12Bounds: CGRect = kMyMoney_iconCanvasbezier12Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier12Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier12Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier12Bounds.midY + -0 * kMyMoney_iconCanvasbezier12Bounds.height / 16.21),
            end: CGPoint(x: kMyMoney_iconCanvasbezier12Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier12Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier12Bounds.midY + -0 * kMyMoney_iconCanvasbezier12Bounds.height / 16.21),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 12 Drawing
        let kMyMoney_iconCanvasoval12Rect = CGRect(x: frame.minX + 20.15, y: frame.minY + 50.43, width: 73.4, height: 26.2)
        let kMyMoney_iconCanvasoval12Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval12Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval12Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval12Rect.midX + 12.71 * kMyMoney_iconCanvasoval12Rect.width / 73.4, y: kMyMoney_iconCanvasoval12Rect.midY + -21.17 * kMyMoney_iconCanvasoval12Rect.height / 26.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval12Rect.midX + 12.71 * kMyMoney_iconCanvasoval12Rect.width / 73.4, y: kMyMoney_iconCanvasoval12Rect.midY + 58.33 * kMyMoney_iconCanvasoval12Rect.height / 26.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 8
        //// kMyMoney_iconCanvas-bezier 13 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier13Path = UIBezierPath()
        kMyMoney_iconCanvasbezier13Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 55.49))
        kMyMoney_iconCanvasbezier13Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 58.45))
        kMyMoney_iconCanvasbezier13Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 71.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 65.48), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 71.19))
        kMyMoney_iconCanvasbezier13Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 58.45), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 71.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 65.48))
        kMyMoney_iconCanvasbezier13Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 55.49))
        kMyMoney_iconCanvasbezier13Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 55.49))
        kMyMoney_iconCanvasbezier13Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier13Path.addClip()
        let kMyMoney_iconCanvasbezier13Bounds: CGRect = kMyMoney_iconCanvasbezier13Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier13Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier13Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier13Bounds.midY + 0 * kMyMoney_iconCanvasbezier13Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier13Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier13Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier13Bounds.midY + 0 * kMyMoney_iconCanvasbezier13Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 13 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval13Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 43.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval13Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 14 Drawing
        let kMyMoney_iconCanvasbezier14Path = UIBezierPath()
        kMyMoney_iconCanvasbezier14Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 53.11))
        kMyMoney_iconCanvasbezier14Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 56.06))
        kMyMoney_iconCanvasbezier14Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 68.8), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 63.1), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 68.8))
        kMyMoney_iconCanvasbezier14Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 56.06), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 68.8), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 63.1))
        kMyMoney_iconCanvasbezier14Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 53.11))
        kMyMoney_iconCanvasbezier14Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 53.11))
        kMyMoney_iconCanvasbezier14Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier14Path.addClip()
        let kMyMoney_iconCanvasbezier14Bounds: CGRect = kMyMoney_iconCanvasbezier14Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier14Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier14Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier14Bounds.midY + -0 * kMyMoney_iconCanvasbezier14Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier14Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier14Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier14Bounds.midY + -0 * kMyMoney_iconCanvasbezier14Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 14 Drawing
        let kMyMoney_iconCanvasoval14Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 40.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval14Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval14Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval14Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval14Rect.midX + 12.71 * kMyMoney_iconCanvasoval14Rect.width / 73.4, y: kMyMoney_iconCanvasoval14Rect.midY + -20.36 * kMyMoney_iconCanvasoval14Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval14Rect.midX + 12.71 * kMyMoney_iconCanvasoval14Rect.width / 73.4, y: kMyMoney_iconCanvasoval14Rect.midY + 56.1 * kMyMoney_iconCanvasoval14Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 9
        //// kMyMoney_iconCanvas-bezier 15 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier15Path = UIBezierPath()
        kMyMoney_iconCanvasbezier15Path.move(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 46))
        kMyMoney_iconCanvasbezier15Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 48.86))
        kMyMoney_iconCanvasbezier15Path.addCurve(to: CGPoint(x: frame.minX + 41.71, y: frame.minY + 61.19), controlPoint1: CGPoint(x: frame.minX + 4.98, y: frame.minY + 55.67), controlPoint2: CGPoint(x: frame.minX + 21.42, y: frame.minY + 61.19))
        kMyMoney_iconCanvasbezier15Path.addCurve(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 48.86), controlPoint1: CGPoint(x: frame.minX + 62, y: frame.minY + 61.19), controlPoint2: CGPoint(x: frame.minX + 78.45, y: frame.minY + 55.67))
        kMyMoney_iconCanvasbezier15Path.addLine(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 46))
        kMyMoney_iconCanvasbezier15Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 46))
        kMyMoney_iconCanvasbezier15Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier15Path.addClip()
        let kMyMoney_iconCanvasbezier15Bounds: CGRect = kMyMoney_iconCanvasbezier15Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier15Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier15Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier15Bounds.midY + 0 * kMyMoney_iconCanvasbezier15Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier15Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier15Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier15Bounds.midY + 0 * kMyMoney_iconCanvasbezier15Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 15 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval15Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 5.45, y: frame.minY + 34.08, width: 72.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval15Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 16 Drawing
        let kMyMoney_iconCanvasbezier16Path = UIBezierPath()
        kMyMoney_iconCanvasbezier16Path.move(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 43.7))
        kMyMoney_iconCanvasbezier16Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 46.55))
        kMyMoney_iconCanvasbezier16Path.addCurve(to: CGPoint(x: frame.minX + 41.86, y: frame.minY + 58.88), controlPoint1: CGPoint(x: frame.minX + 5.13, y: frame.minY + 53.36), controlPoint2: CGPoint(x: frame.minX + 21.57, y: frame.minY + 58.88))
        kMyMoney_iconCanvasbezier16Path.addCurve(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 46.55), controlPoint1: CGPoint(x: frame.minX + 62.15, y: frame.minY + 58.88), controlPoint2: CGPoint(x: frame.minX + 78.61, y: frame.minY + 53.36))
        kMyMoney_iconCanvasbezier16Path.addLine(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 43.7))
        kMyMoney_iconCanvasbezier16Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 43.7))
        kMyMoney_iconCanvasbezier16Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier16Path.addClip()
        let kMyMoney_iconCanvasbezier16Bounds: CGRect = kMyMoney_iconCanvasbezier16Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier16Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier16Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier16Bounds.midY + -0 * kMyMoney_iconCanvasbezier16Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier16Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier16Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier16Bounds.midY + -0 * kMyMoney_iconCanvasbezier16Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 16 Drawing
        let kMyMoney_iconCanvasoval16Rect = CGRect(x: frame.minX + 5.15, y: frame.minY + 31.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval16Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval16Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval16Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval16Rect.midX + 12.71 * kMyMoney_iconCanvasoval16Rect.width / 73.4, y: kMyMoney_iconCanvasoval16Rect.midY + -20.36 * kMyMoney_iconCanvasoval16Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval16Rect.midX + 12.71 * kMyMoney_iconCanvasoval16Rect.width / 73.4, y: kMyMoney_iconCanvasoval16Rect.midY + 56.1 * kMyMoney_iconCanvasoval16Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// Text 2 Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 42.3, y: frame.minY + 43.75)
        context.scaleBy(x: 1.2, y: 0.5)

        let text2Rect = CGRect(x: -24.42, y: -16.5, width: 48.83, height: 33)
        let text2TextContent = "16 000"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [
            .font: UIFont.systemFont(ofSize: 13.5, weight: .bold),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text2Style,
        ] as [NSAttributedString.Key: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        let text2TextRect: CGRect = CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight)
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: text2TextRect, withAttributes: text2FontAttributes)
        context.restoreGState()
        
        ////// Text 2 Text Inner Shadow
        context.saveGState()
        context.clip(to: text2Rect)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow6.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let text2OpaqueTextShadow = (shadow6.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: shadow6.shadowOffset, blur: shadow6.shadowBlurRadius, color: text2OpaqueTextShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        text2OpaqueTextShadow.setFill()

        let text2InnerShadowFontAttributes = [
            .font: UIFont.systemFont(ofSize: 13.5, weight: .bold),
            .foregroundColor: (shadow6.shadowColor as! UIColor),
            .paragraphStyle: text2Style,
        ] as [NSAttributedString.Key: Any]
        text2TextContent.draw(in: text2TextRect, withAttributes: text2InnerShadowFontAttributes)

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        context.restoreGState()
    }

    @objc dynamic public class func drawMoneyRound9(frame: CGRect = CGRect(x: 0, y: 0, width: 141, height: 157)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let gradientColor25 = UIColor(red: 0.992, green: 0.898, blue: 0.576, alpha: 1.000)
        let gradientColor26 = UIColor(red: 1.000, green: 0.878, blue: 0.529, alpha: 1.000)
        let gradientColor27 = UIColor(red: 1.000, green: 0.902, blue: 0.537, alpha: 1.000)
        let gradientColor28 = UIColor(red: 0.984, green: 0.698, blue: 0.337, alpha: 1.000)
        let gradientColor29 = UIColor(red: 0.643, green: 0.294, blue: 0.047, alpha: 1.000)
        let gradientColor30 = UIColor(red: 0.514, green: 0.196, blue: 0.024, alpha: 1.000)
        let gradientColor31 = UIColor(red: 0.439, green: 0.145, blue: 0.024, alpha: 1.000)
        let gradientColor32 = UIColor(red: 0.486, green: 0.180, blue: 0.035, alpha: 1.000)
        let gradientColor33 = UIColor(red: 0.776, green: 0.408, blue: 0.122, alpha: 1.000)
        let gradientColor34 = UIColor(red: 0.992, green: 0.596, blue: 0.192, alpha: 1.000)
        let gradientColor35 = UIColor(red: 1.000, green: 0.635, blue: 0.208, alpha: 1.000)
        let gradientColor36 = UIColor(red: 0.945, green: 0.533, blue: 0.169, alpha: 1.000)
        let gradientColor37 = UIColor(red: 0.580, green: 0.251, blue: 0.063, alpha: 1.000)
        let gradientColor38 = UIColor(red: 0.427, green: 0.141, blue: 0.020, alpha: 1.000)
        let fillColor4 = UIColor(red: 0.231, green: 0.114, blue: 0.024, alpha: 1.000)
        let shadow6Color = UIColor(red: 0.684, green: 0.571, blue: 0.182, alpha: 1.000)

        //// Gradient Declarations
        let kMyMoney_iconCanvasgbezier36 = CGGradient(colorsSpace: nil, colors: [gradientColor25.cgColor, gradientColor26.cgColor, gradientColor27.cgColor, gradientColor28.cgColor, gradientColor29.cgColor, gradientColor30.cgColor, gradientColor31.cgColor, gradientColor31.cgColor, gradientColor32.cgColor, gradientColor33.cgColor, gradientColor34.cgColor, gradientColor35.cgColor, gradientColor36.cgColor, gradientColor37.cgColor, gradientColor38.cgColor] as CFArray, locations: [0, 0.1, 0.2, 0.28, 0.41, 0.48, 0.55, 0.58, 0.61, 0.66, 0.7, 0.78, 0.85, 0.91, 1])!

        //// Shadow Declarations
        let shadow6 = NSShadow()
        shadow6.shadowColor = shadow6Color
        shadow6.shadowOffset = CGSize(width: 3, height: 3)
        shadow6.shadowBlurRadius = 5

        //// kMyMoney_iconCanvas-group 6
        //// kMyMoney_iconCanvas-bezier124 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier124Path = UIBezierPath()
        kMyMoney_iconCanvasbezier124Path.move(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 135.98))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 139.03))
        kMyMoney_iconCanvasbezier124Path.addCurve(to: CGPoint(x: frame.minX + 41.71, y: frame.minY + 152.19), controlPoint1: CGPoint(x: frame.minX + 4.98, y: frame.minY + 146.3), controlPoint2: CGPoint(x: frame.minX + 21.42, y: frame.minY + 152.19))
        kMyMoney_iconCanvasbezier124Path.addCurve(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 139.03), controlPoint1: CGPoint(x: frame.minX + 62, y: frame.minY + 152.19), controlPoint2: CGPoint(x: frame.minX + 78.45, y: frame.minY + 146.3))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 135.98))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 135.98))
        kMyMoney_iconCanvasbezier124Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier124Path.addClip()
        let kMyMoney_iconCanvasbezier124Bounds: CGRect = kMyMoney_iconCanvasbezier124Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier124Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier124Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier124Bounds.midY + 0 * kMyMoney_iconCanvasbezier124Bounds.height / 16.21),
            end: CGPoint(x: kMyMoney_iconCanvasbezier124Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier124Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier124Bounds.midY + 0 * kMyMoney_iconCanvasbezier124Bounds.height / 16.21),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval67 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval67Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 5.45, y: frame.minY + 124.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval67Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier125 Drawing
        let kMyMoney_iconCanvasbezier125Path = UIBezierPath()
        kMyMoney_iconCanvasbezier125Path.move(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 133.52))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 136.57))
        kMyMoney_iconCanvasbezier125Path.addCurve(to: CGPoint(x: frame.minX + 41.86, y: frame.minY + 149.73), controlPoint1: CGPoint(x: frame.minX + 5.13, y: frame.minY + 143.83), controlPoint2: CGPoint(x: frame.minX + 21.57, y: frame.minY + 149.73))
        kMyMoney_iconCanvasbezier125Path.addCurve(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 136.57), controlPoint1: CGPoint(x: frame.minX + 62.15, y: frame.minY + 149.73), controlPoint2: CGPoint(x: frame.minX + 78.61, y: frame.minY + 143.83))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 133.52))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 133.52))
        kMyMoney_iconCanvasbezier125Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier125Path.addClip()
        let kMyMoney_iconCanvasbezier125Bounds: CGRect = kMyMoney_iconCanvasbezier125Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier125Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier125Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier125Bounds.midY + -0 * kMyMoney_iconCanvasbezier125Bounds.height / 16.21),
            end: CGPoint(x: kMyMoney_iconCanvasbezier125Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier125Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier125Bounds.midY + -0 * kMyMoney_iconCanvasbezier125Bounds.height / 16.21),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval68 Drawing
        let kMyMoney_iconCanvasoval68Rect = CGRect(x: frame.minX + 5.15, y: frame.minY + 120.43, width: 73.4, height: 26.2)
        let kMyMoney_iconCanvasoval68Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval68Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval68Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval68Rect.midX + 12.71 * kMyMoney_iconCanvasoval68Rect.width / 73.4, y: kMyMoney_iconCanvasoval68Rect.midY + -21.17 * kMyMoney_iconCanvasoval68Rect.height / 26.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval68Rect.midX + 12.71 * kMyMoney_iconCanvasoval68Rect.width / 73.4, y: kMyMoney_iconCanvasoval68Rect.midY + 58.33 * kMyMoney_iconCanvasoval68Rect.height / 26.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 10
        //// kMyMoney_iconCanvas-bezier89 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier89Path = UIBezierPath()
        kMyMoney_iconCanvasbezier89Path.move(to: CGPoint(x: frame.minX + 70.98, y: frame.minY + 112.98))
        kMyMoney_iconCanvasbezier89Path.addLine(to: CGPoint(x: frame.minX + 70.98, y: frame.minY + 116.03))
        kMyMoney_iconCanvasbezier89Path.addCurve(to: CGPoint(x: frame.minX + 102.22, y: frame.minY + 129.19), controlPoint1: CGPoint(x: frame.minX + 70.98, y: frame.minY + 123.3), controlPoint2: CGPoint(x: frame.minX + 84.96, y: frame.minY + 129.19))
        kMyMoney_iconCanvasbezier89Path.addCurve(to: CGPoint(x: frame.minX + 133.47, y: frame.minY + 116.03), controlPoint1: CGPoint(x: frame.minX + 119.48, y: frame.minY + 129.19), controlPoint2: CGPoint(x: frame.minX + 133.47, y: frame.minY + 123.3))
        kMyMoney_iconCanvasbezier89Path.addLine(to: CGPoint(x: frame.minX + 133.47, y: frame.minY + 112.98))
        kMyMoney_iconCanvasbezier89Path.addLine(to: CGPoint(x: frame.minX + 70.98, y: frame.minY + 112.98))
        kMyMoney_iconCanvasbezier89Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier89Path.addClip()
        let kMyMoney_iconCanvasbezier89Bounds: CGRect = kMyMoney_iconCanvasbezier89Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier89Bounds.midX + -31.24 * kMyMoney_iconCanvasbezier89Bounds.width / 62.49, y: kMyMoney_iconCanvasbezier89Bounds.midY + 0 * kMyMoney_iconCanvasbezier89Bounds.height / 16.21),
            end: CGPoint(x: kMyMoney_iconCanvasbezier89Bounds.midX + 0.09 * kMyMoney_iconCanvasbezier89Bounds.width / 62.49, y: kMyMoney_iconCanvasbezier89Bounds.midY + 0 * kMyMoney_iconCanvasbezier89Bounds.height / 16.21),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 17 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval17Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 71.45, y: frame.minY + 100.08, width: 61.8, height: 27.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval17Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier128 Drawing
        let kMyMoney_iconCanvasbezier128Path = UIBezierPath()
        kMyMoney_iconCanvasbezier128Path.move(to: CGPoint(x: frame.minX + 71.11, y: frame.minY + 110.52))
        kMyMoney_iconCanvasbezier128Path.addLine(to: CGPoint(x: frame.minX + 71.11, y: frame.minY + 113.57))
        kMyMoney_iconCanvasbezier128Path.addCurve(to: CGPoint(x: frame.minX + 102.35, y: frame.minY + 126.73), controlPoint1: CGPoint(x: frame.minX + 71.11, y: frame.minY + 120.83), controlPoint2: CGPoint(x: frame.minX + 85.09, y: frame.minY + 126.73))
        kMyMoney_iconCanvasbezier128Path.addCurve(to: CGPoint(x: frame.minX + 133.61, y: frame.minY + 113.57), controlPoint1: CGPoint(x: frame.minX + 119.61, y: frame.minY + 126.73), controlPoint2: CGPoint(x: frame.minX + 133.61, y: frame.minY + 120.83))
        kMyMoney_iconCanvasbezier128Path.addLine(to: CGPoint(x: frame.minX + 133.61, y: frame.minY + 110.52))
        kMyMoney_iconCanvasbezier128Path.addLine(to: CGPoint(x: frame.minX + 71.11, y: frame.minY + 110.52))
        kMyMoney_iconCanvasbezier128Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier128Path.addClip()
        let kMyMoney_iconCanvasbezier128Bounds: CGRect = kMyMoney_iconCanvasbezier128Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier128Bounds.midX + -31.25 * kMyMoney_iconCanvasbezier128Bounds.width / 62.5, y: kMyMoney_iconCanvasbezier128Bounds.midY + -0 * kMyMoney_iconCanvasbezier128Bounds.height / 16.22),
            end: CGPoint(x: kMyMoney_iconCanvasbezier128Bounds.midX + 0.09 * kMyMoney_iconCanvasbezier128Bounds.width / 62.5, y: kMyMoney_iconCanvasbezier128Bounds.midY + -0 * kMyMoney_iconCanvasbezier128Bounds.height / 16.22),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval71 Drawing
        let kMyMoney_iconCanvasoval71Rect = CGRect(x: frame.minX + 71.15, y: frame.minY + 97.43, width: 62.4, height: 26.2)
        let kMyMoney_iconCanvasoval71Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval71Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval71Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval71Rect.midX + 10.8 * kMyMoney_iconCanvasoval71Rect.width / 62.4, y: kMyMoney_iconCanvasoval71Rect.midY + -21.17 * kMyMoney_iconCanvasoval71Rect.height / 26.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval71Rect.midX + 10.8 * kMyMoney_iconCanvasoval71Rect.width / 62.4, y: kMyMoney_iconCanvasoval71Rect.midY + 58.32 * kMyMoney_iconCanvasoval71Rect.height / 26.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 11
        //// kMyMoney_iconCanvas-bezier126 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier126Path = UIBezierPath()
        kMyMoney_iconCanvasbezier126Path.move(to: CGPoint(x: frame.minX + 67.98, y: frame.minY + 105))
        kMyMoney_iconCanvasbezier126Path.addLine(to: CGPoint(x: frame.minX + 67.98, y: frame.minY + 107.86))
        kMyMoney_iconCanvasbezier126Path.addCurve(to: CGPoint(x: frame.minX + 99.22, y: frame.minY + 120.19), controlPoint1: CGPoint(x: frame.minX + 67.98, y: frame.minY + 114.67), controlPoint2: CGPoint(x: frame.minX + 81.96, y: frame.minY + 120.19))
        kMyMoney_iconCanvasbezier126Path.addCurve(to: CGPoint(x: frame.minX + 130.47, y: frame.minY + 107.86), controlPoint1: CGPoint(x: frame.minX + 116.48, y: frame.minY + 120.19), controlPoint2: CGPoint(x: frame.minX + 130.47, y: frame.minY + 114.67))
        kMyMoney_iconCanvasbezier126Path.addLine(to: CGPoint(x: frame.minX + 130.47, y: frame.minY + 105))
        kMyMoney_iconCanvasbezier126Path.addLine(to: CGPoint(x: frame.minX + 67.98, y: frame.minY + 105))
        kMyMoney_iconCanvasbezier126Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier126Path.addClip()
        let kMyMoney_iconCanvasbezier126Bounds: CGRect = kMyMoney_iconCanvasbezier126Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier126Bounds.midX + -31.24 * kMyMoney_iconCanvasbezier126Bounds.width / 62.49, y: kMyMoney_iconCanvasbezier126Bounds.midY + 0 * kMyMoney_iconCanvasbezier126Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier126Bounds.midX + 0.09 * kMyMoney_iconCanvasbezier126Bounds.width / 62.49, y: kMyMoney_iconCanvasbezier126Bounds.midY + 0 * kMyMoney_iconCanvasbezier126Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval69 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval69Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 68.45, y: frame.minY + 93.08, width: 61.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval69Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier127 Drawing
        let kMyMoney_iconCanvasbezier127Path = UIBezierPath()
        kMyMoney_iconCanvasbezier127Path.move(to: CGPoint(x: frame.minX + 68.11, y: frame.minY + 102.69))
        kMyMoney_iconCanvasbezier127Path.addLine(to: CGPoint(x: frame.minX + 68.11, y: frame.minY + 105.56))
        kMyMoney_iconCanvasbezier127Path.addCurve(to: CGPoint(x: frame.minX + 99.35, y: frame.minY + 117.89), controlPoint1: CGPoint(x: frame.minX + 68.11, y: frame.minY + 112.36), controlPoint2: CGPoint(x: frame.minX + 82.09, y: frame.minY + 117.89))
        kMyMoney_iconCanvasbezier127Path.addCurve(to: CGPoint(x: frame.minX + 130.61, y: frame.minY + 105.56), controlPoint1: CGPoint(x: frame.minX + 116.61, y: frame.minY + 117.89), controlPoint2: CGPoint(x: frame.minX + 130.61, y: frame.minY + 112.36))
        kMyMoney_iconCanvasbezier127Path.addLine(to: CGPoint(x: frame.minX + 130.61, y: frame.minY + 102.69))
        kMyMoney_iconCanvasbezier127Path.addLine(to: CGPoint(x: frame.minX + 68.11, y: frame.minY + 102.69))
        kMyMoney_iconCanvasbezier127Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier127Path.addClip()
        let kMyMoney_iconCanvasbezier127Bounds: CGRect = kMyMoney_iconCanvasbezier127Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier127Bounds.midX + -31.25 * kMyMoney_iconCanvasbezier127Bounds.width / 62.5, y: kMyMoney_iconCanvasbezier127Bounds.midY + -0 * kMyMoney_iconCanvasbezier127Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier127Bounds.midX + 0.09 * kMyMoney_iconCanvasbezier127Bounds.width / 62.5, y: kMyMoney_iconCanvasbezier127Bounds.midY + -0 * kMyMoney_iconCanvasbezier127Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval70 Drawing
        let kMyMoney_iconCanvasoval70Rect = CGRect(x: frame.minX + 68.15, y: frame.minY + 90.43, width: 62.4, height: 25.2)
        let kMyMoney_iconCanvasoval70Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval70Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval70Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval70Rect.midX + 10.8 * kMyMoney_iconCanvasoval70Rect.width / 62.4, y: kMyMoney_iconCanvasoval70Rect.midY + -20.36 * kMyMoney_iconCanvasoval70Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval70Rect.midX + 10.8 * kMyMoney_iconCanvasoval70Rect.width / 62.4, y: kMyMoney_iconCanvasoval70Rect.midY + 56.1 * kMyMoney_iconCanvasoval70Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 12
        //// kMyMoney_iconCanvas-bezier 18 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier18Path = UIBezierPath()
        kMyMoney_iconCanvasbezier18Path.move(to: CGPoint(x: frame.minX + 67.98, y: frame.minY + 96.02))
        kMyMoney_iconCanvasbezier18Path.addLine(to: CGPoint(x: frame.minX + 67.98, y: frame.minY + 98.69))
        kMyMoney_iconCanvasbezier18Path.addCurve(to: CGPoint(x: frame.minX + 99.22, y: frame.minY + 110.19), controlPoint1: CGPoint(x: frame.minX + 67.98, y: frame.minY + 105.04), controlPoint2: CGPoint(x: frame.minX + 81.96, y: frame.minY + 110.19))
        kMyMoney_iconCanvasbezier18Path.addCurve(to: CGPoint(x: frame.minX + 130.47, y: frame.minY + 98.69), controlPoint1: CGPoint(x: frame.minX + 116.48, y: frame.minY + 110.19), controlPoint2: CGPoint(x: frame.minX + 130.47, y: frame.minY + 105.04))
        kMyMoney_iconCanvasbezier18Path.addLine(to: CGPoint(x: frame.minX + 130.47, y: frame.minY + 96.02))
        kMyMoney_iconCanvasbezier18Path.addLine(to: CGPoint(x: frame.minX + 67.98, y: frame.minY + 96.02))
        kMyMoney_iconCanvasbezier18Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier18Path.addClip()
        let kMyMoney_iconCanvasbezier18Bounds: CGRect = kMyMoney_iconCanvasbezier18Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier18Bounds.midX + -31.24 * kMyMoney_iconCanvasbezier18Bounds.width / 62.49, y: kMyMoney_iconCanvasbezier18Bounds.midY + 0 * kMyMoney_iconCanvasbezier18Bounds.height / 14.17),
            end: CGPoint(x: kMyMoney_iconCanvasbezier18Bounds.midX + 0.09 * kMyMoney_iconCanvasbezier18Bounds.width / 62.49, y: kMyMoney_iconCanvasbezier18Bounds.midY + 0 * kMyMoney_iconCanvasbezier18Bounds.height / 14.17),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 18 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval18Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 68.45, y: frame.minY + 85.08, width: 61.8, height: 23.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval18Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 19 Drawing
        let kMyMoney_iconCanvasbezier19Path = UIBezierPath()
        kMyMoney_iconCanvasbezier19Path.move(to: CGPoint(x: frame.minX + 68.11, y: frame.minY + 93.87))
        kMyMoney_iconCanvasbezier19Path.addLine(to: CGPoint(x: frame.minX + 68.11, y: frame.minY + 96.54))
        kMyMoney_iconCanvasbezier19Path.addCurve(to: CGPoint(x: frame.minX + 99.35, y: frame.minY + 108.04), controlPoint1: CGPoint(x: frame.minX + 68.11, y: frame.minY + 102.88), controlPoint2: CGPoint(x: frame.minX + 82.09, y: frame.minY + 108.04))
        kMyMoney_iconCanvasbezier19Path.addCurve(to: CGPoint(x: frame.minX + 130.61, y: frame.minY + 96.54), controlPoint1: CGPoint(x: frame.minX + 116.61, y: frame.minY + 108.04), controlPoint2: CGPoint(x: frame.minX + 130.61, y: frame.minY + 102.88))
        kMyMoney_iconCanvasbezier19Path.addLine(to: CGPoint(x: frame.minX + 130.61, y: frame.minY + 93.87))
        kMyMoney_iconCanvasbezier19Path.addLine(to: CGPoint(x: frame.minX + 68.11, y: frame.minY + 93.87))
        kMyMoney_iconCanvasbezier19Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier19Path.addClip()
        let kMyMoney_iconCanvasbezier19Bounds: CGRect = kMyMoney_iconCanvasbezier19Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier19Bounds.midX + -31.25 * kMyMoney_iconCanvasbezier19Bounds.width / 62.5, y: kMyMoney_iconCanvasbezier19Bounds.midY + -0 * kMyMoney_iconCanvasbezier19Bounds.height / 14.17),
            end: CGPoint(x: kMyMoney_iconCanvasbezier19Bounds.midX + 0.09 * kMyMoney_iconCanvasbezier19Bounds.width / 62.5, y: kMyMoney_iconCanvasbezier19Bounds.midY + -0 * kMyMoney_iconCanvasbezier19Bounds.height / 14.17),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 19 Drawing
        let kMyMoney_iconCanvasoval19Rect = CGRect(x: frame.minX + 68.15, y: frame.minY + 82.43, width: 62.4, height: 23.2)
        let kMyMoney_iconCanvasoval19Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval19Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval19Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval19Rect.midX + 10.8 * kMyMoney_iconCanvasoval19Rect.width / 62.4, y: kMyMoney_iconCanvasoval19Rect.midY + -18.75 * kMyMoney_iconCanvasoval19Rect.height / 23.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval19Rect.midX + 10.8 * kMyMoney_iconCanvasoval19Rect.width / 62.4, y: kMyMoney_iconCanvasoval19Rect.midY + 51.65 * kMyMoney_iconCanvasoval19Rect.height / 23.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group
        //// kMyMoney_iconCanvas-bezier Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezierPath = UIBezierPath()
        kMyMoney_iconCanvasbezierPath.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 126.96))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 130.2))
        kMyMoney_iconCanvasbezierPath.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 144.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 137.93), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 144.19))
        kMyMoney_iconCanvasbezierPath.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 130.2), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 144.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 137.93))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 126.96))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 126.96))
        kMyMoney_iconCanvasbezierPath.close()
        context.saveGState()
        kMyMoney_iconCanvasbezierPath.addClip()
        let kMyMoney_iconCanvasbezierBounds: CGRect = kMyMoney_iconCanvasbezierPath.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezierBounds.midX + -36.73 * kMyMoney_iconCanvasbezierBounds.width / 73.47, y: kMyMoney_iconCanvasbezierBounds.midY + 0 * kMyMoney_iconCanvasbezierBounds.height / 17.23),
            end: CGPoint(x: kMyMoney_iconCanvasbezierBounds.midX + 0.1 * kMyMoney_iconCanvasbezierBounds.width / 73.47, y: kMyMoney_iconCanvasbezierBounds.midY + 0 * kMyMoney_iconCanvasbezierBounds.height / 17.23),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasovalPath = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 114.08, width: 72.8, height: 28.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasovalPath.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 2 Drawing
        let kMyMoney_iconCanvasbezier2Path = UIBezierPath()
        kMyMoney_iconCanvasbezier2Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 124.34))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 127.58))
        kMyMoney_iconCanvasbezier2Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 141.57), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 135.31), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 141.57))
        kMyMoney_iconCanvasbezier2Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 127.58), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 141.57), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 135.31))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 124.34))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 124.34))
        kMyMoney_iconCanvasbezier2Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier2Path.addClip()
        let kMyMoney_iconCanvasbezier2Bounds: CGRect = kMyMoney_iconCanvasbezier2Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier2Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier2Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier2Bounds.midY + -0 * kMyMoney_iconCanvasbezier2Bounds.height / 17.23),
            end: CGPoint(x: kMyMoney_iconCanvasbezier2Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier2Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier2Bounds.midY + -0 * kMyMoney_iconCanvasbezier2Bounds.height / 17.23),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 2 Drawing
        let kMyMoney_iconCanvasoval2Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 110.43, width: 73.4, height: 28.2)
        let kMyMoney_iconCanvasoval2Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval2Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval2Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval2Rect.midX + 12.71 * kMyMoney_iconCanvasoval2Rect.width / 73.4, y: kMyMoney_iconCanvasoval2Rect.midY + -22.79 * kMyMoney_iconCanvasoval2Rect.height / 28.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval2Rect.midX + 12.71 * kMyMoney_iconCanvasoval2Rect.width / 73.4, y: kMyMoney_iconCanvasoval2Rect.midY + 62.78 * kMyMoney_iconCanvasoval2Rect.height / 28.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 2
        //// kMyMoney_iconCanvas-bezier 3 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier3Path = UIBezierPath()
        kMyMoney_iconCanvasbezier3Path.move(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 112.98))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 116.03))
        kMyMoney_iconCanvasbezier3Path.addCurve(to: CGPoint(x: frame.minX + 41.71, y: frame.minY + 129.19), controlPoint1: CGPoint(x: frame.minX + 4.98, y: frame.minY + 123.3), controlPoint2: CGPoint(x: frame.minX + 21.42, y: frame.minY + 129.19))
        kMyMoney_iconCanvasbezier3Path.addCurve(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 116.03), controlPoint1: CGPoint(x: frame.minX + 62, y: frame.minY + 129.19), controlPoint2: CGPoint(x: frame.minX + 78.45, y: frame.minY + 123.3))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 112.98))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 112.98))
        kMyMoney_iconCanvasbezier3Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier3Path.addClip()
        let kMyMoney_iconCanvasbezier3Bounds: CGRect = kMyMoney_iconCanvasbezier3Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier3Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier3Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier3Bounds.midY + 0 * kMyMoney_iconCanvasbezier3Bounds.height / 16.21),
            end: CGPoint(x: kMyMoney_iconCanvasbezier3Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier3Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier3Bounds.midY + 0 * kMyMoney_iconCanvasbezier3Bounds.height / 16.21),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 3 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval3Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 5.45, y: frame.minY + 101.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval3Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 4 Drawing
        let kMyMoney_iconCanvasbezier4Path = UIBezierPath()
        kMyMoney_iconCanvasbezier4Path.move(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 110.52))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 113.57))
        kMyMoney_iconCanvasbezier4Path.addCurve(to: CGPoint(x: frame.minX + 41.86, y: frame.minY + 126.73), controlPoint1: CGPoint(x: frame.minX + 5.13, y: frame.minY + 120.83), controlPoint2: CGPoint(x: frame.minX + 21.57, y: frame.minY + 126.73))
        kMyMoney_iconCanvasbezier4Path.addCurve(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 113.57), controlPoint1: CGPoint(x: frame.minX + 62.15, y: frame.minY + 126.73), controlPoint2: CGPoint(x: frame.minX + 78.61, y: frame.minY + 120.83))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 110.52))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 110.52))
        kMyMoney_iconCanvasbezier4Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier4Path.addClip()
        let kMyMoney_iconCanvasbezier4Bounds: CGRect = kMyMoney_iconCanvasbezier4Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier4Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier4Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier4Bounds.midY + -0 * kMyMoney_iconCanvasbezier4Bounds.height / 16.21),
            end: CGPoint(x: kMyMoney_iconCanvasbezier4Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier4Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier4Bounds.midY + -0 * kMyMoney_iconCanvasbezier4Bounds.height / 16.21),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 4 Drawing
        let kMyMoney_iconCanvasoval4Rect = CGRect(x: frame.minX + 5.15, y: frame.minY + 97.43, width: 73.4, height: 26.2)
        let kMyMoney_iconCanvasoval4Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval4Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval4Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval4Rect.midX + 12.71 * kMyMoney_iconCanvasoval4Rect.width / 73.4, y: kMyMoney_iconCanvasoval4Rect.midY + -21.17 * kMyMoney_iconCanvasoval4Rect.height / 26.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval4Rect.midX + 12.71 * kMyMoney_iconCanvasoval4Rect.width / 73.4, y: kMyMoney_iconCanvasoval4Rect.midY + 58.33 * kMyMoney_iconCanvasoval4Rect.height / 26.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 3
        //// kMyMoney_iconCanvas-bezier 5 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier5Path = UIBezierPath()
        kMyMoney_iconCanvasbezier5Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 99.45))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 102.79))
        kMyMoney_iconCanvasbezier5Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 117.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 110.74), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 117.19))
        kMyMoney_iconCanvasbezier5Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 102.79), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 117.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 110.74))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 99.45))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 99.45))
        kMyMoney_iconCanvasbezier5Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier5Path.addClip()
        let kMyMoney_iconCanvasbezier5Bounds: CGRect = kMyMoney_iconCanvasbezier5Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier5Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier5Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier5Bounds.midY + 0 * kMyMoney_iconCanvasbezier5Bounds.height / 17.74),
            end: CGPoint(x: kMyMoney_iconCanvasbezier5Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier5Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier5Bounds.midY + 0 * kMyMoney_iconCanvasbezier5Bounds.height / 17.74),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 5 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval5Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 86.08, width: 72.8, height: 29.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval5Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 6 Drawing
        let kMyMoney_iconCanvasbezier6Path = UIBezierPath()
        kMyMoney_iconCanvasbezier6Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 96.76))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 100.09))
        kMyMoney_iconCanvasbezier6Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 114.49), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 108.04), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 114.49))
        kMyMoney_iconCanvasbezier6Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 100.09), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 114.49), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 108.04))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 96.76))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 96.76))
        kMyMoney_iconCanvasbezier6Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier6Path.addClip()
        let kMyMoney_iconCanvasbezier6Bounds: CGRect = kMyMoney_iconCanvasbezier6Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier6Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier6Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier6Bounds.midY + -0 * kMyMoney_iconCanvasbezier6Bounds.height / 17.74),
            end: CGPoint(x: kMyMoney_iconCanvasbezier6Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier6Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier6Bounds.midY + -0 * kMyMoney_iconCanvasbezier6Bounds.height / 17.74),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 6 Drawing
        let kMyMoney_iconCanvasoval6Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 82.43, width: 73.4, height: 29.2)
        let kMyMoney_iconCanvasoval6Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval6Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval6Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval6Rect.midX + 12.71 * kMyMoney_iconCanvasoval6Rect.width / 73.4, y: kMyMoney_iconCanvasoval6Rect.midY + -23.6 * kMyMoney_iconCanvasoval6Rect.height / 29.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval6Rect.midX + 12.71 * kMyMoney_iconCanvasoval6Rect.width / 73.4, y: kMyMoney_iconCanvasoval6Rect.midY + 65 * kMyMoney_iconCanvasoval6Rect.height / 29.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 4
        //// kMyMoney_iconCanvas-bezier 7 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier7Path = UIBezierPath()
        kMyMoney_iconCanvasbezier7Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 86.49))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 89.45))
        kMyMoney_iconCanvasbezier7Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 102.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 96.48), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 102.19))
        kMyMoney_iconCanvasbezier7Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 89.45), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 102.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 96.48))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 86.49))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 86.49))
        kMyMoney_iconCanvasbezier7Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier7Path.addClip()
        let kMyMoney_iconCanvasbezier7Bounds: CGRect = kMyMoney_iconCanvasbezier7Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier7Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier7Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier7Bounds.midY + 0 * kMyMoney_iconCanvasbezier7Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier7Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier7Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier7Bounds.midY + 0 * kMyMoney_iconCanvasbezier7Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 7 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval7Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 74.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval7Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 8 Drawing
        let kMyMoney_iconCanvasbezier8Path = UIBezierPath()
        kMyMoney_iconCanvasbezier8Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 84.11))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 87.06))
        kMyMoney_iconCanvasbezier8Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 99.8), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 94.1), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 99.8))
        kMyMoney_iconCanvasbezier8Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 87.06), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 99.8), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 94.1))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 84.11))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 84.11))
        kMyMoney_iconCanvasbezier8Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier8Path.addClip()
        let kMyMoney_iconCanvasbezier8Bounds: CGRect = kMyMoney_iconCanvasbezier8Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier8Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier8Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier8Bounds.midY + -0 * kMyMoney_iconCanvasbezier8Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier8Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier8Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier8Bounds.midY + -0 * kMyMoney_iconCanvasbezier8Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 8 Drawing
        let kMyMoney_iconCanvasoval8Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 71.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval8Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval8Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval8Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval8Rect.midX + 12.71 * kMyMoney_iconCanvasoval8Rect.width / 73.4, y: kMyMoney_iconCanvasoval8Rect.midY + -20.36 * kMyMoney_iconCanvasoval8Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval8Rect.midX + 12.71 * kMyMoney_iconCanvasoval8Rect.width / 73.4, y: kMyMoney_iconCanvasoval8Rect.midY + 56.1 * kMyMoney_iconCanvasoval8Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 5
        //// kMyMoney_iconCanvas-bezier 9 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier9Path = UIBezierPath()
        kMyMoney_iconCanvasbezier9Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 75.51))
        kMyMoney_iconCanvasbezier9Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 78.27))
        kMyMoney_iconCanvasbezier9Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 90.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 84.85), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 90.19))
        kMyMoney_iconCanvasbezier9Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 78.27), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 90.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 84.85))
        kMyMoney_iconCanvasbezier9Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 75.51))
        kMyMoney_iconCanvasbezier9Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 75.51))
        kMyMoney_iconCanvasbezier9Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier9Path.addClip()
        let kMyMoney_iconCanvasbezier9Bounds: CGRect = kMyMoney_iconCanvasbezier9Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier9Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier9Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier9Bounds.midY + 0 * kMyMoney_iconCanvasbezier9Bounds.height / 14.68),
            end: CGPoint(x: kMyMoney_iconCanvasbezier9Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier9Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier9Bounds.midY + 0 * kMyMoney_iconCanvasbezier9Bounds.height / 14.68),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 9 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval9Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 64.08, width: 72.8, height: 24.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval9Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 10 Drawing
        let kMyMoney_iconCanvasbezier10Path = UIBezierPath()
        kMyMoney_iconCanvasbezier10Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 73.28))
        kMyMoney_iconCanvasbezier10Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 76.04))
        kMyMoney_iconCanvasbezier10Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 87.96), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 82.62), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 87.96))
        kMyMoney_iconCanvasbezier10Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 76.04), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 87.96), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 82.62))
        kMyMoney_iconCanvasbezier10Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 73.28))
        kMyMoney_iconCanvasbezier10Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 73.28))
        kMyMoney_iconCanvasbezier10Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier10Path.addClip()
        let kMyMoney_iconCanvasbezier10Bounds: CGRect = kMyMoney_iconCanvasbezier10Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier10Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier10Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier10Bounds.midY + -0 * kMyMoney_iconCanvasbezier10Bounds.height / 14.68),
            end: CGPoint(x: kMyMoney_iconCanvasbezier10Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier10Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier10Bounds.midY + -0 * kMyMoney_iconCanvasbezier10Bounds.height / 14.68),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 10 Drawing
        let kMyMoney_iconCanvasoval10Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 61.43, width: 73.4, height: 24.2)
        let kMyMoney_iconCanvasoval10Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval10Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval10Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval10Rect.midX + 12.71 * kMyMoney_iconCanvasoval10Rect.width / 73.4, y: kMyMoney_iconCanvasoval10Rect.midY + -19.56 * kMyMoney_iconCanvasoval10Rect.height / 24.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval10Rect.midX + 12.71 * kMyMoney_iconCanvasoval10Rect.width / 73.4, y: kMyMoney_iconCanvasoval10Rect.midY + 53.87 * kMyMoney_iconCanvasoval10Rect.height / 24.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 7
        //// kMyMoney_iconCanvas-bezier 11 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier11Path = UIBezierPath()
        kMyMoney_iconCanvasbezier11Path.move(to: CGPoint(x: frame.minX + 19.98, y: frame.minY + 65.98))
        kMyMoney_iconCanvasbezier11Path.addLine(to: CGPoint(x: frame.minX + 19.98, y: frame.minY + 69.03))
        kMyMoney_iconCanvasbezier11Path.addCurve(to: CGPoint(x: frame.minX + 56.71, y: frame.minY + 82.19), controlPoint1: CGPoint(x: frame.minX + 19.98, y: frame.minY + 76.3), controlPoint2: CGPoint(x: frame.minX + 36.42, y: frame.minY + 82.19))
        kMyMoney_iconCanvasbezier11Path.addCurve(to: CGPoint(x: frame.minX + 93.45, y: frame.minY + 69.03), controlPoint1: CGPoint(x: frame.minX + 77, y: frame.minY + 82.19), controlPoint2: CGPoint(x: frame.minX + 93.45, y: frame.minY + 76.3))
        kMyMoney_iconCanvasbezier11Path.addLine(to: CGPoint(x: frame.minX + 93.45, y: frame.minY + 65.98))
        kMyMoney_iconCanvasbezier11Path.addLine(to: CGPoint(x: frame.minX + 19.98, y: frame.minY + 65.98))
        kMyMoney_iconCanvasbezier11Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier11Path.addClip()
        let kMyMoney_iconCanvasbezier11Bounds: CGRect = kMyMoney_iconCanvasbezier11Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier11Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier11Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier11Bounds.midY + 0 * kMyMoney_iconCanvasbezier11Bounds.height / 16.21),
            end: CGPoint(x: kMyMoney_iconCanvasbezier11Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier11Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier11Bounds.midY + 0 * kMyMoney_iconCanvasbezier11Bounds.height / 16.21),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 11 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval11Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 20.45, y: frame.minY + 54.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval11Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 12 Drawing
        let kMyMoney_iconCanvasbezier12Path = UIBezierPath()
        kMyMoney_iconCanvasbezier12Path.move(to: CGPoint(x: frame.minX + 20.13, y: frame.minY + 63.52))
        kMyMoney_iconCanvasbezier12Path.addLine(to: CGPoint(x: frame.minX + 20.13, y: frame.minY + 66.57))
        kMyMoney_iconCanvasbezier12Path.addCurve(to: CGPoint(x: frame.minX + 56.86, y: frame.minY + 79.73), controlPoint1: CGPoint(x: frame.minX + 20.13, y: frame.minY + 73.83), controlPoint2: CGPoint(x: frame.minX + 36.57, y: frame.minY + 79.73))
        kMyMoney_iconCanvasbezier12Path.addCurve(to: CGPoint(x: frame.minX + 93.61, y: frame.minY + 66.57), controlPoint1: CGPoint(x: frame.minX + 77.15, y: frame.minY + 79.73), controlPoint2: CGPoint(x: frame.minX + 93.61, y: frame.minY + 73.83))
        kMyMoney_iconCanvasbezier12Path.addLine(to: CGPoint(x: frame.minX + 93.61, y: frame.minY + 63.52))
        kMyMoney_iconCanvasbezier12Path.addLine(to: CGPoint(x: frame.minX + 20.13, y: frame.minY + 63.52))
        kMyMoney_iconCanvasbezier12Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier12Path.addClip()
        let kMyMoney_iconCanvasbezier12Bounds: CGRect = kMyMoney_iconCanvasbezier12Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier12Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier12Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier12Bounds.midY + -0 * kMyMoney_iconCanvasbezier12Bounds.height / 16.21),
            end: CGPoint(x: kMyMoney_iconCanvasbezier12Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier12Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier12Bounds.midY + -0 * kMyMoney_iconCanvasbezier12Bounds.height / 16.21),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 12 Drawing
        let kMyMoney_iconCanvasoval12Rect = CGRect(x: frame.minX + 20.15, y: frame.minY + 50.43, width: 73.4, height: 26.2)
        let kMyMoney_iconCanvasoval12Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval12Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval12Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval12Rect.midX + 12.71 * kMyMoney_iconCanvasoval12Rect.width / 73.4, y: kMyMoney_iconCanvasoval12Rect.midY + -21.17 * kMyMoney_iconCanvasoval12Rect.height / 26.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval12Rect.midX + 12.71 * kMyMoney_iconCanvasoval12Rect.width / 73.4, y: kMyMoney_iconCanvasoval12Rect.midY + 58.33 * kMyMoney_iconCanvasoval12Rect.height / 26.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 8
        //// kMyMoney_iconCanvas-bezier 13 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier13Path = UIBezierPath()
        kMyMoney_iconCanvasbezier13Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 54.98))
        kMyMoney_iconCanvasbezier13Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 58.03))
        kMyMoney_iconCanvasbezier13Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 71.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 65.3), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 71.19))
        kMyMoney_iconCanvasbezier13Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 58.03), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 71.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 65.3))
        kMyMoney_iconCanvasbezier13Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 54.98))
        kMyMoney_iconCanvasbezier13Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 54.98))
        kMyMoney_iconCanvasbezier13Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier13Path.addClip()
        let kMyMoney_iconCanvasbezier13Bounds: CGRect = kMyMoney_iconCanvasbezier13Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier13Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier13Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier13Bounds.midY + 0 * kMyMoney_iconCanvasbezier13Bounds.height / 16.21),
            end: CGPoint(x: kMyMoney_iconCanvasbezier13Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier13Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier13Bounds.midY + 0 * kMyMoney_iconCanvasbezier13Bounds.height / 16.21),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 13 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval13Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 43.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval13Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 14 Drawing
        let kMyMoney_iconCanvasbezier14Path = UIBezierPath()
        kMyMoney_iconCanvasbezier14Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 52.52))
        kMyMoney_iconCanvasbezier14Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 55.57))
        kMyMoney_iconCanvasbezier14Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 68.73), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 62.83), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 68.73))
        kMyMoney_iconCanvasbezier14Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 55.57), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 68.73), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 62.83))
        kMyMoney_iconCanvasbezier14Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 52.52))
        kMyMoney_iconCanvasbezier14Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 52.52))
        kMyMoney_iconCanvasbezier14Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier14Path.addClip()
        let kMyMoney_iconCanvasbezier14Bounds: CGRect = kMyMoney_iconCanvasbezier14Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier14Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier14Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier14Bounds.midY + -0 * kMyMoney_iconCanvasbezier14Bounds.height / 16.21),
            end: CGPoint(x: kMyMoney_iconCanvasbezier14Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier14Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier14Bounds.midY + -0 * kMyMoney_iconCanvasbezier14Bounds.height / 16.21),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 14 Drawing
        let kMyMoney_iconCanvasoval14Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 39.43, width: 73.4, height: 26.2)
        let kMyMoney_iconCanvasoval14Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval14Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval14Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval14Rect.midX + 12.71 * kMyMoney_iconCanvasoval14Rect.width / 73.4, y: kMyMoney_iconCanvasoval14Rect.midY + -21.17 * kMyMoney_iconCanvasoval14Rect.height / 26.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval14Rect.midX + 12.71 * kMyMoney_iconCanvasoval14Rect.width / 73.4, y: kMyMoney_iconCanvasoval14Rect.midY + 58.33 * kMyMoney_iconCanvasoval14Rect.height / 26.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 9
        //// kMyMoney_iconCanvas-bezier 15 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier15Path = UIBezierPath()
        kMyMoney_iconCanvasbezier15Path.move(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 44.98))
        kMyMoney_iconCanvasbezier15Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 48.03))
        kMyMoney_iconCanvasbezier15Path.addCurve(to: CGPoint(x: frame.minX + 41.71, y: frame.minY + 61.19), controlPoint1: CGPoint(x: frame.minX + 4.98, y: frame.minY + 55.3), controlPoint2: CGPoint(x: frame.minX + 21.42, y: frame.minY + 61.19))
        kMyMoney_iconCanvasbezier15Path.addCurve(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 48.03), controlPoint1: CGPoint(x: frame.minX + 62, y: frame.minY + 61.19), controlPoint2: CGPoint(x: frame.minX + 78.45, y: frame.minY + 55.3))
        kMyMoney_iconCanvasbezier15Path.addLine(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 44.98))
        kMyMoney_iconCanvasbezier15Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 44.98))
        kMyMoney_iconCanvasbezier15Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier15Path.addClip()
        let kMyMoney_iconCanvasbezier15Bounds: CGRect = kMyMoney_iconCanvasbezier15Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier15Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier15Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier15Bounds.midY + 0 * kMyMoney_iconCanvasbezier15Bounds.height / 16.21),
            end: CGPoint(x: kMyMoney_iconCanvasbezier15Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier15Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier15Bounds.midY + 0 * kMyMoney_iconCanvasbezier15Bounds.height / 16.21),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 15 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval15Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 5.45, y: frame.minY + 33.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval15Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 16 Drawing
        let kMyMoney_iconCanvasbezier16Path = UIBezierPath()
        kMyMoney_iconCanvasbezier16Path.move(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 42.52))
        kMyMoney_iconCanvasbezier16Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 45.57))
        kMyMoney_iconCanvasbezier16Path.addCurve(to: CGPoint(x: frame.minX + 41.86, y: frame.minY + 58.73), controlPoint1: CGPoint(x: frame.minX + 5.13, y: frame.minY + 52.83), controlPoint2: CGPoint(x: frame.minX + 21.57, y: frame.minY + 58.73))
        kMyMoney_iconCanvasbezier16Path.addCurve(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 45.57), controlPoint1: CGPoint(x: frame.minX + 62.15, y: frame.minY + 58.73), controlPoint2: CGPoint(x: frame.minX + 78.61, y: frame.minY + 52.83))
        kMyMoney_iconCanvasbezier16Path.addLine(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 42.52))
        kMyMoney_iconCanvasbezier16Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 42.52))
        kMyMoney_iconCanvasbezier16Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier16Path.addClip()
        let kMyMoney_iconCanvasbezier16Bounds: CGRect = kMyMoney_iconCanvasbezier16Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier16Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier16Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier16Bounds.midY + -0 * kMyMoney_iconCanvasbezier16Bounds.height / 16.21),
            end: CGPoint(x: kMyMoney_iconCanvasbezier16Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier16Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier16Bounds.midY + -0 * kMyMoney_iconCanvasbezier16Bounds.height / 16.21),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 16 Drawing
        let kMyMoney_iconCanvasoval16Rect = CGRect(x: frame.minX + 5.15, y: frame.minY + 29.43, width: 73.4, height: 26.2)
        let kMyMoney_iconCanvasoval16Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval16Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval16Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval16Rect.midX + 12.71 * kMyMoney_iconCanvasoval16Rect.width / 73.4, y: kMyMoney_iconCanvasoval16Rect.midY + -21.17 * kMyMoney_iconCanvasoval16Rect.height / 26.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval16Rect.midX + 12.71 * kMyMoney_iconCanvasoval16Rect.width / 73.4, y: kMyMoney_iconCanvasoval16Rect.midY + 58.33 * kMyMoney_iconCanvasoval16Rect.height / 26.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// Text Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 41.3, y: frame.minY + 41.75)
        context.scaleBy(x: 1.2, y: 0.5)

        let textRect = CGRect(x: -24.42, y: -16.5, width: 48.83, height: 33)
        let textTextContent = "32 000"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            .font: UIFont.systemFont(ofSize: 13.5, weight: .bold),
            .foregroundColor: UIColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        let textTextRect: CGRect = CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: textTextRect, withAttributes: textFontAttributes)
        context.restoreGState()
        
        ////// Text Text Inner Shadow
        context.saveGState()
        context.clip(to: textRect)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow6.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let textOpaqueTextShadow = (shadow6.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: shadow6.shadowOffset, blur: shadow6.shadowBlurRadius, color: textOpaqueTextShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        textOpaqueTextShadow.setFill()

        let textInnerShadowFontAttributes = [
            .font: UIFont.systemFont(ofSize: 13.5, weight: .bold),
            .foregroundColor: (shadow6.shadowColor as! UIColor),
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]
        textTextContent.draw(in: textTextRect, withAttributes: textInnerShadowFontAttributes)

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        context.restoreGState()
    }

    @objc dynamic public class func drawMoneyRound10(frame: CGRect = CGRect(x: 0, y: 0, width: 141, height: 157)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let gradientColor25 = UIColor(red: 0.992, green: 0.898, blue: 0.576, alpha: 1.000)
        let gradientColor26 = UIColor(red: 1.000, green: 0.878, blue: 0.529, alpha: 1.000)
        let gradientColor27 = UIColor(red: 1.000, green: 0.902, blue: 0.537, alpha: 1.000)
        let gradientColor28 = UIColor(red: 0.984, green: 0.698, blue: 0.337, alpha: 1.000)
        let gradientColor29 = UIColor(red: 0.643, green: 0.294, blue: 0.047, alpha: 1.000)
        let gradientColor30 = UIColor(red: 0.514, green: 0.196, blue: 0.024, alpha: 1.000)
        let gradientColor31 = UIColor(red: 0.439, green: 0.145, blue: 0.024, alpha: 1.000)
        let gradientColor32 = UIColor(red: 0.486, green: 0.180, blue: 0.035, alpha: 1.000)
        let gradientColor33 = UIColor(red: 0.776, green: 0.408, blue: 0.122, alpha: 1.000)
        let gradientColor34 = UIColor(red: 0.992, green: 0.596, blue: 0.192, alpha: 1.000)
        let gradientColor35 = UIColor(red: 1.000, green: 0.635, blue: 0.208, alpha: 1.000)
        let gradientColor36 = UIColor(red: 0.945, green: 0.533, blue: 0.169, alpha: 1.000)
        let gradientColor37 = UIColor(red: 0.580, green: 0.251, blue: 0.063, alpha: 1.000)
        let gradientColor38 = UIColor(red: 0.427, green: 0.141, blue: 0.020, alpha: 1.000)
        let fillColor4 = UIColor(red: 0.231, green: 0.114, blue: 0.024, alpha: 1.000)
        let shadow6Color = UIColor(red: 0.684, green: 0.571, blue: 0.182, alpha: 1.000)

        //// Gradient Declarations
        let kMyMoney_iconCanvasgbezier36 = CGGradient(colorsSpace: nil, colors: [gradientColor25.cgColor, gradientColor26.cgColor, gradientColor27.cgColor, gradientColor28.cgColor, gradientColor29.cgColor, gradientColor30.cgColor, gradientColor31.cgColor, gradientColor31.cgColor, gradientColor32.cgColor, gradientColor33.cgColor, gradientColor34.cgColor, gradientColor35.cgColor, gradientColor36.cgColor, gradientColor37.cgColor, gradientColor38.cgColor] as CFArray, locations: [0, 0.1, 0.2, 0.28, 0.41, 0.48, 0.55, 0.58, 0.61, 0.66, 0.7, 0.78, 0.85, 0.91, 1])!

        //// Shadow Declarations
        let shadow6 = NSShadow()
        shadow6.shadowColor = shadow6Color
        shadow6.shadowOffset = CGSize(width: 3, height: 3)
        shadow6.shadowBlurRadius = 5

        //// kMyMoney_iconCanvas-group 6
        //// kMyMoney_iconCanvas-bezier124 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier124Path = UIBezierPath()
        kMyMoney_iconCanvasbezier124Path.move(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 135.98))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 139.03))
        kMyMoney_iconCanvasbezier124Path.addCurve(to: CGPoint(x: frame.minX + 41.71, y: frame.minY + 152.19), controlPoint1: CGPoint(x: frame.minX + 4.98, y: frame.minY + 146.3), controlPoint2: CGPoint(x: frame.minX + 21.42, y: frame.minY + 152.19))
        kMyMoney_iconCanvasbezier124Path.addCurve(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 139.03), controlPoint1: CGPoint(x: frame.minX + 62, y: frame.minY + 152.19), controlPoint2: CGPoint(x: frame.minX + 78.45, y: frame.minY + 146.3))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 135.98))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 135.98))
        kMyMoney_iconCanvasbezier124Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier124Path.addClip()
        let kMyMoney_iconCanvasbezier124Bounds: CGRect = kMyMoney_iconCanvasbezier124Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier124Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier124Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier124Bounds.midY + 0 * kMyMoney_iconCanvasbezier124Bounds.height / 16.21),
            end: CGPoint(x: kMyMoney_iconCanvasbezier124Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier124Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier124Bounds.midY + 0 * kMyMoney_iconCanvasbezier124Bounds.height / 16.21),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval67 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval67Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 5.45, y: frame.minY + 124.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval67Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier125 Drawing
        let kMyMoney_iconCanvasbezier125Path = UIBezierPath()
        kMyMoney_iconCanvasbezier125Path.move(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 133.52))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 136.57))
        kMyMoney_iconCanvasbezier125Path.addCurve(to: CGPoint(x: frame.minX + 41.86, y: frame.minY + 149.73), controlPoint1: CGPoint(x: frame.minX + 5.13, y: frame.minY + 143.83), controlPoint2: CGPoint(x: frame.minX + 21.57, y: frame.minY + 149.73))
        kMyMoney_iconCanvasbezier125Path.addCurve(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 136.57), controlPoint1: CGPoint(x: frame.minX + 62.15, y: frame.minY + 149.73), controlPoint2: CGPoint(x: frame.minX + 78.61, y: frame.minY + 143.83))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 133.52))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 133.52))
        kMyMoney_iconCanvasbezier125Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier125Path.addClip()
        let kMyMoney_iconCanvasbezier125Bounds: CGRect = kMyMoney_iconCanvasbezier125Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier125Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier125Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier125Bounds.midY + -0 * kMyMoney_iconCanvasbezier125Bounds.height / 16.21),
            end: CGPoint(x: kMyMoney_iconCanvasbezier125Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier125Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier125Bounds.midY + -0 * kMyMoney_iconCanvasbezier125Bounds.height / 16.21),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval68 Drawing
        let kMyMoney_iconCanvasoval68Rect = CGRect(x: frame.minX + 5.15, y: frame.minY + 120.43, width: 73.4, height: 26.2)
        let kMyMoney_iconCanvasoval68Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval68Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval68Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval68Rect.midX + 12.71 * kMyMoney_iconCanvasoval68Rect.width / 73.4, y: kMyMoney_iconCanvasoval68Rect.midY + -21.17 * kMyMoney_iconCanvasoval68Rect.height / 26.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval68Rect.midX + 12.71 * kMyMoney_iconCanvasoval68Rect.width / 73.4, y: kMyMoney_iconCanvasoval68Rect.midY + 58.33 * kMyMoney_iconCanvasoval68Rect.height / 26.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 10
        //// kMyMoney_iconCanvas-bezier89 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier89Path = UIBezierPath()
        kMyMoney_iconCanvasbezier89Path.move(to: CGPoint(x: frame.minX + 70.98, y: frame.minY + 114.51))
        kMyMoney_iconCanvasbezier89Path.addLine(to: CGPoint(x: frame.minX + 70.98, y: frame.minY + 117.27))
        kMyMoney_iconCanvasbezier89Path.addCurve(to: CGPoint(x: frame.minX + 102.22, y: frame.minY + 129.19), controlPoint1: CGPoint(x: frame.minX + 70.98, y: frame.minY + 123.86), controlPoint2: CGPoint(x: frame.minX + 84.96, y: frame.minY + 129.19))
        kMyMoney_iconCanvasbezier89Path.addCurve(to: CGPoint(x: frame.minX + 133.47, y: frame.minY + 117.27), controlPoint1: CGPoint(x: frame.minX + 119.48, y: frame.minY + 129.19), controlPoint2: CGPoint(x: frame.minX + 133.47, y: frame.minY + 123.86))
        kMyMoney_iconCanvasbezier89Path.addLine(to: CGPoint(x: frame.minX + 133.47, y: frame.minY + 114.51))
        kMyMoney_iconCanvasbezier89Path.addLine(to: CGPoint(x: frame.minX + 70.98, y: frame.minY + 114.51))
        kMyMoney_iconCanvasbezier89Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier89Path.addClip()
        let kMyMoney_iconCanvasbezier89Bounds: CGRect = kMyMoney_iconCanvasbezier89Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier89Bounds.midX + -31.24 * kMyMoney_iconCanvasbezier89Bounds.width / 62.49, y: kMyMoney_iconCanvasbezier89Bounds.midY + 0 * kMyMoney_iconCanvasbezier89Bounds.height / 14.68),
            end: CGPoint(x: kMyMoney_iconCanvasbezier89Bounds.midX + 0.09 * kMyMoney_iconCanvasbezier89Bounds.width / 62.49, y: kMyMoney_iconCanvasbezier89Bounds.midY + 0 * kMyMoney_iconCanvasbezier89Bounds.height / 14.68),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 17 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval17Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 71.45, y: frame.minY + 103.08, width: 61.8, height: 24.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval17Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier128 Drawing
        let kMyMoney_iconCanvasbezier128Path = UIBezierPath()
        kMyMoney_iconCanvasbezier128Path.move(to: CGPoint(x: frame.minX + 71.11, y: frame.minY + 112.28))
        kMyMoney_iconCanvasbezier128Path.addLine(to: CGPoint(x: frame.minX + 71.11, y: frame.minY + 115.05))
        kMyMoney_iconCanvasbezier128Path.addCurve(to: CGPoint(x: frame.minX + 102.35, y: frame.minY + 126.96), controlPoint1: CGPoint(x: frame.minX + 71.11, y: frame.minY + 121.62), controlPoint2: CGPoint(x: frame.minX + 85.09, y: frame.minY + 126.96))
        kMyMoney_iconCanvasbezier128Path.addCurve(to: CGPoint(x: frame.minX + 133.61, y: frame.minY + 115.05), controlPoint1: CGPoint(x: frame.minX + 119.61, y: frame.minY + 126.96), controlPoint2: CGPoint(x: frame.minX + 133.61, y: frame.minY + 121.62))
        kMyMoney_iconCanvasbezier128Path.addLine(to: CGPoint(x: frame.minX + 133.61, y: frame.minY + 112.28))
        kMyMoney_iconCanvasbezier128Path.addLine(to: CGPoint(x: frame.minX + 71.11, y: frame.minY + 112.28))
        kMyMoney_iconCanvasbezier128Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier128Path.addClip()
        let kMyMoney_iconCanvasbezier128Bounds: CGRect = kMyMoney_iconCanvasbezier128Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier128Bounds.midX + -31.25 * kMyMoney_iconCanvasbezier128Bounds.width / 62.5, y: kMyMoney_iconCanvasbezier128Bounds.midY + -0 * kMyMoney_iconCanvasbezier128Bounds.height / 14.68),
            end: CGPoint(x: kMyMoney_iconCanvasbezier128Bounds.midX + 0.09 * kMyMoney_iconCanvasbezier128Bounds.width / 62.5, y: kMyMoney_iconCanvasbezier128Bounds.midY + -0 * kMyMoney_iconCanvasbezier128Bounds.height / 14.68),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval71 Drawing
        let kMyMoney_iconCanvasoval71Rect = CGRect(x: frame.minX + 71.15, y: frame.minY + 100.43, width: 62.4, height: 24.2)
        let kMyMoney_iconCanvasoval71Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval71Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval71Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval71Rect.midX + 10.8 * kMyMoney_iconCanvasoval71Rect.width / 62.4, y: kMyMoney_iconCanvasoval71Rect.midY + -19.56 * kMyMoney_iconCanvasoval71Rect.height / 24.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval71Rect.midX + 10.8 * kMyMoney_iconCanvasoval71Rect.width / 62.4, y: kMyMoney_iconCanvasoval71Rect.midY + 53.87 * kMyMoney_iconCanvasoval71Rect.height / 24.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 11
        //// kMyMoney_iconCanvas-bezier126 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier126Path = UIBezierPath()
        kMyMoney_iconCanvasbezier126Path.move(to: CGPoint(x: frame.minX + 67.98, y: frame.minY + 105))
        kMyMoney_iconCanvasbezier126Path.addLine(to: CGPoint(x: frame.minX + 67.98, y: frame.minY + 107.86))
        kMyMoney_iconCanvasbezier126Path.addCurve(to: CGPoint(x: frame.minX + 99.22, y: frame.minY + 120.19), controlPoint1: CGPoint(x: frame.minX + 67.98, y: frame.minY + 114.67), controlPoint2: CGPoint(x: frame.minX + 81.96, y: frame.minY + 120.19))
        kMyMoney_iconCanvasbezier126Path.addCurve(to: CGPoint(x: frame.minX + 130.47, y: frame.minY + 107.86), controlPoint1: CGPoint(x: frame.minX + 116.48, y: frame.minY + 120.19), controlPoint2: CGPoint(x: frame.minX + 130.47, y: frame.minY + 114.67))
        kMyMoney_iconCanvasbezier126Path.addLine(to: CGPoint(x: frame.minX + 130.47, y: frame.minY + 105))
        kMyMoney_iconCanvasbezier126Path.addLine(to: CGPoint(x: frame.minX + 67.98, y: frame.minY + 105))
        kMyMoney_iconCanvasbezier126Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier126Path.addClip()
        let kMyMoney_iconCanvasbezier126Bounds: CGRect = kMyMoney_iconCanvasbezier126Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier126Bounds.midX + -31.24 * kMyMoney_iconCanvasbezier126Bounds.width / 62.49, y: kMyMoney_iconCanvasbezier126Bounds.midY + 0 * kMyMoney_iconCanvasbezier126Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier126Bounds.midX + 0.09 * kMyMoney_iconCanvasbezier126Bounds.width / 62.49, y: kMyMoney_iconCanvasbezier126Bounds.midY + 0 * kMyMoney_iconCanvasbezier126Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval69 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval69Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 68.45, y: frame.minY + 93.08, width: 61.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval69Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier127 Drawing
        let kMyMoney_iconCanvasbezier127Path = UIBezierPath()
        kMyMoney_iconCanvasbezier127Path.move(to: CGPoint(x: frame.minX + 68.11, y: frame.minY + 102.69))
        kMyMoney_iconCanvasbezier127Path.addLine(to: CGPoint(x: frame.minX + 68.11, y: frame.minY + 105.56))
        kMyMoney_iconCanvasbezier127Path.addCurve(to: CGPoint(x: frame.minX + 99.35, y: frame.minY + 117.89), controlPoint1: CGPoint(x: frame.minX + 68.11, y: frame.minY + 112.36), controlPoint2: CGPoint(x: frame.minX + 82.09, y: frame.minY + 117.89))
        kMyMoney_iconCanvasbezier127Path.addCurve(to: CGPoint(x: frame.minX + 130.61, y: frame.minY + 105.56), controlPoint1: CGPoint(x: frame.minX + 116.61, y: frame.minY + 117.89), controlPoint2: CGPoint(x: frame.minX + 130.61, y: frame.minY + 112.36))
        kMyMoney_iconCanvasbezier127Path.addLine(to: CGPoint(x: frame.minX + 130.61, y: frame.minY + 102.69))
        kMyMoney_iconCanvasbezier127Path.addLine(to: CGPoint(x: frame.minX + 68.11, y: frame.minY + 102.69))
        kMyMoney_iconCanvasbezier127Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier127Path.addClip()
        let kMyMoney_iconCanvasbezier127Bounds: CGRect = kMyMoney_iconCanvasbezier127Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier127Bounds.midX + -31.25 * kMyMoney_iconCanvasbezier127Bounds.width / 62.5, y: kMyMoney_iconCanvasbezier127Bounds.midY + -0 * kMyMoney_iconCanvasbezier127Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier127Bounds.midX + 0.09 * kMyMoney_iconCanvasbezier127Bounds.width / 62.5, y: kMyMoney_iconCanvasbezier127Bounds.midY + -0 * kMyMoney_iconCanvasbezier127Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval70 Drawing
        let kMyMoney_iconCanvasoval70Rect = CGRect(x: frame.minX + 68.15, y: frame.minY + 90.43, width: 62.4, height: 25.2)
        let kMyMoney_iconCanvasoval70Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval70Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval70Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval70Rect.midX + 10.8 * kMyMoney_iconCanvasoval70Rect.width / 62.4, y: kMyMoney_iconCanvasoval70Rect.midY + -20.36 * kMyMoney_iconCanvasoval70Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval70Rect.midX + 10.8 * kMyMoney_iconCanvasoval70Rect.width / 62.4, y: kMyMoney_iconCanvasoval70Rect.midY + 56.1 * kMyMoney_iconCanvasoval70Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 12
        //// kMyMoney_iconCanvas-bezier 18 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier18Path = UIBezierPath()
        kMyMoney_iconCanvasbezier18Path.move(to: CGPoint(x: frame.minX + 67.98, y: frame.minY + 96.02))
        kMyMoney_iconCanvasbezier18Path.addLine(to: CGPoint(x: frame.minX + 67.98, y: frame.minY + 98.69))
        kMyMoney_iconCanvasbezier18Path.addCurve(to: CGPoint(x: frame.minX + 99.22, y: frame.minY + 110.19), controlPoint1: CGPoint(x: frame.minX + 67.98, y: frame.minY + 105.04), controlPoint2: CGPoint(x: frame.minX + 81.96, y: frame.minY + 110.19))
        kMyMoney_iconCanvasbezier18Path.addCurve(to: CGPoint(x: frame.minX + 130.47, y: frame.minY + 98.69), controlPoint1: CGPoint(x: frame.minX + 116.48, y: frame.minY + 110.19), controlPoint2: CGPoint(x: frame.minX + 130.47, y: frame.minY + 105.04))
        kMyMoney_iconCanvasbezier18Path.addLine(to: CGPoint(x: frame.minX + 130.47, y: frame.minY + 96.02))
        kMyMoney_iconCanvasbezier18Path.addLine(to: CGPoint(x: frame.minX + 67.98, y: frame.minY + 96.02))
        kMyMoney_iconCanvasbezier18Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier18Path.addClip()
        let kMyMoney_iconCanvasbezier18Bounds: CGRect = kMyMoney_iconCanvasbezier18Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier18Bounds.midX + -31.24 * kMyMoney_iconCanvasbezier18Bounds.width / 62.49, y: kMyMoney_iconCanvasbezier18Bounds.midY + 0 * kMyMoney_iconCanvasbezier18Bounds.height / 14.17),
            end: CGPoint(x: kMyMoney_iconCanvasbezier18Bounds.midX + 0.09 * kMyMoney_iconCanvasbezier18Bounds.width / 62.49, y: kMyMoney_iconCanvasbezier18Bounds.midY + 0 * kMyMoney_iconCanvasbezier18Bounds.height / 14.17),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 18 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval18Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 68.45, y: frame.minY + 85.08, width: 61.8, height: 23.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval18Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 19 Drawing
        let kMyMoney_iconCanvasbezier19Path = UIBezierPath()
        kMyMoney_iconCanvasbezier19Path.move(to: CGPoint(x: frame.minX + 68.11, y: frame.minY + 93.87))
        kMyMoney_iconCanvasbezier19Path.addLine(to: CGPoint(x: frame.minX + 68.11, y: frame.minY + 96.54))
        kMyMoney_iconCanvasbezier19Path.addCurve(to: CGPoint(x: frame.minX + 99.35, y: frame.minY + 108.04), controlPoint1: CGPoint(x: frame.minX + 68.11, y: frame.minY + 102.88), controlPoint2: CGPoint(x: frame.minX + 82.09, y: frame.minY + 108.04))
        kMyMoney_iconCanvasbezier19Path.addCurve(to: CGPoint(x: frame.minX + 130.61, y: frame.minY + 96.54), controlPoint1: CGPoint(x: frame.minX + 116.61, y: frame.minY + 108.04), controlPoint2: CGPoint(x: frame.minX + 130.61, y: frame.minY + 102.88))
        kMyMoney_iconCanvasbezier19Path.addLine(to: CGPoint(x: frame.minX + 130.61, y: frame.minY + 93.87))
        kMyMoney_iconCanvasbezier19Path.addLine(to: CGPoint(x: frame.minX + 68.11, y: frame.minY + 93.87))
        kMyMoney_iconCanvasbezier19Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier19Path.addClip()
        let kMyMoney_iconCanvasbezier19Bounds: CGRect = kMyMoney_iconCanvasbezier19Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier19Bounds.midX + -31.25 * kMyMoney_iconCanvasbezier19Bounds.width / 62.5, y: kMyMoney_iconCanvasbezier19Bounds.midY + -0 * kMyMoney_iconCanvasbezier19Bounds.height / 14.17),
            end: CGPoint(x: kMyMoney_iconCanvasbezier19Bounds.midX + 0.09 * kMyMoney_iconCanvasbezier19Bounds.width / 62.5, y: kMyMoney_iconCanvasbezier19Bounds.midY + -0 * kMyMoney_iconCanvasbezier19Bounds.height / 14.17),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 19 Drawing
        let kMyMoney_iconCanvasoval19Rect = CGRect(x: frame.minX + 68.15, y: frame.minY + 82.43, width: 62.4, height: 23.2)
        let kMyMoney_iconCanvasoval19Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval19Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval19Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval19Rect.midX + 10.8 * kMyMoney_iconCanvasoval19Rect.width / 62.4, y: kMyMoney_iconCanvasoval19Rect.midY + -18.75 * kMyMoney_iconCanvasoval19Rect.height / 23.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval19Rect.midX + 10.8 * kMyMoney_iconCanvasoval19Rect.width / 62.4, y: kMyMoney_iconCanvasoval19Rect.midY + 51.65 * kMyMoney_iconCanvasoval19Rect.height / 23.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 13
        //// kMyMoney_iconCanvas-bezier 20 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier20Path = UIBezierPath()
        kMyMoney_iconCanvasbezier20Path.move(to: CGPoint(x: frame.minX + 70.98, y: frame.minY + 85.51))
        kMyMoney_iconCanvasbezier20Path.addLine(to: CGPoint(x: frame.minX + 70.98, y: frame.minY + 88.27))
        kMyMoney_iconCanvasbezier20Path.addCurve(to: CGPoint(x: frame.minX + 102.22, y: frame.minY + 100.19), controlPoint1: CGPoint(x: frame.minX + 70.98, y: frame.minY + 94.86), controlPoint2: CGPoint(x: frame.minX + 84.96, y: frame.minY + 100.19))
        kMyMoney_iconCanvasbezier20Path.addCurve(to: CGPoint(x: frame.minX + 133.47, y: frame.minY + 88.27), controlPoint1: CGPoint(x: frame.minX + 119.48, y: frame.minY + 100.19), controlPoint2: CGPoint(x: frame.minX + 133.47, y: frame.minY + 94.86))
        kMyMoney_iconCanvasbezier20Path.addLine(to: CGPoint(x: frame.minX + 133.47, y: frame.minY + 85.51))
        kMyMoney_iconCanvasbezier20Path.addLine(to: CGPoint(x: frame.minX + 70.98, y: frame.minY + 85.51))
        kMyMoney_iconCanvasbezier20Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier20Path.addClip()
        let kMyMoney_iconCanvasbezier20Bounds: CGRect = kMyMoney_iconCanvasbezier20Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier20Bounds.midX + -31.24 * kMyMoney_iconCanvasbezier20Bounds.width / 62.49, y: kMyMoney_iconCanvasbezier20Bounds.midY + 0 * kMyMoney_iconCanvasbezier20Bounds.height / 14.68),
            end: CGPoint(x: kMyMoney_iconCanvasbezier20Bounds.midX + 0.09 * kMyMoney_iconCanvasbezier20Bounds.width / 62.49, y: kMyMoney_iconCanvasbezier20Bounds.midY + 0 * kMyMoney_iconCanvasbezier20Bounds.height / 14.68),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 20 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval20Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 71.45, y: frame.minY + 74.08, width: 61.8, height: 24.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval20Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 21 Drawing
        let kMyMoney_iconCanvasbezier21Path = UIBezierPath()
        kMyMoney_iconCanvasbezier21Path.move(to: CGPoint(x: frame.minX + 71.11, y: frame.minY + 83.28))
        kMyMoney_iconCanvasbezier21Path.addLine(to: CGPoint(x: frame.minX + 71.11, y: frame.minY + 86.05))
        kMyMoney_iconCanvasbezier21Path.addCurve(to: CGPoint(x: frame.minX + 102.35, y: frame.minY + 97.96), controlPoint1: CGPoint(x: frame.minX + 71.11, y: frame.minY + 92.62), controlPoint2: CGPoint(x: frame.minX + 85.09, y: frame.minY + 97.96))
        kMyMoney_iconCanvasbezier21Path.addCurve(to: CGPoint(x: frame.minX + 133.61, y: frame.minY + 86.05), controlPoint1: CGPoint(x: frame.minX + 119.61, y: frame.minY + 97.96), controlPoint2: CGPoint(x: frame.minX + 133.61, y: frame.minY + 92.62))
        kMyMoney_iconCanvasbezier21Path.addLine(to: CGPoint(x: frame.minX + 133.61, y: frame.minY + 83.28))
        kMyMoney_iconCanvasbezier21Path.addLine(to: CGPoint(x: frame.minX + 71.11, y: frame.minY + 83.28))
        kMyMoney_iconCanvasbezier21Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier21Path.addClip()
        let kMyMoney_iconCanvasbezier21Bounds: CGRect = kMyMoney_iconCanvasbezier21Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier21Bounds.midX + -31.25 * kMyMoney_iconCanvasbezier21Bounds.width / 62.5, y: kMyMoney_iconCanvasbezier21Bounds.midY + -0 * kMyMoney_iconCanvasbezier21Bounds.height / 14.68),
            end: CGPoint(x: kMyMoney_iconCanvasbezier21Bounds.midX + 0.09 * kMyMoney_iconCanvasbezier21Bounds.width / 62.5, y: kMyMoney_iconCanvasbezier21Bounds.midY + -0 * kMyMoney_iconCanvasbezier21Bounds.height / 14.68),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 21 Drawing
        let kMyMoney_iconCanvasoval21Rect = CGRect(x: frame.minX + 71.15, y: frame.minY + 71.43, width: 62.4, height: 24.2)
        let kMyMoney_iconCanvasoval21Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval21Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval21Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval21Rect.midX + 10.8 * kMyMoney_iconCanvasoval21Rect.width / 62.4, y: kMyMoney_iconCanvasoval21Rect.midY + -19.56 * kMyMoney_iconCanvasoval21Rect.height / 24.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval21Rect.midX + 10.8 * kMyMoney_iconCanvasoval21Rect.width / 62.4, y: kMyMoney_iconCanvasoval21Rect.midY + 53.87 * kMyMoney_iconCanvasoval21Rect.height / 24.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group
        //// kMyMoney_iconCanvas-bezier Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezierPath = UIBezierPath()
        kMyMoney_iconCanvasbezierPath.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 126.96))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 130.2))
        kMyMoney_iconCanvasbezierPath.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 144.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 137.93), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 144.19))
        kMyMoney_iconCanvasbezierPath.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 130.2), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 144.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 137.93))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 126.96))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 126.96))
        kMyMoney_iconCanvasbezierPath.close()
        context.saveGState()
        kMyMoney_iconCanvasbezierPath.addClip()
        let kMyMoney_iconCanvasbezierBounds: CGRect = kMyMoney_iconCanvasbezierPath.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezierBounds.midX + -36.73 * kMyMoney_iconCanvasbezierBounds.width / 73.47, y: kMyMoney_iconCanvasbezierBounds.midY + 0 * kMyMoney_iconCanvasbezierBounds.height / 17.23),
            end: CGPoint(x: kMyMoney_iconCanvasbezierBounds.midX + 0.1 * kMyMoney_iconCanvasbezierBounds.width / 73.47, y: kMyMoney_iconCanvasbezierBounds.midY + 0 * kMyMoney_iconCanvasbezierBounds.height / 17.23),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasovalPath = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 114.08, width: 72.8, height: 28.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasovalPath.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 2 Drawing
        let kMyMoney_iconCanvasbezier2Path = UIBezierPath()
        kMyMoney_iconCanvasbezier2Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 124.34))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 127.58))
        kMyMoney_iconCanvasbezier2Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 141.57), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 135.31), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 141.57))
        kMyMoney_iconCanvasbezier2Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 127.58), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 141.57), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 135.31))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 124.34))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 124.34))
        kMyMoney_iconCanvasbezier2Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier2Path.addClip()
        let kMyMoney_iconCanvasbezier2Bounds: CGRect = kMyMoney_iconCanvasbezier2Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier2Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier2Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier2Bounds.midY + -0 * kMyMoney_iconCanvasbezier2Bounds.height / 17.23),
            end: CGPoint(x: kMyMoney_iconCanvasbezier2Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier2Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier2Bounds.midY + -0 * kMyMoney_iconCanvasbezier2Bounds.height / 17.23),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 2 Drawing
        let kMyMoney_iconCanvasoval2Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 110.43, width: 73.4, height: 28.2)
        let kMyMoney_iconCanvasoval2Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval2Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval2Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval2Rect.midX + 12.71 * kMyMoney_iconCanvasoval2Rect.width / 73.4, y: kMyMoney_iconCanvasoval2Rect.midY + -22.79 * kMyMoney_iconCanvasoval2Rect.height / 28.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval2Rect.midX + 12.71 * kMyMoney_iconCanvasoval2Rect.width / 73.4, y: kMyMoney_iconCanvasoval2Rect.midY + 62.78 * kMyMoney_iconCanvasoval2Rect.height / 28.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 2
        //// kMyMoney_iconCanvas-bezier 3 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier3Path = UIBezierPath()
        kMyMoney_iconCanvasbezier3Path.move(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 114.51))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 117.27))
        kMyMoney_iconCanvasbezier3Path.addCurve(to: CGPoint(x: frame.minX + 41.71, y: frame.minY + 129.19), controlPoint1: CGPoint(x: frame.minX + 4.98, y: frame.minY + 123.85), controlPoint2: CGPoint(x: frame.minX + 21.42, y: frame.minY + 129.19))
        kMyMoney_iconCanvasbezier3Path.addCurve(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 117.27), controlPoint1: CGPoint(x: frame.minX + 62, y: frame.minY + 129.19), controlPoint2: CGPoint(x: frame.minX + 78.45, y: frame.minY + 123.85))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 114.51))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 114.51))
        kMyMoney_iconCanvasbezier3Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier3Path.addClip()
        let kMyMoney_iconCanvasbezier3Bounds: CGRect = kMyMoney_iconCanvasbezier3Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier3Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier3Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier3Bounds.midY + 0 * kMyMoney_iconCanvasbezier3Bounds.height / 14.68),
            end: CGPoint(x: kMyMoney_iconCanvasbezier3Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier3Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier3Bounds.midY + 0 * kMyMoney_iconCanvasbezier3Bounds.height / 14.68),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 3 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval3Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 5.45, y: frame.minY + 103.08, width: 72.8, height: 24.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval3Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 4 Drawing
        let kMyMoney_iconCanvasbezier4Path = UIBezierPath()
        kMyMoney_iconCanvasbezier4Path.move(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 112.28))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 115.04))
        kMyMoney_iconCanvasbezier4Path.addCurve(to: CGPoint(x: frame.minX + 41.86, y: frame.minY + 126.96), controlPoint1: CGPoint(x: frame.minX + 5.13, y: frame.minY + 121.62), controlPoint2: CGPoint(x: frame.minX + 21.57, y: frame.minY + 126.96))
        kMyMoney_iconCanvasbezier4Path.addCurve(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 115.04), controlPoint1: CGPoint(x: frame.minX + 62.15, y: frame.minY + 126.96), controlPoint2: CGPoint(x: frame.minX + 78.61, y: frame.minY + 121.62))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 112.28))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 112.28))
        kMyMoney_iconCanvasbezier4Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier4Path.addClip()
        let kMyMoney_iconCanvasbezier4Bounds: CGRect = kMyMoney_iconCanvasbezier4Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier4Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier4Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier4Bounds.midY + -0 * kMyMoney_iconCanvasbezier4Bounds.height / 14.68),
            end: CGPoint(x: kMyMoney_iconCanvasbezier4Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier4Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier4Bounds.midY + -0 * kMyMoney_iconCanvasbezier4Bounds.height / 14.68),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 4 Drawing
        let kMyMoney_iconCanvasoval4Rect = CGRect(x: frame.minX + 5.15, y: frame.minY + 100.43, width: 73.4, height: 24.2)
        let kMyMoney_iconCanvasoval4Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval4Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval4Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval4Rect.midX + 12.71 * kMyMoney_iconCanvasoval4Rect.width / 73.4, y: kMyMoney_iconCanvasoval4Rect.midY + -19.56 * kMyMoney_iconCanvasoval4Rect.height / 24.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval4Rect.midX + 12.71 * kMyMoney_iconCanvasoval4Rect.width / 73.4, y: kMyMoney_iconCanvasoval4Rect.midY + 53.87 * kMyMoney_iconCanvasoval4Rect.height / 24.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 3
        //// kMyMoney_iconCanvas-bezier 5 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier5Path = UIBezierPath()
        kMyMoney_iconCanvasbezier5Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 99.45))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 102.79))
        kMyMoney_iconCanvasbezier5Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 117.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 110.74), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 117.19))
        kMyMoney_iconCanvasbezier5Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 102.79), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 117.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 110.74))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 99.45))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 99.45))
        kMyMoney_iconCanvasbezier5Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier5Path.addClip()
        let kMyMoney_iconCanvasbezier5Bounds: CGRect = kMyMoney_iconCanvasbezier5Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier5Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier5Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier5Bounds.midY + 0 * kMyMoney_iconCanvasbezier5Bounds.height / 17.74),
            end: CGPoint(x: kMyMoney_iconCanvasbezier5Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier5Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier5Bounds.midY + 0 * kMyMoney_iconCanvasbezier5Bounds.height / 17.74),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 5 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval5Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 86.08, width: 72.8, height: 29.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval5Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 6 Drawing
        let kMyMoney_iconCanvasbezier6Path = UIBezierPath()
        kMyMoney_iconCanvasbezier6Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 96.76))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 100.09))
        kMyMoney_iconCanvasbezier6Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 114.49), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 108.04), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 114.49))
        kMyMoney_iconCanvasbezier6Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 100.09), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 114.49), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 108.04))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 96.76))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 96.76))
        kMyMoney_iconCanvasbezier6Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier6Path.addClip()
        let kMyMoney_iconCanvasbezier6Bounds: CGRect = kMyMoney_iconCanvasbezier6Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier6Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier6Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier6Bounds.midY + -0 * kMyMoney_iconCanvasbezier6Bounds.height / 17.74),
            end: CGPoint(x: kMyMoney_iconCanvasbezier6Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier6Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier6Bounds.midY + -0 * kMyMoney_iconCanvasbezier6Bounds.height / 17.74),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 6 Drawing
        let kMyMoney_iconCanvasoval6Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 82.43, width: 73.4, height: 29.2)
        let kMyMoney_iconCanvasoval6Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval6Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval6Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval6Rect.midX + 12.71 * kMyMoney_iconCanvasoval6Rect.width / 73.4, y: kMyMoney_iconCanvasoval6Rect.midY + -23.6 * kMyMoney_iconCanvasoval6Rect.height / 29.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval6Rect.midX + 12.71 * kMyMoney_iconCanvasoval6Rect.width / 73.4, y: kMyMoney_iconCanvasoval6Rect.midY + 65 * kMyMoney_iconCanvasoval6Rect.height / 29.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 4
        //// kMyMoney_iconCanvas-bezier 7 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier7Path = UIBezierPath()
        kMyMoney_iconCanvasbezier7Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 86.49))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 89.45))
        kMyMoney_iconCanvasbezier7Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 102.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 96.48), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 102.19))
        kMyMoney_iconCanvasbezier7Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 89.45), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 102.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 96.48))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 86.49))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 86.49))
        kMyMoney_iconCanvasbezier7Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier7Path.addClip()
        let kMyMoney_iconCanvasbezier7Bounds: CGRect = kMyMoney_iconCanvasbezier7Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier7Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier7Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier7Bounds.midY + 0 * kMyMoney_iconCanvasbezier7Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier7Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier7Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier7Bounds.midY + 0 * kMyMoney_iconCanvasbezier7Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 7 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval7Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 74.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval7Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 8 Drawing
        let kMyMoney_iconCanvasbezier8Path = UIBezierPath()
        kMyMoney_iconCanvasbezier8Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 84.11))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 87.06))
        kMyMoney_iconCanvasbezier8Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 99.8), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 94.1), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 99.8))
        kMyMoney_iconCanvasbezier8Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 87.06), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 99.8), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 94.1))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 84.11))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 84.11))
        kMyMoney_iconCanvasbezier8Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier8Path.addClip()
        let kMyMoney_iconCanvasbezier8Bounds: CGRect = kMyMoney_iconCanvasbezier8Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier8Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier8Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier8Bounds.midY + -0 * kMyMoney_iconCanvasbezier8Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier8Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier8Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier8Bounds.midY + -0 * kMyMoney_iconCanvasbezier8Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 8 Drawing
        let kMyMoney_iconCanvasoval8Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 71.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval8Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval8Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval8Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval8Rect.midX + 12.71 * kMyMoney_iconCanvasoval8Rect.width / 73.4, y: kMyMoney_iconCanvasoval8Rect.midY + -20.36 * kMyMoney_iconCanvasoval8Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval8Rect.midX + 12.71 * kMyMoney_iconCanvasoval8Rect.width / 73.4, y: kMyMoney_iconCanvasoval8Rect.midY + 56.1 * kMyMoney_iconCanvasoval8Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 5
        //// kMyMoney_iconCanvas-bezier 9 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier9Path = UIBezierPath()
        kMyMoney_iconCanvasbezier9Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 75.51))
        kMyMoney_iconCanvasbezier9Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 78.27))
        kMyMoney_iconCanvasbezier9Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 90.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 84.85), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 90.19))
        kMyMoney_iconCanvasbezier9Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 78.27), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 90.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 84.85))
        kMyMoney_iconCanvasbezier9Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 75.51))
        kMyMoney_iconCanvasbezier9Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 75.51))
        kMyMoney_iconCanvasbezier9Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier9Path.addClip()
        let kMyMoney_iconCanvasbezier9Bounds: CGRect = kMyMoney_iconCanvasbezier9Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier9Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier9Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier9Bounds.midY + 0 * kMyMoney_iconCanvasbezier9Bounds.height / 14.68),
            end: CGPoint(x: kMyMoney_iconCanvasbezier9Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier9Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier9Bounds.midY + 0 * kMyMoney_iconCanvasbezier9Bounds.height / 14.68),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 9 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval9Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 64.08, width: 72.8, height: 24.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval9Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 10 Drawing
        let kMyMoney_iconCanvasbezier10Path = UIBezierPath()
        kMyMoney_iconCanvasbezier10Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 73.28))
        kMyMoney_iconCanvasbezier10Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 76.04))
        kMyMoney_iconCanvasbezier10Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 87.96), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 82.62), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 87.96))
        kMyMoney_iconCanvasbezier10Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 76.04), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 87.96), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 82.62))
        kMyMoney_iconCanvasbezier10Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 73.28))
        kMyMoney_iconCanvasbezier10Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 73.28))
        kMyMoney_iconCanvasbezier10Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier10Path.addClip()
        let kMyMoney_iconCanvasbezier10Bounds: CGRect = kMyMoney_iconCanvasbezier10Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier10Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier10Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier10Bounds.midY + -0 * kMyMoney_iconCanvasbezier10Bounds.height / 14.68),
            end: CGPoint(x: kMyMoney_iconCanvasbezier10Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier10Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier10Bounds.midY + -0 * kMyMoney_iconCanvasbezier10Bounds.height / 14.68),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 10 Drawing
        let kMyMoney_iconCanvasoval10Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 61.43, width: 73.4, height: 24.2)
        let kMyMoney_iconCanvasoval10Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval10Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval10Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval10Rect.midX + 12.71 * kMyMoney_iconCanvasoval10Rect.width / 73.4, y: kMyMoney_iconCanvasoval10Rect.midY + -19.56 * kMyMoney_iconCanvasoval10Rect.height / 24.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval10Rect.midX + 12.71 * kMyMoney_iconCanvasoval10Rect.width / 73.4, y: kMyMoney_iconCanvasoval10Rect.midY + 53.87 * kMyMoney_iconCanvasoval10Rect.height / 24.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 7
        //// kMyMoney_iconCanvas-bezier 11 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier11Path = UIBezierPath()
        kMyMoney_iconCanvasbezier11Path.move(to: CGPoint(x: frame.minX + 19.98, y: frame.minY + 66.49))
        kMyMoney_iconCanvasbezier11Path.addLine(to: CGPoint(x: frame.minX + 19.98, y: frame.minY + 69.45))
        kMyMoney_iconCanvasbezier11Path.addCurve(to: CGPoint(x: frame.minX + 56.71, y: frame.minY + 82.19), controlPoint1: CGPoint(x: frame.minX + 19.98, y: frame.minY + 76.48), controlPoint2: CGPoint(x: frame.minX + 36.42, y: frame.minY + 82.19))
        kMyMoney_iconCanvasbezier11Path.addCurve(to: CGPoint(x: frame.minX + 93.45, y: frame.minY + 69.45), controlPoint1: CGPoint(x: frame.minX + 77, y: frame.minY + 82.19), controlPoint2: CGPoint(x: frame.minX + 93.45, y: frame.minY + 76.48))
        kMyMoney_iconCanvasbezier11Path.addLine(to: CGPoint(x: frame.minX + 93.45, y: frame.minY + 66.49))
        kMyMoney_iconCanvasbezier11Path.addLine(to: CGPoint(x: frame.minX + 19.98, y: frame.minY + 66.49))
        kMyMoney_iconCanvasbezier11Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier11Path.addClip()
        let kMyMoney_iconCanvasbezier11Bounds: CGRect = kMyMoney_iconCanvasbezier11Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier11Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier11Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier11Bounds.midY + 0 * kMyMoney_iconCanvasbezier11Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier11Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier11Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier11Bounds.midY + 0 * kMyMoney_iconCanvasbezier11Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 11 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval11Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 20.45, y: frame.minY + 54.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval11Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 12 Drawing
        let kMyMoney_iconCanvasbezier12Path = UIBezierPath()
        kMyMoney_iconCanvasbezier12Path.move(to: CGPoint(x: frame.minX + 20.13, y: frame.minY + 64.11))
        kMyMoney_iconCanvasbezier12Path.addLine(to: CGPoint(x: frame.minX + 20.13, y: frame.minY + 67.06))
        kMyMoney_iconCanvasbezier12Path.addCurve(to: CGPoint(x: frame.minX + 56.86, y: frame.minY + 79.8), controlPoint1: CGPoint(x: frame.minX + 20.13, y: frame.minY + 74.1), controlPoint2: CGPoint(x: frame.minX + 36.57, y: frame.minY + 79.8))
        kMyMoney_iconCanvasbezier12Path.addCurve(to: CGPoint(x: frame.minX + 93.61, y: frame.minY + 67.06), controlPoint1: CGPoint(x: frame.minX + 77.15, y: frame.minY + 79.8), controlPoint2: CGPoint(x: frame.minX + 93.61, y: frame.minY + 74.1))
        kMyMoney_iconCanvasbezier12Path.addLine(to: CGPoint(x: frame.minX + 93.61, y: frame.minY + 64.11))
        kMyMoney_iconCanvasbezier12Path.addLine(to: CGPoint(x: frame.minX + 20.13, y: frame.minY + 64.11))
        kMyMoney_iconCanvasbezier12Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier12Path.addClip()
        let kMyMoney_iconCanvasbezier12Bounds: CGRect = kMyMoney_iconCanvasbezier12Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier12Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier12Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier12Bounds.midY + -0 * kMyMoney_iconCanvasbezier12Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier12Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier12Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier12Bounds.midY + -0 * kMyMoney_iconCanvasbezier12Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 12 Drawing
        let kMyMoney_iconCanvasoval12Rect = CGRect(x: frame.minX + 20.15, y: frame.minY + 51.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval12Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval12Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval12Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval12Rect.midX + 12.71 * kMyMoney_iconCanvasoval12Rect.width / 73.4, y: kMyMoney_iconCanvasoval12Rect.midY + -20.36 * kMyMoney_iconCanvasoval12Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval12Rect.midX + 12.71 * kMyMoney_iconCanvasoval12Rect.width / 73.4, y: kMyMoney_iconCanvasoval12Rect.midY + 56.1 * kMyMoney_iconCanvasoval12Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 8
        //// kMyMoney_iconCanvas-bezier 13 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier13Path = UIBezierPath()
        kMyMoney_iconCanvasbezier13Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 56))
        kMyMoney_iconCanvasbezier13Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 58.86))
        kMyMoney_iconCanvasbezier13Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 71.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 65.67), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 71.19))
        kMyMoney_iconCanvasbezier13Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 58.86), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 71.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 65.67))
        kMyMoney_iconCanvasbezier13Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 56))
        kMyMoney_iconCanvasbezier13Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 56))
        kMyMoney_iconCanvasbezier13Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier13Path.addClip()
        let kMyMoney_iconCanvasbezier13Bounds: CGRect = kMyMoney_iconCanvasbezier13Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier13Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier13Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier13Bounds.midY + 0 * kMyMoney_iconCanvasbezier13Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier13Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier13Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier13Bounds.midY + 0 * kMyMoney_iconCanvasbezier13Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 13 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval13Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 44.08, width: 72.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval13Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 14 Drawing
        let kMyMoney_iconCanvasbezier14Path = UIBezierPath()
        kMyMoney_iconCanvasbezier14Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 53.7))
        kMyMoney_iconCanvasbezier14Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 56.55))
        kMyMoney_iconCanvasbezier14Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 68.88), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 63.36), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 68.88))
        kMyMoney_iconCanvasbezier14Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 56.55), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 68.88), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 63.36))
        kMyMoney_iconCanvasbezier14Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 53.7))
        kMyMoney_iconCanvasbezier14Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 53.7))
        kMyMoney_iconCanvasbezier14Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier14Path.addClip()
        let kMyMoney_iconCanvasbezier14Bounds: CGRect = kMyMoney_iconCanvasbezier14Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier14Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier14Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier14Bounds.midY + -0 * kMyMoney_iconCanvasbezier14Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier14Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier14Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier14Bounds.midY + -0 * kMyMoney_iconCanvasbezier14Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 14 Drawing
        let kMyMoney_iconCanvasoval14Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 41.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval14Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval14Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval14Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval14Rect.midX + 12.71 * kMyMoney_iconCanvasoval14Rect.width / 73.4, y: kMyMoney_iconCanvasoval14Rect.midY + -20.36 * kMyMoney_iconCanvasoval14Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval14Rect.midX + 12.71 * kMyMoney_iconCanvasoval14Rect.width / 73.4, y: kMyMoney_iconCanvasoval14Rect.midY + 56.1 * kMyMoney_iconCanvasoval14Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 9
        //// kMyMoney_iconCanvas-bezier 15 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier15Path = UIBezierPath()
        kMyMoney_iconCanvasbezier15Path.move(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 46))
        kMyMoney_iconCanvasbezier15Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 48.86))
        kMyMoney_iconCanvasbezier15Path.addCurve(to: CGPoint(x: frame.minX + 41.71, y: frame.minY + 61.19), controlPoint1: CGPoint(x: frame.minX + 4.98, y: frame.minY + 55.67), controlPoint2: CGPoint(x: frame.minX + 21.42, y: frame.minY + 61.19))
        kMyMoney_iconCanvasbezier15Path.addCurve(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 48.86), controlPoint1: CGPoint(x: frame.minX + 62, y: frame.minY + 61.19), controlPoint2: CGPoint(x: frame.minX + 78.45, y: frame.minY + 55.67))
        kMyMoney_iconCanvasbezier15Path.addLine(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 46))
        kMyMoney_iconCanvasbezier15Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 46))
        kMyMoney_iconCanvasbezier15Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier15Path.addClip()
        let kMyMoney_iconCanvasbezier15Bounds: CGRect = kMyMoney_iconCanvasbezier15Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier15Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier15Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier15Bounds.midY + 0 * kMyMoney_iconCanvasbezier15Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier15Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier15Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier15Bounds.midY + 0 * kMyMoney_iconCanvasbezier15Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 15 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval15Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 5.45, y: frame.minY + 34.08, width: 72.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval15Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 16 Drawing
        let kMyMoney_iconCanvasbezier16Path = UIBezierPath()
        kMyMoney_iconCanvasbezier16Path.move(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 43.7))
        kMyMoney_iconCanvasbezier16Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 46.55))
        kMyMoney_iconCanvasbezier16Path.addCurve(to: CGPoint(x: frame.minX + 41.86, y: frame.minY + 58.88), controlPoint1: CGPoint(x: frame.minX + 5.13, y: frame.minY + 53.36), controlPoint2: CGPoint(x: frame.minX + 21.57, y: frame.minY + 58.88))
        kMyMoney_iconCanvasbezier16Path.addCurve(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 46.55), controlPoint1: CGPoint(x: frame.minX + 62.15, y: frame.minY + 58.88), controlPoint2: CGPoint(x: frame.minX + 78.61, y: frame.minY + 53.36))
        kMyMoney_iconCanvasbezier16Path.addLine(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 43.7))
        kMyMoney_iconCanvasbezier16Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 43.7))
        kMyMoney_iconCanvasbezier16Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier16Path.addClip()
        let kMyMoney_iconCanvasbezier16Bounds: CGRect = kMyMoney_iconCanvasbezier16Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier16Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier16Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier16Bounds.midY + -0 * kMyMoney_iconCanvasbezier16Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier16Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier16Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier16Bounds.midY + -0 * kMyMoney_iconCanvasbezier16Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 16 Drawing
        let kMyMoney_iconCanvasoval16Rect = CGRect(x: frame.minX + 5.15, y: frame.minY + 31.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval16Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval16Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval16Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval16Rect.midX + 12.71 * kMyMoney_iconCanvasoval16Rect.width / 73.4, y: kMyMoney_iconCanvasoval16Rect.midY + -20.36 * kMyMoney_iconCanvasoval16Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval16Rect.midX + 12.71 * kMyMoney_iconCanvasoval16Rect.width / 73.4, y: kMyMoney_iconCanvasoval16Rect.midY + 56.1 * kMyMoney_iconCanvasoval16Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// Text 2 Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 46, y: frame.minY + 41.75)
        context.scaleBy(x: 1.2, y: 0.5)

        let text2Rect = CGRect(x: -27.5, y: -16.5, width: 55, height: 33)
        let text2TextContent = "64 000"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [
            .font: UIFont.systemFont(ofSize: 13.5, weight: .bold),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text2Style,
        ] as [NSAttributedString.Key: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        let text2TextRect: CGRect = CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight)
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: text2TextRect, withAttributes: text2FontAttributes)
        context.restoreGState()
        
        ////// Text 2 Text Inner Shadow
        context.saveGState()
        context.clip(to: text2Rect)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow6.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let text2OpaqueTextShadow = (shadow6.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: shadow6.shadowOffset, blur: shadow6.shadowBlurRadius, color: text2OpaqueTextShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        text2OpaqueTextShadow.setFill()

        let text2InnerShadowFontAttributes = [
            .font: UIFont.systemFont(ofSize: 13.5, weight: .bold),
            .foregroundColor: (shadow6.shadowColor as! UIColor),
            .paragraphStyle: text2Style,
        ] as [NSAttributedString.Key: Any]
        text2TextContent.draw(in: text2TextRect, withAttributes: text2InnerShadowFontAttributes)

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        context.restoreGState()
    }

    @objc dynamic public class func drawMoneyRound11(frame: CGRect = CGRect(x: 0, y: 0, width: 141, height: 157)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let gradientColor25 = UIColor(red: 0.992, green: 0.898, blue: 0.576, alpha: 1.000)
        let gradientColor26 = UIColor(red: 1.000, green: 0.878, blue: 0.529, alpha: 1.000)
        let gradientColor27 = UIColor(red: 1.000, green: 0.902, blue: 0.537, alpha: 1.000)
        let gradientColor28 = UIColor(red: 0.984, green: 0.698, blue: 0.337, alpha: 1.000)
        let gradientColor29 = UIColor(red: 0.643, green: 0.294, blue: 0.047, alpha: 1.000)
        let gradientColor30 = UIColor(red: 0.514, green: 0.196, blue: 0.024, alpha: 1.000)
        let gradientColor31 = UIColor(red: 0.439, green: 0.145, blue: 0.024, alpha: 1.000)
        let gradientColor32 = UIColor(red: 0.486, green: 0.180, blue: 0.035, alpha: 1.000)
        let gradientColor33 = UIColor(red: 0.776, green: 0.408, blue: 0.122, alpha: 1.000)
        let gradientColor34 = UIColor(red: 0.992, green: 0.596, blue: 0.192, alpha: 1.000)
        let gradientColor35 = UIColor(red: 1.000, green: 0.635, blue: 0.208, alpha: 1.000)
        let gradientColor36 = UIColor(red: 0.945, green: 0.533, blue: 0.169, alpha: 1.000)
        let gradientColor37 = UIColor(red: 0.580, green: 0.251, blue: 0.063, alpha: 1.000)
        let gradientColor38 = UIColor(red: 0.427, green: 0.141, blue: 0.020, alpha: 1.000)
        let fillColor4 = UIColor(red: 0.231, green: 0.114, blue: 0.024, alpha: 1.000)
        let shadow6Color = UIColor(red: 0.684, green: 0.571, blue: 0.182, alpha: 1.000)

        //// Gradient Declarations
        let kMyMoney_iconCanvasgbezier36 = CGGradient(colorsSpace: nil, colors: [gradientColor25.cgColor, gradientColor26.cgColor, gradientColor27.cgColor, gradientColor28.cgColor, gradientColor29.cgColor, gradientColor30.cgColor, gradientColor31.cgColor, gradientColor31.cgColor, gradientColor32.cgColor, gradientColor33.cgColor, gradientColor34.cgColor, gradientColor35.cgColor, gradientColor36.cgColor, gradientColor37.cgColor, gradientColor38.cgColor] as CFArray, locations: [0, 0.1, 0.2, 0.28, 0.41, 0.48, 0.55, 0.58, 0.61, 0.66, 0.7, 0.78, 0.85, 0.91, 1])!

        //// Shadow Declarations
        let shadow6 = NSShadow()
        shadow6.shadowColor = shadow6Color
        shadow6.shadowOffset = CGSize(width: 3, height: 3)
        shadow6.shadowBlurRadius = 5

        //// kMyMoney_iconCanvas-group 6
        //// kMyMoney_iconCanvas-bezier124 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier124Path = UIBezierPath()
        kMyMoney_iconCanvasbezier124Path.move(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 135.98))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 139.03))
        kMyMoney_iconCanvasbezier124Path.addCurve(to: CGPoint(x: frame.minX + 41.71, y: frame.minY + 152.19), controlPoint1: CGPoint(x: frame.minX + 4.98, y: frame.minY + 146.3), controlPoint2: CGPoint(x: frame.minX + 21.42, y: frame.minY + 152.19))
        kMyMoney_iconCanvasbezier124Path.addCurve(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 139.03), controlPoint1: CGPoint(x: frame.minX + 62, y: frame.minY + 152.19), controlPoint2: CGPoint(x: frame.minX + 78.45, y: frame.minY + 146.3))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 135.98))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 135.98))
        kMyMoney_iconCanvasbezier124Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier124Path.addClip()
        let kMyMoney_iconCanvasbezier124Bounds: CGRect = kMyMoney_iconCanvasbezier124Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier124Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier124Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier124Bounds.midY + 0 * kMyMoney_iconCanvasbezier124Bounds.height / 16.21),
            end: CGPoint(x: kMyMoney_iconCanvasbezier124Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier124Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier124Bounds.midY + 0 * kMyMoney_iconCanvasbezier124Bounds.height / 16.21),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval67 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval67Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 5.45, y: frame.minY + 124.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval67Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier125 Drawing
        let kMyMoney_iconCanvasbezier125Path = UIBezierPath()
        kMyMoney_iconCanvasbezier125Path.move(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 133.52))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 136.57))
        kMyMoney_iconCanvasbezier125Path.addCurve(to: CGPoint(x: frame.minX + 41.86, y: frame.minY + 149.73), controlPoint1: CGPoint(x: frame.minX + 5.13, y: frame.minY + 143.83), controlPoint2: CGPoint(x: frame.minX + 21.57, y: frame.minY + 149.73))
        kMyMoney_iconCanvasbezier125Path.addCurve(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 136.57), controlPoint1: CGPoint(x: frame.minX + 62.15, y: frame.minY + 149.73), controlPoint2: CGPoint(x: frame.minX + 78.61, y: frame.minY + 143.83))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 133.52))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 133.52))
        kMyMoney_iconCanvasbezier125Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier125Path.addClip()
        let kMyMoney_iconCanvasbezier125Bounds: CGRect = kMyMoney_iconCanvasbezier125Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier125Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier125Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier125Bounds.midY + -0 * kMyMoney_iconCanvasbezier125Bounds.height / 16.21),
            end: CGPoint(x: kMyMoney_iconCanvasbezier125Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier125Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier125Bounds.midY + -0 * kMyMoney_iconCanvasbezier125Bounds.height / 16.21),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval68 Drawing
        let kMyMoney_iconCanvasoval68Rect = CGRect(x: frame.minX + 5.15, y: frame.minY + 120.43, width: 73.4, height: 26.2)
        let kMyMoney_iconCanvasoval68Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval68Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval68Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval68Rect.midX + 12.71 * kMyMoney_iconCanvasoval68Rect.width / 73.4, y: kMyMoney_iconCanvasoval68Rect.midY + -21.17 * kMyMoney_iconCanvasoval68Rect.height / 26.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval68Rect.midX + 12.71 * kMyMoney_iconCanvasoval68Rect.width / 73.4, y: kMyMoney_iconCanvasoval68Rect.midY + 58.33 * kMyMoney_iconCanvasoval68Rect.height / 26.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 10
        //// kMyMoney_iconCanvas-bezier89 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier89Path = UIBezierPath()
        kMyMoney_iconCanvasbezier89Path.move(to: CGPoint(x: frame.minX + 70.98, y: frame.minY + 114.51))
        kMyMoney_iconCanvasbezier89Path.addLine(to: CGPoint(x: frame.minX + 70.98, y: frame.minY + 117.27))
        kMyMoney_iconCanvasbezier89Path.addCurve(to: CGPoint(x: frame.minX + 102.22, y: frame.minY + 129.19), controlPoint1: CGPoint(x: frame.minX + 70.98, y: frame.minY + 123.86), controlPoint2: CGPoint(x: frame.minX + 84.96, y: frame.minY + 129.19))
        kMyMoney_iconCanvasbezier89Path.addCurve(to: CGPoint(x: frame.minX + 133.47, y: frame.minY + 117.27), controlPoint1: CGPoint(x: frame.minX + 119.48, y: frame.minY + 129.19), controlPoint2: CGPoint(x: frame.minX + 133.47, y: frame.minY + 123.86))
        kMyMoney_iconCanvasbezier89Path.addLine(to: CGPoint(x: frame.minX + 133.47, y: frame.minY + 114.51))
        kMyMoney_iconCanvasbezier89Path.addLine(to: CGPoint(x: frame.minX + 70.98, y: frame.minY + 114.51))
        kMyMoney_iconCanvasbezier89Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier89Path.addClip()
        let kMyMoney_iconCanvasbezier89Bounds: CGRect = kMyMoney_iconCanvasbezier89Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier89Bounds.midX + -31.24 * kMyMoney_iconCanvasbezier89Bounds.width / 62.49, y: kMyMoney_iconCanvasbezier89Bounds.midY + 0 * kMyMoney_iconCanvasbezier89Bounds.height / 14.68),
            end: CGPoint(x: kMyMoney_iconCanvasbezier89Bounds.midX + 0.09 * kMyMoney_iconCanvasbezier89Bounds.width / 62.49, y: kMyMoney_iconCanvasbezier89Bounds.midY + 0 * kMyMoney_iconCanvasbezier89Bounds.height / 14.68),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 17 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval17Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 71.45, y: frame.minY + 103.08, width: 61.8, height: 24.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval17Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier128 Drawing
        let kMyMoney_iconCanvasbezier128Path = UIBezierPath()
        kMyMoney_iconCanvasbezier128Path.move(to: CGPoint(x: frame.minX + 71.11, y: frame.minY + 112.28))
        kMyMoney_iconCanvasbezier128Path.addLine(to: CGPoint(x: frame.minX + 71.11, y: frame.minY + 115.05))
        kMyMoney_iconCanvasbezier128Path.addCurve(to: CGPoint(x: frame.minX + 102.35, y: frame.minY + 126.96), controlPoint1: CGPoint(x: frame.minX + 71.11, y: frame.minY + 121.62), controlPoint2: CGPoint(x: frame.minX + 85.09, y: frame.minY + 126.96))
        kMyMoney_iconCanvasbezier128Path.addCurve(to: CGPoint(x: frame.minX + 133.61, y: frame.minY + 115.05), controlPoint1: CGPoint(x: frame.minX + 119.61, y: frame.minY + 126.96), controlPoint2: CGPoint(x: frame.minX + 133.61, y: frame.minY + 121.62))
        kMyMoney_iconCanvasbezier128Path.addLine(to: CGPoint(x: frame.minX + 133.61, y: frame.minY + 112.28))
        kMyMoney_iconCanvasbezier128Path.addLine(to: CGPoint(x: frame.minX + 71.11, y: frame.minY + 112.28))
        kMyMoney_iconCanvasbezier128Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier128Path.addClip()
        let kMyMoney_iconCanvasbezier128Bounds: CGRect = kMyMoney_iconCanvasbezier128Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier128Bounds.midX + -31.25 * kMyMoney_iconCanvasbezier128Bounds.width / 62.5, y: kMyMoney_iconCanvasbezier128Bounds.midY + -0 * kMyMoney_iconCanvasbezier128Bounds.height / 14.68),
            end: CGPoint(x: kMyMoney_iconCanvasbezier128Bounds.midX + 0.09 * kMyMoney_iconCanvasbezier128Bounds.width / 62.5, y: kMyMoney_iconCanvasbezier128Bounds.midY + -0 * kMyMoney_iconCanvasbezier128Bounds.height / 14.68),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval71 Drawing
        let kMyMoney_iconCanvasoval71Rect = CGRect(x: frame.minX + 71.15, y: frame.minY + 100.43, width: 62.4, height: 24.2)
        let kMyMoney_iconCanvasoval71Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval71Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval71Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval71Rect.midX + 10.8 * kMyMoney_iconCanvasoval71Rect.width / 62.4, y: kMyMoney_iconCanvasoval71Rect.midY + -19.56 * kMyMoney_iconCanvasoval71Rect.height / 24.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval71Rect.midX + 10.8 * kMyMoney_iconCanvasoval71Rect.width / 62.4, y: kMyMoney_iconCanvasoval71Rect.midY + 53.87 * kMyMoney_iconCanvasoval71Rect.height / 24.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 11
        //// kMyMoney_iconCanvas-bezier126 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier126Path = UIBezierPath()
        kMyMoney_iconCanvasbezier126Path.move(to: CGPoint(x: frame.minX + 67.98, y: frame.minY + 105))
        kMyMoney_iconCanvasbezier126Path.addLine(to: CGPoint(x: frame.minX + 67.98, y: frame.minY + 107.86))
        kMyMoney_iconCanvasbezier126Path.addCurve(to: CGPoint(x: frame.minX + 99.22, y: frame.minY + 120.19), controlPoint1: CGPoint(x: frame.minX + 67.98, y: frame.minY + 114.67), controlPoint2: CGPoint(x: frame.minX + 81.96, y: frame.minY + 120.19))
        kMyMoney_iconCanvasbezier126Path.addCurve(to: CGPoint(x: frame.minX + 130.47, y: frame.minY + 107.86), controlPoint1: CGPoint(x: frame.minX + 116.48, y: frame.minY + 120.19), controlPoint2: CGPoint(x: frame.minX + 130.47, y: frame.minY + 114.67))
        kMyMoney_iconCanvasbezier126Path.addLine(to: CGPoint(x: frame.minX + 130.47, y: frame.minY + 105))
        kMyMoney_iconCanvasbezier126Path.addLine(to: CGPoint(x: frame.minX + 67.98, y: frame.minY + 105))
        kMyMoney_iconCanvasbezier126Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier126Path.addClip()
        let kMyMoney_iconCanvasbezier126Bounds: CGRect = kMyMoney_iconCanvasbezier126Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier126Bounds.midX + -31.24 * kMyMoney_iconCanvasbezier126Bounds.width / 62.49, y: kMyMoney_iconCanvasbezier126Bounds.midY + 0 * kMyMoney_iconCanvasbezier126Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier126Bounds.midX + 0.09 * kMyMoney_iconCanvasbezier126Bounds.width / 62.49, y: kMyMoney_iconCanvasbezier126Bounds.midY + 0 * kMyMoney_iconCanvasbezier126Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval69 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval69Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 68.45, y: frame.minY + 93.08, width: 61.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval69Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier127 Drawing
        let kMyMoney_iconCanvasbezier127Path = UIBezierPath()
        kMyMoney_iconCanvasbezier127Path.move(to: CGPoint(x: frame.minX + 68.11, y: frame.minY + 102.69))
        kMyMoney_iconCanvasbezier127Path.addLine(to: CGPoint(x: frame.minX + 68.11, y: frame.minY + 105.56))
        kMyMoney_iconCanvasbezier127Path.addCurve(to: CGPoint(x: frame.minX + 99.35, y: frame.minY + 117.89), controlPoint1: CGPoint(x: frame.minX + 68.11, y: frame.minY + 112.36), controlPoint2: CGPoint(x: frame.minX + 82.09, y: frame.minY + 117.89))
        kMyMoney_iconCanvasbezier127Path.addCurve(to: CGPoint(x: frame.minX + 130.61, y: frame.minY + 105.56), controlPoint1: CGPoint(x: frame.minX + 116.61, y: frame.minY + 117.89), controlPoint2: CGPoint(x: frame.minX + 130.61, y: frame.minY + 112.36))
        kMyMoney_iconCanvasbezier127Path.addLine(to: CGPoint(x: frame.minX + 130.61, y: frame.minY + 102.69))
        kMyMoney_iconCanvasbezier127Path.addLine(to: CGPoint(x: frame.minX + 68.11, y: frame.minY + 102.69))
        kMyMoney_iconCanvasbezier127Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier127Path.addClip()
        let kMyMoney_iconCanvasbezier127Bounds: CGRect = kMyMoney_iconCanvasbezier127Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier127Bounds.midX + -31.25 * kMyMoney_iconCanvasbezier127Bounds.width / 62.5, y: kMyMoney_iconCanvasbezier127Bounds.midY + -0 * kMyMoney_iconCanvasbezier127Bounds.height / 15.19),
            end: CGPoint(x: kMyMoney_iconCanvasbezier127Bounds.midX + 0.09 * kMyMoney_iconCanvasbezier127Bounds.width / 62.5, y: kMyMoney_iconCanvasbezier127Bounds.midY + -0 * kMyMoney_iconCanvasbezier127Bounds.height / 15.19),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval70 Drawing
        let kMyMoney_iconCanvasoval70Rect = CGRect(x: frame.minX + 68.15, y: frame.minY + 90.43, width: 62.4, height: 25.2)
        let kMyMoney_iconCanvasoval70Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval70Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval70Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval70Rect.midX + 10.8 * kMyMoney_iconCanvasoval70Rect.width / 62.4, y: kMyMoney_iconCanvasoval70Rect.midY + -20.36 * kMyMoney_iconCanvasoval70Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval70Rect.midX + 10.8 * kMyMoney_iconCanvasoval70Rect.width / 62.4, y: kMyMoney_iconCanvasoval70Rect.midY + 56.1 * kMyMoney_iconCanvasoval70Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 12
        //// kMyMoney_iconCanvas-bezier 18 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier18Path = UIBezierPath()
        kMyMoney_iconCanvasbezier18Path.move(to: CGPoint(x: frame.minX + 67.98, y: frame.minY + 96.02))
        kMyMoney_iconCanvasbezier18Path.addLine(to: CGPoint(x: frame.minX + 67.98, y: frame.minY + 98.69))
        kMyMoney_iconCanvasbezier18Path.addCurve(to: CGPoint(x: frame.minX + 99.22, y: frame.minY + 110.19), controlPoint1: CGPoint(x: frame.minX + 67.98, y: frame.minY + 105.04), controlPoint2: CGPoint(x: frame.minX + 81.96, y: frame.minY + 110.19))
        kMyMoney_iconCanvasbezier18Path.addCurve(to: CGPoint(x: frame.minX + 130.47, y: frame.minY + 98.69), controlPoint1: CGPoint(x: frame.minX + 116.48, y: frame.minY + 110.19), controlPoint2: CGPoint(x: frame.minX + 130.47, y: frame.minY + 105.04))
        kMyMoney_iconCanvasbezier18Path.addLine(to: CGPoint(x: frame.minX + 130.47, y: frame.minY + 96.02))
        kMyMoney_iconCanvasbezier18Path.addLine(to: CGPoint(x: frame.minX + 67.98, y: frame.minY + 96.02))
        kMyMoney_iconCanvasbezier18Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier18Path.addClip()
        let kMyMoney_iconCanvasbezier18Bounds: CGRect = kMyMoney_iconCanvasbezier18Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier18Bounds.midX + -31.24 * kMyMoney_iconCanvasbezier18Bounds.width / 62.49, y: kMyMoney_iconCanvasbezier18Bounds.midY + 0 * kMyMoney_iconCanvasbezier18Bounds.height / 14.17),
            end: CGPoint(x: kMyMoney_iconCanvasbezier18Bounds.midX + 0.09 * kMyMoney_iconCanvasbezier18Bounds.width / 62.49, y: kMyMoney_iconCanvasbezier18Bounds.midY + 0 * kMyMoney_iconCanvasbezier18Bounds.height / 14.17),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 18 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval18Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 68.45, y: frame.minY + 85.08, width: 61.8, height: 23.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval18Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 19 Drawing
        let kMyMoney_iconCanvasbezier19Path = UIBezierPath()
        kMyMoney_iconCanvasbezier19Path.move(to: CGPoint(x: frame.minX + 68.11, y: frame.minY + 93.87))
        kMyMoney_iconCanvasbezier19Path.addLine(to: CGPoint(x: frame.minX + 68.11, y: frame.minY + 96.54))
        kMyMoney_iconCanvasbezier19Path.addCurve(to: CGPoint(x: frame.minX + 99.35, y: frame.minY + 108.04), controlPoint1: CGPoint(x: frame.minX + 68.11, y: frame.minY + 102.88), controlPoint2: CGPoint(x: frame.minX + 82.09, y: frame.minY + 108.04))
        kMyMoney_iconCanvasbezier19Path.addCurve(to: CGPoint(x: frame.minX + 130.61, y: frame.minY + 96.54), controlPoint1: CGPoint(x: frame.minX + 116.61, y: frame.minY + 108.04), controlPoint2: CGPoint(x: frame.minX + 130.61, y: frame.minY + 102.88))
        kMyMoney_iconCanvasbezier19Path.addLine(to: CGPoint(x: frame.minX + 130.61, y: frame.minY + 93.87))
        kMyMoney_iconCanvasbezier19Path.addLine(to: CGPoint(x: frame.minX + 68.11, y: frame.minY + 93.87))
        kMyMoney_iconCanvasbezier19Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier19Path.addClip()
        let kMyMoney_iconCanvasbezier19Bounds: CGRect = kMyMoney_iconCanvasbezier19Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier19Bounds.midX + -31.25 * kMyMoney_iconCanvasbezier19Bounds.width / 62.5, y: kMyMoney_iconCanvasbezier19Bounds.midY + -0 * kMyMoney_iconCanvasbezier19Bounds.height / 14.17),
            end: CGPoint(x: kMyMoney_iconCanvasbezier19Bounds.midX + 0.09 * kMyMoney_iconCanvasbezier19Bounds.width / 62.5, y: kMyMoney_iconCanvasbezier19Bounds.midY + -0 * kMyMoney_iconCanvasbezier19Bounds.height / 14.17),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 19 Drawing
        let kMyMoney_iconCanvasoval19Rect = CGRect(x: frame.minX + 68.15, y: frame.minY + 82.43, width: 62.4, height: 23.2)
        let kMyMoney_iconCanvasoval19Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval19Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval19Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval19Rect.midX + 10.8 * kMyMoney_iconCanvasoval19Rect.width / 62.4, y: kMyMoney_iconCanvasoval19Rect.midY + -18.75 * kMyMoney_iconCanvasoval19Rect.height / 23.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval19Rect.midX + 10.8 * kMyMoney_iconCanvasoval19Rect.width / 62.4, y: kMyMoney_iconCanvasoval19Rect.midY + 51.65 * kMyMoney_iconCanvasoval19Rect.height / 23.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 13
        //// kMyMoney_iconCanvas-bezier 20 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier20Path = UIBezierPath()
        kMyMoney_iconCanvasbezier20Path.move(to: CGPoint(x: frame.minX + 70.98, y: frame.minY + 85.51))
        kMyMoney_iconCanvasbezier20Path.addLine(to: CGPoint(x: frame.minX + 70.98, y: frame.minY + 88.27))
        kMyMoney_iconCanvasbezier20Path.addCurve(to: CGPoint(x: frame.minX + 102.22, y: frame.minY + 100.19), controlPoint1: CGPoint(x: frame.minX + 70.98, y: frame.minY + 94.86), controlPoint2: CGPoint(x: frame.minX + 84.96, y: frame.minY + 100.19))
        kMyMoney_iconCanvasbezier20Path.addCurve(to: CGPoint(x: frame.minX + 133.47, y: frame.minY + 88.27), controlPoint1: CGPoint(x: frame.minX + 119.48, y: frame.minY + 100.19), controlPoint2: CGPoint(x: frame.minX + 133.47, y: frame.minY + 94.86))
        kMyMoney_iconCanvasbezier20Path.addLine(to: CGPoint(x: frame.minX + 133.47, y: frame.minY + 85.51))
        kMyMoney_iconCanvasbezier20Path.addLine(to: CGPoint(x: frame.minX + 70.98, y: frame.minY + 85.51))
        kMyMoney_iconCanvasbezier20Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier20Path.addClip()
        let kMyMoney_iconCanvasbezier20Bounds: CGRect = kMyMoney_iconCanvasbezier20Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier20Bounds.midX + -31.24 * kMyMoney_iconCanvasbezier20Bounds.width / 62.49, y: kMyMoney_iconCanvasbezier20Bounds.midY + 0 * kMyMoney_iconCanvasbezier20Bounds.height / 14.68),
            end: CGPoint(x: kMyMoney_iconCanvasbezier20Bounds.midX + 0.09 * kMyMoney_iconCanvasbezier20Bounds.width / 62.49, y: kMyMoney_iconCanvasbezier20Bounds.midY + 0 * kMyMoney_iconCanvasbezier20Bounds.height / 14.68),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 20 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval20Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 71.45, y: frame.minY + 74.08, width: 61.8, height: 24.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval20Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 21 Drawing
        let kMyMoney_iconCanvasbezier21Path = UIBezierPath()
        kMyMoney_iconCanvasbezier21Path.move(to: CGPoint(x: frame.minX + 71.11, y: frame.minY + 83.28))
        kMyMoney_iconCanvasbezier21Path.addLine(to: CGPoint(x: frame.minX + 71.11, y: frame.minY + 86.05))
        kMyMoney_iconCanvasbezier21Path.addCurve(to: CGPoint(x: frame.minX + 102.35, y: frame.minY + 97.96), controlPoint1: CGPoint(x: frame.minX + 71.11, y: frame.minY + 92.62), controlPoint2: CGPoint(x: frame.minX + 85.09, y: frame.minY + 97.96))
        kMyMoney_iconCanvasbezier21Path.addCurve(to: CGPoint(x: frame.minX + 133.61, y: frame.minY + 86.05), controlPoint1: CGPoint(x: frame.minX + 119.61, y: frame.minY + 97.96), controlPoint2: CGPoint(x: frame.minX + 133.61, y: frame.minY + 92.62))
        kMyMoney_iconCanvasbezier21Path.addLine(to: CGPoint(x: frame.minX + 133.61, y: frame.minY + 83.28))
        kMyMoney_iconCanvasbezier21Path.addLine(to: CGPoint(x: frame.minX + 71.11, y: frame.minY + 83.28))
        kMyMoney_iconCanvasbezier21Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier21Path.addClip()
        let kMyMoney_iconCanvasbezier21Bounds: CGRect = kMyMoney_iconCanvasbezier21Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier21Bounds.midX + -31.25 * kMyMoney_iconCanvasbezier21Bounds.width / 62.5, y: kMyMoney_iconCanvasbezier21Bounds.midY + -0 * kMyMoney_iconCanvasbezier21Bounds.height / 14.68),
            end: CGPoint(x: kMyMoney_iconCanvasbezier21Bounds.midX + 0.09 * kMyMoney_iconCanvasbezier21Bounds.width / 62.5, y: kMyMoney_iconCanvasbezier21Bounds.midY + -0 * kMyMoney_iconCanvasbezier21Bounds.height / 14.68),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 21 Drawing
        let kMyMoney_iconCanvasoval21Rect = CGRect(x: frame.minX + 71.15, y: frame.minY + 71.43, width: 62.4, height: 24.2)
        let kMyMoney_iconCanvasoval21Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval21Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval21Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval21Rect.midX + 10.8 * kMyMoney_iconCanvasoval21Rect.width / 62.4, y: kMyMoney_iconCanvasoval21Rect.midY + -19.56 * kMyMoney_iconCanvasoval21Rect.height / 24.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval21Rect.midX + 10.8 * kMyMoney_iconCanvasoval21Rect.width / 62.4, y: kMyMoney_iconCanvasoval21Rect.midY + 53.87 * kMyMoney_iconCanvasoval21Rect.height / 24.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 14
        //// kMyMoney_iconCanvas-bezier 22 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier22Path = UIBezierPath()
        kMyMoney_iconCanvasbezier22Path.move(to: CGPoint(x: frame.minX + 69.98, y: frame.minY + 75.51))
        kMyMoney_iconCanvasbezier22Path.addLine(to: CGPoint(x: frame.minX + 69.98, y: frame.minY + 78.27))
        kMyMoney_iconCanvasbezier22Path.addCurve(to: CGPoint(x: frame.minX + 101.22, y: frame.minY + 90.19), controlPoint1: CGPoint(x: frame.minX + 69.98, y: frame.minY + 84.86), controlPoint2: CGPoint(x: frame.minX + 83.96, y: frame.minY + 90.19))
        kMyMoney_iconCanvasbezier22Path.addCurve(to: CGPoint(x: frame.minX + 132.47, y: frame.minY + 78.27), controlPoint1: CGPoint(x: frame.minX + 118.48, y: frame.minY + 90.19), controlPoint2: CGPoint(x: frame.minX + 132.47, y: frame.minY + 84.86))
        kMyMoney_iconCanvasbezier22Path.addLine(to: CGPoint(x: frame.minX + 132.47, y: frame.minY + 75.51))
        kMyMoney_iconCanvasbezier22Path.addLine(to: CGPoint(x: frame.minX + 69.98, y: frame.minY + 75.51))
        kMyMoney_iconCanvasbezier22Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier22Path.addClip()
        let kMyMoney_iconCanvasbezier22Bounds: CGRect = kMyMoney_iconCanvasbezier22Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier22Bounds.midX + -31.24 * kMyMoney_iconCanvasbezier22Bounds.width / 62.49, y: kMyMoney_iconCanvasbezier22Bounds.midY + 0 * kMyMoney_iconCanvasbezier22Bounds.height / 14.68),
            end: CGPoint(x: kMyMoney_iconCanvasbezier22Bounds.midX + 0.09 * kMyMoney_iconCanvasbezier22Bounds.width / 62.49, y: kMyMoney_iconCanvasbezier22Bounds.midY + 0 * kMyMoney_iconCanvasbezier22Bounds.height / 14.68),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 22 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval22Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 70.45, y: frame.minY + 64.08, width: 61.8, height: 24.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval22Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 23 Drawing
        let kMyMoney_iconCanvasbezier23Path = UIBezierPath()
        kMyMoney_iconCanvasbezier23Path.move(to: CGPoint(x: frame.minX + 70.11, y: frame.minY + 73.28))
        kMyMoney_iconCanvasbezier23Path.addLine(to: CGPoint(x: frame.minX + 70.11, y: frame.minY + 76.05))
        kMyMoney_iconCanvasbezier23Path.addCurve(to: CGPoint(x: frame.minX + 101.35, y: frame.minY + 87.96), controlPoint1: CGPoint(x: frame.minX + 70.11, y: frame.minY + 82.62), controlPoint2: CGPoint(x: frame.minX + 84.09, y: frame.minY + 87.96))
        kMyMoney_iconCanvasbezier23Path.addCurve(to: CGPoint(x: frame.minX + 132.61, y: frame.minY + 76.05), controlPoint1: CGPoint(x: frame.minX + 118.61, y: frame.minY + 87.96), controlPoint2: CGPoint(x: frame.minX + 132.61, y: frame.minY + 82.62))
        kMyMoney_iconCanvasbezier23Path.addLine(to: CGPoint(x: frame.minX + 132.61, y: frame.minY + 73.28))
        kMyMoney_iconCanvasbezier23Path.addLine(to: CGPoint(x: frame.minX + 70.11, y: frame.minY + 73.28))
        kMyMoney_iconCanvasbezier23Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier23Path.addClip()
        let kMyMoney_iconCanvasbezier23Bounds: CGRect = kMyMoney_iconCanvasbezier23Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier23Bounds.midX + -31.25 * kMyMoney_iconCanvasbezier23Bounds.width / 62.5, y: kMyMoney_iconCanvasbezier23Bounds.midY + -0 * kMyMoney_iconCanvasbezier23Bounds.height / 14.68),
            end: CGPoint(x: kMyMoney_iconCanvasbezier23Bounds.midX + 0.09 * kMyMoney_iconCanvasbezier23Bounds.width / 62.5, y: kMyMoney_iconCanvasbezier23Bounds.midY + -0 * kMyMoney_iconCanvasbezier23Bounds.height / 14.68),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 23 Drawing
        let kMyMoney_iconCanvasoval23Rect = CGRect(x: frame.minX + 70.15, y: frame.minY + 61.43, width: 62.4, height: 24.2)
        let kMyMoney_iconCanvasoval23Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval23Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval23Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval23Rect.midX + 10.8 * kMyMoney_iconCanvasoval23Rect.width / 62.4, y: kMyMoney_iconCanvasoval23Rect.midY + -19.56 * kMyMoney_iconCanvasoval23Rect.height / 24.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval23Rect.midX + 10.8 * kMyMoney_iconCanvasoval23Rect.width / 62.4, y: kMyMoney_iconCanvasoval23Rect.midY + 53.87 * kMyMoney_iconCanvasoval23Rect.height / 24.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group
        //// kMyMoney_iconCanvas-bezier Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezierPath = UIBezierPath()
        kMyMoney_iconCanvasbezierPath.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 126.96))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 130.2))
        kMyMoney_iconCanvasbezierPath.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 144.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 137.93), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 144.19))
        kMyMoney_iconCanvasbezierPath.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 130.2), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 144.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 137.93))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 126.96))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 126.96))
        kMyMoney_iconCanvasbezierPath.close()
        context.saveGState()
        kMyMoney_iconCanvasbezierPath.addClip()
        let kMyMoney_iconCanvasbezierBounds: CGRect = kMyMoney_iconCanvasbezierPath.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezierBounds.midX + -36.73 * kMyMoney_iconCanvasbezierBounds.width / 73.47, y: kMyMoney_iconCanvasbezierBounds.midY + 0 * kMyMoney_iconCanvasbezierBounds.height / 17.23),
            end: CGPoint(x: kMyMoney_iconCanvasbezierBounds.midX + 0.1 * kMyMoney_iconCanvasbezierBounds.width / 73.47, y: kMyMoney_iconCanvasbezierBounds.midY + 0 * kMyMoney_iconCanvasbezierBounds.height / 17.23),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasovalPath = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 114.08, width: 72.8, height: 28.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasovalPath.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 2 Drawing
        let kMyMoney_iconCanvasbezier2Path = UIBezierPath()
        kMyMoney_iconCanvasbezier2Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 124.34))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 127.58))
        kMyMoney_iconCanvasbezier2Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 141.57), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 135.31), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 141.57))
        kMyMoney_iconCanvasbezier2Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 127.58), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 141.57), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 135.31))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 124.34))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 124.34))
        kMyMoney_iconCanvasbezier2Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier2Path.addClip()
        let kMyMoney_iconCanvasbezier2Bounds: CGRect = kMyMoney_iconCanvasbezier2Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier2Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier2Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier2Bounds.midY + -0 * kMyMoney_iconCanvasbezier2Bounds.height / 17.23),
            end: CGPoint(x: kMyMoney_iconCanvasbezier2Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier2Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier2Bounds.midY + -0 * kMyMoney_iconCanvasbezier2Bounds.height / 17.23),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 2 Drawing
        let kMyMoney_iconCanvasoval2Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 110.43, width: 73.4, height: 28.2)
        let kMyMoney_iconCanvasoval2Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval2Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval2Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval2Rect.midX + 12.71 * kMyMoney_iconCanvasoval2Rect.width / 73.4, y: kMyMoney_iconCanvasoval2Rect.midY + -22.79 * kMyMoney_iconCanvasoval2Rect.height / 28.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval2Rect.midX + 12.71 * kMyMoney_iconCanvasoval2Rect.width / 73.4, y: kMyMoney_iconCanvasoval2Rect.midY + 62.78 * kMyMoney_iconCanvasoval2Rect.height / 28.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 2
        //// kMyMoney_iconCanvas-bezier 3 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier3Path = UIBezierPath()
        kMyMoney_iconCanvasbezier3Path.move(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 114.51))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 117.27))
        kMyMoney_iconCanvasbezier3Path.addCurve(to: CGPoint(x: frame.minX + 41.71, y: frame.minY + 129.19), controlPoint1: CGPoint(x: frame.minX + 4.98, y: frame.minY + 123.85), controlPoint2: CGPoint(x: frame.minX + 21.42, y: frame.minY + 129.19))
        kMyMoney_iconCanvasbezier3Path.addCurve(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 117.27), controlPoint1: CGPoint(x: frame.minX + 62, y: frame.minY + 129.19), controlPoint2: CGPoint(x: frame.minX + 78.45, y: frame.minY + 123.85))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 114.51))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 114.51))
        kMyMoney_iconCanvasbezier3Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier3Path.addClip()
        let kMyMoney_iconCanvasbezier3Bounds: CGRect = kMyMoney_iconCanvasbezier3Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier3Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier3Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier3Bounds.midY + 0 * kMyMoney_iconCanvasbezier3Bounds.height / 14.68),
            end: CGPoint(x: kMyMoney_iconCanvasbezier3Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier3Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier3Bounds.midY + 0 * kMyMoney_iconCanvasbezier3Bounds.height / 14.68),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 3 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval3Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 5.45, y: frame.minY + 103.08, width: 72.8, height: 24.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval3Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 4 Drawing
        let kMyMoney_iconCanvasbezier4Path = UIBezierPath()
        kMyMoney_iconCanvasbezier4Path.move(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 112.28))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 115.04))
        kMyMoney_iconCanvasbezier4Path.addCurve(to: CGPoint(x: frame.minX + 41.86, y: frame.minY + 126.96), controlPoint1: CGPoint(x: frame.minX + 5.13, y: frame.minY + 121.62), controlPoint2: CGPoint(x: frame.minX + 21.57, y: frame.minY + 126.96))
        kMyMoney_iconCanvasbezier4Path.addCurve(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 115.04), controlPoint1: CGPoint(x: frame.minX + 62.15, y: frame.minY + 126.96), controlPoint2: CGPoint(x: frame.minX + 78.61, y: frame.minY + 121.62))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 112.28))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 112.28))
        kMyMoney_iconCanvasbezier4Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier4Path.addClip()
        let kMyMoney_iconCanvasbezier4Bounds: CGRect = kMyMoney_iconCanvasbezier4Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier4Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier4Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier4Bounds.midY + -0 * kMyMoney_iconCanvasbezier4Bounds.height / 14.68),
            end: CGPoint(x: kMyMoney_iconCanvasbezier4Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier4Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier4Bounds.midY + -0 * kMyMoney_iconCanvasbezier4Bounds.height / 14.68),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 4 Drawing
        let kMyMoney_iconCanvasoval4Rect = CGRect(x: frame.minX + 5.15, y: frame.minY + 100.43, width: 73.4, height: 24.2)
        let kMyMoney_iconCanvasoval4Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval4Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval4Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval4Rect.midX + 12.71 * kMyMoney_iconCanvasoval4Rect.width / 73.4, y: kMyMoney_iconCanvasoval4Rect.midY + -19.56 * kMyMoney_iconCanvasoval4Rect.height / 24.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval4Rect.midX + 12.71 * kMyMoney_iconCanvasoval4Rect.width / 73.4, y: kMyMoney_iconCanvasoval4Rect.midY + 53.87 * kMyMoney_iconCanvasoval4Rect.height / 24.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 3
        //// kMyMoney_iconCanvas-bezier 5 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier5Path = UIBezierPath()
        kMyMoney_iconCanvasbezier5Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 103.54))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 106.1))
        kMyMoney_iconCanvasbezier5Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 117.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 112.23), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 117.19))
        kMyMoney_iconCanvasbezier5Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 106.1), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 117.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 112.23))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 103.54))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 103.54))
        kMyMoney_iconCanvasbezier5Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier5Path.addClip()
        let kMyMoney_iconCanvasbezier5Bounds: CGRect = kMyMoney_iconCanvasbezier5Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier5Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier5Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier5Bounds.midY + 0 * kMyMoney_iconCanvasbezier5Bounds.height / 13.65),
            end: CGPoint(x: kMyMoney_iconCanvasbezier5Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier5Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier5Bounds.midY + 0 * kMyMoney_iconCanvasbezier5Bounds.height / 13.65),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 5 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval5Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 93.08, width: 72.8, height: 22.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval5Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 6 Drawing
        let kMyMoney_iconCanvasbezier6Path = UIBezierPath()
        kMyMoney_iconCanvasbezier6Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 101.46))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 104.03))
        kMyMoney_iconCanvasbezier6Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 115.11), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 110.15), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 115.11))
        kMyMoney_iconCanvasbezier6Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 104.03), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 115.11), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 110.15))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 101.46))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 101.46))
        kMyMoney_iconCanvasbezier6Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier6Path.addClip()
        let kMyMoney_iconCanvasbezier6Bounds: CGRect = kMyMoney_iconCanvasbezier6Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier6Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier6Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier6Bounds.midY + -0 * kMyMoney_iconCanvasbezier6Bounds.height / 13.65),
            end: CGPoint(x: kMyMoney_iconCanvasbezier6Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier6Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier6Bounds.midY + -0 * kMyMoney_iconCanvasbezier6Bounds.height / 13.65),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 6 Drawing
        let kMyMoney_iconCanvasoval6Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 90.43, width: 73.4, height: 22.2)
        let kMyMoney_iconCanvasoval6Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval6Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval6Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval6Rect.midX + 12.71 * kMyMoney_iconCanvasoval6Rect.width / 73.4, y: kMyMoney_iconCanvasoval6Rect.midY + -17.94 * kMyMoney_iconCanvasoval6Rect.height / 22.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval6Rect.midX + 12.71 * kMyMoney_iconCanvasoval6Rect.width / 73.4, y: kMyMoney_iconCanvasoval6Rect.midY + 49.42 * kMyMoney_iconCanvasoval6Rect.height / 22.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 4
        //// kMyMoney_iconCanvas-bezier 7 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier7Path = UIBezierPath()
        kMyMoney_iconCanvasbezier7Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 86.49))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 89.45))
        kMyMoney_iconCanvasbezier7Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 102.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 96.48), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 102.19))
        kMyMoney_iconCanvasbezier7Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 89.45), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 102.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 96.48))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 86.49))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 86.49))
        kMyMoney_iconCanvasbezier7Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier7Path.addClip()
        let kMyMoney_iconCanvasbezier7Bounds: CGRect = kMyMoney_iconCanvasbezier7Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier7Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier7Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier7Bounds.midY + 0 * kMyMoney_iconCanvasbezier7Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier7Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier7Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier7Bounds.midY + 0 * kMyMoney_iconCanvasbezier7Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 7 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval7Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 74.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval7Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 8 Drawing
        let kMyMoney_iconCanvasbezier8Path = UIBezierPath()
        kMyMoney_iconCanvasbezier8Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 84.11))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 87.06))
        kMyMoney_iconCanvasbezier8Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 99.8), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 94.1), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 99.8))
        kMyMoney_iconCanvasbezier8Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 87.06), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 99.8), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 94.1))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 84.11))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 84.11))
        kMyMoney_iconCanvasbezier8Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier8Path.addClip()
        let kMyMoney_iconCanvasbezier8Bounds: CGRect = kMyMoney_iconCanvasbezier8Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier8Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier8Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier8Bounds.midY + -0 * kMyMoney_iconCanvasbezier8Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier8Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier8Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier8Bounds.midY + -0 * kMyMoney_iconCanvasbezier8Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 8 Drawing
        let kMyMoney_iconCanvasoval8Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 71.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval8Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval8Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval8Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval8Rect.midX + 12.71 * kMyMoney_iconCanvasoval8Rect.width / 73.4, y: kMyMoney_iconCanvasoval8Rect.midY + -20.36 * kMyMoney_iconCanvasoval8Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval8Rect.midX + 12.71 * kMyMoney_iconCanvasoval8Rect.width / 73.4, y: kMyMoney_iconCanvasoval8Rect.midY + 56.1 * kMyMoney_iconCanvasoval8Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 5
        //// kMyMoney_iconCanvas-bezier 9 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier9Path = UIBezierPath()
        kMyMoney_iconCanvasbezier9Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 75.51))
        kMyMoney_iconCanvasbezier9Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 78.27))
        kMyMoney_iconCanvasbezier9Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 90.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 84.85), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 90.19))
        kMyMoney_iconCanvasbezier9Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 78.27), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 90.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 84.85))
        kMyMoney_iconCanvasbezier9Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 75.51))
        kMyMoney_iconCanvasbezier9Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 75.51))
        kMyMoney_iconCanvasbezier9Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier9Path.addClip()
        let kMyMoney_iconCanvasbezier9Bounds: CGRect = kMyMoney_iconCanvasbezier9Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier9Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier9Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier9Bounds.midY + 0 * kMyMoney_iconCanvasbezier9Bounds.height / 14.68),
            end: CGPoint(x: kMyMoney_iconCanvasbezier9Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier9Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier9Bounds.midY + 0 * kMyMoney_iconCanvasbezier9Bounds.height / 14.68),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 9 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval9Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 64.08, width: 72.8, height: 24.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval9Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 10 Drawing
        let kMyMoney_iconCanvasbezier10Path = UIBezierPath()
        kMyMoney_iconCanvasbezier10Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 73.28))
        kMyMoney_iconCanvasbezier10Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 76.04))
        kMyMoney_iconCanvasbezier10Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 87.96), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 82.62), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 87.96))
        kMyMoney_iconCanvasbezier10Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 76.04), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 87.96), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 82.62))
        kMyMoney_iconCanvasbezier10Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 73.28))
        kMyMoney_iconCanvasbezier10Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 73.28))
        kMyMoney_iconCanvasbezier10Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier10Path.addClip()
        let kMyMoney_iconCanvasbezier10Bounds: CGRect = kMyMoney_iconCanvasbezier10Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier10Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier10Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier10Bounds.midY + -0 * kMyMoney_iconCanvasbezier10Bounds.height / 14.68),
            end: CGPoint(x: kMyMoney_iconCanvasbezier10Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier10Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier10Bounds.midY + -0 * kMyMoney_iconCanvasbezier10Bounds.height / 14.68),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 10 Drawing
        let kMyMoney_iconCanvasoval10Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 61.43, width: 73.4, height: 24.2)
        let kMyMoney_iconCanvasoval10Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval10Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval10Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval10Rect.midX + 12.71 * kMyMoney_iconCanvasoval10Rect.width / 73.4, y: kMyMoney_iconCanvasoval10Rect.midY + -19.56 * kMyMoney_iconCanvasoval10Rect.height / 24.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval10Rect.midX + 12.71 * kMyMoney_iconCanvasoval10Rect.width / 73.4, y: kMyMoney_iconCanvasoval10Rect.midY + 53.87 * kMyMoney_iconCanvasoval10Rect.height / 24.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 7
        //// kMyMoney_iconCanvas-bezier 11 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier11Path = UIBezierPath()
        kMyMoney_iconCanvasbezier11Path.move(to: CGPoint(x: frame.minX + 19.98, y: frame.minY + 66.49))
        kMyMoney_iconCanvasbezier11Path.addLine(to: CGPoint(x: frame.minX + 19.98, y: frame.minY + 69.45))
        kMyMoney_iconCanvasbezier11Path.addCurve(to: CGPoint(x: frame.minX + 56.71, y: frame.minY + 82.19), controlPoint1: CGPoint(x: frame.minX + 19.98, y: frame.minY + 76.48), controlPoint2: CGPoint(x: frame.minX + 36.42, y: frame.minY + 82.19))
        kMyMoney_iconCanvasbezier11Path.addCurve(to: CGPoint(x: frame.minX + 93.45, y: frame.minY + 69.45), controlPoint1: CGPoint(x: frame.minX + 77, y: frame.minY + 82.19), controlPoint2: CGPoint(x: frame.minX + 93.45, y: frame.minY + 76.48))
        kMyMoney_iconCanvasbezier11Path.addLine(to: CGPoint(x: frame.minX + 93.45, y: frame.minY + 66.49))
        kMyMoney_iconCanvasbezier11Path.addLine(to: CGPoint(x: frame.minX + 19.98, y: frame.minY + 66.49))
        kMyMoney_iconCanvasbezier11Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier11Path.addClip()
        let kMyMoney_iconCanvasbezier11Bounds: CGRect = kMyMoney_iconCanvasbezier11Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier11Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier11Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier11Bounds.midY + 0 * kMyMoney_iconCanvasbezier11Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier11Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier11Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier11Bounds.midY + 0 * kMyMoney_iconCanvasbezier11Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 11 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval11Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 20.45, y: frame.minY + 54.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval11Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 12 Drawing
        let kMyMoney_iconCanvasbezier12Path = UIBezierPath()
        kMyMoney_iconCanvasbezier12Path.move(to: CGPoint(x: frame.minX + 20.13, y: frame.minY + 64.11))
        kMyMoney_iconCanvasbezier12Path.addLine(to: CGPoint(x: frame.minX + 20.13, y: frame.minY + 67.06))
        kMyMoney_iconCanvasbezier12Path.addCurve(to: CGPoint(x: frame.minX + 56.86, y: frame.minY + 79.8), controlPoint1: CGPoint(x: frame.minX + 20.13, y: frame.minY + 74.1), controlPoint2: CGPoint(x: frame.minX + 36.57, y: frame.minY + 79.8))
        kMyMoney_iconCanvasbezier12Path.addCurve(to: CGPoint(x: frame.minX + 93.61, y: frame.minY + 67.06), controlPoint1: CGPoint(x: frame.minX + 77.15, y: frame.minY + 79.8), controlPoint2: CGPoint(x: frame.minX + 93.61, y: frame.minY + 74.1))
        kMyMoney_iconCanvasbezier12Path.addLine(to: CGPoint(x: frame.minX + 93.61, y: frame.minY + 64.11))
        kMyMoney_iconCanvasbezier12Path.addLine(to: CGPoint(x: frame.minX + 20.13, y: frame.minY + 64.11))
        kMyMoney_iconCanvasbezier12Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier12Path.addClip()
        let kMyMoney_iconCanvasbezier12Bounds: CGRect = kMyMoney_iconCanvasbezier12Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier12Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier12Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier12Bounds.midY + -0 * kMyMoney_iconCanvasbezier12Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier12Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier12Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier12Bounds.midY + -0 * kMyMoney_iconCanvasbezier12Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 12 Drawing
        let kMyMoney_iconCanvasoval12Rect = CGRect(x: frame.minX + 20.15, y: frame.minY + 51.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval12Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval12Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval12Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval12Rect.midX + 12.71 * kMyMoney_iconCanvasoval12Rect.width / 73.4, y: kMyMoney_iconCanvasoval12Rect.midY + -20.36 * kMyMoney_iconCanvasoval12Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval12Rect.midX + 12.71 * kMyMoney_iconCanvasoval12Rect.width / 73.4, y: kMyMoney_iconCanvasoval12Rect.midY + 56.1 * kMyMoney_iconCanvasoval12Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 8
        //// kMyMoney_iconCanvas-bezier 13 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier13Path = UIBezierPath()
        kMyMoney_iconCanvasbezier13Path.move(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 55.49))
        kMyMoney_iconCanvasbezier13Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 58.45))
        kMyMoney_iconCanvasbezier13Path.addCurve(to: CGPoint(x: frame.minX + 48.71, y: frame.minY + 71.19), controlPoint1: CGPoint(x: frame.minX + 11.98, y: frame.minY + 65.48), controlPoint2: CGPoint(x: frame.minX + 28.42, y: frame.minY + 71.19))
        kMyMoney_iconCanvasbezier13Path.addCurve(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 58.45), controlPoint1: CGPoint(x: frame.minX + 69, y: frame.minY + 71.19), controlPoint2: CGPoint(x: frame.minX + 85.45, y: frame.minY + 65.48))
        kMyMoney_iconCanvasbezier13Path.addLine(to: CGPoint(x: frame.minX + 85.45, y: frame.minY + 55.49))
        kMyMoney_iconCanvasbezier13Path.addLine(to: CGPoint(x: frame.minX + 11.98, y: frame.minY + 55.49))
        kMyMoney_iconCanvasbezier13Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier13Path.addClip()
        let kMyMoney_iconCanvasbezier13Bounds: CGRect = kMyMoney_iconCanvasbezier13Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier13Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier13Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier13Bounds.midY + 0 * kMyMoney_iconCanvasbezier13Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier13Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier13Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier13Bounds.midY + 0 * kMyMoney_iconCanvasbezier13Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 13 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval13Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 12.45, y: frame.minY + 43.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval13Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 14 Drawing
        let kMyMoney_iconCanvasbezier14Path = UIBezierPath()
        kMyMoney_iconCanvasbezier14Path.move(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 53.11))
        kMyMoney_iconCanvasbezier14Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 56.06))
        kMyMoney_iconCanvasbezier14Path.addCurve(to: CGPoint(x: frame.minX + 48.86, y: frame.minY + 68.8), controlPoint1: CGPoint(x: frame.minX + 12.13, y: frame.minY + 63.1), controlPoint2: CGPoint(x: frame.minX + 28.57, y: frame.minY + 68.8))
        kMyMoney_iconCanvasbezier14Path.addCurve(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 56.06), controlPoint1: CGPoint(x: frame.minX + 69.15, y: frame.minY + 68.8), controlPoint2: CGPoint(x: frame.minX + 85.61, y: frame.minY + 63.1))
        kMyMoney_iconCanvasbezier14Path.addLine(to: CGPoint(x: frame.minX + 85.61, y: frame.minY + 53.11))
        kMyMoney_iconCanvasbezier14Path.addLine(to: CGPoint(x: frame.minX + 12.13, y: frame.minY + 53.11))
        kMyMoney_iconCanvasbezier14Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier14Path.addClip()
        let kMyMoney_iconCanvasbezier14Bounds: CGRect = kMyMoney_iconCanvasbezier14Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier14Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier14Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier14Bounds.midY + -0 * kMyMoney_iconCanvasbezier14Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier14Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier14Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier14Bounds.midY + -0 * kMyMoney_iconCanvasbezier14Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 14 Drawing
        let kMyMoney_iconCanvasoval14Rect = CGRect(x: frame.minX + 12.15, y: frame.minY + 40.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval14Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval14Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval14Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval14Rect.midX + 12.71 * kMyMoney_iconCanvasoval14Rect.width / 73.4, y: kMyMoney_iconCanvasoval14Rect.midY + -20.36 * kMyMoney_iconCanvasoval14Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval14Rect.midX + 12.71 * kMyMoney_iconCanvasoval14Rect.width / 73.4, y: kMyMoney_iconCanvasoval14Rect.midY + 56.1 * kMyMoney_iconCanvasoval14Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 9
        //// kMyMoney_iconCanvas-bezier 15 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier15Path = UIBezierPath()
        kMyMoney_iconCanvasbezier15Path.move(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 45.49))
        kMyMoney_iconCanvasbezier15Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 48.45))
        kMyMoney_iconCanvasbezier15Path.addCurve(to: CGPoint(x: frame.minX + 41.71, y: frame.minY + 61.19), controlPoint1: CGPoint(x: frame.minX + 4.98, y: frame.minY + 55.48), controlPoint2: CGPoint(x: frame.minX + 21.42, y: frame.minY + 61.19))
        kMyMoney_iconCanvasbezier15Path.addCurve(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 48.45), controlPoint1: CGPoint(x: frame.minX + 62, y: frame.minY + 61.19), controlPoint2: CGPoint(x: frame.minX + 78.45, y: frame.minY + 55.48))
        kMyMoney_iconCanvasbezier15Path.addLine(to: CGPoint(x: frame.minX + 78.45, y: frame.minY + 45.49))
        kMyMoney_iconCanvasbezier15Path.addLine(to: CGPoint(x: frame.minX + 4.98, y: frame.minY + 45.49))
        kMyMoney_iconCanvasbezier15Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier15Path.addClip()
        let kMyMoney_iconCanvasbezier15Bounds: CGRect = kMyMoney_iconCanvasbezier15Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier15Bounds.midX + -36.73 * kMyMoney_iconCanvasbezier15Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier15Bounds.midY + 0 * kMyMoney_iconCanvasbezier15Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier15Bounds.midX + 0.1 * kMyMoney_iconCanvasbezier15Bounds.width / 73.47, y: kMyMoney_iconCanvasbezier15Bounds.midY + 0 * kMyMoney_iconCanvasbezier15Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 15 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval15Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + 5.45, y: frame.minY + 33.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval15Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 16 Drawing
        let kMyMoney_iconCanvasbezier16Path = UIBezierPath()
        kMyMoney_iconCanvasbezier16Path.move(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 43.11))
        kMyMoney_iconCanvasbezier16Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 46.06))
        kMyMoney_iconCanvasbezier16Path.addCurve(to: CGPoint(x: frame.minX + 41.86, y: frame.minY + 58.8), controlPoint1: CGPoint(x: frame.minX + 5.13, y: frame.minY + 53.1), controlPoint2: CGPoint(x: frame.minX + 21.57, y: frame.minY + 58.8))
        kMyMoney_iconCanvasbezier16Path.addCurve(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 46.06), controlPoint1: CGPoint(x: frame.minX + 62.15, y: frame.minY + 58.8), controlPoint2: CGPoint(x: frame.minX + 78.61, y: frame.minY + 53.1))
        kMyMoney_iconCanvasbezier16Path.addLine(to: CGPoint(x: frame.minX + 78.61, y: frame.minY + 43.11))
        kMyMoney_iconCanvasbezier16Path.addLine(to: CGPoint(x: frame.minX + 5.13, y: frame.minY + 43.11))
        kMyMoney_iconCanvasbezier16Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier16Path.addClip()
        let kMyMoney_iconCanvasbezier16Bounds: CGRect = kMyMoney_iconCanvasbezier16Path.cgPath.boundingBoxOfPath
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasbezier16Bounds.midX + -36.74 * kMyMoney_iconCanvasbezier16Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier16Bounds.midY + -0 * kMyMoney_iconCanvasbezier16Bounds.height / 15.7),
            end: CGPoint(x: kMyMoney_iconCanvasbezier16Bounds.midX + 0.11 * kMyMoney_iconCanvasbezier16Bounds.width / 73.48, y: kMyMoney_iconCanvasbezier16Bounds.midY + -0 * kMyMoney_iconCanvasbezier16Bounds.height / 15.7),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 16 Drawing
        let kMyMoney_iconCanvasoval16Rect = CGRect(x: frame.minX + 5.15, y: frame.minY + 30.43, width: 73.4, height: 25.2)
        let kMyMoney_iconCanvasoval16Path = UIBezierPath(ovalIn: kMyMoney_iconCanvasoval16Rect)
        context.saveGState()
        kMyMoney_iconCanvasoval16Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: kMyMoney_iconCanvasoval16Rect.midX + 12.71 * kMyMoney_iconCanvasoval16Rect.width / 73.4, y: kMyMoney_iconCanvasoval16Rect.midY + -20.36 * kMyMoney_iconCanvasoval16Rect.height / 25.2),
            end: CGPoint(x: kMyMoney_iconCanvasoval16Rect.midX + 12.71 * kMyMoney_iconCanvasoval16Rect.width / 73.4, y: kMyMoney_iconCanvasoval16Rect.midY + 56.1 * kMyMoney_iconCanvasoval16Rect.height / 25.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// Text Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 44, y: frame.minY + 41.75)
        context.scaleBy(x: 1.2, y: 0.5)

        let textRect = CGRect(x: -27.5, y: -16.5, width: 55, height: 33)
        let textTextContent = "128 000"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize, weight: .bold),
            .foregroundColor: UIColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        let textTextRect: CGRect = CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: textTextRect, withAttributes: textFontAttributes)
        context.restoreGState()
        
        ////// Text Text Inner Shadow
        context.saveGState()
        context.clip(to: textRect)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow6.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let textOpaqueTextShadow = (shadow6.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: shadow6.shadowOffset, blur: shadow6.shadowBlurRadius, color: textOpaqueTextShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        textOpaqueTextShadow.setFill()

        let textInnerShadowFontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize, weight: .bold),
            .foregroundColor: (shadow6.shadowColor as! UIColor),
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]
        textTextContent.draw(in: textTextRect, withAttributes: textInnerShadowFontAttributes)

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        context.restoreGState()
    }

    @objc dynamic public class func drawMoneyRound13(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 141, height: 157), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 141, height: 157), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 141, y: resizedFrame.height / 157)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 141, resizedFrame.height / 157)


        //// Color Declarations
        let gradientColor25 = UIColor(red: 0.992, green: 0.898, blue: 0.576, alpha: 1.000)
        let gradientColor26 = UIColor(red: 1.000, green: 0.878, blue: 0.529, alpha: 1.000)
        let gradientColor27 = UIColor(red: 1.000, green: 0.902, blue: 0.537, alpha: 1.000)
        let gradientColor28 = UIColor(red: 0.984, green: 0.698, blue: 0.337, alpha: 1.000)
        let gradientColor29 = UIColor(red: 0.643, green: 0.294, blue: 0.047, alpha: 1.000)
        let gradientColor30 = UIColor(red: 0.514, green: 0.196, blue: 0.024, alpha: 1.000)
        let gradientColor31 = UIColor(red: 0.439, green: 0.145, blue: 0.024, alpha: 1.000)
        let gradientColor32 = UIColor(red: 0.486, green: 0.180, blue: 0.035, alpha: 1.000)
        let gradientColor33 = UIColor(red: 0.776, green: 0.408, blue: 0.122, alpha: 1.000)
        let gradientColor34 = UIColor(red: 0.992, green: 0.596, blue: 0.192, alpha: 1.000)
        let gradientColor35 = UIColor(red: 1.000, green: 0.635, blue: 0.208, alpha: 1.000)
        let gradientColor36 = UIColor(red: 0.945, green: 0.533, blue: 0.169, alpha: 1.000)
        let gradientColor37 = UIColor(red: 0.580, green: 0.251, blue: 0.063, alpha: 1.000)
        let gradientColor38 = UIColor(red: 0.427, green: 0.141, blue: 0.020, alpha: 1.000)
        let fillColor4 = UIColor(red: 0.231, green: 0.114, blue: 0.024, alpha: 1.000)
        let shadow6Color = UIColor(red: 0.684, green: 0.571, blue: 0.182, alpha: 1.000)

        //// Gradient Declarations
        let kMyMoney_iconCanvasgbezier36 = CGGradient(colorsSpace: nil, colors: [gradientColor25.cgColor, gradientColor26.cgColor, gradientColor27.cgColor, gradientColor28.cgColor, gradientColor29.cgColor, gradientColor30.cgColor, gradientColor31.cgColor, gradientColor31.cgColor, gradientColor32.cgColor, gradientColor33.cgColor, gradientColor34.cgColor, gradientColor35.cgColor, gradientColor36.cgColor, gradientColor37.cgColor, gradientColor38.cgColor] as CFArray, locations: [0, 0.1, 0.2, 0.28, 0.41, 0.48, 0.55, 0.58, 0.61, 0.66, 0.7, 0.78, 0.85, 0.91, 1])!

        //// Shadow Declarations
        let shadow6 = NSShadow()
        shadow6.shadowColor = shadow6Color
        shadow6.shadowOffset = CGSize(width: 3, height: 3)
        shadow6.shadowBlurRadius = 5

        //// kMyMoney_iconCanvas-group 6
        //// kMyMoney_iconCanvas-bezier124 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier124Path = UIBezierPath()
        kMyMoney_iconCanvasbezier124Path.move(to: CGPoint(x: 4.98, y: 135.98))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: 4.98, y: 139.03))
        kMyMoney_iconCanvasbezier124Path.addCurve(to: CGPoint(x: 41.71, y: 152.19), controlPoint1: CGPoint(x: 4.98, y: 146.3), controlPoint2: CGPoint(x: 21.42, y: 152.19))
        kMyMoney_iconCanvasbezier124Path.addCurve(to: CGPoint(x: 78.45, y: 139.03), controlPoint1: CGPoint(x: 62, y: 152.19), controlPoint2: CGPoint(x: 78.45, y: 146.3))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: 78.45, y: 135.98))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: 4.98, y: 135.98))
        kMyMoney_iconCanvasbezier124Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier124Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 4.98, y: 144.09),
            end: CGPoint(x: 41.82, y: 144.09),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval67 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval67Path = UIBezierPath(ovalIn: CGRect(x: 5.45, y: 124.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval67Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier125 Drawing
        let kMyMoney_iconCanvasbezier125Path = UIBezierPath()
        kMyMoney_iconCanvasbezier125Path.move(to: CGPoint(x: 5.13, y: 133.52))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: 5.13, y: 136.57))
        kMyMoney_iconCanvasbezier125Path.addCurve(to: CGPoint(x: 41.86, y: 149.73), controlPoint1: CGPoint(x: 5.13, y: 143.83), controlPoint2: CGPoint(x: 21.57, y: 149.73))
        kMyMoney_iconCanvasbezier125Path.addCurve(to: CGPoint(x: 78.61, y: 136.57), controlPoint1: CGPoint(x: 62.15, y: 149.73), controlPoint2: CGPoint(x: 78.61, y: 143.83))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: 78.61, y: 133.52))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: 5.13, y: 133.52))
        kMyMoney_iconCanvasbezier125Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier125Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 5.13, y: 141.62),
            end: CGPoint(x: 41.98, y: 141.62),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval68 Drawing
        let kMyMoney_iconCanvasoval68Path = UIBezierPath(ovalIn: CGRect(x: 5.15, y: 120.43, width: 73.4, height: 26.2))
        context.saveGState()
        kMyMoney_iconCanvasoval68Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 54.56, y: 112.36),
            end: CGPoint(x: 54.56, y: 191.86),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 10
        //// kMyMoney_iconCanvas-bezier89 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier89Path = UIBezierPath()
        kMyMoney_iconCanvasbezier89Path.move(to: CGPoint(x: 70.98, y: 114.51))
        kMyMoney_iconCanvasbezier89Path.addLine(to: CGPoint(x: 70.98, y: 117.27))
        kMyMoney_iconCanvasbezier89Path.addCurve(to: CGPoint(x: 102.22, y: 129.19), controlPoint1: CGPoint(x: 70.98, y: 123.86), controlPoint2: CGPoint(x: 84.96, y: 129.19))
        kMyMoney_iconCanvasbezier89Path.addCurve(to: CGPoint(x: 133.47, y: 117.27), controlPoint1: CGPoint(x: 119.48, y: 129.19), controlPoint2: CGPoint(x: 133.47, y: 123.86))
        kMyMoney_iconCanvasbezier89Path.addLine(to: CGPoint(x: 133.47, y: 114.51))
        kMyMoney_iconCanvasbezier89Path.addLine(to: CGPoint(x: 70.98, y: 114.51))
        kMyMoney_iconCanvasbezier89Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier89Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 70.98, y: 121.85),
            end: CGPoint(x: 102.32, y: 121.85),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 17 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval17Path = UIBezierPath(ovalIn: CGRect(x: 71.45, y: 103.08, width: 61.8, height: 24.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval17Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier128 Drawing
        let kMyMoney_iconCanvasbezier128Path = UIBezierPath()
        kMyMoney_iconCanvasbezier128Path.move(to: CGPoint(x: 71.11, y: 112.28))
        kMyMoney_iconCanvasbezier128Path.addLine(to: CGPoint(x: 71.11, y: 115.05))
        kMyMoney_iconCanvasbezier128Path.addCurve(to: CGPoint(x: 102.35, y: 126.96), controlPoint1: CGPoint(x: 71.11, y: 121.62), controlPoint2: CGPoint(x: 85.09, y: 126.96))
        kMyMoney_iconCanvasbezier128Path.addCurve(to: CGPoint(x: 133.61, y: 115.05), controlPoint1: CGPoint(x: 119.61, y: 126.96), controlPoint2: CGPoint(x: 133.61, y: 121.62))
        kMyMoney_iconCanvasbezier128Path.addLine(to: CGPoint(x: 133.61, y: 112.28))
        kMyMoney_iconCanvasbezier128Path.addLine(to: CGPoint(x: 71.11, y: 112.28))
        kMyMoney_iconCanvasbezier128Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier128Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 71.11, y: 119.62),
            end: CGPoint(x: 102.45, y: 119.62),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval71 Drawing
        let kMyMoney_iconCanvasoval71Path = UIBezierPath(ovalIn: CGRect(x: 71.15, y: 100.43, width: 62.4, height: 24.2))
        context.saveGState()
        kMyMoney_iconCanvasoval71Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 113.15, y: 92.97),
            end: CGPoint(x: 113.15, y: 166.4),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 11
        //// kMyMoney_iconCanvas-bezier126 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier126Path = UIBezierPath()
        kMyMoney_iconCanvasbezier126Path.move(to: CGPoint(x: 67.98, y: 105))
        kMyMoney_iconCanvasbezier126Path.addLine(to: CGPoint(x: 67.98, y: 107.86))
        kMyMoney_iconCanvasbezier126Path.addCurve(to: CGPoint(x: 99.22, y: 120.19), controlPoint1: CGPoint(x: 67.98, y: 114.67), controlPoint2: CGPoint(x: 81.96, y: 120.19))
        kMyMoney_iconCanvasbezier126Path.addCurve(to: CGPoint(x: 130.47, y: 107.86), controlPoint1: CGPoint(x: 116.48, y: 120.19), controlPoint2: CGPoint(x: 130.47, y: 114.67))
        kMyMoney_iconCanvasbezier126Path.addLine(to: CGPoint(x: 130.47, y: 105))
        kMyMoney_iconCanvasbezier126Path.addLine(to: CGPoint(x: 67.98, y: 105))
        kMyMoney_iconCanvasbezier126Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier126Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 67.98, y: 112.6),
            end: CGPoint(x: 99.32, y: 112.6),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval69 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval69Path = UIBezierPath(ovalIn: CGRect(x: 68.45, y: 93.08, width: 61.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval69Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier127 Drawing
        let kMyMoney_iconCanvasbezier127Path = UIBezierPath()
        kMyMoney_iconCanvasbezier127Path.move(to: CGPoint(x: 68.11, y: 102.69))
        kMyMoney_iconCanvasbezier127Path.addLine(to: CGPoint(x: 68.11, y: 105.56))
        kMyMoney_iconCanvasbezier127Path.addCurve(to: CGPoint(x: 99.35, y: 117.89), controlPoint1: CGPoint(x: 68.11, y: 112.36), controlPoint2: CGPoint(x: 82.09, y: 117.89))
        kMyMoney_iconCanvasbezier127Path.addCurve(to: CGPoint(x: 130.61, y: 105.56), controlPoint1: CGPoint(x: 116.61, y: 117.89), controlPoint2: CGPoint(x: 130.61, y: 112.36))
        kMyMoney_iconCanvasbezier127Path.addLine(to: CGPoint(x: 130.61, y: 102.69))
        kMyMoney_iconCanvasbezier127Path.addLine(to: CGPoint(x: 68.11, y: 102.69))
        kMyMoney_iconCanvasbezier127Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier127Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 68.11, y: 110.29),
            end: CGPoint(x: 99.45, y: 110.29),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval70 Drawing
        let kMyMoney_iconCanvasoval70Path = UIBezierPath(ovalIn: CGRect(x: 68.15, y: 90.43, width: 62.4, height: 25.2))
        context.saveGState()
        kMyMoney_iconCanvasoval70Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 110.15, y: 82.67),
            end: CGPoint(x: 110.15, y: 159.13),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 12
        //// kMyMoney_iconCanvas-bezier 18 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier18Path = UIBezierPath()
        kMyMoney_iconCanvasbezier18Path.move(to: CGPoint(x: 67.98, y: 93.98))
        kMyMoney_iconCanvasbezier18Path.addLine(to: CGPoint(x: 67.98, y: 97.03))
        kMyMoney_iconCanvasbezier18Path.addCurve(to: CGPoint(x: 99.22, y: 110.19), controlPoint1: CGPoint(x: 67.98, y: 104.3), controlPoint2: CGPoint(x: 81.96, y: 110.19))
        kMyMoney_iconCanvasbezier18Path.addCurve(to: CGPoint(x: 130.47, y: 97.03), controlPoint1: CGPoint(x: 116.48, y: 110.19), controlPoint2: CGPoint(x: 130.47, y: 104.3))
        kMyMoney_iconCanvasbezier18Path.addLine(to: CGPoint(x: 130.47, y: 93.98))
        kMyMoney_iconCanvasbezier18Path.addLine(to: CGPoint(x: 67.98, y: 93.98))
        kMyMoney_iconCanvasbezier18Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier18Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 67.98, y: 102.09),
            end: CGPoint(x: 99.32, y: 102.09),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 18 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval18Path = UIBezierPath(ovalIn: CGRect(x: 68.45, y: 81.08, width: 61.8, height: 27.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval18Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 19 Drawing
        let kMyMoney_iconCanvasbezier19Path = UIBezierPath()
        kMyMoney_iconCanvasbezier19Path.move(to: CGPoint(x: 68.11, y: 91.52))
        kMyMoney_iconCanvasbezier19Path.addLine(to: CGPoint(x: 68.11, y: 94.57))
        kMyMoney_iconCanvasbezier19Path.addCurve(to: CGPoint(x: 99.35, y: 107.73), controlPoint1: CGPoint(x: 68.11, y: 101.83), controlPoint2: CGPoint(x: 82.09, y: 107.73))
        kMyMoney_iconCanvasbezier19Path.addCurve(to: CGPoint(x: 130.61, y: 94.57), controlPoint1: CGPoint(x: 116.61, y: 107.73), controlPoint2: CGPoint(x: 130.61, y: 101.83))
        kMyMoney_iconCanvasbezier19Path.addLine(to: CGPoint(x: 130.61, y: 91.52))
        kMyMoney_iconCanvasbezier19Path.addLine(to: CGPoint(x: 68.11, y: 91.52))
        kMyMoney_iconCanvasbezier19Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier19Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 68.11, y: 99.62),
            end: CGPoint(x: 99.45, y: 99.62),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 19 Drawing
        let kMyMoney_iconCanvasoval19Path = UIBezierPath(ovalIn: CGRect(x: 68.15, y: 78.43, width: 62.4, height: 26.2))
        context.saveGState()
        kMyMoney_iconCanvasoval19Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 110.15, y: 70.36),
            end: CGPoint(x: 110.15, y: 149.85),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 13
        //// kMyMoney_iconCanvas-bezier 20 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier20Path = UIBezierPath()
        kMyMoney_iconCanvasbezier20Path.move(to: CGPoint(x: 70.98, y: 85.51))
        kMyMoney_iconCanvasbezier20Path.addLine(to: CGPoint(x: 70.98, y: 88.27))
        kMyMoney_iconCanvasbezier20Path.addCurve(to: CGPoint(x: 102.22, y: 100.19), controlPoint1: CGPoint(x: 70.98, y: 94.86), controlPoint2: CGPoint(x: 84.96, y: 100.19))
        kMyMoney_iconCanvasbezier20Path.addCurve(to: CGPoint(x: 133.47, y: 88.27), controlPoint1: CGPoint(x: 119.48, y: 100.19), controlPoint2: CGPoint(x: 133.47, y: 94.86))
        kMyMoney_iconCanvasbezier20Path.addLine(to: CGPoint(x: 133.47, y: 85.51))
        kMyMoney_iconCanvasbezier20Path.addLine(to: CGPoint(x: 70.98, y: 85.51))
        kMyMoney_iconCanvasbezier20Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier20Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 70.98, y: 92.85),
            end: CGPoint(x: 102.32, y: 92.85),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 20 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval20Path = UIBezierPath(ovalIn: CGRect(x: 71.45, y: 74.08, width: 61.8, height: 24.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval20Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 21 Drawing
        let kMyMoney_iconCanvasbezier21Path = UIBezierPath()
        kMyMoney_iconCanvasbezier21Path.move(to: CGPoint(x: 71.11, y: 83.28))
        kMyMoney_iconCanvasbezier21Path.addLine(to: CGPoint(x: 71.11, y: 86.05))
        kMyMoney_iconCanvasbezier21Path.addCurve(to: CGPoint(x: 102.35, y: 97.96), controlPoint1: CGPoint(x: 71.11, y: 92.62), controlPoint2: CGPoint(x: 85.09, y: 97.96))
        kMyMoney_iconCanvasbezier21Path.addCurve(to: CGPoint(x: 133.61, y: 86.05), controlPoint1: CGPoint(x: 119.61, y: 97.96), controlPoint2: CGPoint(x: 133.61, y: 92.62))
        kMyMoney_iconCanvasbezier21Path.addLine(to: CGPoint(x: 133.61, y: 83.28))
        kMyMoney_iconCanvasbezier21Path.addLine(to: CGPoint(x: 71.11, y: 83.28))
        kMyMoney_iconCanvasbezier21Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier21Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 71.11, y: 90.62),
            end: CGPoint(x: 102.45, y: 90.62),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 21 Drawing
        let kMyMoney_iconCanvasoval21Path = UIBezierPath(ovalIn: CGRect(x: 71.15, y: 71.43, width: 62.4, height: 24.2))
        context.saveGState()
        kMyMoney_iconCanvasoval21Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 113.15, y: 63.97),
            end: CGPoint(x: 113.15, y: 137.4),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 14
        //// kMyMoney_iconCanvas-bezier 22 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier22Path = UIBezierPath()
        kMyMoney_iconCanvasbezier22Path.move(to: CGPoint(x: 69.98, y: 75.51))
        kMyMoney_iconCanvasbezier22Path.addLine(to: CGPoint(x: 69.98, y: 78.27))
        kMyMoney_iconCanvasbezier22Path.addCurve(to: CGPoint(x: 101.22, y: 90.19), controlPoint1: CGPoint(x: 69.98, y: 84.86), controlPoint2: CGPoint(x: 83.96, y: 90.19))
        kMyMoney_iconCanvasbezier22Path.addCurve(to: CGPoint(x: 132.47, y: 78.27), controlPoint1: CGPoint(x: 118.48, y: 90.19), controlPoint2: CGPoint(x: 132.47, y: 84.86))
        kMyMoney_iconCanvasbezier22Path.addLine(to: CGPoint(x: 132.47, y: 75.51))
        kMyMoney_iconCanvasbezier22Path.addLine(to: CGPoint(x: 69.98, y: 75.51))
        kMyMoney_iconCanvasbezier22Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier22Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 69.98, y: 82.85),
            end: CGPoint(x: 101.32, y: 82.85),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 22 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval22Path = UIBezierPath(ovalIn: CGRect(x: 70.45, y: 64.08, width: 61.8, height: 24.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval22Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 23 Drawing
        let kMyMoney_iconCanvasbezier23Path = UIBezierPath()
        kMyMoney_iconCanvasbezier23Path.move(to: CGPoint(x: 70.11, y: 73.28))
        kMyMoney_iconCanvasbezier23Path.addLine(to: CGPoint(x: 70.11, y: 76.05))
        kMyMoney_iconCanvasbezier23Path.addCurve(to: CGPoint(x: 101.35, y: 87.96), controlPoint1: CGPoint(x: 70.11, y: 82.62), controlPoint2: CGPoint(x: 84.09, y: 87.96))
        kMyMoney_iconCanvasbezier23Path.addCurve(to: CGPoint(x: 132.61, y: 76.05), controlPoint1: CGPoint(x: 118.61, y: 87.96), controlPoint2: CGPoint(x: 132.61, y: 82.62))
        kMyMoney_iconCanvasbezier23Path.addLine(to: CGPoint(x: 132.61, y: 73.28))
        kMyMoney_iconCanvasbezier23Path.addLine(to: CGPoint(x: 70.11, y: 73.28))
        kMyMoney_iconCanvasbezier23Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier23Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 70.11, y: 80.62),
            end: CGPoint(x: 101.45, y: 80.62),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 23 Drawing
        let kMyMoney_iconCanvasoval23Path = UIBezierPath(ovalIn: CGRect(x: 70.15, y: 61.43, width: 62.4, height: 24.2))
        context.saveGState()
        kMyMoney_iconCanvasoval23Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 112.15, y: 53.97),
            end: CGPoint(x: 112.15, y: 127.4),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 15
        //// kMyMoney_iconCanvas-bezier 24 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier24Path = UIBezierPath()
        kMyMoney_iconCanvasbezier24Path.move(to: CGPoint(x: 70.98, y: 64.53))
        kMyMoney_iconCanvasbezier24Path.addLine(to: CGPoint(x: 70.98, y: 67.1))
        kMyMoney_iconCanvasbezier24Path.addCurve(to: CGPoint(x: 102.22, y: 78.19), controlPoint1: CGPoint(x: 70.98, y: 73.23), controlPoint2: CGPoint(x: 84.96, y: 78.19))
        kMyMoney_iconCanvasbezier24Path.addCurve(to: CGPoint(x: 133.47, y: 67.1), controlPoint1: CGPoint(x: 119.48, y: 78.19), controlPoint2: CGPoint(x: 133.47, y: 73.23))
        kMyMoney_iconCanvasbezier24Path.addLine(to: CGPoint(x: 133.47, y: 64.53))
        kMyMoney_iconCanvasbezier24Path.addLine(to: CGPoint(x: 70.98, y: 64.53))
        kMyMoney_iconCanvasbezier24Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier24Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 70.98, y: 71.36),
            end: CGPoint(x: 102.32, y: 71.36),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 24 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval24Path = UIBezierPath(ovalIn: CGRect(x: 71.45, y: 54.08, width: 61.8, height: 22.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval24Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 25 Drawing
        let kMyMoney_iconCanvasbezier25Path = UIBezierPath()
        kMyMoney_iconCanvasbezier25Path.move(to: CGPoint(x: 71.11, y: 62.46))
        kMyMoney_iconCanvasbezier25Path.addLine(to: CGPoint(x: 71.11, y: 65.03))
        kMyMoney_iconCanvasbezier25Path.addCurve(to: CGPoint(x: 102.35, y: 76.12), controlPoint1: CGPoint(x: 71.11, y: 71.15), controlPoint2: CGPoint(x: 85.09, y: 76.12))
        kMyMoney_iconCanvasbezier25Path.addCurve(to: CGPoint(x: 133.61, y: 65.03), controlPoint1: CGPoint(x: 119.61, y: 76.12), controlPoint2: CGPoint(x: 133.61, y: 71.15))
        kMyMoney_iconCanvasbezier25Path.addLine(to: CGPoint(x: 133.61, y: 62.46))
        kMyMoney_iconCanvasbezier25Path.addLine(to: CGPoint(x: 71.11, y: 62.46))
        kMyMoney_iconCanvasbezier25Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier25Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 71.11, y: 69.28),
            end: CGPoint(x: 102.45, y: 69.28),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 25 Drawing
        let kMyMoney_iconCanvasoval25Path = UIBezierPath(ovalIn: CGRect(x: 71.15, y: 51.43, width: 62.4, height: 22.2))
        context.saveGState()
        kMyMoney_iconCanvasoval25Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 113.15, y: 44.59),
            end: CGPoint(x: 113.15, y: 111.95),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 16
        //// kMyMoney_iconCanvas-bezier 26 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier26Path = UIBezierPath()
        kMyMoney_iconCanvasbezier26Path.move(to: CGPoint(x: 70.98, y: 53.02))
        kMyMoney_iconCanvasbezier26Path.addLine(to: CGPoint(x: 70.98, y: 55.69))
        kMyMoney_iconCanvasbezier26Path.addCurve(to: CGPoint(x: 102.22, y: 67.19), controlPoint1: CGPoint(x: 70.98, y: 62.04), controlPoint2: CGPoint(x: 84.96, y: 67.19))
        kMyMoney_iconCanvasbezier26Path.addCurve(to: CGPoint(x: 133.47, y: 55.69), controlPoint1: CGPoint(x: 119.48, y: 67.19), controlPoint2: CGPoint(x: 133.47, y: 62.04))
        kMyMoney_iconCanvasbezier26Path.addLine(to: CGPoint(x: 133.47, y: 53.02))
        kMyMoney_iconCanvasbezier26Path.addLine(to: CGPoint(x: 70.98, y: 53.02))
        kMyMoney_iconCanvasbezier26Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier26Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 70.98, y: 60.11),
            end: CGPoint(x: 102.32, y: 60.11),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 26 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval26Path = UIBezierPath(ovalIn: CGRect(x: 71.45, y: 42.08, width: 61.8, height: 22.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval26Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 27 Drawing
        let kMyMoney_iconCanvasbezier27Path = UIBezierPath()
        kMyMoney_iconCanvasbezier27Path.move(to: CGPoint(x: 71.11, y: 50.87))
        kMyMoney_iconCanvasbezier27Path.addLine(to: CGPoint(x: 71.11, y: 53.54))
        kMyMoney_iconCanvasbezier27Path.addCurve(to: CGPoint(x: 102.35, y: 65.04), controlPoint1: CGPoint(x: 71.11, y: 59.88), controlPoint2: CGPoint(x: 85.09, y: 65.04))
        kMyMoney_iconCanvasbezier27Path.addCurve(to: CGPoint(x: 133.61, y: 53.54), controlPoint1: CGPoint(x: 119.61, y: 65.04), controlPoint2: CGPoint(x: 133.61, y: 59.88))
        kMyMoney_iconCanvasbezier27Path.addLine(to: CGPoint(x: 133.61, y: 50.87))
        kMyMoney_iconCanvasbezier27Path.addLine(to: CGPoint(x: 71.11, y: 50.87))
        kMyMoney_iconCanvasbezier27Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier27Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 71.11, y: 57.95),
            end: CGPoint(x: 102.45, y: 57.95),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 27 Drawing
        let kMyMoney_iconCanvasoval27Path = UIBezierPath(ovalIn: CGRect(x: 71.15, y: 39.43, width: 62.4, height: 23.2))
        context.saveGState()
        kMyMoney_iconCanvasoval27Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 113.15, y: 32.28),
            end: CGPoint(x: 113.15, y: 102.68),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group
        //// kMyMoney_iconCanvas-bezier Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezierPath = UIBezierPath()
        kMyMoney_iconCanvasbezierPath.move(to: CGPoint(x: 11.98, y: 126.96))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: 11.98, y: 130.2))
        kMyMoney_iconCanvasbezierPath.addCurve(to: CGPoint(x: 48.71, y: 144.19), controlPoint1: CGPoint(x: 11.98, y: 137.93), controlPoint2: CGPoint(x: 28.42, y: 144.19))
        kMyMoney_iconCanvasbezierPath.addCurve(to: CGPoint(x: 85.45, y: 130.2), controlPoint1: CGPoint(x: 69, y: 144.19), controlPoint2: CGPoint(x: 85.45, y: 137.93))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: 85.45, y: 126.96))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: 11.98, y: 126.96))
        kMyMoney_iconCanvasbezierPath.close()
        context.saveGState()
        kMyMoney_iconCanvasbezierPath.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 11.98, y: 135.58),
            end: CGPoint(x: 48.82, y: 135.58),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasovalPath = UIBezierPath(ovalIn: CGRect(x: 12.45, y: 114.08, width: 72.8, height: 28.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasovalPath.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 2 Drawing
        let kMyMoney_iconCanvasbezier2Path = UIBezierPath()
        kMyMoney_iconCanvasbezier2Path.move(to: CGPoint(x: 12.13, y: 124.34))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: 12.13, y: 127.58))
        kMyMoney_iconCanvasbezier2Path.addCurve(to: CGPoint(x: 48.86, y: 141.57), controlPoint1: CGPoint(x: 12.13, y: 135.31), controlPoint2: CGPoint(x: 28.57, y: 141.57))
        kMyMoney_iconCanvasbezier2Path.addCurve(to: CGPoint(x: 85.61, y: 127.58), controlPoint1: CGPoint(x: 69.15, y: 141.57), controlPoint2: CGPoint(x: 85.61, y: 135.31))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: 85.61, y: 124.34))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: 12.13, y: 124.34))
        kMyMoney_iconCanvasbezier2Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier2Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 12.13, y: 132.95),
            end: CGPoint(x: 48.98, y: 132.95),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 2 Drawing
        let kMyMoney_iconCanvasoval2Path = UIBezierPath(ovalIn: CGRect(x: 12.15, y: 110.43, width: 73.4, height: 28.2))
        context.saveGState()
        kMyMoney_iconCanvasoval2Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 61.56, y: 101.74),
            end: CGPoint(x: 61.56, y: 187.31),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 2
        //// kMyMoney_iconCanvas-bezier 3 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier3Path = UIBezierPath()
        kMyMoney_iconCanvasbezier3Path.move(to: CGPoint(x: 4.98, y: 114.51))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: 4.98, y: 117.27))
        kMyMoney_iconCanvasbezier3Path.addCurve(to: CGPoint(x: 41.71, y: 129.19), controlPoint1: CGPoint(x: 4.98, y: 123.85), controlPoint2: CGPoint(x: 21.42, y: 129.19))
        kMyMoney_iconCanvasbezier3Path.addCurve(to: CGPoint(x: 78.45, y: 117.27), controlPoint1: CGPoint(x: 62, y: 129.19), controlPoint2: CGPoint(x: 78.45, y: 123.85))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: 78.45, y: 114.51))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: 4.98, y: 114.51))
        kMyMoney_iconCanvasbezier3Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier3Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 4.98, y: 121.86),
            end: CGPoint(x: 41.82, y: 121.86),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 3 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval3Path = UIBezierPath(ovalIn: CGRect(x: 5.45, y: 103.08, width: 72.8, height: 24.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval3Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 4 Drawing
        let kMyMoney_iconCanvasbezier4Path = UIBezierPath()
        kMyMoney_iconCanvasbezier4Path.move(to: CGPoint(x: 5.13, y: 112.28))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: 5.13, y: 115.04))
        kMyMoney_iconCanvasbezier4Path.addCurve(to: CGPoint(x: 41.86, y: 126.96), controlPoint1: CGPoint(x: 5.13, y: 121.62), controlPoint2: CGPoint(x: 21.57, y: 126.96))
        kMyMoney_iconCanvasbezier4Path.addCurve(to: CGPoint(x: 78.61, y: 115.04), controlPoint1: CGPoint(x: 62.15, y: 126.96), controlPoint2: CGPoint(x: 78.61, y: 121.62))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: 78.61, y: 112.28))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: 5.13, y: 112.28))
        kMyMoney_iconCanvasbezier4Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier4Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 5.13, y: 119.62),
            end: CGPoint(x: 41.98, y: 119.62),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 4 Drawing
        let kMyMoney_iconCanvasoval4Path = UIBezierPath(ovalIn: CGRect(x: 5.15, y: 100.43, width: 73.4, height: 24.2))
        context.saveGState()
        kMyMoney_iconCanvasoval4Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 54.56, y: 92.97),
            end: CGPoint(x: 54.56, y: 166.4),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 3
        //// kMyMoney_iconCanvas-bezier 5 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier5Path = UIBezierPath()
        kMyMoney_iconCanvasbezier5Path.move(to: CGPoint(x: 11.98, y: 103.54))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: 11.98, y: 106.1))
        kMyMoney_iconCanvasbezier5Path.addCurve(to: CGPoint(x: 48.71, y: 117.19), controlPoint1: CGPoint(x: 11.98, y: 112.23), controlPoint2: CGPoint(x: 28.42, y: 117.19))
        kMyMoney_iconCanvasbezier5Path.addCurve(to: CGPoint(x: 85.45, y: 106.1), controlPoint1: CGPoint(x: 69, y: 117.19), controlPoint2: CGPoint(x: 85.45, y: 112.23))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: 85.45, y: 103.54))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: 11.98, y: 103.54))
        kMyMoney_iconCanvasbezier5Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier5Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 11.98, y: 110.37),
            end: CGPoint(x: 48.82, y: 110.37),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 5 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval5Path = UIBezierPath(ovalIn: CGRect(x: 12.45, y: 93.08, width: 72.8, height: 22.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval5Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 6 Drawing
        let kMyMoney_iconCanvasbezier6Path = UIBezierPath()
        kMyMoney_iconCanvasbezier6Path.move(to: CGPoint(x: 12.13, y: 101.46))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: 12.13, y: 104.03))
        kMyMoney_iconCanvasbezier6Path.addCurve(to: CGPoint(x: 48.86, y: 115.11), controlPoint1: CGPoint(x: 12.13, y: 110.15), controlPoint2: CGPoint(x: 28.57, y: 115.11))
        kMyMoney_iconCanvasbezier6Path.addCurve(to: CGPoint(x: 85.61, y: 104.03), controlPoint1: CGPoint(x: 69.15, y: 115.11), controlPoint2: CGPoint(x: 85.61, y: 110.15))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: 85.61, y: 101.46))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: 12.13, y: 101.46))
        kMyMoney_iconCanvasbezier6Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier6Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 12.13, y: 108.28),
            end: CGPoint(x: 48.98, y: 108.28),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 6 Drawing
        let kMyMoney_iconCanvasoval6Path = UIBezierPath(ovalIn: CGRect(x: 12.15, y: 90.43, width: 73.4, height: 22.2))
        context.saveGState()
        kMyMoney_iconCanvasoval6Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 61.56, y: 83.59),
            end: CGPoint(x: 61.56, y: 150.95),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 4
        //// kMyMoney_iconCanvas-bezier 7 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier7Path = UIBezierPath()
        kMyMoney_iconCanvasbezier7Path.move(to: CGPoint(x: 11.98, y: 86.49))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: 11.98, y: 89.45))
        kMyMoney_iconCanvasbezier7Path.addCurve(to: CGPoint(x: 48.71, y: 102.19), controlPoint1: CGPoint(x: 11.98, y: 96.48), controlPoint2: CGPoint(x: 28.42, y: 102.19))
        kMyMoney_iconCanvasbezier7Path.addCurve(to: CGPoint(x: 85.45, y: 89.45), controlPoint1: CGPoint(x: 69, y: 102.19), controlPoint2: CGPoint(x: 85.45, y: 96.48))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: 85.45, y: 86.49))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: 11.98, y: 86.49))
        kMyMoney_iconCanvasbezier7Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier7Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 11.98, y: 94.35),
            end: CGPoint(x: 48.82, y: 94.35),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 7 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval7Path = UIBezierPath(ovalIn: CGRect(x: 12.45, y: 74.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval7Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 8 Drawing
        let kMyMoney_iconCanvasbezier8Path = UIBezierPath()
        kMyMoney_iconCanvasbezier8Path.move(to: CGPoint(x: 12.13, y: 84.11))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: 12.13, y: 87.06))
        kMyMoney_iconCanvasbezier8Path.addCurve(to: CGPoint(x: 48.86, y: 99.8), controlPoint1: CGPoint(x: 12.13, y: 94.1), controlPoint2: CGPoint(x: 28.57, y: 99.8))
        kMyMoney_iconCanvasbezier8Path.addCurve(to: CGPoint(x: 85.61, y: 87.06), controlPoint1: CGPoint(x: 69.15, y: 99.8), controlPoint2: CGPoint(x: 85.61, y: 94.1))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: 85.61, y: 84.11))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: 12.13, y: 84.11))
        kMyMoney_iconCanvasbezier8Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier8Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 12.13, y: 91.95),
            end: CGPoint(x: 48.98, y: 91.95),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 8 Drawing
        let kMyMoney_iconCanvasoval8Path = UIBezierPath(ovalIn: CGRect(x: 12.15, y: 71.43, width: 73.4, height: 25.2))
        context.saveGState()
        kMyMoney_iconCanvasoval8Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 61.56, y: 63.67),
            end: CGPoint(x: 61.56, y: 140.13),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 5
        //// kMyMoney_iconCanvas-bezier 9 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier9Path = UIBezierPath()
        kMyMoney_iconCanvasbezier9Path.move(to: CGPoint(x: 11.98, y: 75.51))
        kMyMoney_iconCanvasbezier9Path.addLine(to: CGPoint(x: 11.98, y: 78.27))
        kMyMoney_iconCanvasbezier9Path.addCurve(to: CGPoint(x: 48.71, y: 90.19), controlPoint1: CGPoint(x: 11.98, y: 84.85), controlPoint2: CGPoint(x: 28.42, y: 90.19))
        kMyMoney_iconCanvasbezier9Path.addCurve(to: CGPoint(x: 85.45, y: 78.27), controlPoint1: CGPoint(x: 69, y: 90.19), controlPoint2: CGPoint(x: 85.45, y: 84.85))
        kMyMoney_iconCanvasbezier9Path.addLine(to: CGPoint(x: 85.45, y: 75.51))
        kMyMoney_iconCanvasbezier9Path.addLine(to: CGPoint(x: 11.98, y: 75.51))
        kMyMoney_iconCanvasbezier9Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier9Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 11.98, y: 82.86),
            end: CGPoint(x: 48.82, y: 82.86),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 9 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval9Path = UIBezierPath(ovalIn: CGRect(x: 12.45, y: 64.08, width: 72.8, height: 24.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval9Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 10 Drawing
        let kMyMoney_iconCanvasbezier10Path = UIBezierPath()
        kMyMoney_iconCanvasbezier10Path.move(to: CGPoint(x: 12.13, y: 73.28))
        kMyMoney_iconCanvasbezier10Path.addLine(to: CGPoint(x: 12.13, y: 76.04))
        kMyMoney_iconCanvasbezier10Path.addCurve(to: CGPoint(x: 48.86, y: 87.96), controlPoint1: CGPoint(x: 12.13, y: 82.62), controlPoint2: CGPoint(x: 28.57, y: 87.96))
        kMyMoney_iconCanvasbezier10Path.addCurve(to: CGPoint(x: 85.61, y: 76.04), controlPoint1: CGPoint(x: 69.15, y: 87.96), controlPoint2: CGPoint(x: 85.61, y: 82.62))
        kMyMoney_iconCanvasbezier10Path.addLine(to: CGPoint(x: 85.61, y: 73.28))
        kMyMoney_iconCanvasbezier10Path.addLine(to: CGPoint(x: 12.13, y: 73.28))
        kMyMoney_iconCanvasbezier10Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier10Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 12.13, y: 80.62),
            end: CGPoint(x: 48.98, y: 80.62),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 10 Drawing
        let kMyMoney_iconCanvasoval10Path = UIBezierPath(ovalIn: CGRect(x: 12.15, y: 61.43, width: 73.4, height: 24.2))
        context.saveGState()
        kMyMoney_iconCanvasoval10Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 61.56, y: 53.97),
            end: CGPoint(x: 61.56, y: 127.4),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 7
        //// kMyMoney_iconCanvas-bezier 11 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier11Path = UIBezierPath()
        kMyMoney_iconCanvasbezier11Path.move(to: CGPoint(x: 19.98, y: 66.49))
        kMyMoney_iconCanvasbezier11Path.addLine(to: CGPoint(x: 19.98, y: 69.45))
        kMyMoney_iconCanvasbezier11Path.addCurve(to: CGPoint(x: 56.71, y: 82.19), controlPoint1: CGPoint(x: 19.98, y: 76.48), controlPoint2: CGPoint(x: 36.42, y: 82.19))
        kMyMoney_iconCanvasbezier11Path.addCurve(to: CGPoint(x: 93.45, y: 69.45), controlPoint1: CGPoint(x: 77, y: 82.19), controlPoint2: CGPoint(x: 93.45, y: 76.48))
        kMyMoney_iconCanvasbezier11Path.addLine(to: CGPoint(x: 93.45, y: 66.49))
        kMyMoney_iconCanvasbezier11Path.addLine(to: CGPoint(x: 19.98, y: 66.49))
        kMyMoney_iconCanvasbezier11Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier11Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 19.98, y: 74.35),
            end: CGPoint(x: 56.82, y: 74.35),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 11 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval11Path = UIBezierPath(ovalIn: CGRect(x: 20.45, y: 54.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval11Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 12 Drawing
        let kMyMoney_iconCanvasbezier12Path = UIBezierPath()
        kMyMoney_iconCanvasbezier12Path.move(to: CGPoint(x: 20.13, y: 64.11))
        kMyMoney_iconCanvasbezier12Path.addLine(to: CGPoint(x: 20.13, y: 67.06))
        kMyMoney_iconCanvasbezier12Path.addCurve(to: CGPoint(x: 56.86, y: 79.8), controlPoint1: CGPoint(x: 20.13, y: 74.1), controlPoint2: CGPoint(x: 36.57, y: 79.8))
        kMyMoney_iconCanvasbezier12Path.addCurve(to: CGPoint(x: 93.61, y: 67.06), controlPoint1: CGPoint(x: 77.15, y: 79.8), controlPoint2: CGPoint(x: 93.61, y: 74.1))
        kMyMoney_iconCanvasbezier12Path.addLine(to: CGPoint(x: 93.61, y: 64.11))
        kMyMoney_iconCanvasbezier12Path.addLine(to: CGPoint(x: 20.13, y: 64.11))
        kMyMoney_iconCanvasbezier12Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier12Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 20.13, y: 71.95),
            end: CGPoint(x: 56.98, y: 71.95),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 12 Drawing
        let kMyMoney_iconCanvasoval12Path = UIBezierPath(ovalIn: CGRect(x: 20.15, y: 51.43, width: 73.4, height: 25.2))
        context.saveGState()
        kMyMoney_iconCanvasoval12Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 69.56, y: 43.67),
            end: CGPoint(x: 69.56, y: 120.13),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 8
        //// kMyMoney_iconCanvas-bezier 13 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier13Path = UIBezierPath()
        kMyMoney_iconCanvasbezier13Path.move(to: CGPoint(x: 11.98, y: 54.98))
        kMyMoney_iconCanvasbezier13Path.addLine(to: CGPoint(x: 11.98, y: 58.03))
        kMyMoney_iconCanvasbezier13Path.addCurve(to: CGPoint(x: 48.71, y: 71.19), controlPoint1: CGPoint(x: 11.98, y: 65.3), controlPoint2: CGPoint(x: 28.42, y: 71.19))
        kMyMoney_iconCanvasbezier13Path.addCurve(to: CGPoint(x: 85.45, y: 58.03), controlPoint1: CGPoint(x: 69, y: 71.19), controlPoint2: CGPoint(x: 85.45, y: 65.3))
        kMyMoney_iconCanvasbezier13Path.addLine(to: CGPoint(x: 85.45, y: 54.98))
        kMyMoney_iconCanvasbezier13Path.addLine(to: CGPoint(x: 11.98, y: 54.98))
        kMyMoney_iconCanvasbezier13Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier13Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 11.98, y: 63.09),
            end: CGPoint(x: 48.82, y: 63.09),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 13 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval13Path = UIBezierPath(ovalIn: CGRect(x: 12.45, y: 43.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval13Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 14 Drawing
        let kMyMoney_iconCanvasbezier14Path = UIBezierPath()
        kMyMoney_iconCanvasbezier14Path.move(to: CGPoint(x: 12.13, y: 52.52))
        kMyMoney_iconCanvasbezier14Path.addLine(to: CGPoint(x: 12.13, y: 55.57))
        kMyMoney_iconCanvasbezier14Path.addCurve(to: CGPoint(x: 48.86, y: 68.73), controlPoint1: CGPoint(x: 12.13, y: 62.83), controlPoint2: CGPoint(x: 28.57, y: 68.73))
        kMyMoney_iconCanvasbezier14Path.addCurve(to: CGPoint(x: 85.61, y: 55.57), controlPoint1: CGPoint(x: 69.15, y: 68.73), controlPoint2: CGPoint(x: 85.61, y: 62.83))
        kMyMoney_iconCanvasbezier14Path.addLine(to: CGPoint(x: 85.61, y: 52.52))
        kMyMoney_iconCanvasbezier14Path.addLine(to: CGPoint(x: 12.13, y: 52.52))
        kMyMoney_iconCanvasbezier14Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier14Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 12.13, y: 60.62),
            end: CGPoint(x: 48.98, y: 60.62),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 14 Drawing
        let kMyMoney_iconCanvasoval14Path = UIBezierPath(ovalIn: CGRect(x: 12.15, y: 39.43, width: 73.4, height: 26.2))
        context.saveGState()
        kMyMoney_iconCanvasoval14Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 61.56, y: 31.36),
            end: CGPoint(x: 61.56, y: 110.86),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 9
        //// kMyMoney_iconCanvas-bezier 15 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier15Path = UIBezierPath()
        kMyMoney_iconCanvasbezier15Path.move(to: CGPoint(x: 4.98, y: 45.49))
        kMyMoney_iconCanvasbezier15Path.addLine(to: CGPoint(x: 4.98, y: 48.45))
        kMyMoney_iconCanvasbezier15Path.addCurve(to: CGPoint(x: 41.71, y: 61.19), controlPoint1: CGPoint(x: 4.98, y: 55.48), controlPoint2: CGPoint(x: 21.42, y: 61.19))
        kMyMoney_iconCanvasbezier15Path.addCurve(to: CGPoint(x: 78.45, y: 48.45), controlPoint1: CGPoint(x: 62, y: 61.19), controlPoint2: CGPoint(x: 78.45, y: 55.48))
        kMyMoney_iconCanvasbezier15Path.addLine(to: CGPoint(x: 78.45, y: 45.49))
        kMyMoney_iconCanvasbezier15Path.addLine(to: CGPoint(x: 4.98, y: 45.49))
        kMyMoney_iconCanvasbezier15Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier15Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 4.98, y: 53.35),
            end: CGPoint(x: 41.82, y: 53.35),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 15 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval15Path = UIBezierPath(ovalIn: CGRect(x: 5.45, y: 34.08, width: 72.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval15Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 16 Drawing
        let kMyMoney_iconCanvasbezier16Path = UIBezierPath()
        kMyMoney_iconCanvasbezier16Path.move(to: CGPoint(x: 5.13, y: 43.11))
        kMyMoney_iconCanvasbezier16Path.addLine(to: CGPoint(x: 5.13, y: 46.06))
        kMyMoney_iconCanvasbezier16Path.addCurve(to: CGPoint(x: 41.86, y: 58.8), controlPoint1: CGPoint(x: 5.13, y: 53.1), controlPoint2: CGPoint(x: 21.57, y: 58.8))
        kMyMoney_iconCanvasbezier16Path.addCurve(to: CGPoint(x: 78.61, y: 46.06), controlPoint1: CGPoint(x: 62.15, y: 58.8), controlPoint2: CGPoint(x: 78.61, y: 53.1))
        kMyMoney_iconCanvasbezier16Path.addLine(to: CGPoint(x: 78.61, y: 43.11))
        kMyMoney_iconCanvasbezier16Path.addLine(to: CGPoint(x: 5.13, y: 43.11))
        kMyMoney_iconCanvasbezier16Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier16Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 5.13, y: 50.95),
            end: CGPoint(x: 41.98, y: 50.95),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 16 Drawing
        let kMyMoney_iconCanvasoval16Path = UIBezierPath(ovalIn: CGRect(x: 5.15, y: 30.43, width: 73.4, height: 25.2))
        context.saveGState()
        kMyMoney_iconCanvasoval16Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 54.56, y: 22.67),
            end: CGPoint(x: 54.56, y: 99.13),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// Text Drawing
        context.saveGState()
        context.translateBy(x: 43, y: 42.75)
        context.scaleBy(x: 1.2, y: 0.5)

        let textRect = CGRect(x: -27.5, y: -16.5, width: 55, height: 33)
        let textTextContent = "1 000 000"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            .font: UIFont.systemFont(ofSize: 10, weight: .bold),
            .foregroundColor: UIColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        let textTextRect: CGRect = CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: textTextRect, withAttributes: textFontAttributes)
        context.restoreGState()
        
        ////// Text Text Inner Shadow
        context.saveGState()
        context.clip(to: textRect)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow6.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let textOpaqueTextShadow = (shadow6.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow6.shadowOffset.width * resizedShadowScale, height: shadow6.shadowOffset.height * resizedShadowScale), blur: shadow6.shadowBlurRadius * resizedShadowScale, color: textOpaqueTextShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        textOpaqueTextShadow.setFill()

        let textInnerShadowFontAttributes = [
            .font: UIFont.systemFont(ofSize: 10, weight: .bold),
            .foregroundColor: (shadow6.shadowColor as! UIColor),
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]
        textTextContent.draw(in: textTextRect, withAttributes: textInnerShadowFontAttributes)

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawMoneyRound12(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 141, height: 157), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 141, height: 157), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 141, y: resizedFrame.height / 157)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 141, resizedFrame.height / 157)


        //// Color Declarations
        let gradientColor25 = UIColor(red: 0.992, green: 0.898, blue: 0.576, alpha: 1.000)
        let gradientColor26 = UIColor(red: 1.000, green: 0.878, blue: 0.529, alpha: 1.000)
        let gradientColor27 = UIColor(red: 1.000, green: 0.902, blue: 0.537, alpha: 1.000)
        let gradientColor28 = UIColor(red: 0.984, green: 0.698, blue: 0.337, alpha: 1.000)
        let gradientColor29 = UIColor(red: 0.643, green: 0.294, blue: 0.047, alpha: 1.000)
        let gradientColor30 = UIColor(red: 0.514, green: 0.196, blue: 0.024, alpha: 1.000)
        let gradientColor31 = UIColor(red: 0.439, green: 0.145, blue: 0.024, alpha: 1.000)
        let gradientColor32 = UIColor(red: 0.486, green: 0.180, blue: 0.035, alpha: 1.000)
        let gradientColor33 = UIColor(red: 0.776, green: 0.408, blue: 0.122, alpha: 1.000)
        let gradientColor34 = UIColor(red: 0.992, green: 0.596, blue: 0.192, alpha: 1.000)
        let gradientColor35 = UIColor(red: 1.000, green: 0.635, blue: 0.208, alpha: 1.000)
        let gradientColor36 = UIColor(red: 0.945, green: 0.533, blue: 0.169, alpha: 1.000)
        let gradientColor37 = UIColor(red: 0.580, green: 0.251, blue: 0.063, alpha: 1.000)
        let gradientColor38 = UIColor(red: 0.427, green: 0.141, blue: 0.020, alpha: 1.000)
        let fillColor4 = UIColor(red: 0.231, green: 0.114, blue: 0.024, alpha: 1.000)
        let shadow6Color = UIColor(red: 0.684, green: 0.571, blue: 0.182, alpha: 1.000)

        //// Gradient Declarations
        let kMyMoney_iconCanvasgbezier36 = CGGradient(colorsSpace: nil, colors: [gradientColor25.cgColor, gradientColor26.cgColor, gradientColor27.cgColor, gradientColor28.cgColor, gradientColor29.cgColor, gradientColor30.cgColor, gradientColor31.cgColor, gradientColor31.cgColor, gradientColor32.cgColor, gradientColor33.cgColor, gradientColor34.cgColor, gradientColor35.cgColor, gradientColor36.cgColor, gradientColor37.cgColor, gradientColor38.cgColor] as CFArray, locations: [0, 0.1, 0.2, 0.28, 0.41, 0.48, 0.55, 0.58, 0.61, 0.66, 0.7, 0.78, 0.85, 0.91, 1])!

        //// Shadow Declarations
        let shadow6 = NSShadow()
        shadow6.shadowColor = shadow6Color
        shadow6.shadowOffset = CGSize(width: 3, height: 3)
        shadow6.shadowBlurRadius = 5

        //// kMyMoney_iconCanvas-group 6
        //// kMyMoney_iconCanvas-bezier124 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier124Path = UIBezierPath()
        kMyMoney_iconCanvasbezier124Path.move(to: CGPoint(x: 4.98, y: 135.98))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: 4.98, y: 139.03))
        kMyMoney_iconCanvasbezier124Path.addCurve(to: CGPoint(x: 41.71, y: 152.19), controlPoint1: CGPoint(x: 4.98, y: 146.3), controlPoint2: CGPoint(x: 21.42, y: 152.19))
        kMyMoney_iconCanvasbezier124Path.addCurve(to: CGPoint(x: 78.45, y: 139.03), controlPoint1: CGPoint(x: 62, y: 152.19), controlPoint2: CGPoint(x: 78.45, y: 146.3))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: 78.45, y: 135.98))
        kMyMoney_iconCanvasbezier124Path.addLine(to: CGPoint(x: 4.98, y: 135.98))
        kMyMoney_iconCanvasbezier124Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier124Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 4.98, y: 144.09),
            end: CGPoint(x: 41.82, y: 144.09),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval67 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval67Path = UIBezierPath(ovalIn: CGRect(x: 5.45, y: 124.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval67Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier125 Drawing
        let kMyMoney_iconCanvasbezier125Path = UIBezierPath()
        kMyMoney_iconCanvasbezier125Path.move(to: CGPoint(x: 5.13, y: 133.52))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: 5.13, y: 136.57))
        kMyMoney_iconCanvasbezier125Path.addCurve(to: CGPoint(x: 41.86, y: 149.73), controlPoint1: CGPoint(x: 5.13, y: 143.83), controlPoint2: CGPoint(x: 21.57, y: 149.73))
        kMyMoney_iconCanvasbezier125Path.addCurve(to: CGPoint(x: 78.61, y: 136.57), controlPoint1: CGPoint(x: 62.15, y: 149.73), controlPoint2: CGPoint(x: 78.61, y: 143.83))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: 78.61, y: 133.52))
        kMyMoney_iconCanvasbezier125Path.addLine(to: CGPoint(x: 5.13, y: 133.52))
        kMyMoney_iconCanvasbezier125Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier125Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 5.13, y: 141.62),
            end: CGPoint(x: 41.98, y: 141.62),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval68 Drawing
        let kMyMoney_iconCanvasoval68Path = UIBezierPath(ovalIn: CGRect(x: 5.15, y: 120.43, width: 73.4, height: 26.2))
        context.saveGState()
        kMyMoney_iconCanvasoval68Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 54.56, y: 112.36),
            end: CGPoint(x: 54.56, y: 191.86),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 10
        //// kMyMoney_iconCanvas-bezier89 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier89Path = UIBezierPath()
        kMyMoney_iconCanvasbezier89Path.move(to: CGPoint(x: 70.98, y: 114.51))
        kMyMoney_iconCanvasbezier89Path.addLine(to: CGPoint(x: 70.98, y: 117.27))
        kMyMoney_iconCanvasbezier89Path.addCurve(to: CGPoint(x: 102.22, y: 129.19), controlPoint1: CGPoint(x: 70.98, y: 123.86), controlPoint2: CGPoint(x: 84.96, y: 129.19))
        kMyMoney_iconCanvasbezier89Path.addCurve(to: CGPoint(x: 133.47, y: 117.27), controlPoint1: CGPoint(x: 119.48, y: 129.19), controlPoint2: CGPoint(x: 133.47, y: 123.86))
        kMyMoney_iconCanvasbezier89Path.addLine(to: CGPoint(x: 133.47, y: 114.51))
        kMyMoney_iconCanvasbezier89Path.addLine(to: CGPoint(x: 70.98, y: 114.51))
        kMyMoney_iconCanvasbezier89Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier89Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 70.98, y: 121.85),
            end: CGPoint(x: 102.32, y: 121.85),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 17 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval17Path = UIBezierPath(ovalIn: CGRect(x: 71.45, y: 103.08, width: 61.8, height: 24.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval17Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier128 Drawing
        let kMyMoney_iconCanvasbezier128Path = UIBezierPath()
        kMyMoney_iconCanvasbezier128Path.move(to: CGPoint(x: 71.11, y: 112.28))
        kMyMoney_iconCanvasbezier128Path.addLine(to: CGPoint(x: 71.11, y: 115.05))
        kMyMoney_iconCanvasbezier128Path.addCurve(to: CGPoint(x: 102.35, y: 126.96), controlPoint1: CGPoint(x: 71.11, y: 121.62), controlPoint2: CGPoint(x: 85.09, y: 126.96))
        kMyMoney_iconCanvasbezier128Path.addCurve(to: CGPoint(x: 133.61, y: 115.05), controlPoint1: CGPoint(x: 119.61, y: 126.96), controlPoint2: CGPoint(x: 133.61, y: 121.62))
        kMyMoney_iconCanvasbezier128Path.addLine(to: CGPoint(x: 133.61, y: 112.28))
        kMyMoney_iconCanvasbezier128Path.addLine(to: CGPoint(x: 71.11, y: 112.28))
        kMyMoney_iconCanvasbezier128Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier128Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 71.11, y: 119.62),
            end: CGPoint(x: 102.45, y: 119.62),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval71 Drawing
        let kMyMoney_iconCanvasoval71Path = UIBezierPath(ovalIn: CGRect(x: 71.15, y: 100.43, width: 62.4, height: 24.2))
        context.saveGState()
        kMyMoney_iconCanvasoval71Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 113.15, y: 92.97),
            end: CGPoint(x: 113.15, y: 166.4),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 11
        //// kMyMoney_iconCanvas-bezier126 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier126Path = UIBezierPath()
        kMyMoney_iconCanvasbezier126Path.move(to: CGPoint(x: 67.98, y: 105))
        kMyMoney_iconCanvasbezier126Path.addLine(to: CGPoint(x: 67.98, y: 107.86))
        kMyMoney_iconCanvasbezier126Path.addCurve(to: CGPoint(x: 99.22, y: 120.19), controlPoint1: CGPoint(x: 67.98, y: 114.67), controlPoint2: CGPoint(x: 81.96, y: 120.19))
        kMyMoney_iconCanvasbezier126Path.addCurve(to: CGPoint(x: 130.47, y: 107.86), controlPoint1: CGPoint(x: 116.48, y: 120.19), controlPoint2: CGPoint(x: 130.47, y: 114.67))
        kMyMoney_iconCanvasbezier126Path.addLine(to: CGPoint(x: 130.47, y: 105))
        kMyMoney_iconCanvasbezier126Path.addLine(to: CGPoint(x: 67.98, y: 105))
        kMyMoney_iconCanvasbezier126Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier126Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 67.98, y: 112.6),
            end: CGPoint(x: 99.32, y: 112.6),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval69 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval69Path = UIBezierPath(ovalIn: CGRect(x: 68.45, y: 93.08, width: 61.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval69Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier127 Drawing
        let kMyMoney_iconCanvasbezier127Path = UIBezierPath()
        kMyMoney_iconCanvasbezier127Path.move(to: CGPoint(x: 68.11, y: 102.69))
        kMyMoney_iconCanvasbezier127Path.addLine(to: CGPoint(x: 68.11, y: 105.56))
        kMyMoney_iconCanvasbezier127Path.addCurve(to: CGPoint(x: 99.35, y: 117.89), controlPoint1: CGPoint(x: 68.11, y: 112.36), controlPoint2: CGPoint(x: 82.09, y: 117.89))
        kMyMoney_iconCanvasbezier127Path.addCurve(to: CGPoint(x: 130.61, y: 105.56), controlPoint1: CGPoint(x: 116.61, y: 117.89), controlPoint2: CGPoint(x: 130.61, y: 112.36))
        kMyMoney_iconCanvasbezier127Path.addLine(to: CGPoint(x: 130.61, y: 102.69))
        kMyMoney_iconCanvasbezier127Path.addLine(to: CGPoint(x: 68.11, y: 102.69))
        kMyMoney_iconCanvasbezier127Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier127Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 68.11, y: 110.29),
            end: CGPoint(x: 99.45, y: 110.29),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval70 Drawing
        let kMyMoney_iconCanvasoval70Path = UIBezierPath(ovalIn: CGRect(x: 68.15, y: 90.43, width: 62.4, height: 25.2))
        context.saveGState()
        kMyMoney_iconCanvasoval70Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 110.15, y: 82.67),
            end: CGPoint(x: 110.15, y: 159.13),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 12
        //// kMyMoney_iconCanvas-bezier 18 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier18Path = UIBezierPath()
        kMyMoney_iconCanvasbezier18Path.move(to: CGPoint(x: 67.98, y: 93.98))
        kMyMoney_iconCanvasbezier18Path.addLine(to: CGPoint(x: 67.98, y: 97.03))
        kMyMoney_iconCanvasbezier18Path.addCurve(to: CGPoint(x: 99.22, y: 110.19), controlPoint1: CGPoint(x: 67.98, y: 104.3), controlPoint2: CGPoint(x: 81.96, y: 110.19))
        kMyMoney_iconCanvasbezier18Path.addCurve(to: CGPoint(x: 130.47, y: 97.03), controlPoint1: CGPoint(x: 116.48, y: 110.19), controlPoint2: CGPoint(x: 130.47, y: 104.3))
        kMyMoney_iconCanvasbezier18Path.addLine(to: CGPoint(x: 130.47, y: 93.98))
        kMyMoney_iconCanvasbezier18Path.addLine(to: CGPoint(x: 67.98, y: 93.98))
        kMyMoney_iconCanvasbezier18Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier18Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 67.98, y: 102.09),
            end: CGPoint(x: 99.32, y: 102.09),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 18 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval18Path = UIBezierPath(ovalIn: CGRect(x: 68.45, y: 81.08, width: 61.8, height: 27.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval18Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 19 Drawing
        let kMyMoney_iconCanvasbezier19Path = UIBezierPath()
        kMyMoney_iconCanvasbezier19Path.move(to: CGPoint(x: 68.11, y: 91.52))
        kMyMoney_iconCanvasbezier19Path.addLine(to: CGPoint(x: 68.11, y: 94.57))
        kMyMoney_iconCanvasbezier19Path.addCurve(to: CGPoint(x: 99.35, y: 107.73), controlPoint1: CGPoint(x: 68.11, y: 101.83), controlPoint2: CGPoint(x: 82.09, y: 107.73))
        kMyMoney_iconCanvasbezier19Path.addCurve(to: CGPoint(x: 130.61, y: 94.57), controlPoint1: CGPoint(x: 116.61, y: 107.73), controlPoint2: CGPoint(x: 130.61, y: 101.83))
        kMyMoney_iconCanvasbezier19Path.addLine(to: CGPoint(x: 130.61, y: 91.52))
        kMyMoney_iconCanvasbezier19Path.addLine(to: CGPoint(x: 68.11, y: 91.52))
        kMyMoney_iconCanvasbezier19Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier19Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 68.11, y: 99.62),
            end: CGPoint(x: 99.45, y: 99.62),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 19 Drawing
        let kMyMoney_iconCanvasoval19Path = UIBezierPath(ovalIn: CGRect(x: 68.15, y: 78.43, width: 62.4, height: 26.2))
        context.saveGState()
        kMyMoney_iconCanvasoval19Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 110.15, y: 70.36),
            end: CGPoint(x: 110.15, y: 149.85),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 13
        //// kMyMoney_iconCanvas-bezier 20 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier20Path = UIBezierPath()
        kMyMoney_iconCanvasbezier20Path.move(to: CGPoint(x: 70.98, y: 85.51))
        kMyMoney_iconCanvasbezier20Path.addLine(to: CGPoint(x: 70.98, y: 88.27))
        kMyMoney_iconCanvasbezier20Path.addCurve(to: CGPoint(x: 102.22, y: 100.19), controlPoint1: CGPoint(x: 70.98, y: 94.86), controlPoint2: CGPoint(x: 84.96, y: 100.19))
        kMyMoney_iconCanvasbezier20Path.addCurve(to: CGPoint(x: 133.47, y: 88.27), controlPoint1: CGPoint(x: 119.48, y: 100.19), controlPoint2: CGPoint(x: 133.47, y: 94.86))
        kMyMoney_iconCanvasbezier20Path.addLine(to: CGPoint(x: 133.47, y: 85.51))
        kMyMoney_iconCanvasbezier20Path.addLine(to: CGPoint(x: 70.98, y: 85.51))
        kMyMoney_iconCanvasbezier20Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier20Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 70.98, y: 92.85),
            end: CGPoint(x: 102.32, y: 92.85),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 20 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval20Path = UIBezierPath(ovalIn: CGRect(x: 71.45, y: 74.08, width: 61.8, height: 24.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval20Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 21 Drawing
        let kMyMoney_iconCanvasbezier21Path = UIBezierPath()
        kMyMoney_iconCanvasbezier21Path.move(to: CGPoint(x: 71.11, y: 83.28))
        kMyMoney_iconCanvasbezier21Path.addLine(to: CGPoint(x: 71.11, y: 86.05))
        kMyMoney_iconCanvasbezier21Path.addCurve(to: CGPoint(x: 102.35, y: 97.96), controlPoint1: CGPoint(x: 71.11, y: 92.62), controlPoint2: CGPoint(x: 85.09, y: 97.96))
        kMyMoney_iconCanvasbezier21Path.addCurve(to: CGPoint(x: 133.61, y: 86.05), controlPoint1: CGPoint(x: 119.61, y: 97.96), controlPoint2: CGPoint(x: 133.61, y: 92.62))
        kMyMoney_iconCanvasbezier21Path.addLine(to: CGPoint(x: 133.61, y: 83.28))
        kMyMoney_iconCanvasbezier21Path.addLine(to: CGPoint(x: 71.11, y: 83.28))
        kMyMoney_iconCanvasbezier21Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier21Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 71.11, y: 90.62),
            end: CGPoint(x: 102.45, y: 90.62),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 21 Drawing
        let kMyMoney_iconCanvasoval21Path = UIBezierPath(ovalIn: CGRect(x: 71.15, y: 71.43, width: 62.4, height: 24.2))
        context.saveGState()
        kMyMoney_iconCanvasoval21Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 113.15, y: 63.97),
            end: CGPoint(x: 113.15, y: 137.4),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 14
        //// kMyMoney_iconCanvas-bezier 22 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier22Path = UIBezierPath()
        kMyMoney_iconCanvasbezier22Path.move(to: CGPoint(x: 69.98, y: 75.51))
        kMyMoney_iconCanvasbezier22Path.addLine(to: CGPoint(x: 69.98, y: 78.27))
        kMyMoney_iconCanvasbezier22Path.addCurve(to: CGPoint(x: 101.22, y: 90.19), controlPoint1: CGPoint(x: 69.98, y: 84.86), controlPoint2: CGPoint(x: 83.96, y: 90.19))
        kMyMoney_iconCanvasbezier22Path.addCurve(to: CGPoint(x: 132.47, y: 78.27), controlPoint1: CGPoint(x: 118.48, y: 90.19), controlPoint2: CGPoint(x: 132.47, y: 84.86))
        kMyMoney_iconCanvasbezier22Path.addLine(to: CGPoint(x: 132.47, y: 75.51))
        kMyMoney_iconCanvasbezier22Path.addLine(to: CGPoint(x: 69.98, y: 75.51))
        kMyMoney_iconCanvasbezier22Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier22Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 69.98, y: 82.85),
            end: CGPoint(x: 101.32, y: 82.85),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 22 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval22Path = UIBezierPath(ovalIn: CGRect(x: 70.45, y: 64.08, width: 61.8, height: 24.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval22Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 23 Drawing
        let kMyMoney_iconCanvasbezier23Path = UIBezierPath()
        kMyMoney_iconCanvasbezier23Path.move(to: CGPoint(x: 70.11, y: 73.28))
        kMyMoney_iconCanvasbezier23Path.addLine(to: CGPoint(x: 70.11, y: 76.05))
        kMyMoney_iconCanvasbezier23Path.addCurve(to: CGPoint(x: 101.35, y: 87.96), controlPoint1: CGPoint(x: 70.11, y: 82.62), controlPoint2: CGPoint(x: 84.09, y: 87.96))
        kMyMoney_iconCanvasbezier23Path.addCurve(to: CGPoint(x: 132.61, y: 76.05), controlPoint1: CGPoint(x: 118.61, y: 87.96), controlPoint2: CGPoint(x: 132.61, y: 82.62))
        kMyMoney_iconCanvasbezier23Path.addLine(to: CGPoint(x: 132.61, y: 73.28))
        kMyMoney_iconCanvasbezier23Path.addLine(to: CGPoint(x: 70.11, y: 73.28))
        kMyMoney_iconCanvasbezier23Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier23Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 70.11, y: 80.62),
            end: CGPoint(x: 101.45, y: 80.62),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 23 Drawing
        let kMyMoney_iconCanvasoval23Path = UIBezierPath(ovalIn: CGRect(x: 70.15, y: 61.43, width: 62.4, height: 24.2))
        context.saveGState()
        kMyMoney_iconCanvasoval23Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 112.15, y: 53.97),
            end: CGPoint(x: 112.15, y: 127.4),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 15
        //// kMyMoney_iconCanvas-bezier 24 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier24Path = UIBezierPath()
        kMyMoney_iconCanvasbezier24Path.move(to: CGPoint(x: 70.98, y: 64.53))
        kMyMoney_iconCanvasbezier24Path.addLine(to: CGPoint(x: 70.98, y: 67.1))
        kMyMoney_iconCanvasbezier24Path.addCurve(to: CGPoint(x: 102.22, y: 78.19), controlPoint1: CGPoint(x: 70.98, y: 73.23), controlPoint2: CGPoint(x: 84.96, y: 78.19))
        kMyMoney_iconCanvasbezier24Path.addCurve(to: CGPoint(x: 133.47, y: 67.1), controlPoint1: CGPoint(x: 119.48, y: 78.19), controlPoint2: CGPoint(x: 133.47, y: 73.23))
        kMyMoney_iconCanvasbezier24Path.addLine(to: CGPoint(x: 133.47, y: 64.53))
        kMyMoney_iconCanvasbezier24Path.addLine(to: CGPoint(x: 70.98, y: 64.53))
        kMyMoney_iconCanvasbezier24Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier24Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 70.98, y: 71.36),
            end: CGPoint(x: 102.32, y: 71.36),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 24 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval24Path = UIBezierPath(ovalIn: CGRect(x: 71.45, y: 54.08, width: 61.8, height: 22.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval24Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 25 Drawing
        let kMyMoney_iconCanvasbezier25Path = UIBezierPath()
        kMyMoney_iconCanvasbezier25Path.move(to: CGPoint(x: 71.11, y: 62.46))
        kMyMoney_iconCanvasbezier25Path.addLine(to: CGPoint(x: 71.11, y: 65.03))
        kMyMoney_iconCanvasbezier25Path.addCurve(to: CGPoint(x: 102.35, y: 76.12), controlPoint1: CGPoint(x: 71.11, y: 71.15), controlPoint2: CGPoint(x: 85.09, y: 76.12))
        kMyMoney_iconCanvasbezier25Path.addCurve(to: CGPoint(x: 133.61, y: 65.03), controlPoint1: CGPoint(x: 119.61, y: 76.12), controlPoint2: CGPoint(x: 133.61, y: 71.15))
        kMyMoney_iconCanvasbezier25Path.addLine(to: CGPoint(x: 133.61, y: 62.46))
        kMyMoney_iconCanvasbezier25Path.addLine(to: CGPoint(x: 71.11, y: 62.46))
        kMyMoney_iconCanvasbezier25Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier25Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 71.11, y: 69.28),
            end: CGPoint(x: 102.45, y: 69.28),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 25 Drawing
        let kMyMoney_iconCanvasoval25Path = UIBezierPath(ovalIn: CGRect(x: 71.15, y: 51.43, width: 62.4, height: 22.2))
        context.saveGState()
        kMyMoney_iconCanvasoval25Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 113.15, y: 44.59),
            end: CGPoint(x: 113.15, y: 111.95),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group
        //// kMyMoney_iconCanvas-bezier Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezierPath = UIBezierPath()
        kMyMoney_iconCanvasbezierPath.move(to: CGPoint(x: 11.98, y: 126.96))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: 11.98, y: 130.2))
        kMyMoney_iconCanvasbezierPath.addCurve(to: CGPoint(x: 48.71, y: 144.19), controlPoint1: CGPoint(x: 11.98, y: 137.93), controlPoint2: CGPoint(x: 28.42, y: 144.19))
        kMyMoney_iconCanvasbezierPath.addCurve(to: CGPoint(x: 85.45, y: 130.2), controlPoint1: CGPoint(x: 69, y: 144.19), controlPoint2: CGPoint(x: 85.45, y: 137.93))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: 85.45, y: 126.96))
        kMyMoney_iconCanvasbezierPath.addLine(to: CGPoint(x: 11.98, y: 126.96))
        kMyMoney_iconCanvasbezierPath.close()
        context.saveGState()
        kMyMoney_iconCanvasbezierPath.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 11.98, y: 135.58),
            end: CGPoint(x: 48.82, y: 135.58),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasovalPath = UIBezierPath(ovalIn: CGRect(x: 12.45, y: 114.08, width: 72.8, height: 28.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasovalPath.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 2 Drawing
        let kMyMoney_iconCanvasbezier2Path = UIBezierPath()
        kMyMoney_iconCanvasbezier2Path.move(to: CGPoint(x: 12.13, y: 124.34))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: 12.13, y: 127.58))
        kMyMoney_iconCanvasbezier2Path.addCurve(to: CGPoint(x: 48.86, y: 141.57), controlPoint1: CGPoint(x: 12.13, y: 135.31), controlPoint2: CGPoint(x: 28.57, y: 141.57))
        kMyMoney_iconCanvasbezier2Path.addCurve(to: CGPoint(x: 85.61, y: 127.58), controlPoint1: CGPoint(x: 69.15, y: 141.57), controlPoint2: CGPoint(x: 85.61, y: 135.31))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: 85.61, y: 124.34))
        kMyMoney_iconCanvasbezier2Path.addLine(to: CGPoint(x: 12.13, y: 124.34))
        kMyMoney_iconCanvasbezier2Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier2Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 12.13, y: 132.95),
            end: CGPoint(x: 48.98, y: 132.95),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 2 Drawing
        let kMyMoney_iconCanvasoval2Path = UIBezierPath(ovalIn: CGRect(x: 12.15, y: 110.43, width: 73.4, height: 28.2))
        context.saveGState()
        kMyMoney_iconCanvasoval2Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 61.56, y: 101.74),
            end: CGPoint(x: 61.56, y: 187.31),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 2
        //// kMyMoney_iconCanvas-bezier 3 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier3Path = UIBezierPath()
        kMyMoney_iconCanvasbezier3Path.move(to: CGPoint(x: 4.98, y: 114.51))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: 4.98, y: 117.27))
        kMyMoney_iconCanvasbezier3Path.addCurve(to: CGPoint(x: 41.71, y: 129.19), controlPoint1: CGPoint(x: 4.98, y: 123.85), controlPoint2: CGPoint(x: 21.42, y: 129.19))
        kMyMoney_iconCanvasbezier3Path.addCurve(to: CGPoint(x: 78.45, y: 117.27), controlPoint1: CGPoint(x: 62, y: 129.19), controlPoint2: CGPoint(x: 78.45, y: 123.85))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: 78.45, y: 114.51))
        kMyMoney_iconCanvasbezier3Path.addLine(to: CGPoint(x: 4.98, y: 114.51))
        kMyMoney_iconCanvasbezier3Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier3Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 4.98, y: 121.86),
            end: CGPoint(x: 41.82, y: 121.86),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 3 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval3Path = UIBezierPath(ovalIn: CGRect(x: 5.45, y: 103.08, width: 72.8, height: 24.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval3Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 4 Drawing
        let kMyMoney_iconCanvasbezier4Path = UIBezierPath()
        kMyMoney_iconCanvasbezier4Path.move(to: CGPoint(x: 5.13, y: 112.28))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: 5.13, y: 115.04))
        kMyMoney_iconCanvasbezier4Path.addCurve(to: CGPoint(x: 41.86, y: 126.96), controlPoint1: CGPoint(x: 5.13, y: 121.62), controlPoint2: CGPoint(x: 21.57, y: 126.96))
        kMyMoney_iconCanvasbezier4Path.addCurve(to: CGPoint(x: 78.61, y: 115.04), controlPoint1: CGPoint(x: 62.15, y: 126.96), controlPoint2: CGPoint(x: 78.61, y: 121.62))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: 78.61, y: 112.28))
        kMyMoney_iconCanvasbezier4Path.addLine(to: CGPoint(x: 5.13, y: 112.28))
        kMyMoney_iconCanvasbezier4Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier4Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 5.13, y: 119.62),
            end: CGPoint(x: 41.98, y: 119.62),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 4 Drawing
        let kMyMoney_iconCanvasoval4Path = UIBezierPath(ovalIn: CGRect(x: 5.15, y: 100.43, width: 73.4, height: 24.2))
        context.saveGState()
        kMyMoney_iconCanvasoval4Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 54.56, y: 92.97),
            end: CGPoint(x: 54.56, y: 166.4),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 3
        //// kMyMoney_iconCanvas-bezier 5 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier5Path = UIBezierPath()
        kMyMoney_iconCanvasbezier5Path.move(to: CGPoint(x: 11.98, y: 103.54))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: 11.98, y: 106.1))
        kMyMoney_iconCanvasbezier5Path.addCurve(to: CGPoint(x: 48.71, y: 117.19), controlPoint1: CGPoint(x: 11.98, y: 112.23), controlPoint2: CGPoint(x: 28.42, y: 117.19))
        kMyMoney_iconCanvasbezier5Path.addCurve(to: CGPoint(x: 85.45, y: 106.1), controlPoint1: CGPoint(x: 69, y: 117.19), controlPoint2: CGPoint(x: 85.45, y: 112.23))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: 85.45, y: 103.54))
        kMyMoney_iconCanvasbezier5Path.addLine(to: CGPoint(x: 11.98, y: 103.54))
        kMyMoney_iconCanvasbezier5Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier5Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 11.98, y: 110.37),
            end: CGPoint(x: 48.82, y: 110.37),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 5 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval5Path = UIBezierPath(ovalIn: CGRect(x: 12.45, y: 93.08, width: 72.8, height: 22.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval5Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 6 Drawing
        let kMyMoney_iconCanvasbezier6Path = UIBezierPath()
        kMyMoney_iconCanvasbezier6Path.move(to: CGPoint(x: 12.13, y: 101.46))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: 12.13, y: 104.03))
        kMyMoney_iconCanvasbezier6Path.addCurve(to: CGPoint(x: 48.86, y: 115.11), controlPoint1: CGPoint(x: 12.13, y: 110.15), controlPoint2: CGPoint(x: 28.57, y: 115.11))
        kMyMoney_iconCanvasbezier6Path.addCurve(to: CGPoint(x: 85.61, y: 104.03), controlPoint1: CGPoint(x: 69.15, y: 115.11), controlPoint2: CGPoint(x: 85.61, y: 110.15))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: 85.61, y: 101.46))
        kMyMoney_iconCanvasbezier6Path.addLine(to: CGPoint(x: 12.13, y: 101.46))
        kMyMoney_iconCanvasbezier6Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier6Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 12.13, y: 108.28),
            end: CGPoint(x: 48.98, y: 108.28),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 6 Drawing
        let kMyMoney_iconCanvasoval6Path = UIBezierPath(ovalIn: CGRect(x: 12.15, y: 90.43, width: 73.4, height: 22.2))
        context.saveGState()
        kMyMoney_iconCanvasoval6Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 61.56, y: 83.59),
            end: CGPoint(x: 61.56, y: 150.95),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 4
        //// kMyMoney_iconCanvas-bezier 7 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier7Path = UIBezierPath()
        kMyMoney_iconCanvasbezier7Path.move(to: CGPoint(x: 11.98, y: 86.49))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: 11.98, y: 89.45))
        kMyMoney_iconCanvasbezier7Path.addCurve(to: CGPoint(x: 48.71, y: 102.19), controlPoint1: CGPoint(x: 11.98, y: 96.48), controlPoint2: CGPoint(x: 28.42, y: 102.19))
        kMyMoney_iconCanvasbezier7Path.addCurve(to: CGPoint(x: 85.45, y: 89.45), controlPoint1: CGPoint(x: 69, y: 102.19), controlPoint2: CGPoint(x: 85.45, y: 96.48))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: 85.45, y: 86.49))
        kMyMoney_iconCanvasbezier7Path.addLine(to: CGPoint(x: 11.98, y: 86.49))
        kMyMoney_iconCanvasbezier7Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier7Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 11.98, y: 94.35),
            end: CGPoint(x: 48.82, y: 94.35),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 7 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval7Path = UIBezierPath(ovalIn: CGRect(x: 12.45, y: 74.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval7Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 8 Drawing
        let kMyMoney_iconCanvasbezier8Path = UIBezierPath()
        kMyMoney_iconCanvasbezier8Path.move(to: CGPoint(x: 12.13, y: 84.11))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: 12.13, y: 87.06))
        kMyMoney_iconCanvasbezier8Path.addCurve(to: CGPoint(x: 48.86, y: 99.8), controlPoint1: CGPoint(x: 12.13, y: 94.1), controlPoint2: CGPoint(x: 28.57, y: 99.8))
        kMyMoney_iconCanvasbezier8Path.addCurve(to: CGPoint(x: 85.61, y: 87.06), controlPoint1: CGPoint(x: 69.15, y: 99.8), controlPoint2: CGPoint(x: 85.61, y: 94.1))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: 85.61, y: 84.11))
        kMyMoney_iconCanvasbezier8Path.addLine(to: CGPoint(x: 12.13, y: 84.11))
        kMyMoney_iconCanvasbezier8Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier8Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 12.13, y: 91.95),
            end: CGPoint(x: 48.98, y: 91.95),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 8 Drawing
        let kMyMoney_iconCanvasoval8Path = UIBezierPath(ovalIn: CGRect(x: 12.15, y: 71.43, width: 73.4, height: 25.2))
        context.saveGState()
        kMyMoney_iconCanvasoval8Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 61.56, y: 63.67),
            end: CGPoint(x: 61.56, y: 140.13),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 5
        //// kMyMoney_iconCanvas-bezier 9 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier9Path = UIBezierPath()
        kMyMoney_iconCanvasbezier9Path.move(to: CGPoint(x: 11.98, y: 75.51))
        kMyMoney_iconCanvasbezier9Path.addLine(to: CGPoint(x: 11.98, y: 78.27))
        kMyMoney_iconCanvasbezier9Path.addCurve(to: CGPoint(x: 48.71, y: 90.19), controlPoint1: CGPoint(x: 11.98, y: 84.85), controlPoint2: CGPoint(x: 28.42, y: 90.19))
        kMyMoney_iconCanvasbezier9Path.addCurve(to: CGPoint(x: 85.45, y: 78.27), controlPoint1: CGPoint(x: 69, y: 90.19), controlPoint2: CGPoint(x: 85.45, y: 84.85))
        kMyMoney_iconCanvasbezier9Path.addLine(to: CGPoint(x: 85.45, y: 75.51))
        kMyMoney_iconCanvasbezier9Path.addLine(to: CGPoint(x: 11.98, y: 75.51))
        kMyMoney_iconCanvasbezier9Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier9Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 11.98, y: 82.86),
            end: CGPoint(x: 48.82, y: 82.86),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 9 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval9Path = UIBezierPath(ovalIn: CGRect(x: 12.45, y: 64.08, width: 72.8, height: 24.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval9Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 10 Drawing
        let kMyMoney_iconCanvasbezier10Path = UIBezierPath()
        kMyMoney_iconCanvasbezier10Path.move(to: CGPoint(x: 12.13, y: 73.28))
        kMyMoney_iconCanvasbezier10Path.addLine(to: CGPoint(x: 12.13, y: 76.04))
        kMyMoney_iconCanvasbezier10Path.addCurve(to: CGPoint(x: 48.86, y: 87.96), controlPoint1: CGPoint(x: 12.13, y: 82.62), controlPoint2: CGPoint(x: 28.57, y: 87.96))
        kMyMoney_iconCanvasbezier10Path.addCurve(to: CGPoint(x: 85.61, y: 76.04), controlPoint1: CGPoint(x: 69.15, y: 87.96), controlPoint2: CGPoint(x: 85.61, y: 82.62))
        kMyMoney_iconCanvasbezier10Path.addLine(to: CGPoint(x: 85.61, y: 73.28))
        kMyMoney_iconCanvasbezier10Path.addLine(to: CGPoint(x: 12.13, y: 73.28))
        kMyMoney_iconCanvasbezier10Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier10Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 12.13, y: 80.62),
            end: CGPoint(x: 48.98, y: 80.62),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 10 Drawing
        let kMyMoney_iconCanvasoval10Path = UIBezierPath(ovalIn: CGRect(x: 12.15, y: 61.43, width: 73.4, height: 24.2))
        context.saveGState()
        kMyMoney_iconCanvasoval10Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 61.56, y: 53.97),
            end: CGPoint(x: 61.56, y: 127.4),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 7
        //// kMyMoney_iconCanvas-bezier 11 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier11Path = UIBezierPath()
        kMyMoney_iconCanvasbezier11Path.move(to: CGPoint(x: 19.98, y: 66.49))
        kMyMoney_iconCanvasbezier11Path.addLine(to: CGPoint(x: 19.98, y: 69.45))
        kMyMoney_iconCanvasbezier11Path.addCurve(to: CGPoint(x: 56.71, y: 82.19), controlPoint1: CGPoint(x: 19.98, y: 76.48), controlPoint2: CGPoint(x: 36.42, y: 82.19))
        kMyMoney_iconCanvasbezier11Path.addCurve(to: CGPoint(x: 93.45, y: 69.45), controlPoint1: CGPoint(x: 77, y: 82.19), controlPoint2: CGPoint(x: 93.45, y: 76.48))
        kMyMoney_iconCanvasbezier11Path.addLine(to: CGPoint(x: 93.45, y: 66.49))
        kMyMoney_iconCanvasbezier11Path.addLine(to: CGPoint(x: 19.98, y: 66.49))
        kMyMoney_iconCanvasbezier11Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier11Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 19.98, y: 74.35),
            end: CGPoint(x: 56.82, y: 74.35),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 11 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval11Path = UIBezierPath(ovalIn: CGRect(x: 20.45, y: 54.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval11Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 12 Drawing
        let kMyMoney_iconCanvasbezier12Path = UIBezierPath()
        kMyMoney_iconCanvasbezier12Path.move(to: CGPoint(x: 20.13, y: 64.11))
        kMyMoney_iconCanvasbezier12Path.addLine(to: CGPoint(x: 20.13, y: 67.06))
        kMyMoney_iconCanvasbezier12Path.addCurve(to: CGPoint(x: 56.86, y: 79.8), controlPoint1: CGPoint(x: 20.13, y: 74.1), controlPoint2: CGPoint(x: 36.57, y: 79.8))
        kMyMoney_iconCanvasbezier12Path.addCurve(to: CGPoint(x: 93.61, y: 67.06), controlPoint1: CGPoint(x: 77.15, y: 79.8), controlPoint2: CGPoint(x: 93.61, y: 74.1))
        kMyMoney_iconCanvasbezier12Path.addLine(to: CGPoint(x: 93.61, y: 64.11))
        kMyMoney_iconCanvasbezier12Path.addLine(to: CGPoint(x: 20.13, y: 64.11))
        kMyMoney_iconCanvasbezier12Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier12Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 20.13, y: 71.95),
            end: CGPoint(x: 56.98, y: 71.95),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 12 Drawing
        let kMyMoney_iconCanvasoval12Path = UIBezierPath(ovalIn: CGRect(x: 20.15, y: 51.43, width: 73.4, height: 25.2))
        context.saveGState()
        kMyMoney_iconCanvasoval12Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 69.56, y: 43.67),
            end: CGPoint(x: 69.56, y: 120.13),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 8
        //// kMyMoney_iconCanvas-bezier 13 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier13Path = UIBezierPath()
        kMyMoney_iconCanvasbezier13Path.move(to: CGPoint(x: 11.98, y: 54.98))
        kMyMoney_iconCanvasbezier13Path.addLine(to: CGPoint(x: 11.98, y: 58.03))
        kMyMoney_iconCanvasbezier13Path.addCurve(to: CGPoint(x: 48.71, y: 71.19), controlPoint1: CGPoint(x: 11.98, y: 65.3), controlPoint2: CGPoint(x: 28.42, y: 71.19))
        kMyMoney_iconCanvasbezier13Path.addCurve(to: CGPoint(x: 85.45, y: 58.03), controlPoint1: CGPoint(x: 69, y: 71.19), controlPoint2: CGPoint(x: 85.45, y: 65.3))
        kMyMoney_iconCanvasbezier13Path.addLine(to: CGPoint(x: 85.45, y: 54.98))
        kMyMoney_iconCanvasbezier13Path.addLine(to: CGPoint(x: 11.98, y: 54.98))
        kMyMoney_iconCanvasbezier13Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier13Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 11.98, y: 63.09),
            end: CGPoint(x: 48.82, y: 63.09),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 13 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval13Path = UIBezierPath(ovalIn: CGRect(x: 12.45, y: 43.08, width: 72.8, height: 26.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval13Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 14 Drawing
        let kMyMoney_iconCanvasbezier14Path = UIBezierPath()
        kMyMoney_iconCanvasbezier14Path.move(to: CGPoint(x: 12.13, y: 52.52))
        kMyMoney_iconCanvasbezier14Path.addLine(to: CGPoint(x: 12.13, y: 55.57))
        kMyMoney_iconCanvasbezier14Path.addCurve(to: CGPoint(x: 48.86, y: 68.73), controlPoint1: CGPoint(x: 12.13, y: 62.83), controlPoint2: CGPoint(x: 28.57, y: 68.73))
        kMyMoney_iconCanvasbezier14Path.addCurve(to: CGPoint(x: 85.61, y: 55.57), controlPoint1: CGPoint(x: 69.15, y: 68.73), controlPoint2: CGPoint(x: 85.61, y: 62.83))
        kMyMoney_iconCanvasbezier14Path.addLine(to: CGPoint(x: 85.61, y: 52.52))
        kMyMoney_iconCanvasbezier14Path.addLine(to: CGPoint(x: 12.13, y: 52.52))
        kMyMoney_iconCanvasbezier14Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier14Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 12.13, y: 60.62),
            end: CGPoint(x: 48.98, y: 60.62),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 14 Drawing
        let kMyMoney_iconCanvasoval14Path = UIBezierPath(ovalIn: CGRect(x: 12.15, y: 39.43, width: 73.4, height: 26.2))
        context.saveGState()
        kMyMoney_iconCanvasoval14Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 61.56, y: 31.36),
            end: CGPoint(x: 61.56, y: 110.86),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// kMyMoney_iconCanvas-group 9
        //// kMyMoney_iconCanvas-bezier 15 Drawing
        context.saveGState()
        context.setAlpha(0.52)

        let kMyMoney_iconCanvasbezier15Path = UIBezierPath()
        kMyMoney_iconCanvasbezier15Path.move(to: CGPoint(x: 4.98, y: 45.49))
        kMyMoney_iconCanvasbezier15Path.addLine(to: CGPoint(x: 4.98, y: 48.45))
        kMyMoney_iconCanvasbezier15Path.addCurve(to: CGPoint(x: 41.71, y: 61.19), controlPoint1: CGPoint(x: 4.98, y: 55.48), controlPoint2: CGPoint(x: 21.42, y: 61.19))
        kMyMoney_iconCanvasbezier15Path.addCurve(to: CGPoint(x: 78.45, y: 48.45), controlPoint1: CGPoint(x: 62, y: 61.19), controlPoint2: CGPoint(x: 78.45, y: 55.48))
        kMyMoney_iconCanvasbezier15Path.addLine(to: CGPoint(x: 78.45, y: 45.49))
        kMyMoney_iconCanvasbezier15Path.addLine(to: CGPoint(x: 4.98, y: 45.49))
        kMyMoney_iconCanvasbezier15Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier15Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 4.98, y: 53.35),
            end: CGPoint(x: 41.82, y: 53.35),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 15 Drawing
        context.saveGState()
        context.setAlpha(0.74)

        let kMyMoney_iconCanvasoval15Path = UIBezierPath(ovalIn: CGRect(x: 5.45, y: 34.08, width: 72.8, height: 25.2))
        fillColor4.setFill()
        kMyMoney_iconCanvasoval15Path.fill()

        context.restoreGState()


        //// kMyMoney_iconCanvas-bezier 16 Drawing
        let kMyMoney_iconCanvasbezier16Path = UIBezierPath()
        kMyMoney_iconCanvasbezier16Path.move(to: CGPoint(x: 5.13, y: 43.11))
        kMyMoney_iconCanvasbezier16Path.addLine(to: CGPoint(x: 5.13, y: 46.06))
        kMyMoney_iconCanvasbezier16Path.addCurve(to: CGPoint(x: 41.86, y: 58.8), controlPoint1: CGPoint(x: 5.13, y: 53.1), controlPoint2: CGPoint(x: 21.57, y: 58.8))
        kMyMoney_iconCanvasbezier16Path.addCurve(to: CGPoint(x: 78.61, y: 46.06), controlPoint1: CGPoint(x: 62.15, y: 58.8), controlPoint2: CGPoint(x: 78.61, y: 53.1))
        kMyMoney_iconCanvasbezier16Path.addLine(to: CGPoint(x: 78.61, y: 43.11))
        kMyMoney_iconCanvasbezier16Path.addLine(to: CGPoint(x: 5.13, y: 43.11))
        kMyMoney_iconCanvasbezier16Path.close()
        context.saveGState()
        kMyMoney_iconCanvasbezier16Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 5.13, y: 50.95),
            end: CGPoint(x: 41.98, y: 50.95),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// kMyMoney_iconCanvas-oval 16 Drawing
        let kMyMoney_iconCanvasoval16Path = UIBezierPath(ovalIn: CGRect(x: 5.15, y: 30.43, width: 73.4, height: 25.2))
        context.saveGState()
        kMyMoney_iconCanvasoval16Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
            start: CGPoint(x: 54.56, y: 22.67),
            end: CGPoint(x: 54.56, y: 99.13),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// Text 2 Drawing
        context.saveGState()
        context.translateBy(x: 43, y: 42.75)
        context.scaleBy(x: 1.2, y: 0.5)

        let text2Rect = CGRect(x: -27.5, y: -16.5, width: 55, height: 33)
        let text2TextContent = "256 000"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize, weight: .bold),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text2Style,
        ] as [NSAttributedString.Key: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        let text2TextRect: CGRect = CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight)
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: text2TextRect, withAttributes: text2FontAttributes)
        context.restoreGState()
        
        ////// Text 2 Text Inner Shadow
        context.saveGState()
        context.clip(to: text2Rect)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow6.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let text2OpaqueTextShadow = (shadow6.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow6.shadowOffset.width * resizedShadowScale, height: shadow6.shadowOffset.height * resizedShadowScale), blur: shadow6.shadowBlurRadius * resizedShadowScale, color: text2OpaqueTextShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        text2OpaqueTextShadow.setFill()

        let text2InnerShadowFontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize, weight: .bold),
            .foregroundColor: (shadow6.shadowColor as! UIColor),
            .paragraphStyle: text2Style,
        ] as [NSAttributedString.Key: Any]
        text2TextContent.draw(in: text2TextRect, withAttributes: text2InnerShadowFontAttributes)

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCallHint(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)


        //// Color Declarations
        let strokeColor2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let paint0_linear6Color = UIColor(red: 0.126, green: 0.017, blue: 0.950, alpha: 1.000)
        let paint0_linear6Color2 = UIColor(red: 0.049, green: 0.028, blue: 0.422, alpha: 1.000)

        //// Gradient Declarations
        let paint0_linear6 = CGGradient(colorsSpace: nil, colors: [paint0_linear6Color.cgColor, paint0_linear6Color.blended(withFraction: 0.5, of: paint0_linear6Color2).cgColor, paint0_linear6Color2.cgColor] as CFArray, locations: [0, 0.51, 1])!

        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 4, y: 529.93))
        bezierPath.addLine(to: CGPoint(x: 0, y: 535.76))
        bezierPath.addLine(to: CGPoint(x: 0.5, y: 666.5))
        bezierPath.addLine(to: CGPoint(x: 62.5, y: 666.5))
        bezierPath.addLine(to: CGPoint(x: 71, y: 653.8))
        bezierPath.addLine(to: CGPoint(x: 61, y: 636.86))
        bezierPath.addLine(to: CGPoint(x: 55, y: 638.97))
        bezierPath.addLine(to: CGPoint(x: 53.5, y: 635.8))
        bezierPath.addLine(to: CGPoint(x: 57.5, y: 632.09))
        bezierPath.addLine(to: CGPoint(x: 52, y: 622.57))
        bezierPath.addLine(to: CGPoint(x: 58, y: 614.1))
        bezierPath.addLine(to: CGPoint(x: 47.5, y: 598.75))
        bezierPath.addLine(to: CGPoint(x: 15, y: 598.75))
        bezierPath.addLine(to: CGPoint(x: 18, y: 591.86))
        bezierPath.addLine(to: CGPoint(x: 27.5, y: 591.86))
        bezierPath.addLine(to: CGPoint(x: 33, y: 582.87))
        bezierPath.addLine(to: CGPoint(x: 27.5, y: 574.4))
        bezierPath.addLine(to: CGPoint(x: 32, y: 565.93))
        bezierPath.addLine(to: CGPoint(x: 27.5, y: 557.99))
        bezierPath.addLine(to: CGPoint(x: 32, y: 549.52))
        bezierPath.addLine(to: CGPoint(x: 27.5, y: 540.52))
        bezierPath.addLine(to: CGPoint(x: 33, y: 533.11))
        bezierPath.addLine(to: CGPoint(x: 41, y: 533.11))
        bezierPath.addLine(to: CGPoint(x: 47, y: 523.58))
        bezierPath.addLine(to: CGPoint(x: 41.5, y: 514.58))
        bezierPath.addLine(to: CGPoint(x: 32, y: 514.58))
        bezierPath.addLine(to: CGPoint(x: 26.5, y: 523.05))
        bezierPath.addLine(to: CGPoint(x: 17.5, y: 521.99))
        bezierPath.addLine(to: CGPoint(x: 12, y: 530.46))
        bezierPath.addLine(to: CGPoint(x: 4, y: 529.93))
        bezierPath.close()
        fillColor2.setFill()
        bezierPath.fill()
        strokeColor2.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.miterLimit = 4
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 314, y: 661.73))
        bezier2Path.addLine(to: CGPoint(x: 65.5, y: 661.73))
        bezier2Path.addLine(to: CGPoint(x: 63, y: 666.47))
        bezier2Path.addLine(to: CGPoint(x: 318.5, y: 667))
        bezier2Path.addLine(to: CGPoint(x: 314, y: 661.73))
        bezier2Path.close()
        fillColor2.setFill()
        bezier2Path.fill()
        strokeColor2.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.miterLimit = 4
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 305, y: 648.54))
        bezier3Path.addCurve(to: CGPoint(x: 312.5, y: 660.67), controlPoint1: CGPoint(x: 307.33, y: 652.23), controlPoint2: CGPoint(x: 312.1, y: 659.83))
        bezier3Path.addLine(to: CGPoint(x: 319, y: 666.47))
        bezier3Path.addLine(to: CGPoint(x: 374, y: 666.47))
        bezier3Path.addLine(to: CGPoint(x: 374, y: 606.35))
        bezier3Path.addLine(to: CGPoint(x: 366.5, y: 606.35))
        bezier3Path.addLine(to: CGPoint(x: 362, y: 599.49))
        bezier3Path.addLine(to: CGPoint(x: 340.5, y: 599.49))
        bezier3Path.addLine(to: CGPoint(x: 331, y: 613.21))
        bezier3Path.addLine(to: CGPoint(x: 335, y: 619.01))
        bezier3Path.addLine(to: CGPoint(x: 335, y: 625.86))
        bezier3Path.addLine(to: CGPoint(x: 330, y: 623.23))
        bezier3Path.addLine(to: CGPoint(x: 323.5, y: 634.83))
        bezier3Path.addLine(to: CGPoint(x: 312.5, y: 635.88))
        bezier3Path.addLine(to: CGPoint(x: 305, y: 648.54))
        bezier3Path.close()
        fillColor2.setFill()
        bezier3Path.fill()
        strokeColor2.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.miterLimit = 4
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 344, y: 610.04))
        bezier4Path.addLine(to: CGPoint(x: 341, y: 615.84))
        bezier4Path.addLine(to: CGPoint(x: 345, y: 623.23))
        bezier4Path.addLine(to: CGPoint(x: 353, y: 623.23))
        bezier4Path.addLine(to: CGPoint(x: 357, y: 615.84))
        bezier4Path.addLine(to: CGPoint(x: 353.5, y: 610.04))
        bezier4Path.move(to: CGPoint(x: 355.5, y: 610.04))
        bezier4Path.addLine(to: CGPoint(x: 358.5, y: 615.32))
        bezier4Path.addLine(to: CGPoint(x: 367.5, y: 615.32))
        bezier4Path.addLine(to: CGPoint(x: 372.5, y: 624.28))
        bezier4Path.addLine(to: CGPoint(x: 368, y: 632.19))
        bezier4Path.addLine(to: CGPoint(x: 372.5, y: 640.63))
        bezier4Path.addLine(to: CGPoint(x: 368, y: 648.54))
        bezier4Path.move(to: CGPoint(x: 331.5, y: 649.6))
        bezier4Path.addLine(to: CGPoint(x: 339.5, y: 649.6))
        bezier4Path.addLine(to: CGPoint(x: 343.5, y: 656.98))
        bezier4Path.addLine(to: CGPoint(x: 339.5, y: 664.36))
        bezier4Path.addLine(to: CGPoint(x: 331.5, y: 664.36))
        bezier4Path.addLine(to: CGPoint(x: 327.5, y: 656.98))
        bezier4Path.addLine(to: CGPoint(x: 331.5, y: 649.6))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 345, y: 641.16))
        bezier4Path.addLine(to: CGPoint(x: 353, y: 641.16))
        bezier4Path.addLine(to: CGPoint(x: 357, y: 648.54))
        bezier4Path.addLine(to: CGPoint(x: 353, y: 655.92))
        bezier4Path.addLine(to: CGPoint(x: 345, y: 655.92))
        bezier4Path.addLine(to: CGPoint(x: 341, y: 648.54))
        bezier4Path.addLine(to: CGPoint(x: 345, y: 641.16))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 331.5, y: 632.72))
        bezier4Path.addLine(to: CGPoint(x: 335.5, y: 632.72))
        bezier4Path.addLine(to: CGPoint(x: 339.5, y: 632.72))
        bezier4Path.addLine(to: CGPoint(x: 343.5, y: 640.1))
        bezier4Path.addLine(to: CGPoint(x: 339.5, y: 647.49))
        bezier4Path.addLine(to: CGPoint(x: 331.5, y: 647.49))
        bezier4Path.addLine(to: CGPoint(x: 327.5, y: 640.1))
        bezier4Path.addLine(to: CGPoint(x: 329.5, y: 636.41))
        bezier4Path.addLine(to: CGPoint(x: 331.5, y: 632.72))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 345, y: 624.81))
        bezier4Path.addLine(to: CGPoint(x: 353, y: 624.81))
        bezier4Path.addLine(to: CGPoint(x: 357, y: 632.19))
        bezier4Path.addLine(to: CGPoint(x: 353, y: 639.58))
        bezier4Path.addLine(to: CGPoint(x: 345, y: 639.58))
        bezier4Path.addLine(to: CGPoint(x: 341, y: 632.19))
        bezier4Path.addLine(to: CGPoint(x: 345, y: 624.81))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 358.5, y: 633.25))
        bezier4Path.addLine(to: CGPoint(x: 366.5, y: 633.25))
        bezier4Path.addLine(to: CGPoint(x: 370.5, y: 640.63))
        bezier4Path.addLine(to: CGPoint(x: 366.5, y: 648.01))
        bezier4Path.addLine(to: CGPoint(x: 358.5, y: 648.01))
        bezier4Path.addLine(to: CGPoint(x: 354.5, y: 640.63))
        bezier4Path.addLine(to: CGPoint(x: 358.5, y: 633.25))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 358.5, y: 616.9))
        bezier4Path.addLine(to: CGPoint(x: 366.5, y: 616.9))
        bezier4Path.addLine(to: CGPoint(x: 370.5, y: 624.28))
        bezier4Path.addLine(to: CGPoint(x: 366.5, y: 631.66))
        bezier4Path.addLine(to: CGPoint(x: 358.5, y: 631.66))
        bezier4Path.addLine(to: CGPoint(x: 354.5, y: 624.28))
        bezier4Path.addLine(to: CGPoint(x: 358.5, y: 616.9))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 358.5, y: 649.6))
        bezier4Path.addLine(to: CGPoint(x: 366.5, y: 649.6))
        bezier4Path.addLine(to: CGPoint(x: 370.5, y: 656.98))
        bezier4Path.addLine(to: CGPoint(x: 366.5, y: 664.36))
        bezier4Path.addLine(to: CGPoint(x: 358.5, y: 664.36))
        bezier4Path.addLine(to: CGPoint(x: 354.5, y: 656.98))
        bezier4Path.addLine(to: CGPoint(x: 358.5, y: 649.6))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 318, y: 641.16))
        bezier4Path.addLine(to: CGPoint(x: 326, y: 641.16))
        bezier4Path.addLine(to: CGPoint(x: 330, y: 648.54))
        bezier4Path.addLine(to: CGPoint(x: 326, y: 655.92))
        bezier4Path.addLine(to: CGPoint(x: 318, y: 655.92))
        bezier4Path.addLine(to: CGPoint(x: 314, y: 648.54))
        bezier4Path.addLine(to: CGPoint(x: 318, y: 641.16))
        bezier4Path.close()
        TBMStyleKit.gradientColor3.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.miterLimit = 4
        bezier4Path.stroke()


        //// Group
        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 375.5, y: 610.99))
        bezier5Path.addLine(to: CGPoint(x: 363, y: 610.99))
        bezier5Path.addLine(to: CGPoint(x: 360, y: 605.22))
        bezier5Path.addLine(to: CGPoint(x: 342, y: 605.22))
        bezier5Path.addLine(to: CGPoint(x: 337.5, y: 614.67))
        bezier5Path.addLine(to: CGPoint(x: 342, y: 622.54))
        bezier5Path.addLine(to: CGPoint(x: 340, y: 628.84))
        bezier5Path.addLine(to: CGPoint(x: 330.5, y: 627.26))
        bezier5Path.addLine(to: CGPoint(x: 325.5, y: 637.23))
        bezier5Path.addLine(to: CGPoint(x: 315, y: 638.28))
        bezier5Path.addLine(to: CGPoint(x: 310, y: 647.21))
        bezier5Path.addLine(to: CGPoint(x: 316.5, y: 658.23))
        bezier5Path.addLine(to: CGPoint(x: 324, y: 658.23))
        bezier5Path.addLine(to: CGPoint(x: 327, y: 663.48))
        bezier5Path.addLine(to: CGPoint(x: 61, y: 664))
        bezier5Path.addLine(to: CGPoint(x: 66.5, y: 654.55))
        bezier5Path.addLine(to: CGPoint(x: 57.5, y: 640.38))
        bezier5Path.addLine(to: CGPoint(x: 50, y: 640.38))
        bezier5Path.addLine(to: CGPoint(x: 48.5, y: 637.76))
        bezier5Path.addLine(to: CGPoint(x: 54.57, y: 629.89))
        bezier5Path.addLine(to: CGPoint(x: 48.5, y: 621.49))
        bezier5Path.addLine(to: CGPoint(x: 53.5, y: 613.09))
        bezier5Path.addLine(to: CGPoint(x: 44, y: 599.45))
        bezier5Path.addLine(to: CGPoint(x: 29.43, y: 599.45))
        bezier5Path.addLine(to: CGPoint(x: 25.5, y: 606.79))
        bezier5Path.addLine(to: CGPoint(x: 22.5, y: 606.79))
        bezier5Path.addLine(to: CGPoint(x: 17, y: 599.45))
        bezier5Path.addLine(to: CGPoint(x: 3, y: 599.45))
        bezier5Path.addLine(to: CGPoint(x: 0, y: 603.65))
        bezier5Path.move(to: CGPoint(x: 4.78, y: 625.69))
        bezier5Path.addLine(to: CGPoint(x: 6.5, y: 622.54))
        bezier5Path.addLine(to: CGPoint(x: 14.5, y: 622.54))
        bezier5Path.addLine(to: CGPoint(x: 18.5, y: 629.89))
        bezier5Path.addLine(to: CGPoint(x: 14.5, y: 637.23))
        bezier5Path.addLine(to: CGPoint(x: 6.5, y: 637.23))
        bezier5Path.addLine(to: CGPoint(x: 2.5, y: 629.89))
        bezier5Path.addLine(to: CGPoint(x: 4.78, y: 625.69))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: 20.07, y: 614.14))
        bezier5Path.addLine(to: CGPoint(x: 28.07, y: 614.14))
        bezier5Path.addLine(to: CGPoint(x: 32.07, y: 621.49))
        bezier5Path.addLine(to: CGPoint(x: 28.07, y: 628.84))
        bezier5Path.addLine(to: CGPoint(x: 20.07, y: 628.84))
        bezier5Path.addLine(to: CGPoint(x: 16.07, y: 621.49))
        bezier5Path.addLine(to: CGPoint(x: 20.07, y: 614.14))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: 6.5, y: 605.74))
        bezier5Path.addLine(to: CGPoint(x: 14.5, y: 605.74))
        bezier5Path.addLine(to: CGPoint(x: 18.5, y: 613.09))
        bezier5Path.addLine(to: CGPoint(x: 14.5, y: 620.44))
        bezier5Path.addLine(to: CGPoint(x: 6.5, y: 620.44))
        bezier5Path.addLine(to: CGPoint(x: 2.5, y: 613.09))
        bezier5Path.addLine(to: CGPoint(x: 6.5, y: 605.74))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: 33.43, y: 622.54))
        bezier5Path.addLine(to: CGPoint(x: 41.43, y: 622.54))
        bezier5Path.addLine(to: CGPoint(x: 45.43, y: 629.89))
        bezier5Path.addLine(to: CGPoint(x: 41.43, y: 637.23))
        bezier5Path.addLine(to: CGPoint(x: 33.43, y: 637.23))
        bezier5Path.addLine(to: CGPoint(x: 29.43, y: 629.89))
        bezier5Path.addLine(to: CGPoint(x: 33.43, y: 622.54))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: 33.43, y: 605.74))
        bezier5Path.addLine(to: CGPoint(x: 41.43, y: 605.74))
        bezier5Path.addLine(to: CGPoint(x: 45.43, y: 613.09))
        bezier5Path.addLine(to: CGPoint(x: 41.43, y: 620.44))
        bezier5Path.addLine(to: CGPoint(x: 33.43, y: 620.44))
        bezier5Path.addLine(to: CGPoint(x: 29.43, y: 613.09))
        bezier5Path.addLine(to: CGPoint(x: 33.43, y: 605.74))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: 42.57, y: 603.65))
        bezier5Path.addLine(to: CGPoint(x: 47.57, y: 613.09))
        bezier5Path.addLine(to: CGPoint(x: 43.07, y: 621.49))
        bezier5Path.addLine(to: CGPoint(x: 47.57, y: 629.89))
        bezier5Path.addLine(to: CGPoint(x: 43.07, y: 638.28))
        bezier5Path.addLine(to: CGPoint(x: 47.07, y: 645.11))
        bezier5Path.addLine(to: CGPoint(x: 55.57, y: 645.11))
        bezier5Path.addLine(to: CGPoint(x: 61, y: 654.55))
        bezier5Path.addLine(to: CGPoint(x: 56, y: 663.48))
        bezier5Path.addLine(to: CGPoint(x: 1, y: 664))
        bezier5Path.addLine(to: CGPoint(x: 1, y: 609.94))
        bezier5Path.addLine(to: CGPoint(x: 5, y: 603.12))
        bezier5Path.addLine(to: CGPoint(x: 15, y: 603.12))
        bezier5Path.addLine(to: CGPoint(x: 20.07, y: 611.52))
        bezier5Path.addLine(to: CGPoint(x: 28.07, y: 611.52))
        bezier5Path.addLine(to: CGPoint(x: 32.07, y: 603.65))
        bezier5Path.addLine(to: CGPoint(x: 42.57, y: 603.65))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: 31.31, y: 642.69))
        bezier5Path.addLine(to: CGPoint(x: 33.43, y: 638.81))
        bezier5Path.addLine(to: CGPoint(x: 41.43, y: 638.81))
        bezier5Path.addLine(to: CGPoint(x: 45.43, y: 646.16))
        bezier5Path.addLine(to: CGPoint(x: 41.43, y: 653.5))
        bezier5Path.addLine(to: CGPoint(x: 33.43, y: 653.5))
        bezier5Path.addLine(to: CGPoint(x: 29.43, y: 646.16))
        bezier5Path.addLine(to: CGPoint(x: 31.31, y: 642.69))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: 20.07, y: 630.41))
        bezier5Path.addLine(to: CGPoint(x: 28.07, y: 630.41))
        bezier5Path.addLine(to: CGPoint(x: 32.07, y: 637.76))
        bezier5Path.addLine(to: CGPoint(x: 28.07, y: 645.11))
        bezier5Path.addLine(to: CGPoint(x: 20.07, y: 645.11))
        bezier5Path.addLine(to: CGPoint(x: 16.07, y: 637.76))
        bezier5Path.addLine(to: CGPoint(x: 20.07, y: 630.41))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: 46.57, y: 647.21))
        bezier5Path.addLine(to: CGPoint(x: 54.57, y: 647.21))
        bezier5Path.addLine(to: CGPoint(x: 58.57, y: 654.55))
        bezier5Path.addLine(to: CGPoint(x: 54.57, y: 661.9))
        bezier5Path.addLine(to: CGPoint(x: 46.57, y: 661.9))
        bezier5Path.addLine(to: CGPoint(x: 42.57, y: 654.55))
        bezier5Path.addLine(to: CGPoint(x: 46.57, y: 647.21))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: 2.5, y: 635.66))
        bezier5Path.addLine(to: CGPoint(x: 5, y: 639.86))
        bezier5Path.addLine(to: CGPoint(x: 14.5, y: 639.86))
        bezier5Path.addLine(to: CGPoint(x: 19, y: 647.73))
        bezier5Path.addLine(to: CGPoint(x: 28.07, y: 647.73))
        bezier5Path.addLine(to: CGPoint(x: 32.07, y: 656.13))
        bezier5Path.addLine(to: CGPoint(x: 40.5, y: 656.13))
        bezier5Path.addLine(to: CGPoint(x: 44, y: 661.9))
        bezier5Path.addLine(to: CGPoint(x: 3, y: 662.43))
        bezier5Path.addLine(to: CGPoint(x: 2.5, y: 635.66))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: 3, y: 586.34))
        bezier5Path.addLine(to: CGPoint(x: 5, y: 582.65))
        bezier5Path.addLine(to: CGPoint(x: 13, y: 582.65))
        bezier5Path.addLine(to: CGPoint(x: 17, y: 590))
        bezier5Path.addLine(to: CGPoint(x: 13, y: 597.35))
        bezier5Path.addLine(to: CGPoint(x: 5, y: 597.35))
        bezier5Path.addLine(to: CGPoint(x: 1, y: 590))
        bezier5Path.addLine(to: CGPoint(x: 3, y: 586.34))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: 2.94, y: 570.16))
        bezier5Path.addLine(to: CGPoint(x: 5, y: 566.38))
        bezier5Path.addLine(to: CGPoint(x: 13, y: 566.38))
        bezier5Path.addLine(to: CGPoint(x: 17, y: 573.73))
        bezier5Path.addLine(to: CGPoint(x: 13, y: 581.08))
        bezier5Path.addLine(to: CGPoint(x: 5, y: 581.08))
        bezier5Path.addLine(to: CGPoint(x: 1, y: 573.73))
        bezier5Path.addLine(to: CGPoint(x: 2.94, y: 570.16))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: 19, y: 574.78))
        bezier5Path.addLine(to: CGPoint(x: 27, y: 574.78))
        bezier5Path.addLine(to: CGPoint(x: 31, y: 582.13))
        bezier5Path.addLine(to: CGPoint(x: 27, y: 589.48))
        bezier5Path.addLine(to: CGPoint(x: 19, y: 589.48))
        bezier5Path.addLine(to: CGPoint(x: 15, y: 582.13))
        bezier5Path.addLine(to: CGPoint(x: 19, y: 574.78))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: 18.5, y: 557.99))
        bezier5Path.addLine(to: CGPoint(x: 26.5, y: 557.99))
        bezier5Path.addLine(to: CGPoint(x: 30.5, y: 565.33))
        bezier5Path.addLine(to: CGPoint(x: 26.5, y: 572.68))
        bezier5Path.addLine(to: CGPoint(x: 18.5, y: 572.68))
        bezier5Path.addLine(to: CGPoint(x: 14.5, y: 565.33))
        bezier5Path.addLine(to: CGPoint(x: 18.5, y: 557.99))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: 18.5, y: 541.72))
        bezier5Path.addLine(to: CGPoint(x: 26.5, y: 541.72))
        bezier5Path.addLine(to: CGPoint(x: 30.5, y: 549.06))
        bezier5Path.addLine(to: CGPoint(x: 26.5, y: 556.41))
        bezier5Path.addLine(to: CGPoint(x: 18.5, y: 556.41))
        bezier5Path.addLine(to: CGPoint(x: 14.5, y: 549.06))
        bezier5Path.addLine(to: CGPoint(x: 18.5, y: 541.72))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: 5, y: 533.32))
        bezier5Path.addLine(to: CGPoint(x: 13, y: 533.32))
        bezier5Path.addLine(to: CGPoint(x: 17, y: 540.67))
        bezier5Path.addLine(to: CGPoint(x: 13, y: 548.01))
        bezier5Path.addLine(to: CGPoint(x: 8.74, y: 548.01))
        bezier5Path.addLine(to: CGPoint(x: 5, y: 548.01))
        bezier5Path.addLine(to: CGPoint(x: 1, y: 540.67))
        bezier5Path.addLine(to: CGPoint(x: 5, y: 533.32))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: 19, y: 524.4))
        bezier5Path.addLine(to: CGPoint(x: 27, y: 524.4))
        bezier5Path.addLine(to: CGPoint(x: 31, y: 531.74))
        bezier5Path.addLine(to: CGPoint(x: 27, y: 539.09))
        bezier5Path.addLine(to: CGPoint(x: 19, y: 539.09))
        bezier5Path.addLine(to: CGPoint(x: 15, y: 531.74))
        bezier5Path.addLine(to: CGPoint(x: 19, y: 524.4))
        bezier5Path.close()
        bezier5Path.move(to: CGPoint(x: 32.5, y: 516))
        bezier5Path.addLine(to: CGPoint(x: 40.5, y: 516))
        bezier5Path.addLine(to: CGPoint(x: 44.5, y: 523.35))
        bezier5Path.addLine(to: CGPoint(x: 40.5, y: 530.7))
        bezier5Path.addLine(to: CGPoint(x: 32.5, y: 530.7))
        bezier5Path.addLine(to: CGPoint(x: 28.5, y: 523.35))
        bezier5Path.addLine(to: CGPoint(x: 32.5, y: 516))
        bezier5Path.close()
        TBMStyleKit.gradientColor3.setStroke()
        bezier5Path.lineWidth = 1
        bezier5Path.miterLimit = 4
        bezier5Path.stroke()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 8.82, y: 547.5))
        bezier7Path.addLine(to: CGPoint(x: 8.82, y: 550.5))
        TBMStyleKit.gradientColor3.setStroke()
        bezier7Path.lineWidth = 1
        bezier7Path.stroke()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 13.46, y: 559.5))
        bezier8Path.addLine(to: CGPoint(x: 16.25, y: 561.5))
        TBMStyleKit.gradientColor3.setStroke()
        bezier8Path.lineWidth = 1
        bezier8Path.stroke()




        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 0, y: 533.57))
        bezier6Path.addLine(to: CGPoint(x: 3.5, y: 528.29))
        bezier6Path.addLine(to: CGPoint(x: 11.5, y: 528.82))
        bezier6Path.addLine(to: CGPoint(x: 17, y: 520.38))
        bezier6Path.addLine(to: CGPoint(x: 26, y: 521.44))
        bezier6Path.addLine(to: CGPoint(x: 31, y: 513))
        bezier6Path.addLine(to: CGPoint(x: 42.5, y: 513))
        bezier6Path.addLine(to: CGPoint(x: 49, y: 523.55))
        bezier6Path.addLine(to: CGPoint(x: 41.5, y: 534.62))
        bezier6Path.addLine(to: CGPoint(x: 33, y: 534.62))
        bezier6Path.addLine(to: CGPoint(x: 29, y: 540.95))
        bezier6Path.addLine(to: CGPoint(x: 33.5, y: 549.39))
        bezier6Path.addLine(to: CGPoint(x: 29, y: 557.83))
        bezier6Path.addLine(to: CGPoint(x: 33.5, y: 565.74))
        bezier6Path.addLine(to: CGPoint(x: 29, y: 574.18))
        bezier6Path.addLine(to: CGPoint(x: 34, y: 582.62))
        bezier6Path.addLine(to: CGPoint(x: 28, y: 592.64))
        bezier6Path.addLine(to: CGPoint(x: 19, y: 592.64))
        bezier6Path.addLine(to: CGPoint(x: 17, y: 596.86))
        bezier6Path.addLine(to: CGPoint(x: 48, y: 596.86))
        bezier6Path.addLine(to: CGPoint(x: 60, y: 613.73))
        bezier6Path.addLine(to: CGPoint(x: 53.5, y: 622.17))
        bezier6Path.addLine(to: CGPoint(x: 59.5, y: 631.66))
        bezier6Path.addLine(to: CGPoint(x: 55, y: 635.88))
        bezier6Path.addLine(to: CGPoint(x: 55.5, y: 636.94))
        bezier6Path.addLine(to: CGPoint(x: 61.5, y: 634.83))
        bezier6Path.addLine(to: CGPoint(x: 72.5, y: 653.29))
        bezier6Path.addLine(to: CGPoint(x: 68, y: 660.67))
        bezier6Path.addLine(to: CGPoint(x: 310.5, y: 660.67))
        bezier6Path.addLine(to: CGPoint(x: 303, y: 648.01))
        bezier6Path.addLine(to: CGPoint(x: 312, y: 634.3))
        bezier6Path.addLine(to: CGPoint(x: 322.5, y: 633.25))
        bezier6Path.addLine(to: CGPoint(x: 329.5, y: 621.12))
        bezier6Path.addLine(to: CGPoint(x: 333.5, y: 623.23))
        bezier6Path.addLine(to: CGPoint(x: 333.5, y: 619.01))
        bezier6Path.addLine(to: CGPoint(x: 329.5, y: 613.21))
        bezier6Path.addLine(to: CGPoint(x: 339.5, y: 597.91))
        bezier6Path.addLine(to: CGPoint(x: 363, y: 597.91))
        bezier6Path.addLine(to: CGPoint(x: 367.5, y: 604.77))
        bezier6Path.addLine(to: CGPoint(x: 374, y: 604.77))
        TBMStyleKit.gradientColor2.setStroke()
        bezier6Path.lineWidth = 1
        bezier6Path.miterLimit = 4
        bezier6Path.stroke()


        //// Bezier 10 Drawing
        context.saveGState()
        context.setAlpha(0.8)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: 2, y: 515))
        bezier10Path.addLine(to: CGPoint(x: 7, y: 519))
        bezier10Path.addLine(to: CGPoint(x: 10, y: 511))
        bezier10Path.addLine(to: CGPoint(x: 22, y: 511))
        bezier10Path.addLine(to: CGPoint(x: 27, y: 499))
        bezier10Path.addLine(to: CGPoint(x: 46, y: 502))
        bezier10Path.addLine(to: CGPoint(x: 64, y: 523))
        bezier10Path.addLine(to: CGPoint(x: 54, y: 543))
        bezier10Path.addLine(to: CGPoint(x: 42, y: 543))
        bezier10Path.addLine(to: CGPoint(x: 42, y: 543))
        bezier10Path.addLine(to: CGPoint(x: 46, y: 550))
        bezier10Path.addLine(to: CGPoint(x: 39, y: 557))
        bezier10Path.addLine(to: CGPoint(x: 46, y: 565))
        bezier10Path.addLine(to: CGPoint(x: 39, y: 572))
        bezier10Path.addLine(to: CGPoint(x: 46, y: 580))
        bezier10Path.addLine(to: CGPoint(x: 39, y: 588))
        bezier10Path.addLine(to: CGPoint(x: 54, y: 588))
        bezier10Path.addLine(to: CGPoint(x: 71, y: 612))
        bezier10Path.addLine(to: CGPoint(x: 64, y: 620))
        bezier10Path.addLine(to: CGPoint(x: 82, y: 650))
        bezier10Path.addLine(to: CGPoint(x: 293, y: 650))
        bezier10Path.addLine(to: CGPoint(x: 293, y: 644))
        bezier10Path.addLine(to: CGPoint(x: 307.53, y: 625.57))
        bezier10Path.addLine(to: CGPoint(x: 316.46, y: 625.57))
        bezier10Path.addLine(to: CGPoint(x: 322.41, y: 617.59))
        bezier10Path.addLine(to: CGPoint(x: 316.46, y: 611.6))
        bezier10Path.addLine(to: CGPoint(x: 334.31, y: 587.66))
        bezier10Path.addLine(to: CGPoint(x: 362.09, y: 587.66))
        bezier10Path.addLine(to: CGPoint(x: 368.04, y: 592.65))
        bezier10Path.addLine(to: CGPoint(x: 373, y: 592.65))
        bezier10Path.addLine(to: CGPoint(x: 373, y: 2))
        bezier10Path.addLine(to: CGPoint(x: 2, y: 2))
        bezier10Path.addLine(to: CGPoint(x: 2, y: 515))
        bezier10Path.close()
        context.saveGState()
        bezier10Path.addClip()
        context.drawLinearGradient(paint0_linear6, start: CGPoint(x: 187.5, y: 2), end: CGPoint(x: 187.5, y: 650), options: [])
        context.restoreGState()
        UIColor.black.setStroke()
        bezier10Path.lineWidth = 4
        bezier10Path.stroke()

        context.endTransparencyLayer()
        context.restoreGState()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 276, y: 637))
        bezier9Path.addLine(to: CGPoint(x: 294, y: 616))
        bezier9Path.addLine(to: CGPoint(x: 302, y: 616))
        bezier9Path.addLine(to: CGPoint(x: 302, y: 604))
        bezier9Path.addLine(to: CGPoint(x: 331, y: 565))
        bezier9Path.addLine(to: CGPoint(x: 358, y: 565))
        bezier9Path.addLine(to: CGPoint(x: 358, y: 13))
        TBMStyleKit.gradientColor2.setStroke()
        bezier9Path.lineWidth = 0.5
        bezier9Path.stroke()


        //// Bezier 11 Drawing
        let bezier11Path = UIBezierPath()
        bezier11Path.move(to: CGPoint(x: 94.25, y: 629.75))
        bezier11Path.addLine(to: CGPoint(x: 94.25, y: 533.75))
        bezier11Path.addLine(to: CGPoint(x: 17.75, y: 456.75))
        bezier11Path.addLine(to: CGPoint(x: 17.75, y: 14.25))
        TBMStyleKit.gradientColor2.setStroke()
        bezier11Path.lineWidth = 0.5
        bezier11Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCentralBlockCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 209, height: 30), resizing: ResizingBehavior = .aspectFit, blockGreenTintColor: CGFloat = 0, blockRedTintColor: CGFloat = 0, blockYellowTintColor: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 209, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 209, y: resizedFrame.height / 30)


        //// Color Declarations
        let fillColor2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let strokeColor5 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let blockRedColor = UIColor(red: 0.329, green: 0.045, blue: 0.045, alpha: 1.000)
        let blockGreenColor = UIColor(red: 0.064, green: 0.280, blue: 0.200, alpha: 1.000)
        let blockYellowColor = UIColor(red: 0.222, green: 0.236, blue: 0.059, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -0, y: 1.04, width: 210, height: 27.96))
        fillColor2.setFill()
        rectanglePath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: -0.5, y: 29.5))
        bezier2Path.addLine(to: CGPoint(x: 209.5, y: 29.5))
        strokeColor5.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.miterLimit = 4
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: -0.5, y: 0.5))
        bezier3Path.addLine(to: CGPoint(x: 209.5, y: 0.5))
        strokeColor5.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.miterLimit = 4
        bezier3Path.stroke()


        //// GreenBackground Drawing
        context.saveGState()
        context.setAlpha(blockGreenTintColor)

        let greenBackgroundPath = UIBezierPath(rect: CGRect(x: 0, y: 1, width: 209, height: 28))
        blockGreenColor.setFill()
        greenBackgroundPath.fill()

        context.restoreGState()


        //// RedBackground Drawing
        context.saveGState()
        context.setAlpha(blockRedTintColor)

        let redBackgroundPath = UIBezierPath(rect: CGRect(x: 0, y: 1, width: 210, height: 28))
        blockRedColor.setFill()
        redBackgroundPath.fill()

        context.restoreGState()


        //// RedBackground 2 Drawing
        context.saveGState()
        context.setAlpha(blockYellowTintColor)

        let redBackground2Path = UIBezierPath(rect: CGRect(x: 0, y: 1, width: 210, height: 28))
        blockYellowColor.setFill()
        redBackground2Path.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawAuditoryHint(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 350), resizing: ResizingBehavior = .aspectFit, auditoryChartMaxHeight: CGFloat = 300, auditoryFractionA: CGFloat = 1, auditoryFractionB: CGFloat = 1, auditoryFractionC: CGFloat = 1, auditoryFractionD: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 350), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 350)


        //// Color Declarations
        let gradientColor59 = UIColor(red: 0.024, green: 0.909, blue: 0.731, alpha: 1.000)
        let gradientColor60 = UIColor(red: 0.068, green: 0.204, blue: 0.227, alpha: 1.000)
        let gradient2Color = UIColor(red: 0.469, green: 0.166, blue: 0.698, alpha: 1.000)
        let gradient2Color2 = UIColor(red: 0.082, green: 0.100, blue: 0.181, alpha: 1.000)
        let gradient3Color = UIColor(red: 0.429, green: 0.718, blue: 0.108, alpha: 1.000)
        let gradient3Color2 = UIColor(red: 0.039, green: 0.123, blue: 0.020, alpha: 1.000)
        let gradient4Color = UIColor(red: 0.895, green: 0.144, blue: 0.144, alpha: 1.000)
        let gradient4Color2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [gradientColor59.cgColor, gradientColor59.blended(withFraction: 0.5, of: gradientColor60).cgColor, gradientColor60.cgColor] as CFArray, locations: [0, 0.54, 1])!
        let gradient2 = CGGradient(colorsSpace: nil, colors: [gradient2Color.cgColor, gradient2Color.blended(withFraction: 0.5, of: gradient2Color2).cgColor, gradient2Color2.cgColor] as CFArray, locations: [0, 0.57, 0.98])!
        let gradient3 = CGGradient(colorsSpace: nil, colors: [gradient3Color.cgColor, gradient3Color2.cgColor] as CFArray, locations: [0, 1])!
        let gradient4 = CGGradient(colorsSpace: nil, colors: [gradient4Color.cgColor, gradient4Color.blended(withFraction: 0.5, of: gradient4Color2).cgColor, gradient4Color2.cgColor] as CFArray, locations: [0, 0.46, 1])!

        //// Variable Declarations
        let auditoryExpr1: CGFloat = auditoryChartMaxHeight * auditoryFractionA
        let auditorySymbolExprA: CGFloat = (1 - auditoryFractionA) * auditoryChartMaxHeight
        let auditoryPercentA = "\(Int(round(auditoryFractionA * 100)))" + "%"
        let auditoryExpr2: CGFloat = auditoryChartMaxHeight * auditoryFractionB
        let auditorySymbolExprB: CGFloat = (1 - auditoryFractionB) * auditoryChartMaxHeight
        let auditoryPercentB = "\(Int(round(auditoryFractionB * 100)))" + "%"
        let auditoryExpr3: CGFloat = auditoryChartMaxHeight * auditoryFractionC
        let auditorySymbolExprC: CGFloat = (1 - auditoryFractionC) * auditoryChartMaxHeight
        let auditoryPercentC = "\(Int(round(auditoryFractionC * 100)))" + "%"
        let auditoryExpr4: CGFloat = auditoryChartMaxHeight * auditoryFractionD
        let auditorySymbolExprD: CGFloat = (1 - auditoryFractionD) * auditoryChartMaxHeight
        let auditoryPercentD = "\(Int(round(auditoryFractionD * 100)))" + "%"

        //// Rectangle Drawing
        context.saveGState()
        context.translateBy(x: 59, y: 200)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangleRect = CGRect(x: -30, y: -150, width: 60, height: auditoryExpr1)
        let rectanglePath = UIBezierPath(rect: rectangleRect)
        context.saveGState()
        rectanglePath.addClip()
        context.drawLinearGradient(gradient2,
            start: CGPoint(x: rectangleRect.midX, y: rectangleRect.maxY),
            end: CGPoint(x: rectangleRect.midX, y: rectangleRect.minY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 143, y: 200)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle2Rect = CGRect(x: -30, y: -150, width: 60, height: auditoryExpr2)
        let rectangle2Path = UIBezierPath(rect: rectangle2Rect)
        context.saveGState()
        rectangle2Path.addClip()
        context.drawLinearGradient(gradient,
            start: CGPoint(x: rectangle2Rect.midX, y: rectangle2Rect.maxY),
            end: CGPoint(x: rectangle2Rect.midX, y: rectangle2Rect.minY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 3 Drawing
        context.saveGState()
        context.translateBy(x: 229, y: 200)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle3Rect = CGRect(x: -30, y: -150, width: 60, height: auditoryExpr3)
        let rectangle3Path = UIBezierPath(rect: rectangle3Rect)
        context.saveGState()
        rectangle3Path.addClip()
        context.drawLinearGradient(gradient3,
            start: CGPoint(x: rectangle3Rect.midX, y: rectangle3Rect.maxY),
            end: CGPoint(x: rectangle3Rect.midX, y: rectangle3Rect.minY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 4 Drawing
        context.saveGState()
        context.translateBy(x: 309.69, y: 200.26)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle4Rect = CGRect(x: -30, y: -150, width: 60, height: auditoryExpr4)
        let rectangle4Path = UIBezierPath(rect: rectangle4Rect)
        context.saveGState()
        rectangle4Path.addClip()
        context.drawLinearGradient(gradient4,
            start: CGPoint(x: rectangle4Rect.midX, y: rectangle4Rect.maxY),
            end: CGPoint(x: rectangle4Rect.midX, y: rectangle4Rect.minY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// SymbD Drawing
        let symbDRect = CGRect(x: 35, y: auditorySymbolExprA, width: 54, height: 33)
        let symbDTextContent = "A"
        let symbDStyle = NSMutableParagraphStyle()
        symbDStyle.alignment = .center
        let symbDFontAttributes = [
            .font: UIFont.systemFont(ofSize: 25, weight: .bold),
            .foregroundColor: UIColor.white,
            .paragraphStyle: symbDStyle,
        ] as [NSAttributedString.Key: Any]

        let symbDTextHeight: CGFloat = symbDTextContent.boundingRect(with: CGSize(width: symbDRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: symbDFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: symbDRect)
        symbDTextContent.draw(in: CGRect(x: symbDRect.minX, y: symbDRect.minY + (symbDRect.height - symbDTextHeight) / 2, width: symbDRect.width, height: symbDTextHeight), withAttributes: symbDFontAttributes)
        context.restoreGState()


        //// SymbB Drawing
        let symbBRect = CGRect(x: 116, y: auditorySymbolExprB, width: 54, height: 33)
        let symbBTextContent = "B"
        let symbBStyle = NSMutableParagraphStyle()
        symbBStyle.alignment = .center
        let symbBFontAttributes = [
            .font: UIFont.systemFont(ofSize: 25, weight: .bold),
            .foregroundColor: UIColor.white,
            .paragraphStyle: symbBStyle,
        ] as [NSAttributedString.Key: Any]

        let symbBTextHeight: CGFloat = symbBTextContent.boundingRect(with: CGSize(width: symbBRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: symbBFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: symbBRect)
        symbBTextContent.draw(in: CGRect(x: symbBRect.minX, y: symbBRect.minY + (symbBRect.height - symbBTextHeight) / 2, width: symbBRect.width, height: symbBTextHeight), withAttributes: symbBFontAttributes)
        context.restoreGState()


        //// SymbC Drawing
        let symbCRect = CGRect(x: 202, y: auditorySymbolExprC, width: 54, height: 33)
        let symbCTextContent = "C"
        let symbCStyle = NSMutableParagraphStyle()
        symbCStyle.alignment = .center
        let symbCFontAttributes = [
            .font: UIFont.systemFont(ofSize: 25, weight: .bold),
            .foregroundColor: UIColor.white,
            .paragraphStyle: symbCStyle,
        ] as [NSAttributedString.Key: Any]

        let symbCTextHeight: CGFloat = symbCTextContent.boundingRect(with: CGSize(width: symbCRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: symbCFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: symbCRect)
        symbCTextContent.draw(in: CGRect(x: symbCRect.minX, y: symbCRect.minY + (symbCRect.height - symbCTextHeight) / 2, width: symbCRect.width, height: symbCTextHeight), withAttributes: symbCFontAttributes)
        context.restoreGState()


        //// SymbC 2 Drawing
        let symbC2Rect = CGRect(x: 283, y: auditorySymbolExprD, width: 54, height: 33)
        let symbC2TextContent = "D"
        let symbC2Style = NSMutableParagraphStyle()
        symbC2Style.alignment = .center
        let symbC2FontAttributes = [
            .font: UIFont.systemFont(ofSize: 25, weight: .bold),
            .foregroundColor: UIColor.white,
            .paragraphStyle: symbC2Style,
        ] as [NSAttributedString.Key: Any]

        let symbC2TextHeight: CGFloat = symbC2TextContent.boundingRect(with: CGSize(width: symbC2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: symbC2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: symbC2Rect)
        symbC2TextContent.draw(in: CGRect(x: symbC2Rect.minX, y: symbC2Rect.minY + (symbC2Rect.height - symbC2TextHeight) / 2, width: symbC2Rect.width, height: symbC2TextHeight), withAttributes: symbC2FontAttributes)
        context.restoreGState()


        //// PercentA Drawing
        let percentARect = CGRect(x: 32, y: (auditorySymbolExprA + 64), width: 54, height: 33)
        let percentAStyle = NSMutableParagraphStyle()
        percentAStyle.alignment = .center
        let percentAFontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.buttonFontSize, weight: .bold),
            .foregroundColor: UIColor.white,
            .paragraphStyle: percentAStyle,
        ] as [NSAttributedString.Key: Any]

        let percentATextHeight: CGFloat = auditoryPercentA.boundingRect(with: CGSize(width: percentARect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: percentAFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: percentARect)
        auditoryPercentA.draw(in: CGRect(x: percentARect.minX, y: percentARect.minY + (percentARect.height - percentATextHeight) / 2, width: percentARect.width, height: percentATextHeight), withAttributes: percentAFontAttributes)
        context.restoreGState()


        //// PercentB Drawing
        let percentBRect = CGRect(x: 116, y: (auditorySymbolExprB + 64), width: 54, height: 33)
        let percentBStyle = NSMutableParagraphStyle()
        percentBStyle.alignment = .center
        let percentBFontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.buttonFontSize, weight: .bold),
            .foregroundColor: UIColor.black,
            .paragraphStyle: percentBStyle,
        ] as [NSAttributedString.Key: Any]

        let percentBTextHeight: CGFloat = auditoryPercentB.boundingRect(with: CGSize(width: percentBRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: percentBFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: percentBRect)
        auditoryPercentB.draw(in: CGRect(x: percentBRect.minX, y: percentBRect.minY + (percentBRect.height - percentBTextHeight) / 2, width: percentBRect.width, height: percentBTextHeight), withAttributes: percentBFontAttributes)
        context.restoreGState()


        //// PercentC Drawing
        let percentCRect = CGRect(x: 202, y: (auditorySymbolExprC + 64), width: 54, height: 33)
        let percentCStyle = NSMutableParagraphStyle()
        percentCStyle.alignment = .center
        let percentCFontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.buttonFontSize, weight: .bold),
            .foregroundColor: UIColor.black,
            .paragraphStyle: percentCStyle,
        ] as [NSAttributedString.Key: Any]

        let percentCTextHeight: CGFloat = auditoryPercentC.boundingRect(with: CGSize(width: percentCRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: percentCFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: percentCRect)
        auditoryPercentC.draw(in: CGRect(x: percentCRect.minX, y: percentCRect.minY + (percentCRect.height - percentCTextHeight) / 2, width: percentCRect.width, height: percentCTextHeight), withAttributes: percentCFontAttributes)
        context.restoreGState()


        //// PercentD Drawing
        let percentDRect = CGRect(x: 283, y: (auditorySymbolExprD + 64), width: 54, height: 33)
        let percentDStyle = NSMutableParagraphStyle()
        percentDStyle.alignment = .center
        let percentDFontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.buttonFontSize, weight: .bold),
            .foregroundColor: UIColor.white,
            .paragraphStyle: percentDStyle,
        ] as [NSAttributedString.Key: Any]

        let percentDTextHeight: CGFloat = auditoryPercentD.boundingRect(with: CGSize(width: percentDRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: percentDFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: percentDRect)
        auditoryPercentD.draw(in: CGRect(x: percentDRect.minX, y: percentDRect.minY + (percentDRect.height - percentDTextHeight) / 2, width: percentDRect.width, height: percentDTextHeight), withAttributes: percentDFontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawMoneyRound0(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 141, height: 157), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 141, height: 157), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 141, y: resizedFrame.height / 157)
        
        context.restoreGState()

    }

    @objc dynamic public class func drawScoreWave(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 370, height: 453), resizing: ResizingBehavior = .aspectFit, outlineCtrlPoint0: CGFloat = 29.5, outlineCtrlPoint1: CGFloat = 97.5, outlineCtrlPoint2: CGFloat = 150.5, outlineCtrlPoint3: CGFloat = 175.5, outlineCtrlPoint4: CGFloat = 240.5, outlineCtrlPoint5: CGFloat = 272, outlineCtrlPoint6: CGFloat = 359, fillCtrlPoint0: CGFloat = 28.5, fillCtrlPoint1: CGFloat = 67.5, fillCtrlPoint2: CGFloat = 116, fillCtrlPoint3: CGFloat = 148, fillCtrlPoint4: CGFloat = 211, fillCtrlPoint5: CGFloat = 242.5, fillCtrlPoint6: CGFloat = 338) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 370, height: 453), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 370, y: resizedFrame.height / 453)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 370, resizedFrame.height / 453)


        //// Color Declarations
        let fillColor5 = UIColor(red: 0.141, green: 0.082, blue: 0.424, alpha: 1.000)
        let paint0_linear6Color = UIColor(red: 0.126, green: 0.017, blue: 0.950, alpha: 1.000)
        let paint0_linear6Color2 = UIColor(red: 0.049, green: 0.028, blue: 0.422, alpha: 1.000)

        //// Gradient Declarations
        let paint0_linear6 = CGGradient(colorsSpace: nil, colors: [paint0_linear6Color.cgColor, paint0_linear6Color.blended(withFraction: 0.5, of: paint0_linear6Color2).cgColor, paint0_linear6Color2.cgColor] as CFArray, locations: [0, 0.51, 1])!

        //// Shadow Declarations
        let shadow2 = NSShadow()
        shadow2.shadowColor = UIColor.black
        shadow2.shadowOffset = CGSize(width: 3, height: 4)
        shadow2.shadowBlurRadius = 5

        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 0, y: -5.49))
        bezier3Path.addCurve(to: CGPoint(x: 370, y: -6), controlPoint1: CGPoint(x: 365.48, y: -3.47), controlPoint2: CGPoint(x: 370, y: -6))
        bezier3Path.addLine(to: CGPoint(x: 370, y: 453))
        bezier3Path.addLine(to: CGPoint(x: 0.5, y: 453))
        bezier3Path.addLine(to: CGPoint(x: 0, y: -5.49))
        context.saveGState()
        bezier3Path.addClip()
        context.drawLinearGradient(paint0_linear6, start: CGPoint(x: 185, y: 453), end: CGPoint(x: 185, y: -6), options: [])
        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 157, y: fillCtrlPoint3))
        bezierPath.addCurve(to: CGPoint(x: 235, y: fillCtrlPoint2), controlPoint1: CGPoint(x: 174, y: fillCtrlPoint3 - 16), controlPoint2: CGPoint(x: 211, y: fillCtrlPoint2 + 26))
        bezierPath.addCurve(to: CGPoint(x: 243, y: fillCtrlPoint1), controlPoint1: CGPoint(x: 241, y: fillCtrlPoint2 - 6), controlPoint2: CGPoint(x: 243, y: fillCtrlPoint1 + 25.5))
        bezierPath.addCurve(to: CGPoint(x: 290, y: fillCtrlPoint0), controlPoint1: CGPoint(x: 258, y: fillCtrlPoint1 - 31.5), controlPoint2: CGPoint(x: 277.14, y: fillCtrlPoint0 + 28.33))
        bezierPath.addCurve(to: CGPoint(x: 297, y: -8), controlPoint1: CGPoint(x: 301.18, y: fillCtrlPoint0 - 24.63), controlPoint2: CGPoint(x: 296.9, y: 1.74))
        bezierPath.addCurve(to: CGPoint(x: 370, y: -7.66), controlPoint1: CGPoint(x: 297, y: -8), controlPoint2: CGPoint(x: 370.02, y: -9.48))
        bezierPath.addLine(to: CGPoint(x: 370, y: 452.5))
        bezierPath.addLine(to: CGPoint(x: -1, y: 452))
        bezierPath.addCurve(to: CGPoint(x: -13, y: 338), controlPoint1: CGPoint(x: -0.78, y: 441.45), controlPoint2: CGPoint(x: -32, y: 323))
        bezierPath.addCurve(to: CGPoint(x: 47, y: fillCtrlPoint6), controlPoint1: CGPoint(x: -1, y: 345), controlPoint2: CGPoint(x: 39.79, y: fillCtrlPoint6 + 7))
        bezierPath.addCurve(to: CGPoint(x: 69, y: fillCtrlPoint5), controlPoint1: CGPoint(x: 80, y: fillCtrlPoint6 - 32), controlPoint2: CGPoint(x: 46, y: fillCtrlPoint5 + 32.5))
        bezierPath.addCurve(to: CGPoint(x: 143, y: fillCtrlPoint4), controlPoint1: CGPoint(x: 80.07, y: fillCtrlPoint5 - 15.64), controlPoint2: CGPoint(x: 124, y: fillCtrlPoint4 + 11.5))
        bezierPath.addCurve(to: CGPoint(x: 157, y: fillCtrlPoint3), controlPoint1: CGPoint(x: 163, y: fillCtrlPoint4 - 25.5), controlPoint2: CGPoint(x: 141, y: fillCtrlPoint3 + 17))
        bezierPath.close()
        fillColor5.setFill()
        bezierPath.fill()


        //// Group
        //// Bezier 2 Drawing
        context.saveGState()
        context.translateBy(x: -71.5, y: -34)

        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 375.5, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 361, y: (outlineCtrlPoint0 + 34)), controlPoint1: CGPoint(x: 375.5, y: 0), controlPoint2: CGPoint(x: 370, y: (outlineCtrlPoint0 + 34) - 17))
        bezier2Path.addCurve(to: CGPoint(x: 315, y: outlineCtrlPoint1), controlPoint1: CGPoint(x: 352.75, y: (outlineCtrlPoint0 + 34) + 15.57), controlPoint2: CGPoint(x: 327, y: outlineCtrlPoint1 - 19))
        bezier2Path.addCurve(to: CGPoint(x: 306, y: outlineCtrlPoint2), controlPoint1: CGPoint(x: 307, y: outlineCtrlPoint1 + 15), controlPoint2: CGPoint(x: 318, y: outlineCtrlPoint2 - 14))
        bezier2Path.addCurve(to: CGPoint(x: 236, y: outlineCtrlPoint3), controlPoint1: CGPoint(x: 289, y: outlineCtrlPoint2 + 21), controlPoint2: CGPoint(x: 249, y: outlineCtrlPoint3 - 9))
        bezier2Path.addCurve(to: CGPoint(x: 217.5, y: outlineCtrlPoint4), controlPoint1: CGPoint(x: 207.65, y: outlineCtrlPoint3 + 19.63), controlPoint2: CGPoint(x: 229.3, y: outlineCtrlPoint4 - 13.45))
        bezier2Path.addCurve(to: CGPoint(x: 142.5, y: outlineCtrlPoint5), controlPoint1: CGPoint(x: 201.86, y: outlineCtrlPoint4 + 17.82), controlPoint2: CGPoint(x: 159.18, y: outlineCtrlPoint5 - 16.58))
        bezier2Path.addCurve(to: CGPoint(x: 129, y: outlineCtrlPoint6), controlPoint1: CGPoint(x: 119.41, y: outlineCtrlPoint5 + 22.95), controlPoint2: CGPoint(x: 146, y: outlineCtrlPoint6 - 23))
        bezier2Path.addCurve(to: CGPoint(x: 54, y: 377.5), controlPoint1: CGPoint(x: 102.64, y: outlineCtrlPoint6 + 32.72), controlPoint2: CGPoint(x: 67, y: 367.5))
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow2.shadowOffset.width * resizedShadowScale, height: shadow2.shadowOffset.height * resizedShadowScale), blur: shadow2.shadowBlurRadius * resizedShadowScale, color: (shadow2.shadowColor as! UIColor).cgColor)
        TBMStyleKit.gradientColor2.setStroke()
        bezier2Path.lineWidth = 5
        bezier2Path.miterLimit = 4
        bezier2Path.stroke()
        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawScoreBlock(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 114), resizing: ResizingBehavior = .aspectFit, scoreBlockOpacity: CGFloat = -2) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 114), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 114)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 44, resizedFrame.height / 114)


        //// Color Declarations
        let gradientColor25 = UIColor(red: 0.992, green: 0.898, blue: 0.576, alpha: 1.000)
        let gradientColor26 = UIColor(red: 1.000, green: 0.878, blue: 0.529, alpha: 1.000)
        let gradientColor27 = UIColor(red: 1.000, green: 0.902, blue: 0.537, alpha: 1.000)
        let gradientColor28 = UIColor(red: 0.984, green: 0.698, blue: 0.337, alpha: 1.000)
        let gradientColor29 = UIColor(red: 0.643, green: 0.294, blue: 0.047, alpha: 1.000)
        let gradientColor30 = UIColor(red: 0.514, green: 0.196, blue: 0.024, alpha: 1.000)
        let gradientColor31 = UIColor(red: 0.439, green: 0.145, blue: 0.024, alpha: 1.000)
        let gradientColor32 = UIColor(red: 0.486, green: 0.180, blue: 0.035, alpha: 1.000)
        let gradientColor33 = UIColor(red: 0.776, green: 0.408, blue: 0.122, alpha: 1.000)
        let gradientColor34 = UIColor(red: 0.992, green: 0.596, blue: 0.192, alpha: 1.000)
        let gradientColor35 = UIColor(red: 1.000, green: 0.635, blue: 0.208, alpha: 1.000)
        let gradientColor36 = UIColor(red: 0.945, green: 0.533, blue: 0.169, alpha: 1.000)
        let gradientColor37 = UIColor(red: 0.580, green: 0.251, blue: 0.063, alpha: 1.000)
        let gradientColor38 = UIColor(red: 0.427, green: 0.141, blue: 0.020, alpha: 1.000)

        //// Gradient Declarations
        let kMyMoney_iconCanvasgbezier36 = CGGradient(colorsSpace: nil, colors: [gradientColor25.cgColor, gradientColor26.cgColor, gradientColor27.cgColor, gradientColor28.cgColor, gradientColor29.cgColor, gradientColor30.cgColor, gradientColor31.cgColor, gradientColor31.cgColor, gradientColor32.cgColor, gradientColor33.cgColor, gradientColor34.cgColor, gradientColor35.cgColor, gradientColor36.cgColor, gradientColor37.cgColor, gradientColor38.cgColor] as CFArray, locations: [0, 0.1, 0.2, 0.28, 0.41, 0.48, 0.55, 0.58, 0.61, 0.66, 0.7, 0.78, 0.85, 0.91, 1])!

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black
        shadow.shadowOffset = CGSize(width: 2, height: -2)
        shadow.shadowBlurRadius = 5

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 22, y: 0))
        bezierPath.addLine(to: CGPoint(x: 22, y: 99))
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        UIColor.white.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()
        context.restoreGState()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 14, y: 91, width: 16, height: 16))
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        UIColor.white.setFill()
        ovalPath.fill()
        context.restoreGState()



        //// Oval 2 Drawing
        context.saveGState()
        context.setAlpha(scoreBlockOpacity)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 2, y: 74, width: 40, height: 40))
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        oval2Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36, start: CGPoint(x: 22, y: 74), end: CGPoint(x: 22, y: 114), options: [])
        context.endTransparencyLayer()
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Oval 3 Drawing
        context.saveGState()
        context.setAlpha(scoreBlockOpacity)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 6, y: 79, width: 31, height: 31))
        context.saveGState()
        oval3Path.addClip()
        context.drawLinearGradient(kMyMoney_iconCanvasgbezier36, start: CGPoint(x: 21.5, y: 79), end: CGPoint(x: 21.5, y: 110), options: [])
        context.restoreGState()

        ////// Oval 3 Inner Shadow
        context.saveGState()
        context.clip(to: oval3Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let oval3OpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: oval3OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        oval3OpaqueShadow.setFill()
        oval3Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawDiamond(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 45, height: 45), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 45, height: 45), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 45, y: resizedFrame.height / 45)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 45, resizedFrame.height / 45)



        //// Shadow Declarations
        let shadow2 = NSShadow()
        shadow2.shadowColor = UIColor.black
        shadow2.shadowOffset = CGSize(width: 3, height: 4)
        shadow2.shadowBlurRadius = 5

        //// Group
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow2.shadowOffset.width * resizedShadowScale, height: shadow2.shadowOffset.height * resizedShadowScale), blur: shadow2.shadowBlurRadius * resizedShadowScale, color: (shadow2.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 29.24, y: 11.19))
        bezierPath.addLine(to: CGPoint(x: 25.92, y: -0.37))
        bezierPath.addLine(to: CGPoint(x: 19.06, y: -0.37))
        bezierPath.addLine(to: CGPoint(x: 15.76, y: 11.19))
        bezierPath.addLine(to: CGPoint(x: 29.24, y: 11.19))
        bezierPath.close()
        context.saveGState()
        bezierPath.addClip()
        context.drawLinearGradient(TBMStyleKit.paint0_linear, start: CGPoint(x: 22.5, y: -0.37), end: CGPoint(x: 22.5, y: 11.19), options: [])
        context.restoreGState()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 9.35, y: -0.37))
        bezier2Path.addLine(to: CGPoint(x: 2, y: 11.19))
        bezier2Path.addLine(to: CGPoint(x: 13.12, y: 11.19))
        bezier2Path.addLine(to: CGPoint(x: 16.42, y: -0.37))
        bezier2Path.addLine(to: CGPoint(x: 9.35, y: -0.37))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        context.drawLinearGradient(TBMStyleKit.paint0_linear, start: CGPoint(x: 9.21, y: -0.37), end: CGPoint(x: 9.21, y: 11.19), options: [])
        context.restoreGState()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 43, y: 11.19))
        bezier3Path.addLine(to: CGPoint(x: 35.65, y: -0.37))
        bezier3Path.addLine(to: CGPoint(x: 28.56, y: -0.37))
        bezier3Path.addLine(to: CGPoint(x: 31.87, y: 11.19))
        bezier3Path.addLine(to: CGPoint(x: 43, y: 11.19))
        bezier3Path.close()
        context.saveGState()
        bezier3Path.addClip()
        context.drawLinearGradient(TBMStyleKit.paint0_linear, start: CGPoint(x: 35.78, y: -0.37), end: CGPoint(x: 35.78, y: 11.19), options: [])
        context.restoreGState()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 32.47, y: 14.08))
        bezier4Path.addLine(to: CGPoint(x: 26.34, y: 39.5))
        bezier4Path.addLine(to: CGPoint(x: 42.99, y: 14.08))
        bezier4Path.addLine(to: CGPoint(x: 32.47, y: 14.08))
        bezier4Path.close()
        context.saveGState()
        bezier4Path.addClip()
        context.drawLinearGradient(TBMStyleKit.paint0_linear, start: CGPoint(x: 34.66, y: 14.08), end: CGPoint(x: 34.66, y: 39.5), options: [])
        context.restoreGState()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 22.5, y: 45.37))
        bezier5Path.addLine(to: CGPoint(x: 29.81, y: 14.14))
        bezier5Path.addLine(to: CGPoint(x: 15.09, y: 14.14))
        bezier5Path.addLine(to: CGPoint(x: 22.5, y: 45.37))
        bezier5Path.close()
        context.saveGState()
        bezier5Path.addClip()
        context.drawLinearGradient(TBMStyleKit.paint0_linear, start: CGPoint(x: 22.45, y: 14.14), end: CGPoint(x: 22.45, y: 45.37), options: [])
        context.restoreGState()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 2.01, y: 14.08))
        bezier6Path.addLine(to: CGPoint(x: 18.57, y: 39.36))
        bezier6Path.addLine(to: CGPoint(x: 12.53, y: 14.08))
        bezier6Path.addLine(to: CGPoint(x: 2.01, y: 14.08))
        bezier6Path.close()
        context.saveGState()
        bezier6Path.addClip()
        context.drawLinearGradient(TBMStyleKit.paint0_linear, start: CGPoint(x: 10.29, y: 14.08), end: CGPoint(x: 10.29, y: 39.36), options: [])
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawStars(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 366, height: 243), resizing: ResizingBehavior = .aspectFit, scaleStar1: CGFloat = 1, scaleStar2: CGFloat = 1, scaleStar3: CGFloat = 1, scaleStar4: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 366, height: 243), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 366, y: resizedFrame.height / 243)


        //// Color Declarations
        let gradientColor18 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let gradientColor19 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.010)

        //// Gradient Declarations
        let paint8_radial = CGGradient(colorsSpace: nil, colors: [gradientColor18.cgColor, gradientColor19.cgColor] as CFArray, locations: [0, 1])!

        //// Group 2
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let starPath = UIBezierPath()
        starPath.move(to: CGPoint(x: 56.65, y: 192.65))
        starPath.addLine(to: CGPoint(x: 57.43, y: 195.87))
        starPath.addLine(to: CGPoint(x: 60.65, y: 196.65))
        starPath.addLine(to: CGPoint(x: 57.43, y: 197.43))
        starPath.addLine(to: CGPoint(x: 56.65, y: 200.65))
        starPath.addLine(to: CGPoint(x: 55.87, y: 197.43))
        starPath.addLine(to: CGPoint(x: 52.65, y: 196.65))
        starPath.addLine(to: CGPoint(x: 55.87, y: 195.87))
        starPath.close()
        context.saveGState()
        starPath.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 56.54, y: 196.77), startRadius: 0,
            endCenter: CGPoint(x: 56.54, y: 196.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 3
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 2 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star2Path = UIBezierPath()
        star2Path.move(to: CGPoint(x: 206.65, y: 186.65))
        star2Path.addLine(to: CGPoint(x: 207.43, y: 189.87))
        star2Path.addLine(to: CGPoint(x: 210.65, y: 190.65))
        star2Path.addLine(to: CGPoint(x: 207.43, y: 191.43))
        star2Path.addLine(to: CGPoint(x: 206.65, y: 194.65))
        star2Path.addLine(to: CGPoint(x: 205.87, y: 191.43))
        star2Path.addLine(to: CGPoint(x: 202.65, y: 190.65))
        star2Path.addLine(to: CGPoint(x: 205.87, y: 189.87))
        star2Path.close()
        context.saveGState()
        star2Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 206.54, y: 190.77), startRadius: 0,
            endCenter: CGPoint(x: 206.54, y: 190.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 4
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 3 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star3Path = UIBezierPath()
        star3Path.move(to: CGPoint(x: 326.65, y: 134.65))
        star3Path.addLine(to: CGPoint(x: 327.43, y: 137.87))
        star3Path.addLine(to: CGPoint(x: 330.65, y: 138.65))
        star3Path.addLine(to: CGPoint(x: 327.43, y: 139.43))
        star3Path.addLine(to: CGPoint(x: 326.65, y: 142.65))
        star3Path.addLine(to: CGPoint(x: 325.87, y: 139.43))
        star3Path.addLine(to: CGPoint(x: 322.65, y: 138.65))
        star3Path.addLine(to: CGPoint(x: 325.87, y: 137.87))
        star3Path.close()
        context.saveGState()
        star3Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 326.54, y: 138.77), startRadius: 0,
            endCenter: CGPoint(x: 326.54, y: 138.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 6
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 5 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star5Path = UIBezierPath()
        star5Path.move(to: CGPoint(x: 202.65, y: 128.65))
        star5Path.addLine(to: CGPoint(x: 203.43, y: 131.87))
        star5Path.addLine(to: CGPoint(x: 206.65, y: 132.65))
        star5Path.addLine(to: CGPoint(x: 203.43, y: 133.43))
        star5Path.addLine(to: CGPoint(x: 202.65, y: 136.65))
        star5Path.addLine(to: CGPoint(x: 201.87, y: 133.43))
        star5Path.addLine(to: CGPoint(x: 198.65, y: 132.65))
        star5Path.addLine(to: CGPoint(x: 201.87, y: 131.87))
        star5Path.close()
        context.saveGState()
        star5Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 202.54, y: 132.77), startRadius: 0,
            endCenter: CGPoint(x: 202.54, y: 132.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 7
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 6 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star6Path = UIBezierPath()
        star6Path.move(to: CGPoint(x: 322.65, y: 39.65))
        star6Path.addLine(to: CGPoint(x: 323.43, y: 42.87))
        star6Path.addLine(to: CGPoint(x: 326.65, y: 43.65))
        star6Path.addLine(to: CGPoint(x: 323.43, y: 44.43))
        star6Path.addLine(to: CGPoint(x: 322.65, y: 47.65))
        star6Path.addLine(to: CGPoint(x: 321.87, y: 44.43))
        star6Path.addLine(to: CGPoint(x: 318.65, y: 43.65))
        star6Path.addLine(to: CGPoint(x: 321.87, y: 42.87))
        star6Path.close()
        context.saveGState()
        star6Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 322.54, y: 43.77), startRadius: 0,
            endCenter: CGPoint(x: 322.54, y: 43.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 8
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 7 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star7Path = UIBezierPath()
        star7Path.move(to: CGPoint(x: 266.25, y: 122.25))
        star7Path.addLine(to: CGPoint(x: 266.85, y: 124.65))
        star7Path.addLine(to: CGPoint(x: 269.25, y: 125.25))
        star7Path.addLine(to: CGPoint(x: 266.85, y: 125.85))
        star7Path.addLine(to: CGPoint(x: 266.25, y: 128.25))
        star7Path.addLine(to: CGPoint(x: 265.65, y: 125.85))
        star7Path.addLine(to: CGPoint(x: 263.25, y: 125.25))
        star7Path.addLine(to: CGPoint(x: 265.65, y: 124.65))
        star7Path.close()
        context.saveGState()
        star7Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 266.15, y: 125.33), startRadius: 0,
            endCenter: CGPoint(x: 266.15, y: 125.33), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 9
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 8 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star8Path = UIBezierPath()
        star8Path.move(to: CGPoint(x: 125.25, y: 143.25))
        star8Path.addLine(to: CGPoint(x: 125.85, y: 145.65))
        star8Path.addLine(to: CGPoint(x: 128.25, y: 146.25))
        star8Path.addLine(to: CGPoint(x: 125.85, y: 146.85))
        star8Path.addLine(to: CGPoint(x: 125.25, y: 149.25))
        star8Path.addLine(to: CGPoint(x: 124.65, y: 146.85))
        star8Path.addLine(to: CGPoint(x: 122.25, y: 146.25))
        star8Path.addLine(to: CGPoint(x: 124.65, y: 145.65))
        star8Path.close()
        context.saveGState()
        star8Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 125.16, y: 146.33), startRadius: 0,
            endCenter: CGPoint(x: 125.16, y: 146.33), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 10
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 9 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star9Path = UIBezierPath()
        star9Path.move(to: CGPoint(x: 163.25, y: 161.25))
        star9Path.addLine(to: CGPoint(x: 163.85, y: 163.65))
        star9Path.addLine(to: CGPoint(x: 166.25, y: 164.25))
        star9Path.addLine(to: CGPoint(x: 163.85, y: 164.85))
        star9Path.addLine(to: CGPoint(x: 163.25, y: 167.25))
        star9Path.addLine(to: CGPoint(x: 162.65, y: 164.85))
        star9Path.addLine(to: CGPoint(x: 160.25, y: 164.25))
        star9Path.addLine(to: CGPoint(x: 162.65, y: 163.65))
        star9Path.close()
        context.saveGState()
        star9Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 163.16, y: 164.33), startRadius: 0,
            endCenter: CGPoint(x: 163.16, y: 164.33), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 11
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 10 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star10Path = UIBezierPath()
        star10Path.move(to: CGPoint(x: 243.25, y: 161.25))
        star10Path.addLine(to: CGPoint(x: 243.85, y: 163.65))
        star10Path.addLine(to: CGPoint(x: 246.25, y: 164.25))
        star10Path.addLine(to: CGPoint(x: 243.85, y: 164.85))
        star10Path.addLine(to: CGPoint(x: 243.25, y: 167.25))
        star10Path.addLine(to: CGPoint(x: 242.65, y: 164.85))
        star10Path.addLine(to: CGPoint(x: 240.25, y: 164.25))
        star10Path.addLine(to: CGPoint(x: 242.65, y: 163.65))
        star10Path.close()
        context.saveGState()
        star10Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 243.16, y: 164.33), startRadius: 0,
            endCenter: CGPoint(x: 243.16, y: 164.33), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 12
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 11 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star11Path = UIBezierPath()
        star11Path.move(to: CGPoint(x: 273.25, y: 21.25))
        star11Path.addLine(to: CGPoint(x: 273.85, y: 23.65))
        star11Path.addLine(to: CGPoint(x: 276.25, y: 24.25))
        star11Path.addLine(to: CGPoint(x: 273.85, y: 24.85))
        star11Path.addLine(to: CGPoint(x: 273.25, y: 27.25))
        star11Path.addLine(to: CGPoint(x: 272.65, y: 24.85))
        star11Path.addLine(to: CGPoint(x: 270.25, y: 24.25))
        star11Path.addLine(to: CGPoint(x: 272.65, y: 23.65))
        star11Path.close()
        context.saveGState()
        star11Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 273.15, y: 24.33), startRadius: 0,
            endCenter: CGPoint(x: 273.15, y: 24.33), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 13
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 12 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star12Path = UIBezierPath()
        star12Path.move(to: CGPoint(x: 33.25, y: 51.25))
        star12Path.addLine(to: CGPoint(x: 33.85, y: 53.65))
        star12Path.addLine(to: CGPoint(x: 36.25, y: 54.25))
        star12Path.addLine(to: CGPoint(x: 33.85, y: 54.85))
        star12Path.addLine(to: CGPoint(x: 33.25, y: 57.25))
        star12Path.addLine(to: CGPoint(x: 32.65, y: 54.85))
        star12Path.addLine(to: CGPoint(x: 30.25, y: 54.25))
        star12Path.addLine(to: CGPoint(x: 32.65, y: 53.65))
        star12Path.close()
        context.saveGState()
        star12Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 33.16, y: 54.33), startRadius: 0,
            endCenter: CGPoint(x: 33.16, y: 54.33), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 14
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 13 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star13Path = UIBezierPath()
        star13Path.move(to: CGPoint(x: 73.25, y: 31.25))
        star13Path.addLine(to: CGPoint(x: 73.85, y: 33.65))
        star13Path.addLine(to: CGPoint(x: 76.25, y: 34.25))
        star13Path.addLine(to: CGPoint(x: 73.85, y: 34.85))
        star13Path.addLine(to: CGPoint(x: 73.25, y: 37.25))
        star13Path.addLine(to: CGPoint(x: 72.65, y: 34.85))
        star13Path.addLine(to: CGPoint(x: 70.25, y: 34.25))
        star13Path.addLine(to: CGPoint(x: 72.65, y: 33.65))
        star13Path.close()
        context.saveGState()
        star13Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 73.16, y: 34.33), startRadius: 0,
            endCenter: CGPoint(x: 73.16, y: 34.33), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 15
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 14 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star14Path = UIBezierPath()
        star14Path.move(to: CGPoint(x: 54.65, y: 122.65))
        star14Path.addLine(to: CGPoint(x: 55.43, y: 125.87))
        star14Path.addLine(to: CGPoint(x: 58.65, y: 126.65))
        star14Path.addLine(to: CGPoint(x: 55.43, y: 127.43))
        star14Path.addLine(to: CGPoint(x: 54.65, y: 130.65))
        star14Path.addLine(to: CGPoint(x: 53.87, y: 127.43))
        star14Path.addLine(to: CGPoint(x: 50.65, y: 126.65))
        star14Path.addLine(to: CGPoint(x: 53.87, y: 125.87))
        star14Path.close()
        context.saveGState()
        star14Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 54.54, y: 126.77), startRadius: 0,
            endCenter: CGPoint(x: 54.54, y: 126.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 16
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 15 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star15Path = UIBezierPath()
        star15Path.move(to: CGPoint(x: 78.65, y: 162.65))
        star15Path.addLine(to: CGPoint(x: 79.43, y: 165.87))
        star15Path.addLine(to: CGPoint(x: 82.65, y: 166.65))
        star15Path.addLine(to: CGPoint(x: 79.43, y: 167.43))
        star15Path.addLine(to: CGPoint(x: 78.65, y: 170.65))
        star15Path.addLine(to: CGPoint(x: 77.87, y: 167.43))
        star15Path.addLine(to: CGPoint(x: 74.65, y: 166.65))
        star15Path.addLine(to: CGPoint(x: 77.87, y: 165.87))
        star15Path.close()
        context.saveGState()
        star15Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 78.54, y: 166.77), startRadius: 0,
            endCenter: CGPoint(x: 78.54, y: 166.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 17
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 16 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star16Path = UIBezierPath()
        star16Path.move(to: CGPoint(x: 56.65, y: 192.65))
        star16Path.addLine(to: CGPoint(x: 57.43, y: 195.87))
        star16Path.addLine(to: CGPoint(x: 60.65, y: 196.65))
        star16Path.addLine(to: CGPoint(x: 57.43, y: 197.43))
        star16Path.addLine(to: CGPoint(x: 56.65, y: 200.65))
        star16Path.addLine(to: CGPoint(x: 55.87, y: 197.43))
        star16Path.addLine(to: CGPoint(x: 52.65, y: 196.65))
        star16Path.addLine(to: CGPoint(x: 55.87, y: 195.87))
        star16Path.close()
        context.saveGState()
        star16Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 56.54, y: 196.77), startRadius: 0,
            endCenter: CGPoint(x: 56.54, y: 196.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 18
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 17 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star17Path = UIBezierPath()
        star17Path.move(to: CGPoint(x: 206.65, y: 186.65))
        star17Path.addLine(to: CGPoint(x: 207.43, y: 189.87))
        star17Path.addLine(to: CGPoint(x: 210.65, y: 190.65))
        star17Path.addLine(to: CGPoint(x: 207.43, y: 191.43))
        star17Path.addLine(to: CGPoint(x: 206.65, y: 194.65))
        star17Path.addLine(to: CGPoint(x: 205.87, y: 191.43))
        star17Path.addLine(to: CGPoint(x: 202.65, y: 190.65))
        star17Path.addLine(to: CGPoint(x: 205.87, y: 189.87))
        star17Path.close()
        context.saveGState()
        star17Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 206.54, y: 190.77), startRadius: 0,
            endCenter: CGPoint(x: 206.54, y: 190.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 19
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 18 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star18Path = UIBezierPath()
        star18Path.move(to: CGPoint(x: 326.65, y: 134.65))
        star18Path.addLine(to: CGPoint(x: 327.43, y: 137.87))
        star18Path.addLine(to: CGPoint(x: 330.65, y: 138.65))
        star18Path.addLine(to: CGPoint(x: 327.43, y: 139.43))
        star18Path.addLine(to: CGPoint(x: 326.65, y: 142.65))
        star18Path.addLine(to: CGPoint(x: 325.87, y: 139.43))
        star18Path.addLine(to: CGPoint(x: 322.65, y: 138.65))
        star18Path.addLine(to: CGPoint(x: 325.87, y: 137.87))
        star18Path.close()
        context.saveGState()
        star18Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 326.54, y: 138.77), startRadius: 0,
            endCenter: CGPoint(x: 326.54, y: 138.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 20
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 19 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star19Path = UIBezierPath()
        star19Path.move(to: CGPoint(x: 299.65, y: 96.65))
        star19Path.addLine(to: CGPoint(x: 300.43, y: 99.87))
        star19Path.addLine(to: CGPoint(x: 303.65, y: 100.65))
        star19Path.addLine(to: CGPoint(x: 300.43, y: 101.43))
        star19Path.addLine(to: CGPoint(x: 299.65, y: 104.65))
        star19Path.addLine(to: CGPoint(x: 298.87, y: 101.43))
        star19Path.addLine(to: CGPoint(x: 295.65, y: 100.65))
        star19Path.addLine(to: CGPoint(x: 298.87, y: 99.87))
        star19Path.close()
        context.saveGState()
        star19Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 299.54, y: 100.77), startRadius: 0,
            endCenter: CGPoint(x: 299.54, y: 100.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 21
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 20 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star20Path = UIBezierPath()
        star20Path.move(to: CGPoint(x: 202.65, y: 128.65))
        star20Path.addLine(to: CGPoint(x: 203.43, y: 131.87))
        star20Path.addLine(to: CGPoint(x: 206.65, y: 132.65))
        star20Path.addLine(to: CGPoint(x: 203.43, y: 133.43))
        star20Path.addLine(to: CGPoint(x: 202.65, y: 136.65))
        star20Path.addLine(to: CGPoint(x: 201.87, y: 133.43))
        star20Path.addLine(to: CGPoint(x: 198.65, y: 132.65))
        star20Path.addLine(to: CGPoint(x: 201.87, y: 131.87))
        star20Path.close()
        context.saveGState()
        star20Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 202.54, y: 132.77), startRadius: 0,
            endCenter: CGPoint(x: 202.54, y: 132.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 22
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 21 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star21Path = UIBezierPath()
        star21Path.move(to: CGPoint(x: 322.65, y: 39.65))
        star21Path.addLine(to: CGPoint(x: 323.43, y: 42.87))
        star21Path.addLine(to: CGPoint(x: 326.65, y: 43.65))
        star21Path.addLine(to: CGPoint(x: 323.43, y: 44.43))
        star21Path.addLine(to: CGPoint(x: 322.65, y: 47.65))
        star21Path.addLine(to: CGPoint(x: 321.87, y: 44.43))
        star21Path.addLine(to: CGPoint(x: 318.65, y: 43.65))
        star21Path.addLine(to: CGPoint(x: 321.87, y: 42.87))
        star21Path.close()
        context.saveGState()
        star21Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 322.54, y: 43.77), startRadius: 0,
            endCenter: CGPoint(x: 322.54, y: 43.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 23
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 22 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star22Path = UIBezierPath()
        star22Path.move(to: CGPoint(x: 266.25, y: 122.25))
        star22Path.addLine(to: CGPoint(x: 266.85, y: 124.65))
        star22Path.addLine(to: CGPoint(x: 269.25, y: 125.25))
        star22Path.addLine(to: CGPoint(x: 266.85, y: 125.85))
        star22Path.addLine(to: CGPoint(x: 266.25, y: 128.25))
        star22Path.addLine(to: CGPoint(x: 265.65, y: 125.85))
        star22Path.addLine(to: CGPoint(x: 263.25, y: 125.25))
        star22Path.addLine(to: CGPoint(x: 265.65, y: 124.65))
        star22Path.close()
        context.saveGState()
        star22Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 266.15, y: 125.33), startRadius: 0,
            endCenter: CGPoint(x: 266.15, y: 125.33), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 24
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 23 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star23Path = UIBezierPath()
        star23Path.move(to: CGPoint(x: 125.25, y: 143.25))
        star23Path.addLine(to: CGPoint(x: 125.85, y: 145.65))
        star23Path.addLine(to: CGPoint(x: 128.25, y: 146.25))
        star23Path.addLine(to: CGPoint(x: 125.85, y: 146.85))
        star23Path.addLine(to: CGPoint(x: 125.25, y: 149.25))
        star23Path.addLine(to: CGPoint(x: 124.65, y: 146.85))
        star23Path.addLine(to: CGPoint(x: 122.25, y: 146.25))
        star23Path.addLine(to: CGPoint(x: 124.65, y: 145.65))
        star23Path.close()
        context.saveGState()
        star23Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 125.16, y: 146.33), startRadius: 0,
            endCenter: CGPoint(x: 125.16, y: 146.33), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 25
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 24 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star24Path = UIBezierPath()
        star24Path.move(to: CGPoint(x: 163.25, y: 161.25))
        star24Path.addLine(to: CGPoint(x: 163.85, y: 163.65))
        star24Path.addLine(to: CGPoint(x: 166.25, y: 164.25))
        star24Path.addLine(to: CGPoint(x: 163.85, y: 164.85))
        star24Path.addLine(to: CGPoint(x: 163.25, y: 167.25))
        star24Path.addLine(to: CGPoint(x: 162.65, y: 164.85))
        star24Path.addLine(to: CGPoint(x: 160.25, y: 164.25))
        star24Path.addLine(to: CGPoint(x: 162.65, y: 163.65))
        star24Path.close()
        context.saveGState()
        star24Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 163.16, y: 164.33), startRadius: 0,
            endCenter: CGPoint(x: 163.16, y: 164.33), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 26
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 25 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star25Path = UIBezierPath()
        star25Path.move(to: CGPoint(x: 243.25, y: 161.25))
        star25Path.addLine(to: CGPoint(x: 243.85, y: 163.65))
        star25Path.addLine(to: CGPoint(x: 246.25, y: 164.25))
        star25Path.addLine(to: CGPoint(x: 243.85, y: 164.85))
        star25Path.addLine(to: CGPoint(x: 243.25, y: 167.25))
        star25Path.addLine(to: CGPoint(x: 242.65, y: 164.85))
        star25Path.addLine(to: CGPoint(x: 240.25, y: 164.25))
        star25Path.addLine(to: CGPoint(x: 242.65, y: 163.65))
        star25Path.close()
        context.saveGState()
        star25Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 243.16, y: 164.33), startRadius: 0,
            endCenter: CGPoint(x: 243.16, y: 164.33), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 27
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 26 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star26Path = UIBezierPath()
        star26Path.move(to: CGPoint(x: 273.25, y: 21.25))
        star26Path.addLine(to: CGPoint(x: 273.85, y: 23.65))
        star26Path.addLine(to: CGPoint(x: 276.25, y: 24.25))
        star26Path.addLine(to: CGPoint(x: 273.85, y: 24.85))
        star26Path.addLine(to: CGPoint(x: 273.25, y: 27.25))
        star26Path.addLine(to: CGPoint(x: 272.65, y: 24.85))
        star26Path.addLine(to: CGPoint(x: 270.25, y: 24.25))
        star26Path.addLine(to: CGPoint(x: 272.65, y: 23.65))
        star26Path.close()
        context.saveGState()
        star26Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 273.15, y: 24.33), startRadius: 0,
            endCenter: CGPoint(x: 273.15, y: 24.33), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 28
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 27 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star27Path = UIBezierPath()
        star27Path.move(to: CGPoint(x: 33.25, y: 51.25))
        star27Path.addLine(to: CGPoint(x: 33.85, y: 53.65))
        star27Path.addLine(to: CGPoint(x: 36.25, y: 54.25))
        star27Path.addLine(to: CGPoint(x: 33.85, y: 54.85))
        star27Path.addLine(to: CGPoint(x: 33.25, y: 57.25))
        star27Path.addLine(to: CGPoint(x: 32.65, y: 54.85))
        star27Path.addLine(to: CGPoint(x: 30.25, y: 54.25))
        star27Path.addLine(to: CGPoint(x: 32.65, y: 53.65))
        star27Path.close()
        context.saveGState()
        star27Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 33.16, y: 54.33), startRadius: 0,
            endCenter: CGPoint(x: 33.16, y: 54.33), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 29
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 28 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star28Path = UIBezierPath()
        star28Path.move(to: CGPoint(x: 73.25, y: 31.25))
        star28Path.addLine(to: CGPoint(x: 73.85, y: 33.65))
        star28Path.addLine(to: CGPoint(x: 76.25, y: 34.25))
        star28Path.addLine(to: CGPoint(x: 73.85, y: 34.85))
        star28Path.addLine(to: CGPoint(x: 73.25, y: 37.25))
        star28Path.addLine(to: CGPoint(x: 72.65, y: 34.85))
        star28Path.addLine(to: CGPoint(x: 70.25, y: 34.25))
        star28Path.addLine(to: CGPoint(x: 72.65, y: 33.65))
        star28Path.close()
        context.saveGState()
        star28Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 73.16, y: 34.33), startRadius: 0,
            endCenter: CGPoint(x: 73.16, y: 34.33), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 30
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 29 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star29Path = UIBezierPath()
        star29Path.move(to: CGPoint(x: 54.65, y: 122.65))
        star29Path.addLine(to: CGPoint(x: 55.43, y: 125.87))
        star29Path.addLine(to: CGPoint(x: 58.65, y: 126.65))
        star29Path.addLine(to: CGPoint(x: 55.43, y: 127.43))
        star29Path.addLine(to: CGPoint(x: 54.65, y: 130.65))
        star29Path.addLine(to: CGPoint(x: 53.87, y: 127.43))
        star29Path.addLine(to: CGPoint(x: 50.65, y: 126.65))
        star29Path.addLine(to: CGPoint(x: 53.87, y: 125.87))
        star29Path.close()
        context.saveGState()
        star29Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 54.54, y: 126.77), startRadius: 0,
            endCenter: CGPoint(x: 54.54, y: 126.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 31
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 30 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star30Path = UIBezierPath()
        star30Path.move(to: CGPoint(x: 78.65, y: 162.65))
        star30Path.addLine(to: CGPoint(x: 79.43, y: 165.87))
        star30Path.addLine(to: CGPoint(x: 82.65, y: 166.65))
        star30Path.addLine(to: CGPoint(x: 79.43, y: 167.43))
        star30Path.addLine(to: CGPoint(x: 78.65, y: 170.65))
        star30Path.addLine(to: CGPoint(x: 77.87, y: 167.43))
        star30Path.addLine(to: CGPoint(x: 74.65, y: 166.65))
        star30Path.addLine(to: CGPoint(x: 77.87, y: 165.87))
        star30Path.close()
        context.saveGState()
        star30Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 78.54, y: 166.77), startRadius: 0,
            endCenter: CGPoint(x: 78.54, y: 166.77), endRadius: 4.43,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 32
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 31 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star31Path = UIBezierPath()
        star31Path.move(to: CGPoint(x: 56.65, y: 192.65))
        star31Path.addLine(to: CGPoint(x: 57.43, y: 195.87))
        star31Path.addLine(to: CGPoint(x: 60.65, y: 196.65))
        star31Path.addLine(to: CGPoint(x: 57.43, y: 197.43))
        star31Path.addLine(to: CGPoint(x: 56.65, y: 200.65))
        star31Path.addLine(to: CGPoint(x: 55.87, y: 197.43))
        star31Path.addLine(to: CGPoint(x: 52.65, y: 196.65))
        star31Path.addLine(to: CGPoint(x: 55.87, y: 195.87))
        star31Path.close()
        context.saveGState()
        star31Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 56.54, y: 196.77), startRadius: 0,
            endCenter: CGPoint(x: 56.54, y: 196.77), endRadius: 1.87,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 33
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 32 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star32Path = UIBezierPath()
        star32Path.move(to: CGPoint(x: 206.65, y: 186.65))
        star32Path.addLine(to: CGPoint(x: 207.43, y: 189.87))
        star32Path.addLine(to: CGPoint(x: 210.65, y: 190.65))
        star32Path.addLine(to: CGPoint(x: 207.43, y: 191.43))
        star32Path.addLine(to: CGPoint(x: 206.65, y: 194.65))
        star32Path.addLine(to: CGPoint(x: 205.87, y: 191.43))
        star32Path.addLine(to: CGPoint(x: 202.65, y: 190.65))
        star32Path.addLine(to: CGPoint(x: 205.87, y: 189.87))
        star32Path.close()
        context.saveGState()
        star32Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 206.54, y: 190.77), startRadius: 0,
            endCenter: CGPoint(x: 206.54, y: 190.77), endRadius: 1.87,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 34
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 33 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star33Path = UIBezierPath()
        star33Path.move(to: CGPoint(x: 326.65, y: 134.65))
        star33Path.addLine(to: CGPoint(x: 327.43, y: 137.87))
        star33Path.addLine(to: CGPoint(x: 330.65, y: 138.65))
        star33Path.addLine(to: CGPoint(x: 327.43, y: 139.43))
        star33Path.addLine(to: CGPoint(x: 326.65, y: 142.65))
        star33Path.addLine(to: CGPoint(x: 325.87, y: 139.43))
        star33Path.addLine(to: CGPoint(x: 322.65, y: 138.65))
        star33Path.addLine(to: CGPoint(x: 325.87, y: 137.87))
        star33Path.close()
        context.saveGState()
        star33Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 326.54, y: 138.77), startRadius: 0,
            endCenter: CGPoint(x: 326.54, y: 138.77), endRadius: 1.87,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 35
        context.saveGState()
        context.translateBy(x: 288.65, y: 98.65)
        context.rotate(by: -390.46 * CGFloat.pi/180)

        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 34 Drawing
        context.saveGState()
        context.scaleBy(x: scaleStar3, y: scaleStar3)

        context.saveGState()
        context.setBlendMode(.hardLight)

        let star34Path = UIBezierPath()
        star34Path.move(to: CGPoint(x: 0, y: -4))
        star34Path.addLine(to: CGPoint(x: 0.78, y: -0.78))
        star34Path.addLine(to: CGPoint(x: 4, y: 0))
        star34Path.addLine(to: CGPoint(x: 0.78, y: 0.78))
        star34Path.addLine(to: CGPoint(x: 0, y: 4))
        star34Path.addLine(to: CGPoint(x: -0.78, y: 0.78))
        star34Path.addLine(to: CGPoint(x: -4, y: 0))
        star34Path.addLine(to: CGPoint(x: -0.78, y: -0.78))
        star34Path.close()
        context.saveGState()
        star34Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: -0.11, y: 0.12), startRadius: 0,
            endCenter: CGPoint(x: -0.11, y: 0.12), endRadius: 1.87,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()

        context.restoreGState()


        //// Group 36
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 35 Drawing
        context.saveGState()
        context.translateBy(x: 193.15, y: 127.35)
        context.rotate(by: -211.67 * CGFloat.pi/180)
        context.scaleBy(x: scaleStar2, y: scaleStar2)

        context.saveGState()
        context.setBlendMode(.hardLight)

        let star35Path = UIBezierPath()
        star35Path.move(to: CGPoint(x: 0, y: -4))
        star35Path.addLine(to: CGPoint(x: 0.78, y: -0.78))
        star35Path.addLine(to: CGPoint(x: 4, y: 0))
        star35Path.addLine(to: CGPoint(x: 0.78, y: 0.78))
        star35Path.addLine(to: CGPoint(x: 0, y: 4))
        star35Path.addLine(to: CGPoint(x: -0.78, y: 0.78))
        star35Path.addLine(to: CGPoint(x: -4, y: 0))
        star35Path.addLine(to: CGPoint(x: -0.78, y: -0.78))
        star35Path.close()
        context.saveGState()
        star35Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: -0.11, y: 0.12), startRadius: 0,
            endCenter: CGPoint(x: -0.11, y: 0.12), endRadius: 1.87,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 37
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 36 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star36Path = UIBezierPath()
        star36Path.move(to: CGPoint(x: 322.65, y: 39.65))
        star36Path.addLine(to: CGPoint(x: 323.43, y: 42.87))
        star36Path.addLine(to: CGPoint(x: 326.65, y: 43.65))
        star36Path.addLine(to: CGPoint(x: 323.43, y: 44.43))
        star36Path.addLine(to: CGPoint(x: 322.65, y: 47.65))
        star36Path.addLine(to: CGPoint(x: 321.87, y: 44.43))
        star36Path.addLine(to: CGPoint(x: 318.65, y: 43.65))
        star36Path.addLine(to: CGPoint(x: 321.87, y: 42.87))
        star36Path.close()
        context.saveGState()
        star36Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 322.54, y: 43.77), startRadius: 0,
            endCenter: CGPoint(x: 322.54, y: 43.77), endRadius: 1.87,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 38
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 37 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star37Path = UIBezierPath()
        star37Path.move(to: CGPoint(x: 266.25, y: 122.25))
        star37Path.addLine(to: CGPoint(x: 266.85, y: 124.65))
        star37Path.addLine(to: CGPoint(x: 269.25, y: 125.25))
        star37Path.addLine(to: CGPoint(x: 266.85, y: 125.85))
        star37Path.addLine(to: CGPoint(x: 266.25, y: 128.25))
        star37Path.addLine(to: CGPoint(x: 265.65, y: 125.85))
        star37Path.addLine(to: CGPoint(x: 263.25, y: 125.25))
        star37Path.addLine(to: CGPoint(x: 265.65, y: 124.65))
        star37Path.close()
        context.saveGState()
        star37Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 266.15, y: 125.33), startRadius: 0,
            endCenter: CGPoint(x: 266.15, y: 125.33), endRadius: 1.4,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 39
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 38 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star38Path = UIBezierPath()
        star38Path.move(to: CGPoint(x: 125.25, y: 143.25))
        star38Path.addLine(to: CGPoint(x: 125.85, y: 145.65))
        star38Path.addLine(to: CGPoint(x: 128.25, y: 146.25))
        star38Path.addLine(to: CGPoint(x: 125.85, y: 146.85))
        star38Path.addLine(to: CGPoint(x: 125.25, y: 149.25))
        star38Path.addLine(to: CGPoint(x: 124.65, y: 146.85))
        star38Path.addLine(to: CGPoint(x: 122.25, y: 146.25))
        star38Path.addLine(to: CGPoint(x: 124.65, y: 145.65))
        star38Path.close()
        context.saveGState()
        star38Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 125.16, y: 146.33), startRadius: 0,
            endCenter: CGPoint(x: 125.16, y: 146.33), endRadius: 1.4,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 40
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 39 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star39Path = UIBezierPath()
        star39Path.move(to: CGPoint(x: 163.25, y: 161.25))
        star39Path.addLine(to: CGPoint(x: 163.85, y: 163.65))
        star39Path.addLine(to: CGPoint(x: 166.25, y: 164.25))
        star39Path.addLine(to: CGPoint(x: 163.85, y: 164.85))
        star39Path.addLine(to: CGPoint(x: 163.25, y: 167.25))
        star39Path.addLine(to: CGPoint(x: 162.65, y: 164.85))
        star39Path.addLine(to: CGPoint(x: 160.25, y: 164.25))
        star39Path.addLine(to: CGPoint(x: 162.65, y: 163.65))
        star39Path.close()
        context.saveGState()
        star39Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 163.16, y: 164.33), startRadius: 0,
            endCenter: CGPoint(x: 163.16, y: 164.33), endRadius: 1.4,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 41
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 40 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star40Path = UIBezierPath()
        star40Path.move(to: CGPoint(x: 243.25, y: 161.25))
        star40Path.addLine(to: CGPoint(x: 243.85, y: 163.65))
        star40Path.addLine(to: CGPoint(x: 246.25, y: 164.25))
        star40Path.addLine(to: CGPoint(x: 243.85, y: 164.85))
        star40Path.addLine(to: CGPoint(x: 243.25, y: 167.25))
        star40Path.addLine(to: CGPoint(x: 242.65, y: 164.85))
        star40Path.addLine(to: CGPoint(x: 240.25, y: 164.25))
        star40Path.addLine(to: CGPoint(x: 242.65, y: 163.65))
        star40Path.close()
        context.saveGState()
        star40Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 243.16, y: 164.33), startRadius: 0,
            endCenter: CGPoint(x: 243.16, y: 164.33), endRadius: 1.4,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 42
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 41 Drawing
        context.saveGState()
        context.translateBy(x: 273.25, y: 24.25)
        context.scaleBy(x: scaleStar4, y: scaleStar4)

        context.saveGState()
        context.setBlendMode(.hardLight)

        let star41Path = UIBezierPath()
        star41Path.move(to: CGPoint(x: 0, y: -3))
        star41Path.addLine(to: CGPoint(x: 0.6, y: -0.6))
        star41Path.addLine(to: CGPoint(x: 3, y: 0))
        star41Path.addLine(to: CGPoint(x: 0.6, y: 0.6))
        star41Path.addLine(to: CGPoint(x: 0, y: 3))
        star41Path.addLine(to: CGPoint(x: -0.6, y: 0.6))
        star41Path.addLine(to: CGPoint(x: -3, y: 0))
        star41Path.addLine(to: CGPoint(x: -0.6, y: -0.6))
        star41Path.close()
        context.saveGState()
        star41Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: -0.1, y: 0.08), startRadius: 0,
            endCenter: CGPoint(x: -0.1, y: 0.08), endRadius: 1.4,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 43
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 42 Drawing
        context.saveGState()
        context.translateBy(x: 33.92, y: 53.37)
        context.rotate(by: -719.26 * CGFloat.pi/180)
        context.scaleBy(x: scaleStar1, y: scaleStar1)

        context.saveGState()
        context.setBlendMode(.hardLight)

        let star42Path = UIBezierPath()
        star42Path.move(to: CGPoint(x: 0.06, y: -3.12))
        star42Path.addLine(to: CGPoint(x: 0.66, y: -0.72))
        star42Path.addLine(to: CGPoint(x: 3.06, y: -0.12))
        star42Path.addLine(to: CGPoint(x: 0.66, y: 0.48))
        star42Path.addLine(to: CGPoint(x: 0.06, y: 2.88))
        star42Path.addLine(to: CGPoint(x: -0.54, y: 0.48))
        star42Path.addLine(to: CGPoint(x: -2.94, y: -0.12))
        star42Path.addLine(to: CGPoint(x: -0.54, y: -0.72))
        star42Path.close()
        context.saveGState()
        star42Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: -0.04, y: -0.04), startRadius: 0,
            endCenter: CGPoint(x: -0.04, y: -0.04), endRadius: 1.4,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 44
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 43 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star43Path = UIBezierPath()
        star43Path.move(to: CGPoint(x: 73.25, y: 31.25))
        star43Path.addLine(to: CGPoint(x: 73.85, y: 33.65))
        star43Path.addLine(to: CGPoint(x: 76.25, y: 34.25))
        star43Path.addLine(to: CGPoint(x: 73.85, y: 34.85))
        star43Path.addLine(to: CGPoint(x: 73.25, y: 37.25))
        star43Path.addLine(to: CGPoint(x: 72.65, y: 34.85))
        star43Path.addLine(to: CGPoint(x: 70.25, y: 34.25))
        star43Path.addLine(to: CGPoint(x: 72.65, y: 33.65))
        star43Path.close()
        context.saveGState()
        star43Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 73.16, y: 34.33), startRadius: 0,
            endCenter: CGPoint(x: 73.16, y: 34.33), endRadius: 1.4,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 45
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 44 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star44Path = UIBezierPath()
        star44Path.move(to: CGPoint(x: 54.65, y: 122.65))
        star44Path.addLine(to: CGPoint(x: 55.43, y: 125.87))
        star44Path.addLine(to: CGPoint(x: 58.65, y: 126.65))
        star44Path.addLine(to: CGPoint(x: 55.43, y: 127.43))
        star44Path.addLine(to: CGPoint(x: 54.65, y: 130.65))
        star44Path.addLine(to: CGPoint(x: 53.87, y: 127.43))
        star44Path.addLine(to: CGPoint(x: 50.65, y: 126.65))
        star44Path.addLine(to: CGPoint(x: 53.87, y: 125.87))
        star44Path.close()
        context.saveGState()
        star44Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 54.54, y: 126.77), startRadius: 0,
            endCenter: CGPoint(x: 54.54, y: 126.77), endRadius: 1.87,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 46
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 45 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star45Path = UIBezierPath()
        star45Path.move(to: CGPoint(x: 78.65, y: 162.65))
        star45Path.addLine(to: CGPoint(x: 79.43, y: 165.87))
        star45Path.addLine(to: CGPoint(x: 82.65, y: 166.65))
        star45Path.addLine(to: CGPoint(x: 79.43, y: 167.43))
        star45Path.addLine(to: CGPoint(x: 78.65, y: 170.65))
        star45Path.addLine(to: CGPoint(x: 77.87, y: 167.43))
        star45Path.addLine(to: CGPoint(x: 74.65, y: 166.65))
        star45Path.addLine(to: CGPoint(x: 77.87, y: 165.87))
        star45Path.close()
        context.saveGState()
        star45Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 78.54, y: 166.77), startRadius: 0,
            endCenter: CGPoint(x: 78.54, y: 166.77), endRadius: 1.87,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawRobot(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit, robotHeight: CGFloat = 75, robotTake: CGFloat = 24, robotReachOut: CGFloat = 29) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 375, resizedFrame.height / 667)


        //// Color Declarations
        let strokeColor = UIColor(red: 0.000, green: 0.820, blue: 1.000, alpha: 1.000)
        let gradientColor25 = UIColor(red: 0.992, green: 0.898, blue: 0.576, alpha: 1.000)
        let gradientColor26 = UIColor(red: 1.000, green: 0.878, blue: 0.529, alpha: 1.000)
        let gradientColor27 = UIColor(red: 1.000, green: 0.902, blue: 0.537, alpha: 1.000)
        let gradientColor28 = UIColor(red: 0.984, green: 0.698, blue: 0.337, alpha: 1.000)
        let gradientColor29 = UIColor(red: 0.643, green: 0.294, blue: 0.047, alpha: 1.000)
        let gradientColor30 = UIColor(red: 0.514, green: 0.196, blue: 0.024, alpha: 1.000)
        let gradientColor31 = UIColor(red: 0.439, green: 0.145, blue: 0.024, alpha: 1.000)
        let gradientColor32 = UIColor(red: 0.486, green: 0.180, blue: 0.035, alpha: 1.000)
        let gradientColor33 = UIColor(red: 0.776, green: 0.408, blue: 0.122, alpha: 1.000)
        let gradientColor34 = UIColor(red: 0.992, green: 0.596, blue: 0.192, alpha: 1.000)
        let gradientColor35 = UIColor(red: 1.000, green: 0.635, blue: 0.208, alpha: 1.000)
        let gradientColor36 = UIColor(red: 0.945, green: 0.533, blue: 0.169, alpha: 1.000)
        let gradientColor37 = UIColor(red: 0.580, green: 0.251, blue: 0.063, alpha: 1.000)
        let gradientColor38 = UIColor(red: 0.427, green: 0.141, blue: 0.020, alpha: 1.000)
        let color4 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let color5 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let color6 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let color7 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let color8 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Gradient Declarations
        let kMyMoney_iconCanvasgbezier36 = CGGradient(colorsSpace: nil, colors: [gradientColor25.cgColor, gradientColor26.cgColor, gradientColor27.cgColor, gradientColor28.cgColor, gradientColor29.cgColor, gradientColor30.cgColor, gradientColor31.cgColor, gradientColor31.cgColor, gradientColor32.cgColor, gradientColor33.cgColor, gradientColor34.cgColor, gradientColor35.cgColor, gradientColor36.cgColor, gradientColor37.cgColor, gradientColor38.cgColor] as CFArray, locations: [0, 0.1, 0.2, 0.28, 0.41, 0.48, 0.55, 0.58, 0.61, 0.66, 0.7, 0.78, 0.85, 0.91, 1])!

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black
        shadow.shadowOffset = CGSize(width: 2, height: -2)
        shadow.shadowBlurRadius = 5
        let shadow2 = NSShadow()
        shadow2.shadowColor = UIColor.black
        shadow2.shadowOffset = CGSize(width: 3, height: 4)
        shadow2.shadowBlurRadius = 5
        let shadow3 = NSShadow()
        shadow3.shadowColor = TBMStyleKit.gradientColor2
        shadow3.shadowOffset = CGSize(width: 0, height: 0)
        shadow3.shadowBlurRadius = 5

        //// Variable Declarations
        let expression: CGFloat = robotHeight + 1
        let robotBallHeight: CGFloat = robotHeight - 5
        let robotUpperFingerHeight: CGFloat = robotHeight + 6 - robotTake
        let robotLowerFingerHeight: CGFloat = robotHeight - 10 + robotTake
        let robotBallVisible = robotTake <= 24
        let robotBallX: CGFloat = robotReachOut + 28

        //// Rectangle Drawing
        context.saveGState()
        context.translateBy(x: -115, y: robotHeight)

        let rectanglePath = UIBezierPath(rect: CGRect(x: 122, y: -7, width: robotReachOut, height: 7))
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow2.shadowOffset.width * resizedShadowScale, height: shadow2.shadowOffset.height * resizedShadowScale), blur: shadow2.shadowBlurRadius * resizedShadowScale, color: (shadow2.shadowColor as! UIColor).cgColor)
        color5.setFill()
        rectanglePath.fill()
        context.restoreGState()


        context.restoreGState()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: -102, y: 223)


        context.restoreGState()


        //// Rectangle 3 Drawing
        context.saveGState()
        context.translateBy(x: (robotReachOut - 2), y: robotUpperFingerHeight)

        let rectangle3Path = UIBezierPath()
        rectangle3Path.move(to: CGPoint(x: 0, y: 6))
        rectangle3Path.addLine(to: CGPoint(x: 32, y: 6))
        rectangle3Path.addLine(to: CGPoint(x: 26, y: 0))
        rectangle3Path.addLine(to: CGPoint(x: 0, y: 0))
        rectangle3Path.addLine(to: CGPoint(x: 0, y: 6))
        rectangle3Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow2.shadowOffset.width * resizedShadowScale, height: shadow2.shadowOffset.height * resizedShadowScale), blur: shadow2.shadowBlurRadius * resizedShadowScale, color: (shadow2.shadowColor as! UIColor).cgColor)
        color6.setFill()
        rectangle3Path.fill()
        context.restoreGState()


        context.restoreGState()


        //// Rectangle 4 Drawing
        context.saveGState()
        context.translateBy(x: (robotReachOut - 2), y: (robotLowerFingerHeight - 6))

        let rectangle4Path = UIBezierPath()
        rectangle4Path.move(to: CGPoint(x: 0, y: 6))
        rectangle4Path.addLine(to: CGPoint(x: 28, y: 6))
        rectangle4Path.addLine(to: CGPoint(x: 32, y: 0))
        rectangle4Path.addLine(to: CGPoint(x: 0, y: 0))
        rectangle4Path.addLine(to: CGPoint(x: 0, y: 6))
        rectangle4Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow2.shadowOffset.width * resizedShadowScale, height: shadow2.shadowOffset.height * resizedShadowScale), blur: shadow2.shadowBlurRadius * resizedShadowScale, color: (shadow2.shadowColor as! UIColor).cgColor)
        color8.setFill()
        rectangle4Path.fill()
        context.restoreGState()


        context.restoreGState()


        if (robotBallVisible) {
            //// Oval Drawing
            let ovalRect = CGRect(x: (robotBallX - 7), y: (robotBallHeight - 4), width: 15, height: 15)
            let ovalPath = UIBezierPath(ovalIn: ovalRect)
            context.saveGState()
            ovalPath.addClip()
            context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
                start: CGPoint(x: ovalRect.midX, y: ovalRect.minY),
                end: CGPoint(x: ovalRect.midX, y: ovalRect.maxY),
                options: [])
            context.restoreGState()
        }


        //// Oval 2 Drawing
        context.saveGState()
        context.translateBy(x: 0, y: robotHeight)

        let oval2Path = UIBezierPath(ovalIn: CGRect(x: -9, y: -14, width: 25, height: 21))
        color4.setFill()
        oval2Path.fill()

        context.restoreGState()


        //// Rectangle 5 Drawing
        context.saveGState()
        context.translateBy(x: robotReachOut, y: (robotHeight - 1.75))

        let rectangle5Path = UIBezierPath(rect: CGRect(x: -2, y: -18.75, width: 4, height: 37.5))
        color7.setFill()
        rectangle5Path.fill()

        context.restoreGState()


        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 2.72, y: (robotHeight - 6))

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 1.69, y: 0))
        bezierPath.addLine(to: CGPoint(x: 5.08, y: 0))
        bezierPath.addLine(to: CGPoint(x: 6.78, y: 2.67))
        bezierPath.addLine(to: CGPoint(x: 5.08, y: 5.34))
        bezierPath.addLine(to: CGPoint(x: 1.69, y: 5.34))
        bezierPath.addLine(to: CGPoint(x: 0, y: 2.67))
        bezierPath.addLine(to: CGPoint(x: 1.69, y: 0))
        bezierPath.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow3.shadowOffset.width * resizedShadowScale, height: shadow3.shadowOffset.height * resizedShadowScale), blur: shadow3.shadowBlurRadius * resizedShadowScale, color: (shadow3.shadowColor as! UIColor).cgColor)
        TBMStyleKit.gradientColor2.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.miterLimit = 4
        bezierPath.stroke()
        context.restoreGState()

        context.restoreGState()


        //// Bezier 2 Drawing
        context.saveGState()
        context.translateBy(x: (robotReachOut - 1.5), y: (robotHeight - 5.5))

        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 1.25, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 3.75, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 5, y: 2))
        bezier2Path.addLine(to: CGPoint(x: 3.75, y: 4))
        bezier2Path.addLine(to: CGPoint(x: 1.25, y: 4))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 2))
        bezier2Path.addLine(to: CGPoint(x: 1.25, y: 0))
        bezier2Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow3.shadowOffset.width * resizedShadowScale, height: shadow3.shadowOffset.height * resizedShadowScale), blur: shadow3.shadowBlurRadius * resizedShadowScale, color: (shadow3.shadowColor as! UIColor).cgColor)
        strokeColor.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.miterLimit = 4
        bezier2Path.stroke()
        context.restoreGState()

        context.restoreGState()


        if (robotBallVisible) {
            //// Oval 3 Drawing
            let oval3Rect = CGRect(x: (robotBallX - 5), y: (robotBallHeight - 2), width: 11, height: 11)
            let oval3Path = UIBezierPath(ovalIn: oval3Rect)
            context.saveGState()
            oval3Path.addClip()
            context.drawLinearGradient(kMyMoney_iconCanvasgbezier36,
                start: CGPoint(x: oval3Rect.midX, y: oval3Rect.minY),
                end: CGPoint(x: oval3Rect.midX, y: oval3Rect.maxY),
                options: [])
            context.restoreGState()

            ////// Oval 3 Inner Shadow
            context.saveGState()
            context.clip(to: oval3Path.bounds)
            context.setShadow(offset: CGSize.zero, blur: 0)
            context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let oval3OpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
            context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: oval3OpaqueShadow.cgColor)
            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            oval3OpaqueShadow.setFill()
            oval3Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            context.restoreGState()

        }
        
        context.restoreGState()

    }

    @objc dynamic public class func drawFinishWave(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit, scaleStar1: CGFloat = 1, scaleStar2: CGFloat = 1, scaleStar3: CGFloat = 1, scaleStar4: CGFloat = 1, finishStrokeY: CGFloat = 523, finishStrokeY2: CGFloat = 347) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 375, resizedFrame.height / 667)


        //// Color Declarations
        let strokeColor3 = UIColor(red: 0.114, green: 0.322, blue: 0.600, alpha: 1.000)
        let gradientColor18 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let gradientColor19 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.010)
        let fillColor5 = UIColor(red: 0.141, green: 0.082, blue: 0.424, alpha: 1.000)
        let paint0_linear6Color = UIColor(red: 0.126, green: 0.017, blue: 0.950, alpha: 1.000)
        let paint0_linear6Color2 = UIColor(red: 0.049, green: 0.028, blue: 0.422, alpha: 1.000)
        let color15 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Gradient Declarations
        let paint8_radial = CGGradient(colorsSpace: nil, colors: [gradientColor18.cgColor, gradientColor19.cgColor] as CFArray, locations: [0, 1])!
        let paint0_linear6 = CGGradient(colorsSpace: nil, colors: [paint0_linear6Color.cgColor, paint0_linear6Color.blended(withFraction: 0.5, of: paint0_linear6Color2).cgColor, paint0_linear6Color2.cgColor] as CFArray, locations: [0, 0.51, 1])!

        //// Shadow Declarations
        let shadow2 = NSShadow()
        shadow2.shadowColor = UIColor.black
        shadow2.shadowOffset = CGSize(width: 3, height: 4)
        shadow2.shadowBlurRadius = 5

        //// Group
        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: -2, y: -25.68))
        bezier3Path.addCurve(to: CGPoint(x: 374, y: -26), controlPoint1: CGPoint(x: 369.41, y: -24.39), controlPoint2: CGPoint(x: 374, y: -26))
        bezier3Path.addLine(to: CGPoint(x: 374, y: 267))
        bezier3Path.addLine(to: CGPoint(x: -1.49, y: 267))
        bezier3Path.addLine(to: CGPoint(x: -2, y: -25.68))
        context.saveGState()
        bezier3Path.addClip()
        context.drawLinearGradient(paint0_linear6, start: CGPoint(x: 186, y: 267), end: CGPoint(x: 186, y: -26), options: [])
        context.restoreGState()


        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Group 3
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let starPath = UIBezierPath()
        starPath.move(to: CGPoint(x: 57.65, y: 147.65))
        starPath.addLine(to: CGPoint(x: 58.23, y: 150.07))
        starPath.addLine(to: CGPoint(x: 60.65, y: 150.65))
        starPath.addLine(to: CGPoint(x: 58.23, y: 151.23))
        starPath.addLine(to: CGPoint(x: 57.65, y: 153.65))
        starPath.addLine(to: CGPoint(x: 57.07, y: 151.23))
        starPath.addLine(to: CGPoint(x: 54.65, y: 150.65))
        starPath.addLine(to: CGPoint(x: 57.07, y: 150.07))
        starPath.close()
        context.saveGState()
        starPath.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 57.57, y: 150.74), startRadius: 0,
            endCenter: CGPoint(x: 57.57, y: 150.74), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 4
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 2 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star2Path = UIBezierPath()
        star2Path.move(to: CGPoint(x: 162.65, y: 142.65))
        star2Path.addLine(to: CGPoint(x: 163.23, y: 145.07))
        star2Path.addLine(to: CGPoint(x: 165.65, y: 145.65))
        star2Path.addLine(to: CGPoint(x: 163.23, y: 146.23))
        star2Path.addLine(to: CGPoint(x: 162.65, y: 148.65))
        star2Path.addLine(to: CGPoint(x: 162.07, y: 146.23))
        star2Path.addLine(to: CGPoint(x: 159.65, y: 145.65))
        star2Path.addLine(to: CGPoint(x: 162.07, y: 145.07))
        star2Path.close()
        context.saveGState()
        star2Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 162.57, y: 145.74), startRadius: 0,
            endCenter: CGPoint(x: 162.57, y: 145.74), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 5
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 3 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star3Path = UIBezierPath()
        star3Path.move(to: CGPoint(x: 247.15, y: 106.65))
        star3Path.addLine(to: CGPoint(x: 247.64, y: 108.66))
        star3Path.addLine(to: CGPoint(x: 249.65, y: 109.15))
        star3Path.addLine(to: CGPoint(x: 247.64, y: 109.64))
        star3Path.addLine(to: CGPoint(x: 247.15, y: 111.65))
        star3Path.addLine(to: CGPoint(x: 246.66, y: 109.64))
        star3Path.addLine(to: CGPoint(x: 244.65, y: 109.15))
        star3Path.addLine(to: CGPoint(x: 246.66, y: 108.66))
        star3Path.close()
        context.saveGState()
        star3Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 247.08, y: 109.23), startRadius: 0,
            endCenter: CGPoint(x: 247.08, y: 109.23), endRadius: 2.77,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 6
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 5 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star5Path = UIBezierPath()
        star5Path.move(to: CGPoint(x: 160.15, y: 104.65))
        star5Path.addLine(to: CGPoint(x: 160.64, y: 106.26))
        star5Path.addLine(to: CGPoint(x: 162.65, y: 106.65))
        star5Path.addLine(to: CGPoint(x: 160.64, y: 107.04))
        star5Path.addLine(to: CGPoint(x: 160.15, y: 108.65))
        star5Path.addLine(to: CGPoint(x: 159.66, y: 107.04))
        star5Path.addLine(to: CGPoint(x: 157.65, y: 106.65))
        star5Path.addLine(to: CGPoint(x: 159.66, y: 106.26))
        star5Path.close()
        context.saveGState()
        star5Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 160.09, y: 106.72), startRadius: 0,
            endCenter: CGPoint(x: 160.09, y: 106.72), endRadius: 2.51,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 7
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 6 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star6Path = UIBezierPath()
        star6Path.move(to: CGPoint(x: 242.65, y: 41.65))
        star6Path.addLine(to: CGPoint(x: 243.23, y: 43.66))
        star6Path.addLine(to: CGPoint(x: 245.65, y: 44.15))
        star6Path.addLine(to: CGPoint(x: 243.23, y: 44.64))
        star6Path.addLine(to: CGPoint(x: 242.65, y: 46.65))
        star6Path.addLine(to: CGPoint(x: 242.07, y: 44.64))
        star6Path.addLine(to: CGPoint(x: 239.65, y: 44.15))
        star6Path.addLine(to: CGPoint(x: 242.07, y: 43.66))
        star6Path.close()
        context.saveGState()
        star6Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 242.57, y: 44.23), startRadius: 0,
            endCenter: CGPoint(x: 242.57, y: 44.23), endRadius: 3.06,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 8
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 7 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star7Path = UIBezierPath()
        star7Path.move(to: CGPoint(x: 203.75, y: 100.25))
        star7Path.addLine(to: CGPoint(x: 204.25, y: 101.85))
        star7Path.addLine(to: CGPoint(x: 206.25, y: 102.25))
        star7Path.addLine(to: CGPoint(x: 204.25, y: 102.65))
        star7Path.addLine(to: CGPoint(x: 203.75, y: 104.25))
        star7Path.addLine(to: CGPoint(x: 203.25, y: 102.65))
        star7Path.addLine(to: CGPoint(x: 201.25, y: 102.25))
        star7Path.addLine(to: CGPoint(x: 203.25, y: 101.85))
        star7Path.close()
        context.saveGState()
        star7Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 203.68, y: 102.31), startRadius: 0,
            endCenter: CGPoint(x: 203.68, y: 102.31), endRadius: 2.51,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 9
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 8 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star8Path = UIBezierPath()
        star8Path.move(to: CGPoint(x: 106.25, y: 112.25))
        star8Path.addLine(to: CGPoint(x: 106.65, y: 114.25))
        star8Path.addLine(to: CGPoint(x: 108.25, y: 114.75))
        star8Path.addLine(to: CGPoint(x: 106.65, y: 115.25))
        star8Path.addLine(to: CGPoint(x: 106.25, y: 117.25))
        star8Path.addLine(to: CGPoint(x: 105.85, y: 115.25))
        star8Path.addLine(to: CGPoint(x: 104.25, y: 114.75))
        star8Path.addLine(to: CGPoint(x: 105.85, y: 114.25))
        star8Path.close()
        context.saveGState()
        star8Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 106.18, y: 114.81), startRadius: 0,
            endCenter: CGPoint(x: 106.18, y: 114.81), endRadius: 2.51,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 10
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 9 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star9Path = UIBezierPath()
        star9Path.move(to: CGPoint(x: 132.25, y: 126.25))
        star9Path.addLine(to: CGPoint(x: 132.65, y: 127.85))
        star9Path.addLine(to: CGPoint(x: 134.25, y: 128.25))
        star9Path.addLine(to: CGPoint(x: 132.65, y: 128.65))
        star9Path.addLine(to: CGPoint(x: 132.25, y: 130.25))
        star9Path.addLine(to: CGPoint(x: 131.85, y: 128.65))
        star9Path.addLine(to: CGPoint(x: 130.25, y: 128.25))
        star9Path.addLine(to: CGPoint(x: 131.85, y: 127.85))
        star9Path.close()
        context.saveGState()
        star9Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 132.19, y: 128.3), startRadius: 0,
            endCenter: CGPoint(x: 132.19, y: 128.3), endRadius: 2.21,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 11
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 10 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star10Path = UIBezierPath()
        star10Path.move(to: CGPoint(x: 187.75, y: 126.25))
        star10Path.addLine(to: CGPoint(x: 188.25, y: 127.85))
        star10Path.addLine(to: CGPoint(x: 190.25, y: 128.25))
        star10Path.addLine(to: CGPoint(x: 188.25, y: 128.65))
        star10Path.addLine(to: CGPoint(x: 187.75, y: 130.25))
        star10Path.addLine(to: CGPoint(x: 187.25, y: 128.65))
        star10Path.addLine(to: CGPoint(x: 185.25, y: 128.25))
        star10Path.addLine(to: CGPoint(x: 187.25, y: 127.85))
        star10Path.close()
        context.saveGState()
        star10Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 187.68, y: 128.31), startRadius: 0,
            endCenter: CGPoint(x: 187.68, y: 128.31), endRadius: 2.51,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 12
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 11 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star11Path = UIBezierPath()
        star11Path.move(to: CGPoint(x: 209.25, y: 29.25))
        star11Path.addLine(to: CGPoint(x: 209.65, y: 31.25))
        star11Path.addLine(to: CGPoint(x: 211.25, y: 31.75))
        star11Path.addLine(to: CGPoint(x: 209.65, y: 32.25))
        star11Path.addLine(to: CGPoint(x: 209.25, y: 34.25))
        star11Path.addLine(to: CGPoint(x: 208.85, y: 32.25))
        star11Path.addLine(to: CGPoint(x: 207.25, y: 31.75))
        star11Path.addLine(to: CGPoint(x: 208.85, y: 31.25))
        star11Path.close()
        context.saveGState()
        star11Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 209.18, y: 31.81), startRadius: 0,
            endCenter: CGPoint(x: 209.18, y: 31.81), endRadius: 2.51,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 13
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 12 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star12Path = UIBezierPath()
        star12Path.move(to: CGPoint(x: 41.25, y: 50.25))
        star12Path.addLine(to: CGPoint(x: 41.65, y: 51.85))
        star12Path.addLine(to: CGPoint(x: 43.25, y: 52.25))
        star12Path.addLine(to: CGPoint(x: 41.65, y: 52.65))
        star12Path.addLine(to: CGPoint(x: 41.25, y: 54.25))
        star12Path.addLine(to: CGPoint(x: 40.85, y: 52.65))
        star12Path.addLine(to: CGPoint(x: 39.25, y: 52.25))
        star12Path.addLine(to: CGPoint(x: 40.85, y: 51.85))
        star12Path.close()
        context.saveGState()
        star12Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 41.19, y: 52.3), startRadius: 0,
            endCenter: CGPoint(x: 41.19, y: 52.3), endRadius: 2.21,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 14
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 13 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star13Path = UIBezierPath()
        star13Path.move(to: CGPoint(x: 69.25, y: 35.25))
        star13Path.addLine(to: CGPoint(x: 69.65, y: 37.25))
        star13Path.addLine(to: CGPoint(x: 71.25, y: 37.75))
        star13Path.addLine(to: CGPoint(x: 69.65, y: 38.25))
        star13Path.addLine(to: CGPoint(x: 69.25, y: 40.25))
        star13Path.addLine(to: CGPoint(x: 68.85, y: 38.25))
        star13Path.addLine(to: CGPoint(x: 67.25, y: 37.75))
        star13Path.addLine(to: CGPoint(x: 68.85, y: 37.25))
        star13Path.close()
        context.saveGState()
        star13Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 69.18, y: 37.81), startRadius: 0,
            endCenter: CGPoint(x: 69.18, y: 37.81), endRadius: 2.51,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 15
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 14 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star14Path = UIBezierPath()
        star14Path.move(to: CGPoint(x: 56.65, y: 100.65))
        star14Path.addLine(to: CGPoint(x: 57.23, y: 102.66))
        star14Path.addLine(to: CGPoint(x: 59.65, y: 103.15))
        star14Path.addLine(to: CGPoint(x: 57.23, y: 103.64))
        star14Path.addLine(to: CGPoint(x: 56.65, y: 105.65))
        star14Path.addLine(to: CGPoint(x: 56.07, y: 103.64))
        star14Path.addLine(to: CGPoint(x: 53.65, y: 103.15))
        star14Path.addLine(to: CGPoint(x: 56.07, y: 102.66))
        star14Path.close()
        context.saveGState()
        star14Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 56.57, y: 103.23), startRadius: 0,
            endCenter: CGPoint(x: 56.57, y: 103.23), endRadius: 3.06,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 16
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 15 Drawing
        context.saveGState()
        context.setBlendMode(.overlay)

        let star15Path = UIBezierPath()
        star15Path.move(to: CGPoint(x: 73.15, y: 127.65))
        star15Path.addLine(to: CGPoint(x: 73.83, y: 129.66))
        star15Path.addLine(to: CGPoint(x: 76.65, y: 130.15))
        star15Path.addLine(to: CGPoint(x: 73.83, y: 130.64))
        star15Path.addLine(to: CGPoint(x: 73.15, y: 132.65))
        star15Path.addLine(to: CGPoint(x: 72.47, y: 130.64))
        star15Path.addLine(to: CGPoint(x: 69.65, y: 130.15))
        star15Path.addLine(to: CGPoint(x: 72.47, y: 129.66))
        star15Path.close()
        context.saveGState()
        star15Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 73.07, y: 130.24), startRadius: 0,
            endCenter: CGPoint(x: 73.07, y: 130.24), endRadius: 3.37,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 17
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 16 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star16Path = UIBezierPath()
        star16Path.move(to: CGPoint(x: 57.65, y: 147.65))
        star16Path.addLine(to: CGPoint(x: 58.23, y: 150.07))
        star16Path.addLine(to: CGPoint(x: 60.65, y: 150.65))
        star16Path.addLine(to: CGPoint(x: 58.23, y: 151.23))
        star16Path.addLine(to: CGPoint(x: 57.65, y: 153.65))
        star16Path.addLine(to: CGPoint(x: 57.07, y: 151.23))
        star16Path.addLine(to: CGPoint(x: 54.65, y: 150.65))
        star16Path.addLine(to: CGPoint(x: 57.07, y: 150.07))
        star16Path.close()
        context.saveGState()
        star16Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 57.57, y: 150.74), startRadius: 0,
            endCenter: CGPoint(x: 57.57, y: 150.74), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 18
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 17 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star17Path = UIBezierPath()
        star17Path.move(to: CGPoint(x: 162.65, y: 142.65))
        star17Path.addLine(to: CGPoint(x: 163.23, y: 145.07))
        star17Path.addLine(to: CGPoint(x: 165.65, y: 145.65))
        star17Path.addLine(to: CGPoint(x: 163.23, y: 146.23))
        star17Path.addLine(to: CGPoint(x: 162.65, y: 148.65))
        star17Path.addLine(to: CGPoint(x: 162.07, y: 146.23))
        star17Path.addLine(to: CGPoint(x: 159.65, y: 145.65))
        star17Path.addLine(to: CGPoint(x: 162.07, y: 145.07))
        star17Path.close()
        context.saveGState()
        star17Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 162.57, y: 145.74), startRadius: 0,
            endCenter: CGPoint(x: 162.57, y: 145.74), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 19
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 18 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star18Path = UIBezierPath()
        star18Path.move(to: CGPoint(x: 247.15, y: 106.65))
        star18Path.addLine(to: CGPoint(x: 247.64, y: 108.66))
        star18Path.addLine(to: CGPoint(x: 249.65, y: 109.15))
        star18Path.addLine(to: CGPoint(x: 247.64, y: 109.64))
        star18Path.addLine(to: CGPoint(x: 247.15, y: 111.65))
        star18Path.addLine(to: CGPoint(x: 246.66, y: 109.64))
        star18Path.addLine(to: CGPoint(x: 244.65, y: 109.15))
        star18Path.addLine(to: CGPoint(x: 246.66, y: 108.66))
        star18Path.close()
        context.saveGState()
        star18Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 247.08, y: 109.23), startRadius: 0,
            endCenter: CGPoint(x: 247.08, y: 109.23), endRadius: 2.77,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 20
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 19 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star19Path = UIBezierPath()
        star19Path.move(to: CGPoint(x: 227.65, y: 81.65))
        star19Path.addLine(to: CGPoint(x: 228.23, y: 84.07))
        star19Path.addLine(to: CGPoint(x: 230.65, y: 84.65))
        star19Path.addLine(to: CGPoint(x: 228.23, y: 85.23))
        star19Path.addLine(to: CGPoint(x: 227.65, y: 87.65))
        star19Path.addLine(to: CGPoint(x: 227.07, y: 85.23))
        star19Path.addLine(to: CGPoint(x: 224.65, y: 84.65))
        star19Path.addLine(to: CGPoint(x: 227.07, y: 84.07))
        star19Path.close()
        context.saveGState()
        star19Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 227.57, y: 84.74), startRadius: 0,
            endCenter: CGPoint(x: 227.57, y: 84.74), endRadius: 3.32,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 21
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 20 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star20Path = UIBezierPath()
        star20Path.move(to: CGPoint(x: 160.15, y: 104.65))
        star20Path.addLine(to: CGPoint(x: 160.64, y: 106.26))
        star20Path.addLine(to: CGPoint(x: 162.65, y: 106.65))
        star20Path.addLine(to: CGPoint(x: 160.64, y: 107.04))
        star20Path.addLine(to: CGPoint(x: 160.15, y: 108.65))
        star20Path.addLine(to: CGPoint(x: 159.66, y: 107.04))
        star20Path.addLine(to: CGPoint(x: 157.65, y: 106.65))
        star20Path.addLine(to: CGPoint(x: 159.66, y: 106.26))
        star20Path.close()
        context.saveGState()
        star20Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 160.09, y: 106.72), startRadius: 0,
            endCenter: CGPoint(x: 160.09, y: 106.72), endRadius: 2.51,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 22
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 21 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star21Path = UIBezierPath()
        star21Path.move(to: CGPoint(x: 242.65, y: 41.65))
        star21Path.addLine(to: CGPoint(x: 243.23, y: 43.66))
        star21Path.addLine(to: CGPoint(x: 245.65, y: 44.15))
        star21Path.addLine(to: CGPoint(x: 243.23, y: 44.64))
        star21Path.addLine(to: CGPoint(x: 242.65, y: 46.65))
        star21Path.addLine(to: CGPoint(x: 242.07, y: 44.64))
        star21Path.addLine(to: CGPoint(x: 239.65, y: 44.15))
        star21Path.addLine(to: CGPoint(x: 242.07, y: 43.66))
        star21Path.close()
        context.saveGState()
        star21Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 242.57, y: 44.23), startRadius: 0,
            endCenter: CGPoint(x: 242.57, y: 44.23), endRadius: 3.06,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 23
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 22 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star22Path = UIBezierPath()
        star22Path.move(to: CGPoint(x: 203.75, y: 100.25))
        star22Path.addLine(to: CGPoint(x: 204.25, y: 101.85))
        star22Path.addLine(to: CGPoint(x: 206.25, y: 102.25))
        star22Path.addLine(to: CGPoint(x: 204.25, y: 102.65))
        star22Path.addLine(to: CGPoint(x: 203.75, y: 104.25))
        star22Path.addLine(to: CGPoint(x: 203.25, y: 102.65))
        star22Path.addLine(to: CGPoint(x: 201.25, y: 102.25))
        star22Path.addLine(to: CGPoint(x: 203.25, y: 101.85))
        star22Path.close()
        context.saveGState()
        star22Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 203.68, y: 102.31), startRadius: 0,
            endCenter: CGPoint(x: 203.68, y: 102.31), endRadius: 2.51,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 24
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 23 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star23Path = UIBezierPath()
        star23Path.move(to: CGPoint(x: 106.25, y: 112.25))
        star23Path.addLine(to: CGPoint(x: 106.65, y: 114.25))
        star23Path.addLine(to: CGPoint(x: 108.25, y: 114.75))
        star23Path.addLine(to: CGPoint(x: 106.65, y: 115.25))
        star23Path.addLine(to: CGPoint(x: 106.25, y: 117.25))
        star23Path.addLine(to: CGPoint(x: 105.85, y: 115.25))
        star23Path.addLine(to: CGPoint(x: 104.25, y: 114.75))
        star23Path.addLine(to: CGPoint(x: 105.85, y: 114.25))
        star23Path.close()
        context.saveGState()
        star23Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 106.18, y: 114.81), startRadius: 0,
            endCenter: CGPoint(x: 106.18, y: 114.81), endRadius: 2.51,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 25
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 24 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star24Path = UIBezierPath()
        star24Path.move(to: CGPoint(x: 132.25, y: 126.25))
        star24Path.addLine(to: CGPoint(x: 132.65, y: 127.85))
        star24Path.addLine(to: CGPoint(x: 134.25, y: 128.25))
        star24Path.addLine(to: CGPoint(x: 132.65, y: 128.65))
        star24Path.addLine(to: CGPoint(x: 132.25, y: 130.25))
        star24Path.addLine(to: CGPoint(x: 131.85, y: 128.65))
        star24Path.addLine(to: CGPoint(x: 130.25, y: 128.25))
        star24Path.addLine(to: CGPoint(x: 131.85, y: 127.85))
        star24Path.close()
        context.saveGState()
        star24Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 132.19, y: 128.3), startRadius: 0,
            endCenter: CGPoint(x: 132.19, y: 128.3), endRadius: 2.21,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 26
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 25 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star25Path = UIBezierPath()
        star25Path.move(to: CGPoint(x: 187.75, y: 126.25))
        star25Path.addLine(to: CGPoint(x: 188.25, y: 127.85))
        star25Path.addLine(to: CGPoint(x: 190.25, y: 128.25))
        star25Path.addLine(to: CGPoint(x: 188.25, y: 128.65))
        star25Path.addLine(to: CGPoint(x: 187.75, y: 130.25))
        star25Path.addLine(to: CGPoint(x: 187.25, y: 128.65))
        star25Path.addLine(to: CGPoint(x: 185.25, y: 128.25))
        star25Path.addLine(to: CGPoint(x: 187.25, y: 127.85))
        star25Path.close()
        context.saveGState()
        star25Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 187.68, y: 128.31), startRadius: 0,
            endCenter: CGPoint(x: 187.68, y: 128.31), endRadius: 2.51,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 27
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 26 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star26Path = UIBezierPath()
        star26Path.move(to: CGPoint(x: 209.25, y: 29.25))
        star26Path.addLine(to: CGPoint(x: 209.65, y: 31.25))
        star26Path.addLine(to: CGPoint(x: 211.25, y: 31.75))
        star26Path.addLine(to: CGPoint(x: 209.65, y: 32.25))
        star26Path.addLine(to: CGPoint(x: 209.25, y: 34.25))
        star26Path.addLine(to: CGPoint(x: 208.85, y: 32.25))
        star26Path.addLine(to: CGPoint(x: 207.25, y: 31.75))
        star26Path.addLine(to: CGPoint(x: 208.85, y: 31.25))
        star26Path.close()
        context.saveGState()
        star26Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 209.18, y: 31.81), startRadius: 0,
            endCenter: CGPoint(x: 209.18, y: 31.81), endRadius: 2.51,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 28
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 27 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star27Path = UIBezierPath()
        star27Path.move(to: CGPoint(x: 41.25, y: 50.25))
        star27Path.addLine(to: CGPoint(x: 41.65, y: 51.85))
        star27Path.addLine(to: CGPoint(x: 43.25, y: 52.25))
        star27Path.addLine(to: CGPoint(x: 41.65, y: 52.65))
        star27Path.addLine(to: CGPoint(x: 41.25, y: 54.25))
        star27Path.addLine(to: CGPoint(x: 40.85, y: 52.65))
        star27Path.addLine(to: CGPoint(x: 39.25, y: 52.25))
        star27Path.addLine(to: CGPoint(x: 40.85, y: 51.85))
        star27Path.close()
        context.saveGState()
        star27Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 41.19, y: 52.3), startRadius: 0,
            endCenter: CGPoint(x: 41.19, y: 52.3), endRadius: 2.21,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 29
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 28 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star28Path = UIBezierPath()
        star28Path.move(to: CGPoint(x: 69.25, y: 35.25))
        star28Path.addLine(to: CGPoint(x: 69.65, y: 37.25))
        star28Path.addLine(to: CGPoint(x: 71.25, y: 37.75))
        star28Path.addLine(to: CGPoint(x: 69.65, y: 38.25))
        star28Path.addLine(to: CGPoint(x: 69.25, y: 40.25))
        star28Path.addLine(to: CGPoint(x: 68.85, y: 38.25))
        star28Path.addLine(to: CGPoint(x: 67.25, y: 37.75))
        star28Path.addLine(to: CGPoint(x: 68.85, y: 37.25))
        star28Path.close()
        context.saveGState()
        star28Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 69.18, y: 37.81), startRadius: 0,
            endCenter: CGPoint(x: 69.18, y: 37.81), endRadius: 2.51,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 30
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 29 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star29Path = UIBezierPath()
        star29Path.move(to: CGPoint(x: 56.65, y: 100.65))
        star29Path.addLine(to: CGPoint(x: 57.23, y: 102.66))
        star29Path.addLine(to: CGPoint(x: 59.65, y: 103.15))
        star29Path.addLine(to: CGPoint(x: 57.23, y: 103.64))
        star29Path.addLine(to: CGPoint(x: 56.65, y: 105.65))
        star29Path.addLine(to: CGPoint(x: 56.07, y: 103.64))
        star29Path.addLine(to: CGPoint(x: 53.65, y: 103.15))
        star29Path.addLine(to: CGPoint(x: 56.07, y: 102.66))
        star29Path.close()
        context.saveGState()
        star29Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 56.57, y: 103.23), startRadius: 0,
            endCenter: CGPoint(x: 56.57, y: 103.23), endRadius: 3.06,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 31
        context.saveGState()
        context.setAlpha(0.31)
        context.setBlendMode(.screen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 30 Drawing
        context.saveGState()
        context.setBlendMode(.screen)

        let star30Path = UIBezierPath()
        star30Path.move(to: CGPoint(x: 73.15, y: 127.65))
        star30Path.addLine(to: CGPoint(x: 73.83, y: 129.66))
        star30Path.addLine(to: CGPoint(x: 76.65, y: 130.15))
        star30Path.addLine(to: CGPoint(x: 73.83, y: 130.64))
        star30Path.addLine(to: CGPoint(x: 73.15, y: 132.65))
        star30Path.addLine(to: CGPoint(x: 72.47, y: 130.64))
        star30Path.addLine(to: CGPoint(x: 69.65, y: 130.15))
        star30Path.addLine(to: CGPoint(x: 72.47, y: 129.66))
        star30Path.close()
        context.saveGState()
        star30Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 73.07, y: 130.24), startRadius: 0,
            endCenter: CGPoint(x: 73.07, y: 130.24), endRadius: 3.37,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 32
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 31 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star31Path = UIBezierPath()
        star31Path.move(to: CGPoint(x: 57.65, y: 147.65))
        star31Path.addLine(to: CGPoint(x: 58.23, y: 150.07))
        star31Path.addLine(to: CGPoint(x: 60.65, y: 150.65))
        star31Path.addLine(to: CGPoint(x: 58.23, y: 151.23))
        star31Path.addLine(to: CGPoint(x: 57.65, y: 153.65))
        star31Path.addLine(to: CGPoint(x: 57.07, y: 151.23))
        star31Path.addLine(to: CGPoint(x: 54.65, y: 150.65))
        star31Path.addLine(to: CGPoint(x: 57.07, y: 150.07))
        star31Path.close()
        context.saveGState()
        star31Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 57.57, y: 150.74), startRadius: 0,
            endCenter: CGPoint(x: 57.57, y: 150.74), endRadius: 1.4,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 33
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 32 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star32Path = UIBezierPath()
        star32Path.move(to: CGPoint(x: 162.65, y: 142.65))
        star32Path.addLine(to: CGPoint(x: 163.23, y: 145.07))
        star32Path.addLine(to: CGPoint(x: 165.65, y: 145.65))
        star32Path.addLine(to: CGPoint(x: 163.23, y: 146.23))
        star32Path.addLine(to: CGPoint(x: 162.65, y: 148.65))
        star32Path.addLine(to: CGPoint(x: 162.07, y: 146.23))
        star32Path.addLine(to: CGPoint(x: 159.65, y: 145.65))
        star32Path.addLine(to: CGPoint(x: 162.07, y: 145.07))
        star32Path.close()
        context.saveGState()
        star32Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 162.57, y: 145.74), startRadius: 0,
            endCenter: CGPoint(x: 162.57, y: 145.74), endRadius: 1.4,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 34
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 33 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star33Path = UIBezierPath()
        star33Path.move(to: CGPoint(x: 247.15, y: 106.65))
        star33Path.addLine(to: CGPoint(x: 247.64, y: 108.66))
        star33Path.addLine(to: CGPoint(x: 249.65, y: 109.15))
        star33Path.addLine(to: CGPoint(x: 247.64, y: 109.64))
        star33Path.addLine(to: CGPoint(x: 247.15, y: 111.65))
        star33Path.addLine(to: CGPoint(x: 246.66, y: 109.64))
        star33Path.addLine(to: CGPoint(x: 244.65, y: 109.15))
        star33Path.addLine(to: CGPoint(x: 246.66, y: 108.66))
        star33Path.close()
        context.saveGState()
        star33Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 247.08, y: 109.23), startRadius: 0,
            endCenter: CGPoint(x: 247.08, y: 109.23), endRadius: 1.17,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 35
        context.saveGState()
        context.translateBy(x: 327.65, y: 98.65)
        context.rotate(by: -390.46 * CGFloat.pi/180)

        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 34 Drawing
        context.saveGState()
        context.translateBy(x: -85.12, y: -68.3)
        context.scaleBy(x: scaleStar3, y: scaleStar3)

        context.saveGState()
        context.setBlendMode(.hardLight)

        let star34Path = UIBezierPath()
        star34Path.move(to: CGPoint(x: 0, y: -2.77))
        star34Path.addLine(to: CGPoint(x: 0.54, y: -0.54))
        star34Path.addLine(to: CGPoint(x: 2.78, y: 0))
        star34Path.addLine(to: CGPoint(x: 0.54, y: 0.54))
        star34Path.addLine(to: CGPoint(x: 0, y: 2.77))
        star34Path.addLine(to: CGPoint(x: -0.54, y: 0.54))
        star34Path.addLine(to: CGPoint(x: -2.78, y: 0))
        star34Path.addLine(to: CGPoint(x: -0.54, y: -0.54))
        star34Path.close()
        context.saveGState()
        star34Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: -0.08, y: 0.09), startRadius: 0,
            endCenter: CGPoint(x: -0.08, y: 0.09), endRadius: 1.3,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()

        context.restoreGState()


        //// Group 36
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 35 Drawing
        context.saveGState()
        context.translateBy(x: 155.52, y: 105.67)
        context.rotate(by: -211.67 * CGFloat.pi/180)
        context.scaleBy(x: scaleStar2, y: scaleStar2)

        context.saveGState()
        context.setBlendMode(.hardLight)

        let star35Path = UIBezierPath()
        star35Path.move(to: CGPoint(x: 0, y: -3))
        star35Path.addLine(to: CGPoint(x: 0.58, y: -0.58))
        star35Path.addLine(to: CGPoint(x: 3, y: 0))
        star35Path.addLine(to: CGPoint(x: 0.58, y: 0.58))
        star35Path.addLine(to: CGPoint(x: 0, y: 3))
        star35Path.addLine(to: CGPoint(x: -0.58, y: 0.58))
        star35Path.addLine(to: CGPoint(x: -3, y: 0))
        star35Path.addLine(to: CGPoint(x: -0.58, y: -0.58))
        star35Path.close()
        context.saveGState()
        star35Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: -0.08, y: 0.09), startRadius: 0,
            endCenter: CGPoint(x: -0.08, y: 0.09), endRadius: 1.4,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 37
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 36 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star36Path = UIBezierPath()
        star36Path.move(to: CGPoint(x: 242.65, y: 41.65))
        star36Path.addLine(to: CGPoint(x: 243.23, y: 43.66))
        star36Path.addLine(to: CGPoint(x: 245.65, y: 44.15))
        star36Path.addLine(to: CGPoint(x: 243.23, y: 44.64))
        star36Path.addLine(to: CGPoint(x: 242.65, y: 46.65))
        star36Path.addLine(to: CGPoint(x: 242.07, y: 44.64))
        star36Path.addLine(to: CGPoint(x: 239.65, y: 44.15))
        star36Path.addLine(to: CGPoint(x: 242.07, y: 43.66))
        star36Path.close()
        context.saveGState()
        star36Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 242.57, y: 44.23), startRadius: 0,
            endCenter: CGPoint(x: 242.57, y: 44.23), endRadius: 1.29,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 38
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 37 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star37Path = UIBezierPath()
        star37Path.move(to: CGPoint(x: 203.75, y: 100.25))
        star37Path.addLine(to: CGPoint(x: 204.25, y: 101.85))
        star37Path.addLine(to: CGPoint(x: 206.25, y: 102.25))
        star37Path.addLine(to: CGPoint(x: 204.25, y: 102.65))
        star37Path.addLine(to: CGPoint(x: 203.75, y: 104.25))
        star37Path.addLine(to: CGPoint(x: 203.25, y: 102.65))
        star37Path.addLine(to: CGPoint(x: 201.25, y: 102.25))
        star37Path.addLine(to: CGPoint(x: 203.25, y: 101.85))
        star37Path.close()
        context.saveGState()
        star37Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 203.68, y: 102.31), startRadius: 0,
            endCenter: CGPoint(x: 203.68, y: 102.31), endRadius: 1.06,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 39
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 38 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star38Path = UIBezierPath()
        star38Path.move(to: CGPoint(x: 106.25, y: 112.25))
        star38Path.addLine(to: CGPoint(x: 106.65, y: 114.25))
        star38Path.addLine(to: CGPoint(x: 108.25, y: 114.75))
        star38Path.addLine(to: CGPoint(x: 106.65, y: 115.25))
        star38Path.addLine(to: CGPoint(x: 106.25, y: 117.25))
        star38Path.addLine(to: CGPoint(x: 105.85, y: 115.25))
        star38Path.addLine(to: CGPoint(x: 104.25, y: 114.75))
        star38Path.addLine(to: CGPoint(x: 105.85, y: 114.25))
        star38Path.close()
        context.saveGState()
        star38Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 106.18, y: 114.81), startRadius: 0,
            endCenter: CGPoint(x: 106.18, y: 114.81), endRadius: 1.06,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 40
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 39 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star39Path = UIBezierPath()
        star39Path.move(to: CGPoint(x: 132.25, y: 126.25))
        star39Path.addLine(to: CGPoint(x: 132.65, y: 127.85))
        star39Path.addLine(to: CGPoint(x: 134.25, y: 128.25))
        star39Path.addLine(to: CGPoint(x: 132.65, y: 128.65))
        star39Path.addLine(to: CGPoint(x: 132.25, y: 130.25))
        star39Path.addLine(to: CGPoint(x: 131.85, y: 128.65))
        star39Path.addLine(to: CGPoint(x: 130.25, y: 128.25))
        star39Path.addLine(to: CGPoint(x: 131.85, y: 127.85))
        star39Path.close()
        context.saveGState()
        star39Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 132.19, y: 128.3), startRadius: 0,
            endCenter: CGPoint(x: 132.19, y: 128.3), endRadius: 0.93,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 41
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 40 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star40Path = UIBezierPath()
        star40Path.move(to: CGPoint(x: 187.75, y: 126.25))
        star40Path.addLine(to: CGPoint(x: 188.25, y: 127.85))
        star40Path.addLine(to: CGPoint(x: 190.25, y: 128.25))
        star40Path.addLine(to: CGPoint(x: 188.25, y: 128.65))
        star40Path.addLine(to: CGPoint(x: 187.75, y: 130.25))
        star40Path.addLine(to: CGPoint(x: 187.25, y: 128.65))
        star40Path.addLine(to: CGPoint(x: 185.25, y: 128.25))
        star40Path.addLine(to: CGPoint(x: 187.25, y: 127.85))
        star40Path.close()
        context.saveGState()
        star40Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 187.68, y: 128.31), startRadius: 0,
            endCenter: CGPoint(x: 187.68, y: 128.31), endRadius: 1.06,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 42
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 41 Drawing
        context.saveGState()
        context.translateBy(x: 210.25, y: 32.25)
        context.scaleBy(x: scaleStar4, y: scaleStar4)

        context.saveGState()
        context.setBlendMode(.hardLight)

        let star41Path = UIBezierPath()
        star41Path.move(to: CGPoint(x: 0, y: -3))
        star41Path.addLine(to: CGPoint(x: 0.6, y: -0.6))
        star41Path.addLine(to: CGPoint(x: 3, y: 0))
        star41Path.addLine(to: CGPoint(x: 0.6, y: 0.6))
        star41Path.addLine(to: CGPoint(x: 0, y: 3))
        star41Path.addLine(to: CGPoint(x: -0.6, y: 0.6))
        star41Path.addLine(to: CGPoint(x: -3, y: 0))
        star41Path.addLine(to: CGPoint(x: -0.6, y: -0.6))
        star41Path.close()
        context.saveGState()
        star41Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: -0.1, y: 0.08), startRadius: 0,
            endCenter: CGPoint(x: -0.1, y: 0.08), endRadius: 1.4,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 43
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 42 Drawing
        context.saveGState()
        context.translateBy(x: 42.92, y: 50.37)
        context.rotate(by: -719.26 * CGFloat.pi/180)
        context.scaleBy(x: scaleStar1, y: scaleStar1)

        context.saveGState()
        context.setBlendMode(.hardLight)

        let star42Path = UIBezierPath()
        star42Path.move(to: CGPoint(x: 0.06, y: -3.12))
        star42Path.addLine(to: CGPoint(x: 0.66, y: -0.72))
        star42Path.addLine(to: CGPoint(x: 3.06, y: -0.12))
        star42Path.addLine(to: CGPoint(x: 0.66, y: 0.48))
        star42Path.addLine(to: CGPoint(x: 0.06, y: 2.88))
        star42Path.addLine(to: CGPoint(x: -0.54, y: 0.48))
        star42Path.addLine(to: CGPoint(x: -2.94, y: -0.12))
        star42Path.addLine(to: CGPoint(x: -0.54, y: -0.72))
        star42Path.close()
        context.saveGState()
        star42Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: -0.04, y: -0.04), startRadius: 0,
            endCenter: CGPoint(x: -0.04, y: -0.04), endRadius: 1.4,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 44
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 43 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star43Path = UIBezierPath()
        star43Path.move(to: CGPoint(x: 69.25, y: 35.25))
        star43Path.addLine(to: CGPoint(x: 69.65, y: 37.25))
        star43Path.addLine(to: CGPoint(x: 71.25, y: 37.75))
        star43Path.addLine(to: CGPoint(x: 69.65, y: 38.25))
        star43Path.addLine(to: CGPoint(x: 69.25, y: 40.25))
        star43Path.addLine(to: CGPoint(x: 68.85, y: 38.25))
        star43Path.addLine(to: CGPoint(x: 67.25, y: 37.75))
        star43Path.addLine(to: CGPoint(x: 68.85, y: 37.25))
        star43Path.close()
        context.saveGState()
        star43Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 69.18, y: 37.81), startRadius: 0,
            endCenter: CGPoint(x: 69.18, y: 37.81), endRadius: 1.06,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 45
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 44 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star44Path = UIBezierPath()
        star44Path.move(to: CGPoint(x: 56.65, y: 100.65))
        star44Path.addLine(to: CGPoint(x: 57.23, y: 102.66))
        star44Path.addLine(to: CGPoint(x: 59.65, y: 103.15))
        star44Path.addLine(to: CGPoint(x: 57.23, y: 103.64))
        star44Path.addLine(to: CGPoint(x: 56.65, y: 105.65))
        star44Path.addLine(to: CGPoint(x: 56.07, y: 103.64))
        star44Path.addLine(to: CGPoint(x: 53.65, y: 103.15))
        star44Path.addLine(to: CGPoint(x: 56.07, y: 102.66))
        star44Path.close()
        context.saveGState()
        star44Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 56.57, y: 103.23), startRadius: 0,
            endCenter: CGPoint(x: 56.57, y: 103.23), endRadius: 1.29,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 46
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.hardLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Star 45 Drawing
        context.saveGState()
        context.setBlendMode(.hardLight)

        let star45Path = UIBezierPath()
        star45Path.move(to: CGPoint(x: 73.15, y: 127.65))
        star45Path.addLine(to: CGPoint(x: 73.83, y: 129.66))
        star45Path.addLine(to: CGPoint(x: 76.65, y: 130.15))
        star45Path.addLine(to: CGPoint(x: 73.83, y: 130.64))
        star45Path.addLine(to: CGPoint(x: 73.15, y: 132.65))
        star45Path.addLine(to: CGPoint(x: 72.47, y: 130.64))
        star45Path.addLine(to: CGPoint(x: 69.65, y: 130.15))
        star45Path.addLine(to: CGPoint(x: 72.47, y: 129.66))
        star45Path.close()
        context.saveGState()
        star45Path.addClip()
        context.drawRadialGradient(paint8_radial,
            startCenter: CGPoint(x: 73.07, y: 130.24), startRadius: 0,
            endCenter: CGPoint(x: 73.07, y: 130.24), endRadius: 1.42,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 390.5, y: 226.77))
        bezierPath.addLine(to: CGPoint(x: 391, y: 672))
        bezierPath.addLine(to: CGPoint(x: -7, y: 672))
        bezierPath.addLine(to: CGPoint(x: -7, y: 222.22))
        bezierPath.addCurve(to: CGPoint(x: 36.5, y: 182.77), controlPoint1: CGPoint(x: 3.66, y: 222.22), controlPoint2: CGPoint(x: 10, y: 182.77))
        bezierPath.addCurve(to: CGPoint(x: 37.03, y: 182.78), controlPoint1: CGPoint(x: 36.68, y: 182.77), controlPoint2: CGPoint(x: 36.85, y: 182.78))
        bezierPath.addCurve(to: CGPoint(x: 80, y: 229.04), controlPoint1: CGPoint(x: 63.02, y: 183.39), controlPoint2: CGPoint(x: 64.92, y: 229.04))
        bezierPath.addCurve(to: CGPoint(x: 115.5, y: 189.98), controlPoint1: CGPoint(x: 99.5, y: 228.28), controlPoint2: CGPoint(x: 97, y: 189.98))
        bezierPath.addCurve(to: CGPoint(x: 149, y: 226.77), controlPoint1: CGPoint(x: 137.1, y: 189.98), controlPoint2: CGPoint(x: 123, y: 226.77))
        bezierPath.addCurve(to: CGPoint(x: 188, y: 178.6), controlPoint1: CGPoint(x: 174, y: 226.77), controlPoint2: CGPoint(x: 167.5, y: 178.6))
        bezierPath.addCurve(to: CGPoint(x: 227, y: 229.04), controlPoint1: CGPoint(x: 208.5, y: 178.6), controlPoint2: CGPoint(x: 209.5, y: 229.04))
        bezierPath.addCurve(to: CGPoint(x: 262.5, y: 178.6), controlPoint1: CGPoint(x: 240.86, y: 229.04), controlPoint2: CGPoint(x: 245, y: 178.6))
        bezierPath.addCurve(to: CGPoint(x: 301.5, y: 241.94), controlPoint1: CGPoint(x: 282.5, y: 178.6), controlPoint2: CGPoint(x: 274, y: 241.94))
        bezierPath.addCurve(to: CGPoint(x: 341.5, y: 169.88), controlPoint1: CGPoint(x: 322, y: 241.94), controlPoint2: CGPoint(x: 319, y: 169.12))
        bezierPath.addCurve(to: CGPoint(x: 390.5, y: 226.77), controlPoint1: CGPoint(x: 364.48, y: 170.65), controlPoint2: CGPoint(x: 380.37, y: 226.77))
        bezierPath.close()
        fillColor5.setFill()
        bezierPath.fill()


        //// Group 47
        //// Bezier 13 Drawing
        context.saveGState()
        context.translateBy(x: 274.25, y: 376.25)

        let bezier13Path = UIBezierPath()
        bezier13Path.move(to: CGPoint(x: 0, y: 252.5))
        bezier13Path.addLine(to: CGPoint(x: 18.25, y: 228.75))
        bezier13Path.addLine(to: CGPoint(x: 26.25, y: 228.75))
        bezier13Path.addLine(to: CGPoint(x: 26.25, y: 216.75))
        bezier13Path.addLine(to: CGPoint(x: 55.25, y: 177.75))
        bezier13Path.addLine(to: CGPoint(x: 82.25, y: 177.75))
        bezier13Path.addLine(to: CGPoint(x: 82.5, y: (finishStrokeY2 - 376.25)))
        strokeColor3.setStroke()
        bezier13Path.lineWidth = 0.5
        bezier13Path.stroke()

        context.restoreGState()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 356.75, y: (finishStrokeY2 - 347), width: 1, height: 1))
        UIColor.white.setFill()
        oval2Path.fill()




        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 390.5, y: 252.55))
        bezier2Path.addCurve(to: CGPoint(x: 342, y: 169.5), controlPoint1: CGPoint(x: 390.5, y: 252.55), controlPoint2: CGPoint(x: 366.5, y: 169.5))
        bezier2Path.addCurve(to: CGPoint(x: 301, y: 241.56), controlPoint1: CGPoint(x: 312.74, y: 169.5), controlPoint2: CGPoint(x: 324, y: 241.56))
        bezier2Path.addCurve(to: CGPoint(x: 262.5, y: 178.22), controlPoint1: CGPoint(x: 274, y: 241.56), controlPoint2: CGPoint(x: 284, y: 178.22))
        bezier2Path.addCurve(to: CGPoint(x: 225.5, y: 229.04), controlPoint1: CGPoint(x: 241, y: 178.22), controlPoint2: CGPoint(x: 242, y: 229.04))
        bezier2Path.addCurve(to: CGPoint(x: 187, y: 178.22), controlPoint1: CGPoint(x: 209, y: 229.04), controlPoint2: CGPoint(x: 208.5, y: 178.22))
        bezier2Path.addCurve(to: CGPoint(x: 147.5, y: 226.01), controlPoint1: CGPoint(x: 165.5, y: 178.22), controlPoint2: CGPoint(x: 173.5, y: 226.01))
        bezier2Path.addCurve(to: CGPoint(x: 115.5, y: 190.36), controlPoint1: CGPoint(x: 121.5, y: 226.01), controlPoint2: CGPoint(x: 137.5, y: 190.36))
        bezier2Path.addCurve(to: CGPoint(x: 79, y: 229.04), controlPoint1: CGPoint(x: 93.5, y: 190.36), controlPoint2: CGPoint(x: 99, y: 229.04))
        bezier2Path.addCurve(to: CGPoint(x: 35, y: 182.39), controlPoint1: CGPoint(x: 59, y: 229.04), controlPoint2: CGPoint(x: 62.5, y: 182.39))
        bezier2Path.addCurve(to: CGPoint(x: -10, y: 241.56), controlPoint1: CGPoint(x: 7.5, y: 182.39), controlPoint2: CGPoint(x: -6.68, y: 230.6))
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow2.shadowOffset.width * resizedShadowScale, height: shadow2.shadowOffset.height * resizedShadowScale), blur: shadow2.shadowBlurRadius * resizedShadowScale, color: (shadow2.shadowColor as! UIColor).cgColor)
        TBMStyleKit.gradientColor2.setStroke()
        bezier2Path.lineWidth = 5
        bezier2Path.miterLimit = 4
        bezier2Path.stroke()
        context.restoreGState()




        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 29.5, y: 322.5))
        bezier4Path.addLine(to: CGPoint(x: 29.5, y: 457.5))
        bezier4Path.addLine(to: CGPoint(x: 82.5, y: 519.5))
        bezier4Path.addLine(to: CGPoint(x: 82.5, y: finishStrokeY))
        strokeColor3.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.stroke()


        //// Bezier 5 Drawing
        context.saveGState()
        context.translateBy(x: 356.75, y: (finishStrokeY2 - 0.25))

        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 0, y: 1))
        bezier5Path.addCurve(to: CGPoint(x: 0, y: 0), controlPoint1: CGPoint(x: 0, y: 0.33), controlPoint2: CGPoint(x: 0, y: 0))
        color15.setStroke()
        bezier5Path.lineWidth = 0.5
        bezier5Path.stroke()

        context.restoreGState()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 82, y: finishStrokeY, width: 1, height: 1))
        UIColor.white.setFill()
        rectanglePath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawDynamicFrameEdges(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 256, height: 130), resizing: ResizingBehavior = .aspectFit, dynamicFrameFraction: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 256, height: 130), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 256, y: resizedFrame.height / 130)



        //// Variable Declarations
        let dynamicFrameTopLine: CGFloat = dynamicFrameFraction * 256
        let dynamicFrameRightLine: CGFloat = dynamicFrameFraction * 128
        let dynamicFrameBottomLine: CGFloat = (1 - dynamicFrameFraction) * 256
        let dynamicFrameLeftLine: CGFloat = (1 - dynamicFrameFraction) * 128

        //// TopB Drawing
        let topBPath = UIBezierPath()
        topBPath.move(to: CGPoint(x: 0, y: 0.5))
        topBPath.addLine(to: CGPoint(x: (dynamicFrameTopLine + 0.5), y: 0.5))
        TBMStyleKit.gradientColor2.setStroke()
        topBPath.lineWidth = 1
        topBPath.stroke()


        //// RightB Drawing
        context.saveGState()
        context.translateBy(x: 255.5, y: -2)

        let rightBPath = UIBezierPath()
        rightBPath.move(to: CGPoint(x: 0, y: (dynamicFrameRightLine + 3.5)))
        rightBPath.addLine(to: CGPoint(x: 0, y: 2.5))
        TBMStyleKit.gradientColor2.setStroke()
        rightBPath.lineWidth = 1
        rightBPath.stroke()

        context.restoreGState()


        //// LeftB Drawing
        context.saveGState()
        context.translateBy(x: 0.5, y: 165.5)

        let leftBPath = UIBezierPath()
        leftBPath.move(to: CGPoint(x: 0, y: -36))
        leftBPath.addLine(to: CGPoint(x: 0, y: (dynamicFrameLeftLine - 165.5)))
        TBMStyleKit.gradientColor2.setStroke()
        leftBPath.lineWidth = 1
        leftBPath.stroke()

        context.restoreGState()


        //// BottomB Drawing
        context.saveGState()
        context.translateBy(x: 30.5, y: 129.5)

        let bottomBPath = UIBezierPath()
        bottomBPath.move(to: CGPoint(x: 225, y: 0))
        bottomBPath.addLine(to: CGPoint(x: (dynamicFrameBottomLine - 29.5), y: 0))
        TBMStyleKit.gradientColor2.setStroke()
        bottomBPath.lineWidth = 1
        bottomBPath.stroke()

        context.restoreGState()


        //// TopR Drawing
        let topRPath = UIBezierPath(rect: CGRect(x: (dynamicFrameTopLine - 2), y: 0, width: 2, height: 1))
        TBMStyleKit.primaryTextColor.setFill()
        topRPath.fill()


        //// RightR Drawing
        let rightRPath = UIBezierPath(rect: CGRect(x: 255, y: dynamicFrameRightLine, width: 1, height: 2))
        UIColor.white.setFill()
        rightRPath.fill()


        //// BottomR Drawing
        context.saveGState()
        context.translateBy(x: dynamicFrameBottomLine, y: 129.5)

        let bottomRPath = UIBezierPath()
        bottomRPath.move(to: CGPoint(x: 2, y: 0))
        bottomRPath.addCurve(to: CGPoint(x: 0, y: 0), controlPoint1: CGPoint(x: 0.33, y: 0), controlPoint2: CGPoint(x: 0, y: 0))
        UIColor.white.setFill()
        bottomRPath.fill()
        UIColor.white.setStroke()
        bottomRPath.lineWidth = 1
        bottomRPath.stroke()

        context.restoreGState()


        //// LeftR Drawing
        context.saveGState()
        context.translateBy(x: 0.5, y: dynamicFrameLeftLine)

        let leftRPath = UIBezierPath()
        leftRPath.move(to: CGPoint(x: 0, y: 0))
        leftRPath.addCurve(to: CGPoint(x: 0, y: 2), controlPoint1: CGPoint(x: 0, y: 1.67), controlPoint2: CGPoint(x: 0, y: 2))
        UIColor.white.setStroke()
        leftRPath.lineWidth = 1
        leftRPath.stroke()

        context.restoreGState()
        
        context.restoreGState()

    }




    @objc(TBMStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



private extension UIColor {
    func blended(withFraction fraction: CGFloat, of color: UIColor) -> UIColor {
        var r1: CGFloat = 1, g1: CGFloat = 1, b1: CGFloat = 1, a1: CGFloat = 1
        var r2: CGFloat = 1, g2: CGFloat = 1, b2: CGFloat = 1, a2: CGFloat = 1

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}
