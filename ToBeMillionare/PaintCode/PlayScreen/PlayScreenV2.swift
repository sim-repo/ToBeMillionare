//
//  PlayScreenV2.swift
//  ProjectName
//
//  Created by Igor Ivanov on 26.08.2020.
//  Copyright Â© 2020 None. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class PlayScreenV2 : NSObject {

    //// Cache

    private struct Cache {
        static let gradientColor27: UIColor = UIColor(red: 0.154, green: 0.439, blue: 1.000, alpha: 1.000)
        static let markPGradientColor5: UIColor = UIColor(red: 0.988, green: 0.671, blue: 0.208, alpha: 0.500)
        static let markPGradientColor4: UIColor = UIColor(red: 0.843, green: 0.095, blue: 0.759, alpha: 0.500)
    }

    //// Colors

    @objc dynamic public class var gradientColor27: UIColor { return Cache.gradientColor27 }
    @objc dynamic public class var markPGradientColor5: UIColor { return Cache.markPGradientColor5 }
    @objc dynamic public class var markPGradientColor4: UIColor { return Cache.markPGradientColor4 }

    //// Drawing Methods

    @objc dynamic public class func drawQuestionView(frame: CGRect = CGRect(x: 0, y: 0, width: 358, height: 103)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let groupButtonColor = UIColor(red: 0.037, green: 0.036, blue: 0.420, alpha: 1.000)
        let color3 = UIColor(red: 0.139, green: 0.083, blue: 0.564, alpha: 1.000)
        let gradientColor4 = UIColor(red: 0.000, green: 1.000, blue: 0.761, alpha: 1.000)
        let gradientColor21 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let gradientColor20 = UIColor(red: 0.000, green: 0.004, blue: 0.938, alpha: 1.000)
        let gradientColor19 = UIColor(red: 0.035, green: 0.000, blue: 1.000, alpha: 1.000)

        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [gradientColor19.cgColor, gradientColor19.blended(withFraction: 0.5, of: gradientColor21).cgColor, gradientColor21.cgColor, gradientColor21.blended(withFraction: 0.5, of: gradientColor20).cgColor, gradientColor20.cgColor] as CFArray, locations: [0, 0.06, 0.51, 0.94, 1])!

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black
        shadow.shadowOffset = CGSize(width: 0, height: 1)
        shadow.shadowBlurRadius = 2


        //// Subframes
        let question: CGRect = CGRect(x: frame.minX + fastFloor(frame.width * 0.00000 + 0.5), y: frame.minY + fastFloor(frame.height * 0.00000 + 0.5), width: fastFloor(frame.width * 1.00087 + 0.19) - fastFloor(frame.width * 0.00000 + 0.5) + 0.31, height: fastFloor(frame.height * 0.99791 - 0.29) - fastFloor(frame.height * 0.00000 + 0.5) + 0.79)


        //// Question
        //// Rectangle 16 Drawing
        let rectangle16Path = UIBezierPath(rect: CGRect(x: question.minX + fastFloor(question.width * 0.00000 + 0.5), y: question.minY + fastFloor(question.height * 0.00000 + 0.5), width: fastFloor(question.width * 1.00000 + 0.19) - fastFloor(question.width * 0.00000 + 0.5) + 0.31, height: fastFloor(question.height * 1.00000 - 0.29) - fastFloor(question.height * 0.00000 + 0.5) + 0.79))
        groupButtonColor.setFill()
        rectangle16Path.fill()

        ////// Rectangle 16 Inner Shadow
        context.saveGState()
        context.clip(to: rectangle16Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let rectangle16OpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: rectangle16OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        rectangle16OpaqueShadow.setFill()
        rectangle16Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Rectangle 18 Drawing
        let rectangle18Path = UIBezierPath(roundedRect: CGRect(x: question.minX + fastFloor(question.width * 0.00143 - 0.01) + 0.51, y: question.minY + fastFloor(question.height * 0.01820 - 0.37) + 0.87, width: fastFloor(question.width * 0.98767 - 0.39) - fastFloor(question.width * 0.00143 - 0.01) + 0.38, height: fastFloor(question.height * 0.95766 + 0.07) - fastFloor(question.height * 0.01820 - 0.37) - 0.44), cornerRadius: 4)
        color3.setFill()
        rectangle18Path.fill()

        ////// Rectangle 18 Inner Shadow
        context.saveGState()
        context.clip(to: rectangle18Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let rectangle18OpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: rectangle18OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        rectangle18OpaqueShadow.setFill()
        rectangle18Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Rectangle 19 Drawing
        context.saveGState()
        context.setAlpha(0.2)

        let rectangle19Rect = CGRect(x: question.minX + fastFloor(question.width * 0.00544 - 0.45) + 0.95, y: question.minY + fastFloor(question.height * 0.05378 - 0.03) + 0.53, width: fastFloor(question.width * 0.98831 + 0.38) - fastFloor(question.width * 0.00544 - 0.45) - 0.82, height: fastFloor(question.height * 0.94630 + 0.23) - fastFloor(question.height * 0.05378 - 0.03) - 0.26)
        let rectangle19Path = UIBezierPath(roundedRect: rectangle19Rect, cornerRadius: 4)
        context.saveGState()
        rectangle19Path.addClip()
        context.drawLinearGradient(gradient,
            start: CGPoint(x: rectangle19Rect.midX, y: rectangle19Rect.minY),
            end: CGPoint(x: rectangle19Rect.midX, y: rectangle19Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 20 Drawing
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let rectangle20Rect = CGRect(x: question.minX + fastFloor(question.width * 0.00892 + 0.3) + 0.2, y: question.minY + fastFloor(question.height * 0.02995 + 0.42) + 0.08, width: fastFloor(question.width * 0.98546 + 0.4) - fastFloor(question.width * 0.00892 + 0.3) - 0.09, height: fastFloor(question.height * 0.96971 - 0.17) - fastFloor(question.height * 0.02995 + 0.42) + 0.59)
        let rectangle20Path = UIBezierPath(roundedRect: rectangle20Rect, cornerRadius: 4)
        context.saveGState()
        rectangle20Path.addClip()
        context.drawLinearGradient(gradient,
            start: CGPoint(x: rectangle20Rect.maxX, y: rectangle20Rect.midY),
            end: CGPoint(x: rectangle20Rect.minX, y: rectangle20Rect.midY),
            options: [])
        context.restoreGState()
        gradientColor4.setStroke()
        rectangle20Path.lineWidth = 0.5
        rectangle20Path.stroke()

        context.endTransparencyLayer()
        context.restoreGState()
    }

    @objc dynamic public class func drawGroupButtonView(frame: CGRect = CGRect(x: 0, y: 0, width: 359, height: 288)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let groupButtonColor = UIColor(red: 0.037, green: 0.036, blue: 0.420, alpha: 1.000)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black
        shadow.shadowOffset = CGSize(width: 0, height: 1)
        shadow.shadowBlurRadius = 2


        //// Subframes
        let group18: CGRect = CGRect(x: frame.minX + 0.28, y: frame.minY + fastFloor(frame.height * 0.04861 + 0.5), width: fastFloor((frame.width - 0.28) * 0.99886 + 0.19) + 0.31, height: fastFloor(frame.height * 0.99443 + 0.11) - fastFloor(frame.height * 0.04861 + 0.5) + 0.39)


        //// Group 18
        //// Rectangle 96 Drawing
        let rectangle96Path = UIBezierPath(rect: CGRect(x: group18.minX + fastFloor(group18.width * 0.00000 + 0.5), y: group18.minY + fastFloor(group18.height * 0.00000 + 0.5), width: fastFloor(group18.width * 1.00000 + 0.19) - fastFloor(group18.width * 0.00000 + 0.5) + 0.31, height: fastFloor(group18.height * 1.00000 + 0.11) - fastFloor(group18.height * 0.00000 + 0.5) + 0.39))
        groupButtonColor.setFill()
        rectangle96Path.fill()

        ////// Rectangle 96 Inner Shadow
        context.saveGState()
        context.clip(to: rectangle96Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let rectangle96OpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: rectangle96OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        rectangle96OpaqueShadow.setFill()
        rectangle96Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Bezier 61 Drawing
        context.saveGState()
        context.setAlpha(0.7)

        let bezier61Path = UIBezierPath()
        bezier61Path.move(to: CGPoint(x: group18.minX + 0.96004 * group18.width, y: group18.minY + 0.98532 * group18.height))
        bezier61Path.addLine(to: CGPoint(x: group18.minX + 0.07807 * group18.width, y: group18.minY + 0.98830 * group18.height))
        bezier61Path.addLine(to: CGPoint(x: group18.minX + 0.00881 * group18.width, y: group18.minY + 0.90448 * group18.height))
        bezier61Path.addLine(to: CGPoint(x: group18.minX + 0.00880 * group18.width, y: group18.minY + 0.05041 * group18.height))
        PlayScreenV2.gradientColor27.setStroke()
        bezier61Path.lineWidth = 0.5
        bezier61Path.stroke()

        context.restoreGState()




        //// Group 17
        //// Rectangle 98 Drawing
        let rectangle98Path = UIBezierPath(rect: CGRect(x: frame.minX, y: frame.minY, width: 128, height: 28))
        groupButtonColor.setFill()
        rectangle98Path.fill()

        ////// Rectangle 98 Inner Shadow
        context.saveGState()
        context.clip(to: rectangle98Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let rectangle98OpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: rectangle98OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        rectangle98OpaqueShadow.setFill()
        rectangle98Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// crb Drawing
        let crbRect = CGRect(x: frame.minX + 0.04, y: frame.minY + 3.29, width: 71.15, height: 21)
        let crbTextContent = "ÐÑÐ²ÐµÑÑ:"
        let crbStyle = NSMutableParagraphStyle()
        crbStyle.alignment = .center
        let crbFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: crbStyle,
        ] as [NSAttributedString.Key: Any]

        let crbTextHeight: CGFloat = crbTextContent.boundingRect(with: CGSize(width: crbRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: crbFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: crbRect)
        crbTextContent.draw(in: CGRect(x: crbRect.minX, y: crbRect.minY + (crbRect.height - crbTextHeight) / 2, width: crbRect.width, height: crbTextHeight), withAttributes: crbFontAttributes)
        context.restoreGState()


        //// Bezier 60 Drawing
        let bezier60Path = UIBezierPath()
        groupButtonColor.setFill()
        bezier60Path.fill()

        ////// Bezier 60 Inner Shadow
        context.saveGState()
        context.clip(to: bezier60Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezier60OpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: bezier60OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        bezier60OpaqueShadow.setFill()
        bezier60Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()
    }

    @objc dynamic public class func drawButtonView(frame: CGRect = CGRect(x: 0, y: 0.45, width: 284.37, height: 37.55), answerBlink: CGFloat = 0, answerOpen: CGFloat = 0, answerIsTrue: Bool = true, answerText: String = "Hello, World!", answerTextOpacity: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let color3 = UIColor(red: 0.139, green: 0.083, blue: 0.564, alpha: 1.000)
        let gradientColor4 = UIColor(red: 0.000, green: 1.000, blue: 0.761, alpha: 1.000)
        let gradientColor21 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let gradientColor20 = UIColor(red: 0.000, green: 0.004, blue: 0.938, alpha: 1.000)
        let gradientColor19 = UIColor(red: 0.035, green: 0.000, blue: 1.000, alpha: 1.000)

        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [gradientColor19.cgColor, gradientColor19.blended(withFraction: 0.5, of: gradientColor21).cgColor, gradientColor21.cgColor, gradientColor21.blended(withFraction: 0.5, of: gradientColor20).cgColor, gradientColor20.cgColor] as CFArray, locations: [0, 0.06, 0.51, 0.94, 1])!

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black
        shadow.shadowOffset = CGSize(width: 0, height: 1)
        shadow.shadowBlurRadius = 2

        //// Variable Declarations
        let answerBlinkExpr: CGFloat = answerBlink > 0.06 ? abs(cos((answerBlink - 0.224) * 10 / CGFloat.pi * 180 * CGFloat.pi/180)) : 0
        let answerOpenColorExpr = answerIsTrue ? UIColor(red: 0.07, green: 0.54, blue: 0.79, alpha: 1) : UIColor(red: 0.62, green: 0.02, blue: 0.36, alpha: 1)


        //// Subframes
        let group2: CGRect = CGRect(x: frame.minX + fastFloor(frame.width * 0.00703 + 0.5), y: frame.minY + fastFloor(frame.height * 0.05326 + 0.5), width: fastFloor(frame.width * 0.98986 + 0.02) - fastFloor(frame.width * 0.00703 + 0.5) + 0.48, height: fastFloor(frame.height * 0.91020 + 0.32) - fastFloor(frame.height * 0.05326 + 0.5) + 0.18)


        //// Group 2
        //// Rectangle 32 Drawing
        let rectangle32Path = UIBezierPath(roundedRect: CGRect(x: group2.minX + fastFloor(group2.width * 0.00000 + 0.5), y: group2.minY + fastFloor(group2.height * 0.00000 + 0.5), width: fastFloor(group2.width * 1.00000 + 0.02) - fastFloor(group2.width * 0.00000 + 0.5) + 0.48, height: fastFloor(group2.height * 1.00000 + 0.32) - fastFloor(group2.height * 0.00000 + 0.5) + 0.18), cornerRadius: 4)
        context.saveGState()
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
        color3.setFill()
        rectangle32Path.fill()
        context.restoreGState()



        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(roundedRect: CGRect(x: group2.minX + fastFloor(group2.width * 0.01746 - 0.38) + 0.88, y: group2.minY + fastFloor(group2.height * 0.07290 + 0.15) + 0.35, width: fastFloor(group2.width * 0.98267 - 0.14) - fastFloor(group2.width * 0.01746 - 0.38) - 0.24, height: fastFloor(group2.height * 0.94076 + 0.23) - fastFloor(group2.height * 0.07290 + 0.15) - 0.07), cornerRadius: 4)
        color3.setFill()
        rectangle4Path.fill()

        ////// Rectangle 4 Inner Shadow
        context.saveGState()
        context.clip(to: rectangle4Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let rectangle4OpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: rectangle4OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        rectangle4OpaqueShadow.setFill()
        rectangle4Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Rectangle 6 Drawing
        context.saveGState()
        context.setAlpha(0.2)

        let rectangle6Rect = CGRect(x: group2.minX + fastFloor(group2.width * 0.01870 + 0.27) + 0.23, y: group2.minY + fastFloor(group2.height * 0.10750 + 0.04) + 0.46, width: fastFloor(group2.width * 0.98179 + 0.11) - fastFloor(group2.width * 0.01870 + 0.27) + 0.17, height: fastFloor(group2.height * 0.91763 - 0.03) - fastFloor(group2.height * 0.10750 + 0.04) + 0.07)
        let rectangle6Path = UIBezierPath(roundedRect: rectangle6Rect, cornerRadius: 4)
        context.saveGState()
        rectangle6Path.addClip()
        context.drawLinearGradient(gradient,
            start: CGPoint(x: rectangle6Rect.midX, y: rectangle6Rect.minY),
            end: CGPoint(x: rectangle6Rect.midX, y: rectangle6Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 5 Drawing
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let rectangle5Rect = CGRect(x: group2.minX + fastFloor(group2.width * 0.01811 + 0.44) + 0.06, y: group2.minY + fastFloor(group2.height * 0.07381 + 0.12) + 0.38, width: fastFloor(group2.width * 0.98331 - 0.32) - fastFloor(group2.width * 0.01811 + 0.44) + 0.76, height: fastFloor(group2.height * 0.93918 + 0.28) - fastFloor(group2.height * 0.07381 + 0.12) - 0.15)
        let rectangle5Path = UIBezierPath(roundedRect: rectangle5Rect, cornerRadius: 4)
        context.saveGState()
        rectangle5Path.addClip()
        context.drawLinearGradient(gradient,
            start: CGPoint(x: rectangle5Rect.maxX, y: rectangle5Rect.midY),
            end: CGPoint(x: rectangle5Rect.minX, y: rectangle5Rect.midY),
            options: [])
        context.restoreGState()
        gradientColor4.setStroke()
        rectangle5Path.lineWidth = 0.5
        rectangle5Path.stroke()

        context.endTransparencyLayer()
        context.restoreGState()


        //// Blink Drawing
        context.saveGState()
        context.setAlpha(answerBlinkExpr)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let blinkRect = CGRect(x: group2.minX + fastFloor(group2.width * 0.01761 - 0.42) + 0.92, y: group2.minY + fastFloor(group2.height * 0.08504 - 0.24) + 0.74, width: fastFloor(group2.width * 0.98281 - 0.18) - fastFloor(group2.width * 0.01761 - 0.42) - 0.24, height: fastFloor(group2.height * 0.95041 - 0.08) - fastFloor(group2.height * 0.08504 - 0.24) - 0.15)
        let blinkPath = UIBezierPath(roundedRect: blinkRect, cornerRadius: 4)
        context.saveGState()
        blinkPath.addClip()
        context.drawLinearGradient(gradient,
            start: CGPoint(x: blinkRect.maxX, y: blinkRect.midY),
            end: CGPoint(x: blinkRect.minX, y: blinkRect.midY),
            options: [])
        context.restoreGState()
        gradientColor4.setStroke()
        blinkPath.lineWidth = 0.5
        blinkPath.stroke()

        context.endTransparencyLayer()
        context.restoreGState()


        //// Open Drawing
        context.saveGState()
        context.setAlpha(answerOpen)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let openPath = UIBezierPath(roundedRect: CGRect(x: group2.minX + fastFloor(group2.width * 0.01761 - 0.42) + 0.92, y: group2.minY + fastFloor(group2.height * 0.08504 - 0.24) + 0.74, width: fastFloor(group2.width * 0.98281 - 0.18) - fastFloor(group2.width * 0.01761 - 0.42) - 0.24, height: fastFloor(group2.height * 0.95041 - 0.08) - fastFloor(group2.height * 0.08504 - 0.24) - 0.15), cornerRadius: 4)
        answerOpenColorExpr.setFill()
        openPath.fill()
        gradientColor4.setStroke()
        openPath.lineWidth = 0.5
        openPath.stroke()

        context.endTransparencyLayer()
        context.restoreGState()




        //// Text Drawing
        context.saveGState()
        context.setAlpha(answerTextOpacity)

        let textRect = CGRect(x: frame.minX + fastFloor(frame.width * 0.07083 + 0.36) + 0.14, y: frame.minY + fastFloor(frame.height * 0.26044 - 0.28) + 0.78, width: fastFloor(frame.width * 0.95018 + 0.3) - fastFloor(frame.width * 0.07083 + 0.36) + 0.06, height: fastFloor(frame.height * 0.74653 + 0.47) - fastFloor(frame.height * 0.26044 - 0.28) - 0.75)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 15)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = answerText.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        answerText.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()

        context.restoreGState()
    }

    @objc dynamic public class func drawAuditoryIconView(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 75, height: 75), resizing: ResizingBehavior = .aspectFit, hintScale: CGFloat = 1, hintOpacity: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 75, height: 75), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 75, y: resizedFrame.height / 75)


        //// Color Declarations
        let strokeColor6 = UIColor(red: 0.945, green: 0.945, blue: 0.945, alpha: 1.000)
        let fillColor2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor3 = UIColor(red: 0.016, green: 0.075, blue: 0.302, alpha: 1.000)

        //// Image Declarations
        let dotted = UIImage(named: "dotted.png")!

        //// Variable Declarations
        let hintExpr: CGFloat = hintScale >= 0.06 ? abs(sin((hintScale - 0.224) * 10 / CGFloat.pi * 180 * CGFloat.pi/180)) : 1

        //// Group 130
        //// Picture Drawing
        context.saveGState()
        context.scaleBy(x: 0.33, y: 0.33)

        let picturePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 225, height: 225))
        context.saveGState()
        picturePath.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dotted.size.height)
        context.draw(dotted.cgImage!, in: CGRect(x: 0, y: 0, width: dotted.size.width, height: dotted.size.height))
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 21 Drawing


        //// Bezier 185 Drawing
        let bezier185Path = UIBezierPath()
        bezier185Path.move(to: CGPoint(x: 68.49, y: 34.69))
        bezier185Path.addCurve(to: CGPoint(x: 59.49, y: 47.92), controlPoint1: CGPoint(x: 68.49, y: 39.78), controlPoint2: CGPoint(x: 65.12, y: 44.47))
        bezier185Path.addCurve(to: CGPoint(x: 37.42, y: 53.5), controlPoint1: CGPoint(x: 53.86, y: 51.35), controlPoint2: CGPoint(x: 46.06, y: 53.5))
        bezier185Path.addCurve(to: CGPoint(x: 15.36, y: 47.92), controlPoint1: CGPoint(x: 28.78, y: 53.5), controlPoint2: CGPoint(x: 20.98, y: 51.35))
        bezier185Path.addCurve(to: CGPoint(x: 6.35, y: 34.69), controlPoint1: CGPoint(x: 9.72, y: 44.47), controlPoint2: CGPoint(x: 6.35, y: 39.78))
        bezier185Path.addCurve(to: CGPoint(x: 15.36, y: 21.47), controlPoint1: CGPoint(x: 6.35, y: 29.6), controlPoint2: CGPoint(x: 9.72, y: 24.92))
        bezier185Path.addCurve(to: CGPoint(x: 37.42, y: 15.89), controlPoint1: CGPoint(x: 20.98, y: 18.04), controlPoint2: CGPoint(x: 28.78, y: 15.89))
        bezier185Path.addCurve(to: CGPoint(x: 59.49, y: 21.47), controlPoint1: CGPoint(x: 46.06, y: 15.89), controlPoint2: CGPoint(x: 53.86, y: 18.04))
        bezier185Path.addCurve(to: CGPoint(x: 68.49, y: 34.69), controlPoint1: CGPoint(x: 65.12, y: 24.92), controlPoint2: CGPoint(x: 68.49, y: 29.6))
        bezier185Path.close()
        fillColor3.setFill()
        bezier185Path.fill()
        strokeColor6.setStroke()
        bezier185Path.lineWidth = hintExpr
        bezier185Path.miterLimit = 4
        bezier185Path.stroke()


        //// Bezier 186 Drawing
        context.saveGState()
        context.translateBy(x: 37.53, y: 35.95)
        context.scaleBy(x: hintExpr, y: hintExpr)

        context.saveGState()
        context.setAlpha(hintOpacity)

        let bezier186Path = UIBezierPath()
        bezier186Path.move(to: CGPoint(x: 2.45, y: -7.88))
        bezier186Path.addCurve(to: CGPoint(x: 4.45, y: -4.03), controlPoint1: CGPoint(x: 3.54, y: -7.05), controlPoint2: CGPoint(x: 4.31, y: -5.65))
        bezier186Path.addCurve(to: CGPoint(x: 5.92, y: -3.64), controlPoint1: CGPoint(x: 4.9, y: -3.78), controlPoint2: CGPoint(x: 5.39, y: -3.64))
        bezier186Path.addCurve(to: CGPoint(x: 9.39, y: -7.82), controlPoint1: CGPoint(x: 7.84, y: -3.64), controlPoint2: CGPoint(x: 9.39, y: -5.51))
        bezier186Path.addCurve(to: CGPoint(x: 5.92, y: -12), controlPoint1: CGPoint(x: 9.39, y: -10.13), controlPoint2: CGPoint(x: 7.84, y: -12))
        bezier186Path.addCurve(to: CGPoint(x: 2.45, y: -7.88), controlPoint1: CGPoint(x: 4.02, y: -12), controlPoint2: CGPoint(x: 2.48, y: -10.16))
        bezier186Path.close()
        bezier186Path.move(to: CGPoint(x: 0.17, y: 0.68))
        bezier186Path.addCurve(to: CGPoint(x: 3.65, y: -3.5), controlPoint1: CGPoint(x: 2.09, y: 0.68), controlPoint2: CGPoint(x: 3.65, y: -1.19))
        bezier186Path.addCurve(to: CGPoint(x: 0.17, y: -7.68), controlPoint1: CGPoint(x: 3.65, y: -5.81), controlPoint2: CGPoint(x: 2.09, y: -7.68))
        bezier186Path.addCurve(to: CGPoint(x: -3.3, y: -3.5), controlPoint1: CGPoint(x: -1.74, y: -7.68), controlPoint2: CGPoint(x: -3.3, y: -5.81))
        bezier186Path.addCurve(to: CGPoint(x: 0.17, y: 0.68), controlPoint1: CGPoint(x: -3.3, y: -1.19), controlPoint2: CGPoint(x: -1.74, y: 0.68))
        bezier186Path.close()
        bezier186Path.move(to: CGPoint(x: 1.65, y: 0.97))
        bezier186Path.addLine(to: CGPoint(x: -1.3, y: 0.97))
        bezier186Path.addCurve(to: CGPoint(x: -5.75, y: 6.32), controlPoint1: CGPoint(x: -3.75, y: 0.97), controlPoint2: CGPoint(x: -5.75, y: 3.37))
        bezier186Path.addLine(to: CGPoint(x: -5.75, y: 10.66))
        bezier186Path.addLine(to: CGPoint(x: -5.74, y: 10.73))
        bezier186Path.addLine(to: CGPoint(x: -5.49, y: 10.83))
        bezier186Path.addCurve(to: CGPoint(x: 0.56, y: 12), controlPoint1: CGPoint(x: -3.15, y: 11.71), controlPoint2: CGPoint(x: -1.12, y: 12))
        bezier186Path.addCurve(to: CGPoint(x: 5.84, y: 10.81), controlPoint1: CGPoint(x: 3.83, y: 12), controlPoint2: CGPoint(x: 5.72, y: 10.88))
        bezier186Path.addLine(to: CGPoint(x: 6.07, y: 10.66))
        bezier186Path.addLine(to: CGPoint(x: 6.09, y: 10.66))
        bezier186Path.addLine(to: CGPoint(x: 6.09, y: 6.32))
        bezier186Path.addCurve(to: CGPoint(x: 1.65, y: 0.97), controlPoint1: CGPoint(x: 6.09, y: 3.37), controlPoint2: CGPoint(x: 4.1, y: 0.97))
        bezier186Path.close()
        bezier186Path.move(to: CGPoint(x: 7.39, y: -3.35))
        bezier186Path.addLine(to: CGPoint(x: 4.47, y: -3.35))
        bezier186Path.addCurve(to: CGPoint(x: 3.15, y: 0.24), controlPoint1: CGPoint(x: 4.44, y: -1.94), controlPoint2: CGPoint(x: 3.94, y: -0.67))
        bezier186Path.addCurve(to: CGPoint(x: 6.92, y: 6.33), controlPoint1: CGPoint(x: 5.33, y: 1.02), controlPoint2: CGPoint(x: 6.92, y: 3.46))
        bezier186Path.addLine(to: CGPoint(x: 6.92, y: 7.67))
        bezier186Path.addCurve(to: CGPoint(x: 11.58, y: 6.49), controlPoint1: CGPoint(x: 9.81, y: 7.54), controlPoint2: CGPoint(x: 11.47, y: 6.55))
        bezier186Path.addLine(to: CGPoint(x: 11.82, y: 6.35))
        bezier186Path.addLine(to: CGPoint(x: 11.84, y: 6.35))
        bezier186Path.addLine(to: CGPoint(x: 11.84, y: 2.01))
        bezier186Path.addCurve(to: CGPoint(x: 7.39, y: -3.35), controlPoint1: CGPoint(x: 11.84, y: -0.95), controlPoint2: CGPoint(x: 9.85, y: -3.35))
        bezier186Path.close()
        bezier186Path.move(to: CGPoint(x: -5.92, y: -3.63))
        bezier186Path.addCurve(to: CGPoint(x: -4.07, y: -4.28), controlPoint1: CGPoint(x: -5.24, y: -3.63), controlPoint2: CGPoint(x: -4.61, y: -3.87))
        bezier186Path.addCurve(to: CGPoint(x: -2.46, y: -7.58), controlPoint1: CGPoint(x: -3.9, y: -5.62), controlPoint2: CGPoint(x: -3.31, y: -6.79))
        bezier186Path.addCurve(to: CGPoint(x: -2.45, y: -7.82), controlPoint1: CGPoint(x: -2.45, y: -7.66), controlPoint2: CGPoint(x: -2.45, y: -7.74))
        bezier186Path.addCurve(to: CGPoint(x: -5.92, y: -12), controlPoint1: CGPoint(x: -2.45, y: -10.13), controlPoint2: CGPoint(x: -4, y: -12))
        bezier186Path.addCurve(to: CGPoint(x: -9.39, y: -7.82), controlPoint1: CGPoint(x: -7.84, y: -12), controlPoint2: CGPoint(x: -9.39, y: -10.13))
        bezier186Path.addCurve(to: CGPoint(x: -5.92, y: -3.63), controlPoint1: CGPoint(x: -9.39, y: -5.51), controlPoint2: CGPoint(x: -7.84, y: -3.63))
        bezier186Path.close()
        bezier186Path.move(to: CGPoint(x: -2.8, y: 0.24))
        bezier186Path.addCurve(to: CGPoint(x: -4.12, y: -3.33), controlPoint1: CGPoint(x: -3.59, y: -0.67), controlPoint2: CGPoint(x: -4.08, y: -1.93))
        bezier186Path.addCurve(to: CGPoint(x: -4.45, y: -3.35), controlPoint1: CGPoint(x: -4.23, y: -3.34), controlPoint2: CGPoint(x: -4.34, y: -3.35))
        bezier186Path.addLine(to: CGPoint(x: -7.39, y: -3.35))
        bezier186Path.addCurve(to: CGPoint(x: -11.84, y: 2.01), controlPoint1: CGPoint(x: -9.85, y: -3.35), controlPoint2: CGPoint(x: -11.84, y: -0.95))
        bezier186Path.addLine(to: CGPoint(x: -11.84, y: 6.35))
        bezier186Path.addLine(to: CGPoint(x: -11.83, y: 6.41))
        bezier186Path.addLine(to: CGPoint(x: -11.58, y: 6.51))
        bezier186Path.addCurve(to: CGPoint(x: -6.57, y: 7.64), controlPoint1: CGPoint(x: -9.71, y: 7.21), controlPoint2: CGPoint(x: -8.03, y: 7.54))
        bezier186Path.addLine(to: CGPoint(x: -6.57, y: 6.33))
        bezier186Path.addCurve(to: CGPoint(x: -2.8, y: 0.24), controlPoint1: CGPoint(x: -6.57, y: 3.46), controlPoint2: CGPoint(x: -4.98, y: 1.02))
        bezier186Path.close()
        fillColor2.setFill()
        bezier186Path.fill()

        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPercentsIconView(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 75, height: 75), resizing: ResizingBehavior = .aspectFit, hintScale: CGFloat = 1, hintOpacity: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 75, height: 75), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 75, y: resizedFrame.height / 75)


        //// Color Declarations
        let strokeColor6 = UIColor(red: 0.945, green: 0.945, blue: 0.945, alpha: 1.000)
        let fillColor2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor3 = UIColor(red: 0.016, green: 0.075, blue: 0.302, alpha: 1.000)

        //// Image Declarations
        let dotted = UIImage(named: "dotted.png")!

        //// Variable Declarations
        let hintExpr: CGFloat = hintScale >= 0.06 ? abs(sin((hintScale - 0.224) * 10 / CGFloat.pi * 180 * CGFloat.pi/180)) : 1

        //// Group 131
        //// Picture 3 Drawing
        context.saveGState()
        context.scaleBy(x: 0.33, y: 0.33)

        let picture3Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 225, height: 225))
        context.saveGState()
        picture3Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dotted.size.height)
        context.draw(dotted.cgImage!, in: CGRect(x: 0, y: 0, width: dotted.size.width, height: dotted.size.height))
        context.restoreGState()

        context.restoreGState()


        //// Bezier 187 Drawing
        let bezier187Path = UIBezierPath()
        bezier187Path.move(to: CGPoint(x: 68.02, y: 35.58))
        bezier187Path.addCurve(to: CGPoint(x: 58.89, y: 48.8), controlPoint1: CGPoint(x: 68.02, y: 40.67), controlPoint2: CGPoint(x: 64.6, y: 45.36))
        bezier187Path.addCurve(to: CGPoint(x: 36.52, y: 54.38), controlPoint1: CGPoint(x: 53.19, y: 52.24), controlPoint2: CGPoint(x: 45.28, y: 54.38))
        bezier187Path.addCurve(to: CGPoint(x: 14.15, y: 48.8), controlPoint1: CGPoint(x: 27.76, y: 54.38), controlPoint2: CGPoint(x: 19.85, y: 52.24))
        bezier187Path.addCurve(to: CGPoint(x: 5.02, y: 35.58), controlPoint1: CGPoint(x: 8.44, y: 45.36), controlPoint2: CGPoint(x: 5.02, y: 40.67))
        bezier187Path.addCurve(to: CGPoint(x: 14.15, y: 22.36), controlPoint1: CGPoint(x: 5.02, y: 30.5), controlPoint2: CGPoint(x: 8.44, y: 25.81))
        bezier187Path.addCurve(to: CGPoint(x: 36.52, y: 16.78), controlPoint1: CGPoint(x: 19.85, y: 18.92), controlPoint2: CGPoint(x: 27.76, y: 16.78))
        bezier187Path.addCurve(to: CGPoint(x: 58.89, y: 22.36), controlPoint1: CGPoint(x: 45.28, y: 16.78), controlPoint2: CGPoint(x: 53.19, y: 18.92))
        bezier187Path.addCurve(to: CGPoint(x: 68.02, y: 35.58), controlPoint1: CGPoint(x: 64.6, y: 25.81), controlPoint2: CGPoint(x: 68.02, y: 30.5))
        bezier187Path.close()
        fillColor3.setFill()
        bezier187Path.fill()
        strokeColor6.setStroke()
        bezier187Path.lineWidth = hintExpr
        bezier187Path.miterLimit = 4
        bezier187Path.stroke()


        //// Bezier 188 Drawing
        context.saveGState()
        context.translateBy(x: 36.14, y: 36.13)
        context.scaleBy(x: hintExpr, y: hintExpr)

        context.saveGState()
        context.setAlpha(hintOpacity)

        let bezier188Path = UIBezierPath()
        bezier188Path.move(to: CGPoint(x: -14.93, y: -1.23))
        bezier188Path.addCurve(to: CGPoint(x: -12.72, y: -0.44), controlPoint1: CGPoint(x: -14.06, y: -1.23), controlPoint2: CGPoint(x: -13.32, y: -0.97))
        bezier188Path.addCurve(to: CGPoint(x: -11.83, y: 1.74), controlPoint1: CGPoint(x: -12.12, y: 0.08), controlPoint2: CGPoint(x: -11.83, y: 0.81))
        bezier188Path.addCurve(to: CGPoint(x: -12.77, y: 3.94), controlPoint1: CGPoint(x: -11.83, y: 2.68), controlPoint2: CGPoint(x: -12.14, y: 3.41))
        bezier188Path.addCurve(to: CGPoint(x: -15.08, y: 4.73), controlPoint1: CGPoint(x: -13.4, y: 4.47), controlPoint2: CGPoint(x: -14.17, y: 4.73))
        bezier188Path.addCurve(to: CGPoint(x: -17.03, y: 4.24), controlPoint1: CGPoint(x: -15.81, y: 4.73), controlPoint2: CGPoint(x: -16.46, y: 4.57))
        bezier188Path.addCurve(to: CGPoint(x: -18.25, y: 2.78), controlPoint1: CGPoint(x: -17.59, y: 3.91), controlPoint2: CGPoint(x: -18, y: 3.42))
        bezier188Path.addLine(to: CGPoint(x: -16.71, y: 1.88))
        bezier188Path.addCurve(to: CGPoint(x: -15.08, y: 2.98), controlPoint1: CGPoint(x: -16.49, y: 2.61), controlPoint2: CGPoint(x: -15.94, y: 2.98))
        bezier188Path.addCurve(to: CGPoint(x: -14.01, y: 2.65), controlPoint1: CGPoint(x: -14.62, y: 2.98), controlPoint2: CGPoint(x: -14.26, y: 2.87))
        bezier188Path.addCurve(to: CGPoint(x: -13.62, y: 1.74), controlPoint1: CGPoint(x: -13.75, y: 2.43), controlPoint2: CGPoint(x: -13.62, y: 2.12))
        bezier188Path.addCurve(to: CGPoint(x: -14, y: 0.84), controlPoint1: CGPoint(x: -13.62, y: 1.37), controlPoint2: CGPoint(x: -13.75, y: 1.07))
        bezier188Path.addCurve(to: CGPoint(x: -15.02, y: 0.51), controlPoint1: CGPoint(x: -14.25, y: 0.62), controlPoint2: CGPoint(x: -14.59, y: 0.51))
        bezier188Path.addLine(to: CGPoint(x: -17.78, y: 0.51))
        bezier188Path.addLine(to: CGPoint(x: -17.42, y: -4.55))
        bezier188Path.addLine(to: CGPoint(x: -12.25, y: -4.55))
        bezier188Path.addLine(to: CGPoint(x: -12.25, y: -2.87))
        bezier188Path.addLine(to: CGPoint(x: -15.75, y: -2.87))
        bezier188Path.addLine(to: CGPoint(x: -15.87, y: -1.23))
        bezier188Path.addLine(to: CGPoint(x: -14.93, y: -1.23))
        bezier188Path.close()
        bezier188Path.move(to: CGPoint(x: -7.43, y: 4.73))
        bezier188Path.addCurve(to: CGPoint(x: -10.11, y: 3.44), controlPoint1: CGPoint(x: -8.57, y: 4.73), controlPoint2: CGPoint(x: -9.46, y: 4.3))
        bezier188Path.addCurve(to: CGPoint(x: -11.07, y: 0), controlPoint1: CGPoint(x: -10.75, y: 2.58), controlPoint2: CGPoint(x: -11.07, y: 1.43))
        bezier188Path.addCurve(to: CGPoint(x: -10.11, y: -3.43), controlPoint1: CGPoint(x: -11.07, y: -1.43), controlPoint2: CGPoint(x: -10.75, y: -2.57))
        bezier188Path.addCurve(to: CGPoint(x: -7.43, y: -4.73), controlPoint1: CGPoint(x: -9.46, y: -4.3), controlPoint2: CGPoint(x: -8.57, y: -4.73))
        bezier188Path.addCurve(to: CGPoint(x: -4.75, y: -3.43), controlPoint1: CGPoint(x: -6.29, y: -4.73), controlPoint2: CGPoint(x: -5.39, y: -4.3))
        bezier188Path.addCurve(to: CGPoint(x: -3.79, y: 0), controlPoint1: CGPoint(x: -4.11, y: -2.57), controlPoint2: CGPoint(x: -3.79, y: -1.43))
        bezier188Path.addCurve(to: CGPoint(x: -4.75, y: 3.44), controlPoint1: CGPoint(x: -3.79, y: 1.43), controlPoint2: CGPoint(x: -4.11, y: 2.58))
        bezier188Path.addCurve(to: CGPoint(x: -7.43, y: 4.73), controlPoint1: CGPoint(x: -5.39, y: 4.3), controlPoint2: CGPoint(x: -6.29, y: 4.73))
        bezier188Path.close()
        bezier188Path.move(to: CGPoint(x: -8.81, y: 2.22))
        bezier188Path.addCurve(to: CGPoint(x: -7.43, y: 2.98), controlPoint1: CGPoint(x: -8.5, y: 2.73), controlPoint2: CGPoint(x: -8.04, y: 2.98))
        bezier188Path.addCurve(to: CGPoint(x: -6.05, y: 2.21), controlPoint1: CGPoint(x: -6.82, y: 2.98), controlPoint2: CGPoint(x: -6.37, y: 2.72))
        bezier188Path.addCurve(to: CGPoint(x: -5.57, y: 0), controlPoint1: CGPoint(x: -5.73, y: 1.7), controlPoint2: CGPoint(x: -5.57, y: 0.96))
        bezier188Path.addCurve(to: CGPoint(x: -6.05, y: -2.22), controlPoint1: CGPoint(x: -5.57, y: -0.97), controlPoint2: CGPoint(x: -5.73, y: -1.71))
        bezier188Path.addCurve(to: CGPoint(x: -7.43, y: -2.99), controlPoint1: CGPoint(x: -6.37, y: -2.73), controlPoint2: CGPoint(x: -6.82, y: -2.99))
        bezier188Path.addCurve(to: CGPoint(x: -8.81, y: -2.22), controlPoint1: CGPoint(x: -8.04, y: -2.99), controlPoint2: CGPoint(x: -8.5, y: -2.73))
        bezier188Path.addCurve(to: CGPoint(x: -9.28, y: 0), controlPoint1: CGPoint(x: -9.12, y: -1.71), controlPoint2: CGPoint(x: -9.28, y: -0.97))
        bezier188Path.addCurve(to: CGPoint(x: -8.81, y: 2.22), controlPoint1: CGPoint(x: -9.28, y: 0.97), controlPoint2: CGPoint(x: -9.12, y: 1.71))
        bezier188Path.close()
        bezier188Path.move(to: CGPoint(x: -2.17, y: 5.85))
        bezier188Path.addLine(to: CGPoint(x: -2.91, y: 5.85))
        bezier188Path.addLine(to: CGPoint(x: 2.29, y: -5.85))
        bezier188Path.addLine(to: CGPoint(x: 3.03, y: -5.85))
        bezier188Path.addLine(to: CGPoint(x: -2.17, y: 5.85))
        bezier188Path.close()
        bezier188Path.move(to: CGPoint(x: 7.11, y: -1.23))
        bezier188Path.addCurve(to: CGPoint(x: 9.32, y: -0.44), controlPoint1: CGPoint(x: 7.98, y: -1.23), controlPoint2: CGPoint(x: 8.72, y: -0.97))
        bezier188Path.addCurve(to: CGPoint(x: 10.21, y: 1.74), controlPoint1: CGPoint(x: 9.91, y: 0.08), controlPoint2: CGPoint(x: 10.21, y: 0.81))
        bezier188Path.addCurve(to: CGPoint(x: 9.26, y: 3.94), controlPoint1: CGPoint(x: 10.21, y: 2.68), controlPoint2: CGPoint(x: 9.9, y: 3.41))
        bezier188Path.addCurve(to: CGPoint(x: 6.96, y: 4.73), controlPoint1: CGPoint(x: 8.64, y: 4.47), controlPoint2: CGPoint(x: 7.87, y: 4.73))
        bezier188Path.addCurve(to: CGPoint(x: 5.01, y: 4.24), controlPoint1: CGPoint(x: 6.23, y: 4.73), controlPoint2: CGPoint(x: 5.58, y: 4.57))
        bezier188Path.addCurve(to: CGPoint(x: 3.79, y: 2.78), controlPoint1: CGPoint(x: 4.45, y: 3.91), controlPoint2: CGPoint(x: 4.04, y: 3.42))
        bezier188Path.addLine(to: CGPoint(x: 5.33, y: 1.88))
        bezier188Path.addCurve(to: CGPoint(x: 6.96, y: 2.98), controlPoint1: CGPoint(x: 5.55, y: 2.61), controlPoint2: CGPoint(x: 6.1, y: 2.98))
        bezier188Path.addCurve(to: CGPoint(x: 8.03, y: 2.65), controlPoint1: CGPoint(x: 7.42, y: 2.98), controlPoint2: CGPoint(x: 7.78, y: 2.87))
        bezier188Path.addCurve(to: CGPoint(x: 8.42, y: 1.74), controlPoint1: CGPoint(x: 8.29, y: 2.43), controlPoint2: CGPoint(x: 8.42, y: 2.12))
        bezier188Path.addCurve(to: CGPoint(x: 8.04, y: 0.84), controlPoint1: CGPoint(x: 8.42, y: 1.37), controlPoint2: CGPoint(x: 8.29, y: 1.07))
        bezier188Path.addCurve(to: CGPoint(x: 7.02, y: 0.51), controlPoint1: CGPoint(x: 7.79, y: 0.62), controlPoint2: CGPoint(x: 7.45, y: 0.51))
        bezier188Path.addLine(to: CGPoint(x: 4.26, y: 0.51))
        bezier188Path.addLine(to: CGPoint(x: 4.62, y: -4.55))
        bezier188Path.addLine(to: CGPoint(x: 9.78, y: -4.55))
        bezier188Path.addLine(to: CGPoint(x: 9.78, y: -2.87))
        bezier188Path.addLine(to: CGPoint(x: 6.29, y: -2.87))
        bezier188Path.addLine(to: CGPoint(x: 6.17, y: -1.23))
        bezier188Path.addLine(to: CGPoint(x: 7.11, y: -1.23))
        bezier188Path.close()
        bezier188Path.move(to: CGPoint(x: 14.61, y: 4.73))
        bezier188Path.addCurve(to: CGPoint(x: 11.93, y: 3.44), controlPoint1: CGPoint(x: 13.47, y: 4.73), controlPoint2: CGPoint(x: 12.58, y: 4.3))
        bezier188Path.addCurve(to: CGPoint(x: 10.97, y: 0), controlPoint1: CGPoint(x: 11.29, y: 2.58), controlPoint2: CGPoint(x: 10.97, y: 1.43))
        bezier188Path.addCurve(to: CGPoint(x: 11.93, y: -3.43), controlPoint1: CGPoint(x: 10.97, y: -1.43), controlPoint2: CGPoint(x: 11.29, y: -2.57))
        bezier188Path.addCurve(to: CGPoint(x: 14.61, y: -4.73), controlPoint1: CGPoint(x: 12.58, y: -4.3), controlPoint2: CGPoint(x: 13.47, y: -4.73))
        bezier188Path.addCurve(to: CGPoint(x: 17.29, y: -3.43), controlPoint1: CGPoint(x: 15.75, y: -4.73), controlPoint2: CGPoint(x: 16.64, y: -4.3))
        bezier188Path.addCurve(to: CGPoint(x: 18.25, y: 0), controlPoint1: CGPoint(x: 17.93, y: -2.57), controlPoint2: CGPoint(x: 18.25, y: -1.43))
        bezier188Path.addCurve(to: CGPoint(x: 17.29, y: 3.44), controlPoint1: CGPoint(x: 18.25, y: 1.43), controlPoint2: CGPoint(x: 17.93, y: 2.58))
        bezier188Path.addCurve(to: CGPoint(x: 14.61, y: 4.73), controlPoint1: CGPoint(x: 16.64, y: 4.3), controlPoint2: CGPoint(x: 15.75, y: 4.73))
        bezier188Path.close()
        bezier188Path.move(to: CGPoint(x: 13.23, y: 2.22))
        bezier188Path.addCurve(to: CGPoint(x: 14.61, y: 2.98), controlPoint1: CGPoint(x: 13.54, y: 2.73), controlPoint2: CGPoint(x: 14, y: 2.98))
        bezier188Path.addCurve(to: CGPoint(x: 15.99, y: 2.21), controlPoint1: CGPoint(x: 15.21, y: 2.98), controlPoint2: CGPoint(x: 15.67, y: 2.72))
        bezier188Path.addCurve(to: CGPoint(x: 16.47, y: 0), controlPoint1: CGPoint(x: 16.31, y: 1.7), controlPoint2: CGPoint(x: 16.47, y: 0.96))
        bezier188Path.addCurve(to: CGPoint(x: 15.99, y: -2.22), controlPoint1: CGPoint(x: 16.47, y: -0.97), controlPoint2: CGPoint(x: 16.31, y: -1.71))
        bezier188Path.addCurve(to: CGPoint(x: 14.61, y: -2.99), controlPoint1: CGPoint(x: 15.67, y: -2.73), controlPoint2: CGPoint(x: 15.21, y: -2.99))
        bezier188Path.addCurve(to: CGPoint(x: 13.23, y: -2.22), controlPoint1: CGPoint(x: 14, y: -2.99), controlPoint2: CGPoint(x: 13.54, y: -2.73))
        bezier188Path.addCurve(to: CGPoint(x: 12.76, y: 0), controlPoint1: CGPoint(x: 12.92, y: -1.71), controlPoint2: CGPoint(x: 12.76, y: -0.97))
        bezier188Path.addCurve(to: CGPoint(x: 13.23, y: 2.22), controlPoint1: CGPoint(x: 12.76, y: 0.97), controlPoint2: CGPoint(x: 12.92, y: 1.71))
        bezier188Path.close()
        fillColor2.setFill()
        bezier188Path.fill()

        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPhoneIconView(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 80, height: 75), resizing: ResizingBehavior = .aspectFit, hintScale: CGFloat = 1, hintOpacity: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 80, height: 75), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 80, y: resizedFrame.height / 75)


        //// Color Declarations
        let strokeColor6 = UIColor(red: 0.945, green: 0.945, blue: 0.945, alpha: 1.000)
        let fillColor2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor3 = UIColor(red: 0.016, green: 0.075, blue: 0.302, alpha: 1.000)

        //// Image Declarations
        let dotted = UIImage(named: "dotted.png")!

        //// Variable Declarations
        let hintExpr: CGFloat = hintScale >= 0.06 ? abs(sin((hintScale - 0.224) * 10 / CGFloat.pi * 180 * CGFloat.pi/180)) : 1

        //// Group 132
        //// Picture 2 Drawing
        context.saveGState()
        context.scaleBy(x: 0.33, y: 0.33)

        let picture2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 225, height: 225))
        context.saveGState()
        picture2Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dotted.size.height)
        context.draw(dotted.cgImage!, in: CGRect(x: 0, y: 0, width: dotted.size.width, height: dotted.size.height))
        context.restoreGState()

        context.restoreGState()


        //// Bezier 189 Drawing
        let bezier189Path = UIBezierPath()
        bezier189Path.move(to: CGPoint(x: 70.66, y: 31.95))
        bezier189Path.addCurve(to: CGPoint(x: 61.53, y: 45.17), controlPoint1: CGPoint(x: 70.66, y: 37.04), controlPoint2: CGPoint(x: 67.24, y: 41.73))
        bezier189Path.addCurve(to: CGPoint(x: 39.16, y: 50.75), controlPoint1: CGPoint(x: 55.83, y: 48.61), controlPoint2: CGPoint(x: 47.93, y: 50.75))
        bezier189Path.addCurve(to: CGPoint(x: 16.79, y: 45.17), controlPoint1: CGPoint(x: 30.4, y: 50.75), controlPoint2: CGPoint(x: 22.5, y: 48.61))
        bezier189Path.addCurve(to: CGPoint(x: 7.66, y: 31.95), controlPoint1: CGPoint(x: 11.08, y: 41.73), controlPoint2: CGPoint(x: 7.66, y: 37.04))
        bezier189Path.addCurve(to: CGPoint(x: 16.79, y: 18.73), controlPoint1: CGPoint(x: 7.66, y: 26.86), controlPoint2: CGPoint(x: 11.08, y: 22.17))
        bezier189Path.addCurve(to: CGPoint(x: 39.16, y: 13.15), controlPoint1: CGPoint(x: 22.5, y: 15.29), controlPoint2: CGPoint(x: 30.4, y: 13.15))
        bezier189Path.addCurve(to: CGPoint(x: 61.53, y: 18.73), controlPoint1: CGPoint(x: 47.93, y: 13.15), controlPoint2: CGPoint(x: 55.83, y: 15.29))
        bezier189Path.addCurve(to: CGPoint(x: 70.66, y: 31.95), controlPoint1: CGPoint(x: 67.24, y: 22.17), controlPoint2: CGPoint(x: 70.66, y: 26.86))
        bezier189Path.close()
        fillColor3.setFill()
        bezier189Path.fill()
        strokeColor6.setStroke()
        bezier189Path.lineWidth = hintExpr
        bezier189Path.miterLimit = 4
        bezier189Path.stroke()


        //// Bezier 190 Drawing
        context.saveGState()
        context.translateBy(x: 36.45, y: 36.43)
        context.scaleBy(x: hintExpr, y: hintExpr)

        context.saveGState()
        context.setAlpha(hintOpacity)

        let bezier190Path = UIBezierPath()
        bezier190Path.move(to: CGPoint(x: 14.25, y: 2.86))
        bezier190Path.addLine(to: CGPoint(x: 11.59, y: 1.09))
        bezier190Path.addLine(to: CGPoint(x: 9.22, y: -0.49))
        bezier190Path.addCurve(to: CGPoint(x: 7.81, y: -0.26), controlPoint1: CGPoint(x: 8.76, y: -0.79), controlPoint2: CGPoint(x: 8.15, y: -0.7))
        bezier190Path.addLine(to: CGPoint(x: 6.35, y: 1.62))
        bezier190Path.addCurve(to: CGPoint(x: 5.02, y: 1.89), controlPoint1: CGPoint(x: 6.04, y: 2.03), controlPoint2: CGPoint(x: 5.47, y: 2.14))
        bezier190Path.addCurve(to: CGPoint(x: 0.26, y: -1.77), controlPoint1: CGPoint(x: 4.03, y: 1.34), controlPoint2: CGPoint(x: 2.85, y: 0.82))
        bezier190Path.addCurve(to: CGPoint(x: -3.41, y: -6.53), controlPoint1: CGPoint(x: -2.33, y: -4.37), controlPoint2: CGPoint(x: -2.85, y: -5.54))
        bezier190Path.addCurve(to: CGPoint(x: -3.13, y: -7.86), controlPoint1: CGPoint(x: -3.66, y: -6.98), controlPoint2: CGPoint(x: -3.54, y: -7.55))
        bezier190Path.addLine(to: CGPoint(x: -1.25, y: -9.33))
        bezier190Path.addCurve(to: CGPoint(x: -1.02, y: -10.73), controlPoint1: CGPoint(x: -0.82, y: -9.66), controlPoint2: CGPoint(x: -0.72, y: -10.28))
        bezier190Path.addLine(to: CGPoint(x: -2.55, y: -13.02))
        bezier190Path.addLine(to: CGPoint(x: -4.37, y: -15.76))
        bezier190Path.addCurve(to: CGPoint(x: -5.78, y: -16.08), controlPoint1: CGPoint(x: -4.68, y: -16.22), controlPoint2: CGPoint(x: -5.3, y: -16.36))
        bezier190Path.addLine(to: CGPoint(x: -7.88, y: -14.81))
        bezier190Path.addCurve(to: CGPoint(x: -9.05, y: -13.31), controlPoint1: CGPoint(x: -8.45, y: -14.48), controlPoint2: CGPoint(x: -8.87, y: -13.94))
        bezier190Path.addCurve(to: CGPoint(x: -2.33, y: 0.82), controlPoint1: CGPoint(x: -9.62, y: -11.21), controlPoint2: CGPoint(x: -9.74, y: -6.59))
        bezier190Path.addCurve(to: CGPoint(x: 11.79, y: 7.54), controlPoint1: CGPoint(x: 5.08, y: 8.23), controlPoint2: CGPoint(x: 9.7, y: 8.11))
        bezier190Path.addCurve(to: CGPoint(x: 13.3, y: 6.37), controlPoint1: CGPoint(x: 12.43, y: 7.36), controlPoint2: CGPoint(x: 12.97, y: 6.94))
        bezier190Path.addLine(to: CGPoint(x: 14.56, y: 4.27))
        bezier190Path.addCurve(to: CGPoint(x: 14.25, y: 2.86), controlPoint1: CGPoint(x: 14.85, y: 3.79), controlPoint2: CGPoint(x: 14.71, y: 3.17))
        bezier190Path.close()
        fillColor2.setFill()
        bezier190Path.fill()

        context.restoreGState()

        context.restoreGState()


        //// Bezier 191 Drawing
        context.saveGState()
        context.setAlpha(hintOpacity)

        let bezier191Path = UIBezierPath()
        bezier191Path.move(to: CGPoint(x: 40.82, y: 23.93))
        bezier191Path.addCurve(to: CGPoint(x: 47.85, y: 30.97), controlPoint1: CGPoint(x: 44.7, y: 23.94), controlPoint2: CGPoint(x: 47.85, y: 27.08))
        bezier191Path.addCurve(to: CGPoint(x: 48.27, y: 31.38), controlPoint1: CGPoint(x: 47.85, y: 31.19), controlPoint2: CGPoint(x: 48.04, y: 31.38))
        bezier191Path.addCurve(to: CGPoint(x: 48.68, y: 30.97), controlPoint1: CGPoint(x: 48.5, y: 31.38), controlPoint2: CGPoint(x: 48.68, y: 31.19))
        bezier191Path.addCurve(to: CGPoint(x: 40.82, y: 23.1), controlPoint1: CGPoint(x: 48.68, y: 26.63), controlPoint2: CGPoint(x: 45.16, y: 23.11))
        bezier191Path.addCurve(to: CGPoint(x: 40.41, y: 23.52), controlPoint1: CGPoint(x: 40.59, y: 23.1), controlPoint2: CGPoint(x: 40.41, y: 23.29))
        bezier191Path.addCurve(to: CGPoint(x: 40.82, y: 23.93), controlPoint1: CGPoint(x: 40.4, y: 23.75), controlPoint2: CGPoint(x: 40.59, y: 23.93))
        bezier191Path.close()
        fillColor2.setFill()
        bezier191Path.fill()

        context.restoreGState()


        //// Bezier 192 Drawing
        context.saveGState()
        context.setAlpha(hintOpacity)

        let bezier192Path = UIBezierPath()
        bezier192Path.move(to: CGPoint(x: 40.82, y: 26.41))
        bezier192Path.addCurve(to: CGPoint(x: 45.37, y: 30.97), controlPoint1: CGPoint(x: 43.33, y: 26.42), controlPoint2: CGPoint(x: 45.37, y: 28.45))
        bezier192Path.addCurve(to: CGPoint(x: 45.78, y: 31.38), controlPoint1: CGPoint(x: 45.37, y: 31.19), controlPoint2: CGPoint(x: 45.56, y: 31.38))
        bezier192Path.addCurve(to: CGPoint(x: 46.2, y: 30.97), controlPoint1: CGPoint(x: 46.01, y: 31.38), controlPoint2: CGPoint(x: 46.2, y: 31.19))
        bezier192Path.addCurve(to: CGPoint(x: 40.82, y: 25.59), controlPoint1: CGPoint(x: 46.19, y: 28), controlPoint2: CGPoint(x: 43.79, y: 25.59))
        bezier192Path.addCurve(to: CGPoint(x: 40.41, y: 26), controlPoint1: CGPoint(x: 40.59, y: 25.59), controlPoint2: CGPoint(x: 40.41, y: 25.77))
        bezier192Path.addCurve(to: CGPoint(x: 40.82, y: 26.41), controlPoint1: CGPoint(x: 40.41, y: 26.23), controlPoint2: CGPoint(x: 40.59, y: 26.41))
        bezier192Path.close()
        fillColor2.setFill()
        bezier192Path.fill()

        context.restoreGState()


        //// Bezier 193 Drawing
        context.saveGState()
        context.setAlpha(hintOpacity)

        let bezier193Path = UIBezierPath()
        bezier193Path.move(to: CGPoint(x: 40.82, y: 28.9))
        bezier193Path.addCurve(to: CGPoint(x: 42.89, y: 30.97), controlPoint1: CGPoint(x: 41.96, y: 28.9), controlPoint2: CGPoint(x: 42.89, y: 29.82))
        bezier193Path.addCurve(to: CGPoint(x: 43.3, y: 31.38), controlPoint1: CGPoint(x: 42.89, y: 31.19), controlPoint2: CGPoint(x: 43.07, y: 31.38))
        bezier193Path.addCurve(to: CGPoint(x: 43.72, y: 30.97), controlPoint1: CGPoint(x: 43.53, y: 31.38), controlPoint2: CGPoint(x: 43.72, y: 31.19))
        bezier193Path.addCurve(to: CGPoint(x: 40.82, y: 28.07), controlPoint1: CGPoint(x: 43.71, y: 29.37), controlPoint2: CGPoint(x: 42.42, y: 28.07))
        bezier193Path.addCurve(to: CGPoint(x: 40.41, y: 28.48), controlPoint1: CGPoint(x: 40.59, y: 28.07), controlPoint2: CGPoint(x: 40.41, y: 28.25))
        bezier193Path.addCurve(to: CGPoint(x: 40.82, y: 28.9), controlPoint1: CGPoint(x: 40.4, y: 28.71), controlPoint2: CGPoint(x: 40.59, y: 28.9))
        bezier193Path.close()
        fillColor2.setFill()
        bezier193Path.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawOkButtonView(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 63), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 63), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 63)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 60, resizedFrame.height / 63)


        //// Color Declarations
        let groupButtonColor = UIColor(red: 0.037, green: 0.036, blue: 0.420, alpha: 1.000)
        let color3 = UIColor(red: 0.139, green: 0.083, blue: 0.564, alpha: 1.000)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black
        shadow.shadowOffset = CGSize(width: 0, height: 1)
        shadow.shadowBlurRadius = 2

        //// Image Declarations
        let finishflag = UIImage(named: "finishflag.png")!

        //// Ok Button
        //// Bezier 59 Drawing
        let bezier59Path = UIBezierPath()
        bezier59Path.move(to: CGPoint(x: 29.36, y: 59.43))
        bezier59Path.addLine(to: CGPoint(x: 29.28, y: 62.92))
        bezier59Path.addLine(to: CGPoint(x: 31.69, y: 62.92))
        bezier59Path.addLine(to: CGPoint(x: 31.66, y: 59.46))
        bezier59Path.addLine(to: CGPoint(x: 29.36, y: 59.43))
        bezier59Path.close()
        groupButtonColor.setFill()
        bezier59Path.fill()


        //// Oval 11 Drawing
        let oval11Path = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 60, height: 61))
        groupButtonColor.setFill()
        oval11Path.fill()

        ////// Oval 11 Inner Shadow
        context.saveGState()
        context.clip(to: oval11Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let oval11OpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: oval11OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        oval11OpaqueShadow.setFill()
        oval11Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Oval 10 Drawing
        let oval10Path = UIBezierPath(ovalIn: CGRect(x: 7.37, y: 7.35, width: 45, height: 46))
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        color3.setFill()
        oval10Path.fill()
        context.restoreGState()



        //// Picture Drawing
        context.saveGState()
        context.translateBy(x: 17.52, y: 21.32)
        context.scaleBy(x: 0.2, y: 0.2)

        let picturePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 121, height: 120))
        context.saveGState()
        picturePath.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -finishflag.size.height)
        context.draw(finishflag.cgImage!, in: CGRect(x: 0, y: 0, width: finishflag.size.width, height: finishflag.size.height))
        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCounterView(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 120, height: 120), resizing: ResizingBehavior = .aspectFit, counterNumber: CGFloat = 11) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 120, height: 120), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 120, y: resizedFrame.height / 120)


        //// Color Declarations
        let moonGradient2Color2 = UIColor(red: 0.338, green: 0.343, blue: 0.778, alpha: 1.000)
        let moonGradient2Color = UIColor(red: 0.000, green: 0.109, blue: 1.000, alpha: 1.000)
        let moonGradientColor2 = UIColor(red: 1.000, green: 0.840, blue: 0.000, alpha: 1.000)
        let moonGradientColor = UIColor(red: 1.000, green: 0.680, blue: 0.000, alpha: 1.000)

        //// Gradient Declarations
        let moonGradient2 = CGGradient(colorsSpace: nil, colors: [moonGradient2Color.cgColor, moonGradient2Color2.cgColor] as CFArray, locations: [0, 0.99])!
        let moonGradient = CGGradient(colorsSpace: nil, colors: [moonGradientColor.cgColor, moonGradientColor2.cgColor] as CFArray, locations: [0, 0.99])!

        //// Variable Declarations
        let counterNumberText = "\(Int(round(counterNumber / 6.0)))"
        let counterNumberColor = counterNumber < 180 ? UIColor(red: 1, green: 1, blue: 1, alpha: 1) : UIColor(red: 0.1, green: 0.1, blue: 0.7, alpha: 1)
        let expression2: CGFloat = -1 * counterNumber

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 0, y: 0.02, width: 120, height: 120))
        context.saveGState()
        ovalPath.addClip()
        context.drawLinearGradient(moonGradient2, start: CGPoint(x: 60, y: 0.02), end: CGPoint(x: 60, y: 120.02), options: [])
        context.restoreGState()


        //// Oval 2 Drawing
        let oval2Rect = CGRect(x: -0.18, y: 0.02, width: 120, height: 120)
        let oval2Path = UIBezierPath()
        oval2Path.addArc(withCenter: CGPoint(x: oval2Rect.midX, y: oval2Rect.midY), radius: oval2Rect.width / 2, startAngle: -0.01 * CGFloat.pi/180, endAngle: -expression2 * CGFloat.pi/180, clockwise: true)
        oval2Path.addLine(to: CGPoint(x: oval2Rect.midX, y: oval2Rect.midY))
        oval2Path.close()

        context.saveGState()
        oval2Path.addClip()
        context.drawLinearGradient(moonGradient,
            start: CGPoint(x: oval2Rect.midX, y: oval2Rect.minY),
            end: CGPoint(x: oval2Rect.midX, y: oval2Rect.maxY),
            options: [])
        context.restoreGState()


        //// Text Drawing
        let textRect = CGRect(x: 38.68, y: 41.62, width: 45.57, height: 37.87)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 37.5)!,
            .foregroundColor: counterNumberColor,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = counterNumberText.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        counterNumberText.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawOkPressedButtonView(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 63), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 63), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 63)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 60, resizedFrame.height / 63)


        //// Color Declarations
        let groupButtonColor = UIColor(red: 0.037, green: 0.036, blue: 0.420, alpha: 1.000)
        let color3 = UIColor(red: 0.139, green: 0.083, blue: 0.564, alpha: 1.000)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black
        shadow.shadowOffset = CGSize(width: 0, height: 1)
        shadow.shadowBlurRadius = 2

        //// Image Declarations
        let finishflag = UIImage(named: "finishflag.png")!

        //// Ok Button
        //// Bezier 59 Drawing
        let bezier59Path = UIBezierPath()
        bezier59Path.move(to: CGPoint(x: 29.36, y: 59.43))
        bezier59Path.addLine(to: CGPoint(x: 29.28, y: 62.92))
        bezier59Path.addLine(to: CGPoint(x: 31.69, y: 62.92))
        bezier59Path.addLine(to: CGPoint(x: 31.66, y: 59.46))
        bezier59Path.addLine(to: CGPoint(x: 29.36, y: 59.43))
        bezier59Path.close()
        groupButtonColor.setFill()
        bezier59Path.fill()


        //// Oval 11 Drawing
        let oval11Path = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 60, height: 61))
        groupButtonColor.setFill()
        oval11Path.fill()

        ////// Oval 11 Inner Shadow
        context.saveGState()
        context.clip(to: oval11Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let oval11OpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: oval11OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        oval11OpaqueShadow.setFill()
        oval11Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Oval 10 Drawing
        let oval10Path = UIBezierPath(ovalIn: CGRect(x: 7.37, y: 7.35, width: 45, height: 46))
        color3.setFill()
        oval10Path.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 7.06, y: 7.59, width: 45, height: 46))
        UIColor.red.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Picture 2 Drawing
        context.saveGState()
        context.translateBy(x: 17.52, y: 21.32)
        context.scaleBy(x: 0.2, y: 0.2)

        let picture2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 121, height: 120))
        context.saveGState()
        picture2Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -finishflag.size.height)
        context.draw(finishflag.cgImage!, in: CGRect(x: 0, y: 0, width: finishflag.size.width, height: finishflag.size.height))
        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHintBkgView(frame: CGRect = CGRect(x: 0, y: -6, width: 375, height: 667)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let hintGradientColor = UIColor(red: 0.121, green: 0.068, blue: 0.948, alpha: 1.000)
        let hintGradientColor2 = UIColor(red: 0.151, green: 0.202, blue: 0.532, alpha: 1.000)

        //// Gradient Declarations
        let hintGradient = CGGradient(colorsSpace: nil, colors: [hintGradientColor.cgColor, hintGradientColor2.cgColor] as CFArray, locations: [0, 1])!

        //// Rectangle 23 Drawing
        context.saveGState()
        context.setAlpha(0.9)

        let rectangle23Rect = CGRect(x: frame.minX + fastFloor(frame.width * 0.00000 + 0.5), y: frame.minY + fastFloor(frame.height * 0.00000 + 0.5), width: fastFloor(frame.width * 1.00000 + 0.5) - fastFloor(frame.width * 0.00000 + 0.5), height: fastFloor(frame.height * 1.00000 + 0.5) - fastFloor(frame.height * 0.00000 + 0.5))
        let rectangle23Path = UIBezierPath(rect: rectangle23Rect)
        context.saveGState()
        rectangle23Path.addClip()
        context.drawLinearGradient(hintGradient,
            start: CGPoint(x: rectangle23Rect.midX, y: rectangle23Rect.minY),
            end: CGPoint(x: rectangle23Rect.midX, y: rectangle23Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()
    }

    @objc dynamic public class func drawHintRectangle(frame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let hintRecangleColor = UIColor(red: 0.176, green: 0.333, blue: 0.698, alpha: 1.000)

        //// Rectangle 23 Drawing
        context.saveGState()
        context.setAlpha(0.9)

        let rectangle23Path = UIBezierPath(rect: CGRect(x: frame.minX + fastFloor(frame.width * 0.00000 + 0.5), y: frame.minY + fastFloor(frame.height * 0.00000 + 0.5), width: fastFloor(frame.width * 1.00000 + 0.5) - fastFloor(frame.width * 0.00000 + 0.5), height: fastFloor(frame.height * 1.00000 + 0.5) - fastFloor(frame.height * 0.00000 + 0.5)))
        hintRecangleColor.setFill()
        rectangle23Path.fill()

        context.restoreGState()
    }

    @objc dynamic public class func drawAuditoryBarChart(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 350), resizing: ResizingBehavior = .aspectFit, auditoryFractionA: CGFloat = 1, auditoryFractionB: CGFloat = 1, auditoryFractionC: CGFloat = 1, auditoryFractionD: CGFloat = 1, auditoryChartMaxHeight: CGFloat = 300) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 350), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 350)


        //// Color Declarations
        let gradient4Color = UIColor(red: 0.895, green: 0.144, blue: 0.144, alpha: 1.000)
        let gradient4Color2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let gradientColor59 = UIColor(red: 0.000, green: 0.009, blue: 1.000, alpha: 1.000)
        let gradient3Color6 = UIColor(red: 0.429, green: 0.718, blue: 0.108, alpha: 1.000)
        let gradient3Color7 = UIColor(red: 0.039, green: 0.123, blue: 0.020, alpha: 1.000)
        let gradientColor60 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let gradient2Color4 = UIColor(red: 1.000, green: 0.787, blue: 0.000, alpha: 1.000)
        let gradient2Color5 = UIColor(red: 0.082, green: 0.100, blue: 0.181, alpha: 1.000)

        //// Gradient Declarations
        let gradient4 = CGGradient(colorsSpace: nil, colors: [gradient4Color.cgColor, gradient4Color.blended(withFraction: 0.5, of: gradient4Color2).cgColor, gradient4Color2.cgColor] as CFArray, locations: [0, 0.46, 1])!
        let gradient3 = CGGradient(colorsSpace: nil, colors: [gradient3Color6.cgColor, gradient3Color7.cgColor] as CFArray, locations: [0, 1])!
        let gradient5 = CGGradient(colorsSpace: nil, colors: [gradientColor59.cgColor, gradientColor59.blended(withFraction: 0.5, of: gradientColor60).cgColor, gradientColor60.cgColor] as CFArray, locations: [0, 0.54, 1])!
        let gradient6 = CGGradient(colorsSpace: nil, colors: [gradient2Color4.cgColor, gradient2Color4.blended(withFraction: 0.5, of: gradient2Color5).cgColor, gradient2Color5.cgColor] as CFArray, locations: [0, 0.57, 0.98])!

        //// Variable Declarations
        let auditoryPercentA = "\(Int(round(auditoryFractionA * 100)))" + "%"
        let auditoryPercentB = "\(Int(round(auditoryFractionB * 100)))" + "%"
        let auditoryPercentC = "\(Int(round(auditoryFractionC * 100)))" + "%"
        let auditoryPercentD = "\(Int(round(auditoryFractionD * 100)))" + "%"
        let auditorySymbolExprD: CGFloat = (1 - auditoryFractionD) * auditoryChartMaxHeight
        let auditoryExpr3: CGFloat = auditoryChartMaxHeight * auditoryFractionC
        let auditorySymbolExprC: CGFloat = (1 - auditoryFractionC) * auditoryChartMaxHeight
        let auditoryExpr2: CGFloat = auditoryChartMaxHeight * auditoryFractionB
        let auditoryExpr4: CGFloat = auditoryChartMaxHeight * auditoryFractionD
        let auditorySymbolExprA: CGFloat = (1 - auditoryFractionA) * auditoryChartMaxHeight
        let auditorySymbolExprB: CGFloat = (1 - auditoryFractionB) * auditoryChartMaxHeight
        let auditoryExpr1: CGFloat = auditoryChartMaxHeight * auditoryFractionA

        //// Rectangle Drawing
        context.saveGState()
        context.translateBy(x: 59, y: 200)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangleRect = CGRect(x: -30, y: -150, width: 60, height: auditoryExpr1)
        let rectanglePath = UIBezierPath(rect: rectangleRect)
        context.saveGState()
        rectanglePath.addClip()
        context.drawLinearGradient(gradient6,
            start: CGPoint(x: rectangleRect.midX, y: rectangleRect.maxY),
            end: CGPoint(x: rectangleRect.midX, y: rectangleRect.minY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 143, y: 200)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle2Rect = CGRect(x: -30, y: -150, width: 60, height: auditoryExpr2)
        let rectangle2Path = UIBezierPath(rect: rectangle2Rect)
        context.saveGState()
        rectangle2Path.addClip()
        context.drawLinearGradient(gradient5,
            start: CGPoint(x: rectangle2Rect.midX, y: rectangle2Rect.maxY),
            end: CGPoint(x: rectangle2Rect.midX, y: rectangle2Rect.minY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 3 Drawing
        context.saveGState()
        context.translateBy(x: 229, y: 200)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle3Rect = CGRect(x: -30, y: -150, width: 60, height: auditoryExpr3)
        let rectangle3Path = UIBezierPath(rect: rectangle3Rect)
        context.saveGState()
        rectangle3Path.addClip()
        context.drawLinearGradient(gradient3,
            start: CGPoint(x: rectangle3Rect.midX, y: rectangle3Rect.maxY),
            end: CGPoint(x: rectangle3Rect.midX, y: rectangle3Rect.minY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 4 Drawing
        context.saveGState()
        context.translateBy(x: 309.69, y: 200.26)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle4Rect = CGRect(x: -30, y: -150, width: 60, height: auditoryExpr4)
        let rectangle4Path = UIBezierPath(rect: rectangle4Rect)
        context.saveGState()
        rectangle4Path.addClip()
        context.drawLinearGradient(gradient4,
            start: CGPoint(x: rectangle4Rect.midX, y: rectangle4Rect.maxY),
            end: CGPoint(x: rectangle4Rect.midX, y: rectangle4Rect.minY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// SymbD Drawing
        let symbDRect = CGRect(x: 35, y: auditorySymbolExprA, width: 54, height: 33)
        let symbDTextContent = "A"
        let symbDStyle = NSMutableParagraphStyle()
        symbDStyle.alignment = .center
        let symbDFontAttributes = [
            .font: UIFont.systemFont(ofSize: 25, weight: .bold),
            .foregroundColor: UIColor.white,
            .paragraphStyle: symbDStyle,
        ] as [NSAttributedString.Key: Any]

        let symbDTextHeight: CGFloat = symbDTextContent.boundingRect(with: CGSize(width: symbDRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: symbDFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: symbDRect)
        symbDTextContent.draw(in: CGRect(x: symbDRect.minX, y: symbDRect.minY + (symbDRect.height - symbDTextHeight) / 2, width: symbDRect.width, height: symbDTextHeight), withAttributes: symbDFontAttributes)
        context.restoreGState()


        //// SymbB Drawing
        let symbBRect = CGRect(x: 116, y: auditorySymbolExprB, width: 54, height: 33)
        let symbBTextContent = "B"
        let symbBStyle = NSMutableParagraphStyle()
        symbBStyle.alignment = .center
        let symbBFontAttributes = [
            .font: UIFont.systemFont(ofSize: 25, weight: .bold),
            .foregroundColor: UIColor.white,
            .paragraphStyle: symbBStyle,
        ] as [NSAttributedString.Key: Any]

        let symbBTextHeight: CGFloat = symbBTextContent.boundingRect(with: CGSize(width: symbBRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: symbBFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: symbBRect)
        symbBTextContent.draw(in: CGRect(x: symbBRect.minX, y: symbBRect.minY + (symbBRect.height - symbBTextHeight) / 2, width: symbBRect.width, height: symbBTextHeight), withAttributes: symbBFontAttributes)
        context.restoreGState()


        //// SymbC Drawing
        let symbCRect = CGRect(x: 202, y: auditorySymbolExprC, width: 54, height: 33)
        let symbCTextContent = "C"
        let symbCStyle = NSMutableParagraphStyle()
        symbCStyle.alignment = .center
        let symbCFontAttributes = [
            .font: UIFont.systemFont(ofSize: 25, weight: .bold),
            .foregroundColor: UIColor.white,
            .paragraphStyle: symbCStyle,
        ] as [NSAttributedString.Key: Any]

        let symbCTextHeight: CGFloat = symbCTextContent.boundingRect(with: CGSize(width: symbCRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: symbCFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: symbCRect)
        symbCTextContent.draw(in: CGRect(x: symbCRect.minX, y: symbCRect.minY + (symbCRect.height - symbCTextHeight) / 2, width: symbCRect.width, height: symbCTextHeight), withAttributes: symbCFontAttributes)
        context.restoreGState()


        //// SymbC 2 Drawing
        let symbC2Rect = CGRect(x: 283, y: auditorySymbolExprD, width: 54, height: 33)
        let symbC2TextContent = "D"
        let symbC2Style = NSMutableParagraphStyle()
        symbC2Style.alignment = .center
        let symbC2FontAttributes = [
            .font: UIFont.systemFont(ofSize: 25, weight: .bold),
            .foregroundColor: UIColor.white,
            .paragraphStyle: symbC2Style,
        ] as [NSAttributedString.Key: Any]

        let symbC2TextHeight: CGFloat = symbC2TextContent.boundingRect(with: CGSize(width: symbC2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: symbC2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: symbC2Rect)
        symbC2TextContent.draw(in: CGRect(x: symbC2Rect.minX, y: symbC2Rect.minY + (symbC2Rect.height - symbC2TextHeight) / 2, width: symbC2Rect.width, height: symbC2TextHeight), withAttributes: symbC2FontAttributes)
        context.restoreGState()


        //// PercentA Drawing
        let percentARect = CGRect(x: 32, y: (auditorySymbolExprA + 64), width: 54, height: 33)
        let percentAStyle = NSMutableParagraphStyle()
        percentAStyle.alignment = .center
        let percentAFontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.buttonFontSize, weight: .bold),
            .foregroundColor: UIColor.white,
            .paragraphStyle: percentAStyle,
        ] as [NSAttributedString.Key: Any]

        let percentATextHeight: CGFloat = auditoryPercentA.boundingRect(with: CGSize(width: percentARect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: percentAFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: percentARect)
        auditoryPercentA.draw(in: CGRect(x: percentARect.minX, y: percentARect.minY + (percentARect.height - percentATextHeight) / 2, width: percentARect.width, height: percentATextHeight), withAttributes: percentAFontAttributes)
        context.restoreGState()


        //// PercentB Drawing
        let percentBRect = CGRect(x: 116, y: (auditorySymbolExprB + 64), width: 54, height: 33)
        let percentBStyle = NSMutableParagraphStyle()
        percentBStyle.alignment = .center
        let percentBFontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.buttonFontSize, weight: .bold),
            .foregroundColor: UIColor.white,
            .paragraphStyle: percentBStyle,
        ] as [NSAttributedString.Key: Any]

        let percentBTextHeight: CGFloat = auditoryPercentB.boundingRect(with: CGSize(width: percentBRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: percentBFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: percentBRect)
        auditoryPercentB.draw(in: CGRect(x: percentBRect.minX, y: percentBRect.minY + (percentBRect.height - percentBTextHeight) / 2, width: percentBRect.width, height: percentBTextHeight), withAttributes: percentBFontAttributes)
        context.restoreGState()


        //// PercentC Drawing
        let percentCRect = CGRect(x: 202, y: (auditorySymbolExprC + 64), width: 54, height: 33)
        let percentCStyle = NSMutableParagraphStyle()
        percentCStyle.alignment = .center
        let percentCFontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.buttonFontSize, weight: .bold),
            .foregroundColor: UIColor.white,
            .paragraphStyle: percentCStyle,
        ] as [NSAttributedString.Key: Any]

        let percentCTextHeight: CGFloat = auditoryPercentC.boundingRect(with: CGSize(width: percentCRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: percentCFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: percentCRect)
        auditoryPercentC.draw(in: CGRect(x: percentCRect.minX, y: percentCRect.minY + (percentCRect.height - percentCTextHeight) / 2, width: percentCRect.width, height: percentCTextHeight), withAttributes: percentCFontAttributes)
        context.restoreGState()


        //// PercentD Drawing
        let percentDRect = CGRect(x: 283, y: (auditorySymbolExprD + 64), width: 54, height: 33)
        let percentDStyle = NSMutableParagraphStyle()
        percentDStyle.alignment = .center
        let percentDFontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.buttonFontSize, weight: .bold),
            .foregroundColor: UIColor.white,
            .paragraphStyle: percentDStyle,
        ] as [NSAttributedString.Key: Any]

        let percentDTextHeight: CGFloat = auditoryPercentD.boundingRect(with: CGSize(width: percentDRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: percentDFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: percentDRect)
        auditoryPercentD.draw(in: CGRect(x: percentDRect.minX, y: percentDRect.minY + (percentDRect.height - percentDTextHeight) / 2, width: percentDRect.width, height: percentDTextHeight), withAttributes: percentDFontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawScoreView(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 75), resizing: ResizingBehavior = .aspectFit, scoreAim: CGFloat = 1000, scoreAward: CGFloat = 529, scoreAwardOpacity: CGFloat = 1, scoreDepo: CGFloat = 1092, scoreFireproofTip: CGFloat = 1, scoreFireproofRem: String = "1", scoreFireproofTipAchieve: CGFloat = 0, actualCurrencySymbol: String = "â¬") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 75), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 75)


        //// Color Declarations
        let gradientColor4 = UIColor(red: 0.000, green: 1.000, blue: 0.761, alpha: 1.000)
        let color = UIColor(red: 0.000, green: 0.333, blue: 1.000, alpha: 1.000)

        //// Variable Declarations
        let scoreBarExpr: CGFloat = (1 - scoreDepo / scoreAim) * 40
        let scoreDepoText = actualCurrencySymbol + "\(Int(round(scoreDepo)))"
        let scoreAwardText = actualCurrencySymbol + "\(Int(round(scoreAward)))"
        let scoreAimText = actualCurrencySymbol + "\(Int(round(scoreAim)))"

        //// Award Drawing
        context.saveGState()
        context.setAlpha(scoreAwardOpacity)

        let awardRect = CGRect(x: 18.77, y: 45.46, width: 43.91, height: 16.28)
        let awardStyle = NSMutableParagraphStyle()
        awardStyle.alignment = .left
        let awardFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 15)!,
            .foregroundColor: gradientColor4,
            .paragraphStyle: awardStyle,
        ] as [NSAttributedString.Key: Any]

        let awardTextHeight: CGFloat = scoreAwardText.boundingRect(with: CGSize(width: awardRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: awardFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: awardRect)
        scoreAwardText.draw(in: CGRect(x: awardRect.minX, y: awardRect.minY + (awardRect.height - awardTextHeight) / 2, width: awardRect.width, height: awardTextHeight), withAttributes: awardFontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 3.6, y: 33.1, width: 14, height: 40))
        gradientColor4.setFill()
        rectangle3Path.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 3.6, y: 33.15, width: 14, height: scoreBarExpr))
        color.setFill()
        rectanglePath.fill()


        //// Text 6 Drawing
        let text6Rect = CGRect(x: 3.28, y: 10.87, width: 67.38, height: 18.26)
        let text6Style = NSMutableParagraphStyle()
        text6Style.alignment = .left
        let text6FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 20)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text6Style,
        ] as [NSAttributedString.Key: Any]

        let text6TextHeight: CGFloat = scoreAimText.boundingRect(with: CGSize(width: text6Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text6Rect)
        scoreAimText.draw(in: CGRect(x: text6Rect.minX, y: text6Rect.minY + (text6Rect.height - text6TextHeight) / 2, width: text6Rect.width, height: text6TextHeight), withAttributes: text6FontAttributes)
        context.restoreGState()


        //// Text 4 Drawing
        let text4Rect = CGRect(x: 19.88, y: 31.38, width: 36.43, height: 12.79)
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .left
        let text4FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 12)!,
            .foregroundColor: gradientColor4,
            .paragraphStyle: text4Style,
        ] as [NSAttributedString.Key: Any]

        let text4TextHeight: CGFloat = scoreDepoText.boundingRect(with: CGSize(width: text4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text4Rect)
        scoreDepoText.draw(in: CGRect(x: text4Rect.minX, y: text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, width: text4Rect.width, height: text4TextHeight), withAttributes: text4FontAttributes)
        context.restoreGState()


        //// Group
        context.saveGState()
        context.setAlpha(scoreFireproofTip)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 146.99, y: 43.99, width: 30, height: 30))
        PlayScreenV2.gradientColor27.setFill()
        ovalPath.fill()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 147.63, y: 49.38, width: 27.65, height: 19.32)
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [
            .font: UIFont(name: "Play", size: 23)!,
            .foregroundColor: gradientColor4,
            .paragraphStyle: text2Style,
        ] as [NSAttributedString.Key: Any]

        let text2TextHeight: CGFloat = scoreFireproofRem.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        scoreFireproofRem.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()


        //// Text Drawing
        let textRect = CGRect(x: 68.22, y: 11.55, width: 128.33, height: 53.24)
        let textTextContent = "Ð½ÐµÑÐ³Ð¾ÑÐ°ÐµÐ¼ÑÐ¹\nÑÑÐ¾Ð²ÐµÐ½Ñ\nÐ¾ÑÑÐ°Ð»Ð¾ÑÑ:"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            .font: UIFont(name: "Play", size: 16)!,
            .foregroundColor: gradientColor4,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 64, y: 13.41, width: 1.49, height: 59.59))
        PlayScreenV2.gradientColor27.setFill()
        rectangle2Path.fill()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 2
        context.saveGState()
        context.setAlpha(scoreFireproofTipAchieve)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Text 3 Drawing
        let text3Rect = CGRect(x: 68.22, y: 9.08, width: 79.62, height: 43.4)
        let text3TextContent = "Ð´Ð¾ÑÑÐ¸Ð³Ð½ÑÑÐ°\nÐ½ÐµÑÐ³Ð¾ÑÐ°ÐµÐ¼Ð°Ñ\nÑÐ¾ÑÐºÐ° ."
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .left
        let text3FontAttributes = [
            .font: UIFont(name: "Play", size: 13)!,
            .foregroundColor: gradientColor4,
            .paragraphStyle: text3Style,
        ] as [NSAttributedString.Key: Any]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        text3TextContent.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 64.12, y: 13.41, width: 1.49, height: 59.59))
        PlayScreenV2.gradientColor27.setFill()
        rectangle4Path.fill()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawBetScreen_65(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 896), resizing: ResizingBehavior = .aspectFit, betAim: CGFloat = 1063, betFireproofLevel: String = "25", betDepo: CGFloat = 48, betSum: CGFloat = 134, betMinAward: CGFloat = 224, betRecovery: CGFloat = 104, betTip: CGFloat = 1, actualCurrencySymbol: String = "â¬") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 896), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 896)


        //// Color Declarations
        let fillColor15 = UIColor(red: 1.000, green: 0.000, blue: 0.647, alpha: 1.000)
        let gradientColor4 = UIColor(red: 0.000, green: 1.000, blue: 0.761, alpha: 1.000)
        let bezierGradientColor5 = UIColor(red: 0.192, green: 1.000, blue: 0.953, alpha: 1.000)
        let color = UIColor(red: 0.000, green: 0.333, blue: 1.000, alpha: 1.000)
        let hintGradientColor = UIColor(red: 0.121, green: 0.068, blue: 0.948, alpha: 1.000)
        let hintGradientColor2 = UIColor(red: 0.151, green: 0.202, blue: 0.532, alpha: 1.000)
        let color6 = UIColor(red: 0.176, green: 0.333, blue: 0.698, alpha: 1.000)

        //// Gradient Declarations
        let hintGradient = CGGradient(colorsSpace: nil, colors: [hintGradientColor.cgColor, hintGradientColor2.cgColor] as CFArray, locations: [0, 1])!

        //// Variable Declarations
        let betBarExp: CGFloat = (1 - betDepo / betAim) * 155
        let betRecoveryExp = "\(Int(round(betRecovery)))" + "%"
        let betTipExp: CGFloat = betTip >= 0.06 ? abs(cos((betTip - 0.224) * 10 / CGFloat.pi * 180 * CGFloat.pi/180)) : 0
        let betAimExp = actualCurrencySymbol + "\(Int(round(betAim)))"
        let betDepoExp = actualCurrencySymbol + "\(Int(round(betDepo)))"
        let betSumExp = actualCurrencySymbol + "\(Int(round(betSum)))"
        let betMinAwardExp = actualCurrencySymbol + "\(Int(round(betMinAward)))"

        //// Rectangle 28 Drawing
        context.saveGState()
        context.setAlpha(0.9)

        let rectangle28Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 414, height: 896))
        context.saveGState()
        rectangle28Path.addClip()
        context.drawLinearGradient(hintGradient, start: CGPoint(x: 207, y: -0), end: CGPoint(x: 207, y: 896), options: [])
        context.restoreGState()

        context.restoreGState()


        //// Buttons Group
        //// Win Group
        //// Win Button
        //// Rectangle 31 Drawing
        let rectangle31Path = UIBezierPath(rect: CGRect(x: 185.79, y: 478.59, width: 184.75, height: 30.7))
        color6.setFill()
        rectangle31Path.fill()


        //// Text 14 Drawing
        let text14Rect = CGRect(x: 186.19, y: 478.47, width: 184.28, height: 30.43)
        let text14Style = NSMutableParagraphStyle()
        text14Style.alignment = .center
        let text14FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text14Style,
        ] as [NSAttributedString.Key: Any]

        let text14TextHeight: CGFloat = betMinAwardExp.boundingRect(with: CGSize(width: text14Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text14FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text14Rect)
        betMinAwardExp.draw(in: CGRect(x: text14Rect.minX, y: text14Rect.minY + (text14Rect.height - text14TextHeight) / 2, width: text14Rect.width, height: text14TextHeight), withAttributes: text14FontAttributes)
        context.restoreGState()




        //// Win Title Drawing
        let winTitleRect = CGRect(x: 40, y: 478.22, width: 142.05, height: 30.99)
        let winTitleTextContent = "ÐÐ¸Ð½. Ð²ÑÐ¸Ð³ÑÑÑ:"
        let winTitleStyle = NSMutableParagraphStyle()
        winTitleStyle.alignment = .left
        let winTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: winTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let winTitleTextHeight: CGFloat = winTitleTextContent.boundingRect(with: CGSize(width: winTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: winTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: winTitleRect)
        winTitleTextContent.draw(in: CGRect(x: winTitleRect.minX, y: winTitleRect.minY + (winTitleRect.height - winTitleTextHeight) / 2, width: winTitleRect.width, height: winTitleTextHeight), withAttributes: winTitleFontAttributes)
        context.restoreGState()




        //// Bet Sum Group
        //// Bet Button
        //// Rectangle 29 Drawing
        let rectangle29Path = UIBezierPath(rect: CGRect(x: 186, y: 429.2, width: 184.75, height: 30.7))
        color6.setFill()
        rectangle29Path.fill()


        //// Tip Drawing
        context.saveGState()
        context.setAlpha(betTipExp)

        let tipPath = UIBezierPath(rect: CGRect(x: 185.54, y: 428.91, width: 184.75, height: 30.7))
        fillColor15.setStroke()
        tipPath.lineWidth = 1
        tipPath.stroke()

        context.restoreGState()


        //// Bet Sum Text Drawing
        let betSumTextRect = CGRect(x: 186.35, y: 429.1, width: 184.37, height: 30.38)
        let betSumTextStyle = NSMutableParagraphStyle()
        betSumTextStyle.alignment = .center
        let betSumTextFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: betSumTextStyle,
        ] as [NSAttributedString.Key: Any]

        let betSumTextTextHeight: CGFloat = betSumExp.boundingRect(with: CGSize(width: betSumTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: betSumTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: betSumTextRect)
        betSumExp.draw(in: CGRect(x: betSumTextRect.minX, y: betSumTextRect.minY + (betSumTextRect.height - betSumTextTextHeight) / 2, width: betSumTextRect.width, height: betSumTextTextHeight), withAttributes: betSumTextFontAttributes)
        context.restoreGState()




        //// Bet Title Drawing
        let betTitleRect = CGRect(x: 40, y: 429.92, width: 142.05, height: 30.18)
        let betTitleTextContent = "Ð¡ÑÐ°Ð²ÐºÐ° Ð½Ð° Ð¸Ð³ÑÑ:"
        let betTitleStyle = NSMutableParagraphStyle()
        betTitleStyle.alignment = .left
        let betTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: betTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let betTitleTextHeight: CGFloat = betTitleTextContent.boundingRect(with: CGSize(width: betTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: betTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: betTitleRect)
        betTitleTextContent.draw(in: CGRect(x: betTitleRect.minX, y: betTitleRect.minY + (betTitleRect.height - betTitleTextHeight) / 2, width: betTitleRect.width, height: betTitleTextHeight), withAttributes: betTitleFontAttributes)
        context.restoreGState()




        //// Depo Group
        //// Depo Button
        //// Rectangle 30 Drawing
        let rectangle30Path = UIBezierPath(rect: CGRect(x: 186, y: 379.06, width: 184.75, height: 30.7))
        color6.setFill()
        rectangle30Path.fill()


        //// BetDepoText Drawing
        let betDepoTextRect = CGRect(x: 186.27, y: 379.14, width: 184.62, height: 30.12)
        let betDepoTextStyle = NSMutableParagraphStyle()
        betDepoTextStyle.alignment = .center
        let betDepoTextFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: betDepoTextStyle,
        ] as [NSAttributedString.Key: Any]

        let betDepoTextTextHeight: CGFloat = betDepoExp.boundingRect(with: CGSize(width: betDepoTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: betDepoTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: betDepoTextRect)
        betDepoExp.draw(in: CGRect(x: betDepoTextRect.minX, y: betDepoTextRect.minY + (betDepoTextRect.height - betDepoTextTextHeight) / 2, width: betDepoTextRect.width, height: betDepoTextTextHeight), withAttributes: betDepoTextFontAttributes)
        context.restoreGState()




        //// Depo Title Drawing
        let depoTitleRect = CGRect(x: 40, y: 379.32, width: 142.05, height: 30.18)
        let depoTitleTextContent = "ÐÐµÐ¿Ð¾Ð·Ð¸Ñ:"
        let depoTitleStyle = NSMutableParagraphStyle()
        depoTitleStyle.alignment = .left
        let depoTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: depoTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let depoTitleTextHeight: CGFloat = depoTitleTextContent.boundingRect(with: CGSize(width: depoTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: depoTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: depoTitleRect)
        depoTitleTextContent.draw(in: CGRect(x: depoTitleRect.minX, y: depoTitleRect.minY + (depoTitleRect.height - depoTitleTextHeight) / 2, width: depoTitleRect.width, height: depoTitleTextHeight), withAttributes: depoTitleFontAttributes)
        context.restoreGState()




        //// Rectangle 33 Drawing
        let rectangle33Path = UIBezierPath(roundedRect: CGRect(x: 30.32, y: 336.15, width: 353.82, height: 214.95), cornerRadius: 10)
        bezierGradientColor5.setStroke()
        rectangle33Path.lineWidth = 1
        rectangle33Path.stroke()




        //// Aim Group
        //// DepoText Drawing
        let depoTextRect = CGRect(x: 91.27, y: 215.4, width: 52.77, height: 26.92)
        let depoTextStyle = NSMutableParagraphStyle()
        depoTextStyle.alignment = .left
        let depoTextFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: gradientColor4,
            .paragraphStyle: depoTextStyle,
        ] as [NSAttributedString.Key: Any]

        let depoTextTextHeight: CGFloat = betDepoExp.boundingRect(with: CGSize(width: depoTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: depoTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: depoTextRect)
        betDepoExp.draw(in: CGRect(x: depoTextRect.minX, y: depoTextRect.minY + (depoTextRect.height - depoTextTextHeight) / 2, width: depoTextRect.width, height: depoTextTextHeight), withAttributes: depoTextFontAttributes)
        context.restoreGState()


        //// Rectangle 35 Drawing
        let rectangle35Path = UIBezierPath(rect: CGRect(x: 28.94, y: 130, width: 50.76, height: 155))
        gradientColor4.setFill()
        rectangle35Path.fill()


        //// Rectangle 34 Drawing
        let rectangle34Path = UIBezierPath(rect: CGRect(x: 28.95, y: 130, width: 50.7, height: betBarExp))
        color.setFill()
        rectangle34Path.fill()


        //// AimText Drawing
        let aimTextRect = CGRect(x: 87.23, y: 150.28, width: 109, height: 44.64)
        let aimTextStyle = NSMutableParagraphStyle()
        aimTextStyle.alignment = .left
        let aimTextFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 32)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: aimTextStyle,
        ] as [NSAttributedString.Key: Any]

        let aimTextTextHeight: CGFloat = betAimExp.boundingRect(with: CGSize(width: aimTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: aimTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: aimTextRect)
        betAimExp.draw(in: CGRect(x: aimTextRect.minX, y: aimTextRect.minY + (aimTextRect.height - aimTextTextHeight) / 2, width: aimTextRect.width, height: aimTextTextHeight), withAttributes: aimTextFontAttributes)
        context.restoreGState()


        //// Text 16 Drawing
        let text16Rect = CGRect(x: 89.19, y: 112.73, width: 104.84, height: 47)
        let text16TextContent = "ÑÐµÐ»Ñ:"
        let text16Style = NSMutableParagraphStyle()
        text16Style.alignment = .left
        let text16FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text16Style,
        ] as [NSAttributedString.Key: Any]

        let text16TextHeight: CGFloat = text16TextContent.boundingRect(with: CGSize(width: text16Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text16FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text16Rect)
        text16TextContent.draw(in: CGRect(x: text16Rect.minX, y: text16Rect.minY + (text16Rect.height - text16TextHeight) / 2, width: text16Rect.width, height: text16TextHeight), withAttributes: text16FontAttributes)
        context.restoreGState()




        //// Remaining Group
        //// Text 18 Drawing
        let text18Rect = CGRect(x: 220.07, y: 122.01, width: 173.24, height: 60.62)
        let text18Style = NSMutableParagraphStyle()
        text18Style.alignment = .left
        let text18FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 24)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text18Style,
        ] as [NSAttributedString.Key: Any]

        "Ð½ÐµÑÐ³Ð¾ÑÐ°ÐµÐ¼Ð°Ñ ÑÐ¾ÑÐºÐ°:".draw(in: text18Rect, withAttributes: text18FontAttributes)


        //// Text 20 Drawing
        let text20Rect = CGRect(x: 220.2, y: 188.65, width: 172.87, height: 67.1)
        let text20Style = NSMutableParagraphStyle()
        text20Style.alignment = .center
        let text20FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 78)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text20Style,
        ] as [NSAttributedString.Key: Any]

        let text20TextHeight: CGFloat = betFireproofLevel.boundingRect(with: CGSize(width: text20Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text20FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text20Rect)
        betFireproofLevel.draw(in: CGRect(x: text20Rect.minX, y: text20Rect.minY + (text20Rect.height - text20TextHeight) / 2, width: text20Rect.width, height: text20TextHeight), withAttributes: text20FontAttributes)
        context.restoreGState()


        //// Text Drawing
        let textRect = CGRect(x: 220.51, y: 250.73, width: 172.88, height: 60.62)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 24)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        "Ð²Ð¾Ð¿ÑÐ¾Ñ".draw(in: textRect, withAttributes: textFontAttributes)




        //// Group 2
        //// Text 21 Drawing
        let text21Rect = CGRect(x: 29.24, y: 585.28, width: 293.75, height: 60.62)
        let text21TextContent = "Ð¡Ð¾ÑÑÐ¾ÑÐ½Ð¸Ðµ Ð·Ð¾Ð½Ð´Ð°:"
        let text21Style = NSMutableParagraphStyle()
        text21Style.alignment = .left
        let text21FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text21Style,
        ] as [NSAttributedString.Key: Any]

        let text21TextHeight: CGFloat = text21TextContent.boundingRect(with: CGSize(width: text21Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text21FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text21Rect)
        text21TextContent.draw(in: CGRect(x: text21Rect.minX, y: text21Rect.minY + (text21Rect.height - text21TextHeight) / 2, width: text21Rect.width, height: text21TextHeight), withAttributes: text21FontAttributes)
        context.restoreGState()


        //// Text 22 Drawing
        let text22Rect = CGRect(x: 270.47, y: 581.66, width: 118.34, height: 67.1)
        let text22Style = NSMutableParagraphStyle()
        text22Style.alignment = .right
        let text22FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 45)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text22Style,
        ] as [NSAttributedString.Key: Any]

        let text22TextHeight: CGFloat = betRecoveryExp.boundingRect(with: CGSize(width: text22Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text22FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text22Rect)
        betRecoveryExp.draw(in: CGRect(x: text22Rect.minX, y: text22Rect.minY + (text22Rect.height - text22TextHeight) / 2, width: text22Rect.width, height: text22TextHeight), withAttributes: text22FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawBetScreen_58(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit, betAim: CGFloat = 1063, betFireproofLevel: String = "25", betDepo: CGFloat = 48, betSum: CGFloat = 134, betMinAward: CGFloat = 224, betRecovery: CGFloat = 104, betTip: CGFloat = 1, actualCurrencySymbol: String = "â¬") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)


        //// Color Declarations
        let fillColor15 = UIColor(red: 1.000, green: 0.000, blue: 0.647, alpha: 1.000)
        let gradientColor4 = UIColor(red: 0.000, green: 1.000, blue: 0.761, alpha: 1.000)
        let bezierGradientColor5 = UIColor(red: 0.192, green: 1.000, blue: 0.953, alpha: 1.000)
        let color = UIColor(red: 0.000, green: 0.333, blue: 1.000, alpha: 1.000)
        let hintGradientColor = UIColor(red: 0.121, green: 0.068, blue: 0.948, alpha: 1.000)
        let hintGradientColor2 = UIColor(red: 0.151, green: 0.202, blue: 0.532, alpha: 1.000)
        let color6 = UIColor(red: 0.176, green: 0.333, blue: 0.698, alpha: 1.000)

        //// Gradient Declarations
        let hintGradient = CGGradient(colorsSpace: nil, colors: [hintGradientColor.cgColor, hintGradientColor2.cgColor] as CFArray, locations: [0, 1])!

        //// Variable Declarations
        let betBarExp: CGFloat = (1 - betDepo / betAim) * 155
        let betRecoveryExp = "\(Int(round(betRecovery)))" + "%"
        let betTipExp: CGFloat = betTip >= 0.06 ? abs(cos((betTip - 0.224) * 10 / CGFloat.pi * 180 * CGFloat.pi/180)) : 0
        let betAimExp = actualCurrencySymbol + "\(Int(round(betAim)))"
        let betDepoExp = actualCurrencySymbol + "\(Int(round(betDepo)))"
        let betSumExp = actualCurrencySymbol + "\(Int(round(betSum)))"
        let betMinAwardExp = actualCurrencySymbol + "\(Int(round(betMinAward)))"

        //// Rectangle 28 Drawing
        context.saveGState()
        context.setAlpha(0.9)

        let rectangle28Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 812))
        context.saveGState()
        rectangle28Path.addClip()
        context.drawLinearGradient(hintGradient, start: CGPoint(x: 187.5, y: -0), end: CGPoint(x: 187.5, y: 812), options: [])
        context.restoreGState()

        context.restoreGState()


        //// Buttons Group
        //// Win Group
        //// Win Button
        //// Rectangle 31 Drawing
        let rectangle31Path = UIBezierPath(rect: CGRect(x: 166.79, y: 462.59, width: 184.75, height: 30.7))
        color6.setFill()
        rectangle31Path.fill()


        //// Text 14 Drawing
        let text14Rect = CGRect(x: 167.19, y: 462.47, width: 184.28, height: 30.43)
        let text14Style = NSMutableParagraphStyle()
        text14Style.alignment = .center
        let text14FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text14Style,
        ] as [NSAttributedString.Key: Any]

        let text14TextHeight: CGFloat = betMinAwardExp.boundingRect(with: CGSize(width: text14Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text14FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text14Rect)
        betMinAwardExp.draw(in: CGRect(x: text14Rect.minX, y: text14Rect.minY + (text14Rect.height - text14TextHeight) / 2, width: text14Rect.width, height: text14TextHeight), withAttributes: text14FontAttributes)
        context.restoreGState()




        //// Win Title Drawing
        let winTitleRect = CGRect(x: 20, y: 462.45, width: 142.05, height: 30.81)
        let winTitleTextContent = "ÐÐ¸Ð½. Ð²ÑÐ¸Ð³ÑÑÑ:"
        let winTitleStyle = NSMutableParagraphStyle()
        winTitleStyle.alignment = .left
        let winTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: winTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let winTitleTextHeight: CGFloat = winTitleTextContent.boundingRect(with: CGSize(width: winTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: winTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: winTitleRect)
        winTitleTextContent.draw(in: CGRect(x: winTitleRect.minX, y: winTitleRect.minY + (winTitleRect.height - winTitleTextHeight) / 2, width: winTitleRect.width, height: winTitleTextHeight), withAttributes: winTitleFontAttributes)
        context.restoreGState()




        //// Bet Sum Group
        //// Bet Button
        //// Rectangle 29 Drawing
        let rectangle29Path = UIBezierPath(rect: CGRect(x: 167, y: 413.2, width: 184.75, height: 30.7))
        color6.setFill()
        rectangle29Path.fill()


        //// Tip Drawing
        context.saveGState()
        context.setAlpha(betTipExp)

        let tipPath = UIBezierPath(rect: CGRect(x: 166.54, y: 412.91, width: 184.75, height: 30.7))
        fillColor15.setStroke()
        tipPath.lineWidth = 1
        tipPath.stroke()

        context.restoreGState()


        //// Bet Sum Text Drawing
        let betSumTextRect = CGRect(x: 167.35, y: 413.1, width: 184.37, height: 30.38)
        let betSumTextStyle = NSMutableParagraphStyle()
        betSumTextStyle.alignment = .center
        let betSumTextFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: betSumTextStyle,
        ] as [NSAttributedString.Key: Any]

        let betSumTextTextHeight: CGFloat = betSumExp.boundingRect(with: CGSize(width: betSumTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: betSumTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: betSumTextRect)
        betSumExp.draw(in: CGRect(x: betSumTextRect.minX, y: betSumTextRect.minY + (betSumTextRect.height - betSumTextTextHeight) / 2, width: betSumTextRect.width, height: betSumTextTextHeight), withAttributes: betSumTextFontAttributes)
        context.restoreGState()




        //// Bet Title Drawing
        let betTitleRect = CGRect(x: 20, y: 412.92, width: 142.05, height: 30.18)
        let betTitleTextContent = "Ð¡ÑÐ°Ð²ÐºÐ° Ð½Ð° Ð¸Ð³ÑÑ:"
        let betTitleStyle = NSMutableParagraphStyle()
        betTitleStyle.alignment = .left
        let betTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: betTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let betTitleTextHeight: CGFloat = betTitleTextContent.boundingRect(with: CGSize(width: betTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: betTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: betTitleRect)
        betTitleTextContent.draw(in: CGRect(x: betTitleRect.minX, y: betTitleRect.minY + (betTitleRect.height - betTitleTextHeight) / 2, width: betTitleRect.width, height: betTitleTextHeight), withAttributes: betTitleFontAttributes)
        context.restoreGState()




        //// Depo Group
        //// Depo Button
        //// Rectangle 30 Drawing
        let rectangle30Path = UIBezierPath(rect: CGRect(x: 167, y: 363.06, width: 184.75, height: 30.7))
        color6.setFill()
        rectangle30Path.fill()


        //// BetDepoText Drawing
        let betDepoTextRect = CGRect(x: 167.27, y: 363.14, width: 184.62, height: 30.12)
        let betDepoTextStyle = NSMutableParagraphStyle()
        betDepoTextStyle.alignment = .center
        let betDepoTextFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: betDepoTextStyle,
        ] as [NSAttributedString.Key: Any]

        let betDepoTextTextHeight: CGFloat = betDepoExp.boundingRect(with: CGSize(width: betDepoTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: betDepoTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: betDepoTextRect)
        betDepoExp.draw(in: CGRect(x: betDepoTextRect.minX, y: betDepoTextRect.minY + (betDepoTextRect.height - betDepoTextTextHeight) / 2, width: betDepoTextRect.width, height: betDepoTextTextHeight), withAttributes: betDepoTextFontAttributes)
        context.restoreGState()




        //// Depo Title Drawing
        let depoTitleRect = CGRect(x: 20, y: 363.32, width: 142.05, height: 30.18)
        let depoTitleTextContent = "ÐÐµÐ¿Ð¾Ð·Ð¸Ñ:"
        let depoTitleStyle = NSMutableParagraphStyle()
        depoTitleStyle.alignment = .left
        let depoTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: depoTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let depoTitleTextHeight: CGFloat = depoTitleTextContent.boundingRect(with: CGSize(width: depoTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: depoTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: depoTitleRect)
        depoTitleTextContent.draw(in: CGRect(x: depoTitleRect.minX, y: depoTitleRect.minY + (depoTitleRect.height - depoTitleTextHeight) / 2, width: depoTitleRect.width, height: depoTitleTextHeight), withAttributes: depoTitleFontAttributes)
        context.restoreGState()




        //// Rectangle 33 Drawing
        let rectangle33Path = UIBezierPath(roundedRect: CGRect(x: 11.32, y: 320.15, width: 353.82, height: 214.95), cornerRadius: 10)
        bezierGradientColor5.setStroke()
        rectangle33Path.lineWidth = 1
        rectangle33Path.stroke()




        //// Aim Group
        //// Depo1 Drawing
        let depo1Rect = CGRect(x: 72.27, y: 199.4, width: 52.77, height: 26.92)
        let depo1Style = NSMutableParagraphStyle()
        depo1Style.alignment = .left
        let depo1FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: gradientColor4,
            .paragraphStyle: depo1Style,
        ] as [NSAttributedString.Key: Any]

        let depo1TextHeight: CGFloat = betDepoExp.boundingRect(with: CGSize(width: depo1Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: depo1FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: depo1Rect)
        betDepoExp.draw(in: CGRect(x: depo1Rect.minX, y: depo1Rect.minY + (depo1Rect.height - depo1TextHeight) / 2, width: depo1Rect.width, height: depo1TextHeight), withAttributes: depo1FontAttributes)
        context.restoreGState()


        //// Rectangle 35 Drawing
        let rectangle35Path = UIBezierPath(rect: CGRect(x: 9.94, y: 114, width: 50.76, height: 155))
        gradientColor4.setFill()
        rectangle35Path.fill()


        //// Rectangle 34 Drawing
        let rectangle34Path = UIBezierPath(rect: CGRect(x: 9.95, y: 114, width: 50.7, height: betBarExp))
        color.setFill()
        rectangle34Path.fill()


        //// Aim Drawing
        let aimRect = CGRect(x: 68.23, y: 134.28, width: 109, height: 44.64)
        let aimStyle = NSMutableParagraphStyle()
        aimStyle.alignment = .left
        let aimFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 32)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: aimStyle,
        ] as [NSAttributedString.Key: Any]

        let aimTextHeight: CGFloat = betAimExp.boundingRect(with: CGSize(width: aimRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: aimFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: aimRect)
        betAimExp.draw(in: CGRect(x: aimRect.minX, y: aimRect.minY + (aimRect.height - aimTextHeight) / 2, width: aimRect.width, height: aimTextHeight), withAttributes: aimFontAttributes)
        context.restoreGState()


        //// Text 16 Drawing
        let text16Rect = CGRect(x: 70.19, y: 96.73, width: 104.84, height: 47)
        let text16TextContent = "ÑÐµÐ»Ñ:"
        let text16Style = NSMutableParagraphStyle()
        text16Style.alignment = .left
        let text16FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text16Style,
        ] as [NSAttributedString.Key: Any]

        let text16TextHeight: CGFloat = text16TextContent.boundingRect(with: CGSize(width: text16Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text16FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text16Rect)
        text16TextContent.draw(in: CGRect(x: text16Rect.minX, y: text16Rect.minY + (text16Rect.height - text16TextHeight) / 2, width: text16Rect.width, height: text16TextHeight), withAttributes: text16FontAttributes)
        context.restoreGState()




        //// Remaining Group
        //// Text 18 Drawing
        let text18Rect = CGRect(x: 194.06, y: 106.1, width: 173.24, height: 60.62)
        let text18Style = NSMutableParagraphStyle()
        text18Style.alignment = .left
        let text18FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 24)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text18Style,
        ] as [NSAttributedString.Key: Any]

        "Ð½ÐµÑÐ³Ð¾ÑÐ°ÐµÐ¼Ð°Ñ ÑÐ¾ÑÐºÐ°:".draw(in: text18Rect, withAttributes: text18FontAttributes)


        //// Text 20 Drawing
        let text20Rect = CGRect(x: 194.48, y: 172.65, width: 172.36, height: 67.1)
        let text20Style = NSMutableParagraphStyle()
        text20Style.alignment = .center
        let text20FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 78)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text20Style,
        ] as [NSAttributedString.Key: Any]

        let text20TextHeight: CGFloat = betFireproofLevel.boundingRect(with: CGSize(width: text20Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text20FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text20Rect)
        betFireproofLevel.draw(in: CGRect(x: text20Rect.minX, y: text20Rect.minY + (text20Rect.height - text20TextHeight) / 2, width: text20Rect.width, height: text20TextHeight), withAttributes: text20FontAttributes)
        context.restoreGState()


        //// Text Drawing
        let textRect = CGRect(x: 194.1, y: 234.83, width: 172.88, height: 60.62)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 24)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        "Ð²Ð¾Ð¿ÑÐ¾Ñ".draw(in: textRect, withAttributes: textFontAttributes)




        //// Group 2
        //// Text 21 Drawing
        let text21Rect = CGRect(x: 10.24, y: 569.28, width: 293.75, height: 60.62)
        let text21TextContent = "Ð¡Ð¾ÑÑÐ¾ÑÐ½Ð¸Ðµ Ð·Ð¾Ð½Ð´Ð°:"
        let text21Style = NSMutableParagraphStyle()
        text21Style.alignment = .left
        let text21FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text21Style,
        ] as [NSAttributedString.Key: Any]

        let text21TextHeight: CGFloat = text21TextContent.boundingRect(with: CGSize(width: text21Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text21FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text21Rect)
        text21TextContent.draw(in: CGRect(x: text21Rect.minX, y: text21Rect.minY + (text21Rect.height - text21TextHeight) / 2, width: text21Rect.width, height: text21TextHeight), withAttributes: text21FontAttributes)
        context.restoreGState()


        //// Text 22 Drawing
        let text22Rect = CGRect(x: 251.47, y: 565.66, width: 118.34, height: 67.1)
        let text22Style = NSMutableParagraphStyle()
        text22Style.alignment = .right
        let text22FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 45)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text22Style,
        ] as [NSAttributedString.Key: Any]

        let text22TextHeight: CGFloat = betRecoveryExp.boundingRect(with: CGSize(width: text22Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text22FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text22Rect)
        betRecoveryExp.draw(in: CGRect(x: text22Rect.minX, y: text22Rect.minY + (text22Rect.height - text22TextHeight) / 2, width: text22Rect.width, height: text22TextHeight), withAttributes: text22FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawBetScreen_55(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 736), resizing: ResizingBehavior = .aspectFit, betAim: CGFloat = 1063, betFireproofLevel: String = "25", betDepo: CGFloat = 48, betSum: CGFloat = 134, betMinAward: CGFloat = 224, betRecovery: CGFloat = 104, betTip: CGFloat = 1, actualCurrencySymbol: String = "â¬") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 736), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 736)


        //// Color Declarations
        let fillColor15 = UIColor(red: 1.000, green: 0.000, blue: 0.647, alpha: 1.000)
        let gradientColor4 = UIColor(red: 0.000, green: 1.000, blue: 0.761, alpha: 1.000)
        let bezierGradientColor5 = UIColor(red: 0.192, green: 1.000, blue: 0.953, alpha: 1.000)
        let color = UIColor(red: 0.000, green: 0.333, blue: 1.000, alpha: 1.000)
        let hintGradientColor = UIColor(red: 0.121, green: 0.068, blue: 0.948, alpha: 1.000)
        let hintGradientColor2 = UIColor(red: 0.151, green: 0.202, blue: 0.532, alpha: 1.000)
        let color6 = UIColor(red: 0.176, green: 0.333, blue: 0.698, alpha: 1.000)

        //// Gradient Declarations
        let hintGradient = CGGradient(colorsSpace: nil, colors: [hintGradientColor.cgColor, hintGradientColor2.cgColor] as CFArray, locations: [0, 1])!

        //// Variable Declarations
        let betBarExp: CGFloat = (1 - betDepo / betAim) * 155
        let betRecoveryExp = "\(Int(round(betRecovery)))" + "%"
        let betTipExp: CGFloat = betTip >= 0.06 ? abs(cos((betTip - 0.224) * 10 / CGFloat.pi * 180 * CGFloat.pi/180)) : 0
        let betAimExp = actualCurrencySymbol + "\(Int(round(betAim)))"
        let betDepoExp = actualCurrencySymbol + "\(Int(round(betDepo)))"
        let betSumExp = actualCurrencySymbol + "\(Int(round(betSum)))"
        let betMinAwardExp = actualCurrencySymbol + "\(Int(round(betMinAward)))"

        //// Rectangle 28 Drawing
        context.saveGState()
        context.setAlpha(0.9)

        let rectangle28Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 414, height: 736))
        context.saveGState()
        rectangle28Path.addClip()
        context.drawLinearGradient(hintGradient, start: CGPoint(x: 207, y: -0), end: CGPoint(x: 207, y: 736), options: [])
        context.restoreGState()

        context.restoreGState()


        //// Buttons Group
        //// Win Group
        //// Win Button
        //// Rectangle 31 Drawing
        let rectangle31Path = UIBezierPath(rect: CGRect(x: 185.79, y: 455.59, width: 184.75, height: 30.7))
        color6.setFill()
        rectangle31Path.fill()


        //// Text 14 Drawing
        let text14Rect = CGRect(x: 186.19, y: 455.47, width: 184.28, height: 30.43)
        let text14Style = NSMutableParagraphStyle()
        text14Style.alignment = .center
        let text14FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text14Style,
        ] as [NSAttributedString.Key: Any]

        let text14TextHeight: CGFloat = betMinAwardExp.boundingRect(with: CGSize(width: text14Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text14FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text14Rect)
        betMinAwardExp.draw(in: CGRect(x: text14Rect.minX, y: text14Rect.minY + (text14Rect.height - text14TextHeight) / 2, width: text14Rect.width, height: text14TextHeight), withAttributes: text14FontAttributes)
        context.restoreGState()




        //// Win Title Drawing
        let winTitleRect = CGRect(x: 40, y: 455.45, width: 142.05, height: 30.38)
        let winTitleTextContent = "ÐÐ¸Ð½. Ð²ÑÐ¸Ð³ÑÑÑ:"
        let winTitleStyle = NSMutableParagraphStyle()
        winTitleStyle.alignment = .left
        let winTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: winTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let winTitleTextHeight: CGFloat = winTitleTextContent.boundingRect(with: CGSize(width: winTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: winTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: winTitleRect)
        winTitleTextContent.draw(in: CGRect(x: winTitleRect.minX, y: winTitleRect.minY + (winTitleRect.height - winTitleTextHeight) / 2, width: winTitleRect.width, height: winTitleTextHeight), withAttributes: winTitleFontAttributes)
        context.restoreGState()




        //// Bet Sum Group
        //// Bet Button
        //// Rectangle 29 Drawing
        let rectangle29Path = UIBezierPath(rect: CGRect(x: 186, y: 406.2, width: 184.75, height: 30.7))
        color6.setFill()
        rectangle29Path.fill()


        //// Bet Sum Text Drawing
        let betSumTextRect = CGRect(x: 186.35, y: 406.1, width: 184.37, height: 30.38)
        let betSumTextStyle = NSMutableParagraphStyle()
        betSumTextStyle.alignment = .center
        let betSumTextFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: betSumTextStyle,
        ] as [NSAttributedString.Key: Any]

        let betSumTextTextHeight: CGFloat = betSumExp.boundingRect(with: CGSize(width: betSumTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: betSumTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: betSumTextRect)
        betSumExp.draw(in: CGRect(x: betSumTextRect.minX, y: betSumTextRect.minY + (betSumTextRect.height - betSumTextTextHeight) / 2, width: betSumTextRect.width, height: betSumTextTextHeight), withAttributes: betSumTextFontAttributes)
        context.restoreGState()




        //// Bet Title Drawing
        let betTitleRect = CGRect(x: 40, y: 406.92, width: 142.05, height: 30.18)
        let betTitleTextContent = "Ð¡ÑÐ°Ð²ÐºÐ° Ð½Ð° Ð¸Ð³ÑÑ:"
        let betTitleStyle = NSMutableParagraphStyle()
        betTitleStyle.alignment = .left
        let betTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: betTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let betTitleTextHeight: CGFloat = betTitleTextContent.boundingRect(with: CGSize(width: betTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: betTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: betTitleRect)
        betTitleTextContent.draw(in: CGRect(x: betTitleRect.minX, y: betTitleRect.minY + (betTitleRect.height - betTitleTextHeight) / 2, width: betTitleRect.width, height: betTitleTextHeight), withAttributes: betTitleFontAttributes)
        context.restoreGState()


        //// Tip Drawing
        context.saveGState()
        context.setAlpha(betTipExp)

        let tipPath = UIBezierPath(rect: CGRect(x: 186.54, y: 405.91, width: 184.75, height: 30.7))
        fillColor15.setStroke()
        tipPath.lineWidth = 1
        tipPath.stroke()

        context.restoreGState()




        //// Depo Group
        //// Depo Button
        //// Rectangle 30 Drawing
        let rectangle30Path = UIBezierPath(rect: CGRect(x: 186, y: 356.06, width: 184.75, height: 30.7))
        color6.setFill()
        rectangle30Path.fill()


        //// BetDepoText Drawing
        let betDepoTextRect = CGRect(x: 186.27, y: 356.14, width: 184.62, height: 30.12)
        let betDepoTextStyle = NSMutableParagraphStyle()
        betDepoTextStyle.alignment = .center
        let betDepoTextFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: betDepoTextStyle,
        ] as [NSAttributedString.Key: Any]

        let betDepoTextTextHeight: CGFloat = betDepoExp.boundingRect(with: CGSize(width: betDepoTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: betDepoTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: betDepoTextRect)
        betDepoExp.draw(in: CGRect(x: betDepoTextRect.minX, y: betDepoTextRect.minY + (betDepoTextRect.height - betDepoTextTextHeight) / 2, width: betDepoTextRect.width, height: betDepoTextTextHeight), withAttributes: betDepoTextFontAttributes)
        context.restoreGState()




        //// Depo Title Drawing
        let depoTitleRect = CGRect(x: 40, y: 356.32, width: 142.05, height: 30.18)
        let depoTitleTextContent = "ÐÐµÐ¿Ð¾Ð·Ð¸Ñ:"
        let depoTitleStyle = NSMutableParagraphStyle()
        depoTitleStyle.alignment = .left
        let depoTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: depoTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let depoTitleTextHeight: CGFloat = depoTitleTextContent.boundingRect(with: CGSize(width: depoTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: depoTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: depoTitleRect)
        depoTitleTextContent.draw(in: CGRect(x: depoTitleRect.minX, y: depoTitleRect.minY + (depoTitleRect.height - depoTitleTextHeight) / 2, width: depoTitleRect.width, height: depoTitleTextHeight), withAttributes: depoTitleFontAttributes)
        context.restoreGState()




        //// Rectangle 33 Drawing
        let rectangle33Path = UIBezierPath(roundedRect: CGRect(x: 30.32, y: 313.15, width: 353.82, height: 214.95), cornerRadius: 10)
        bezierGradientColor5.setStroke()
        rectangle33Path.lineWidth = 1
        rectangle33Path.stroke()




        //// Aim Group
        //// Depo1 Drawing
        let depo1Rect = CGRect(x: 91.27, y: 192.4, width: 52.77, height: 26.92)
        let depo1Style = NSMutableParagraphStyle()
        depo1Style.alignment = .left
        let depo1FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: gradientColor4,
            .paragraphStyle: depo1Style,
        ] as [NSAttributedString.Key: Any]

        let depo1TextHeight: CGFloat = betDepoExp.boundingRect(with: CGSize(width: depo1Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: depo1FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: depo1Rect)
        betDepoExp.draw(in: CGRect(x: depo1Rect.minX, y: depo1Rect.minY + (depo1Rect.height - depo1TextHeight) / 2, width: depo1Rect.width, height: depo1TextHeight), withAttributes: depo1FontAttributes)
        context.restoreGState()


        //// Rectangle 35 Drawing
        let rectangle35Path = UIBezierPath(rect: CGRect(x: 28.94, y: 107.53, width: 50.76, height: 155))
        gradientColor4.setFill()
        rectangle35Path.fill()


        //// Rectangle 34 Drawing
        let rectangle34Path = UIBezierPath(rect: CGRect(x: 28.95, y: 107.06, width: 50.7, height: betBarExp))
        color.setFill()
        rectangle34Path.fill()


        //// Aim Drawing
        let aimRect = CGRect(x: 87.23, y: 127.28, width: 109, height: 44.64)
        let aimStyle = NSMutableParagraphStyle()
        aimStyle.alignment = .left
        let aimFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 32)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: aimStyle,
        ] as [NSAttributedString.Key: Any]

        let aimTextHeight: CGFloat = betAimExp.boundingRect(with: CGSize(width: aimRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: aimFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: aimRect)
        betAimExp.draw(in: CGRect(x: aimRect.minX, y: aimRect.minY + (aimRect.height - aimTextHeight) / 2, width: aimRect.width, height: aimTextHeight), withAttributes: aimFontAttributes)
        context.restoreGState()


        //// Text 16 Drawing
        let text16Rect = CGRect(x: 89.19, y: 89.73, width: 104.84, height: 47)
        let text16TextContent = "ÑÐµÐ»Ñ:"
        let text16Style = NSMutableParagraphStyle()
        text16Style.alignment = .left
        let text16FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text16Style,
        ] as [NSAttributedString.Key: Any]

        let text16TextHeight: CGFloat = text16TextContent.boundingRect(with: CGSize(width: text16Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text16FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text16Rect)
        text16TextContent.draw(in: CGRect(x: text16Rect.minX, y: text16Rect.minY + (text16Rect.height - text16TextHeight) / 2, width: text16Rect.width, height: text16TextHeight), withAttributes: text16FontAttributes)
        context.restoreGState()




        //// Remaining Group
        //// Text 18 Drawing
        let text18Rect = CGRect(x: 220.07, y: 99.1, width: 173.24, height: 60.62)
        let text18Style = NSMutableParagraphStyle()
        text18Style.alignment = .left
        let text18FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 24)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text18Style,
        ] as [NSAttributedString.Key: Any]

        "Ð½ÐµÑÐ³Ð¾ÑÐ°ÐµÐ¼Ð°Ñ ÑÐ¾ÑÐºÐ°:".draw(in: text18Rect, withAttributes: text18FontAttributes)


        //// Text 20 Drawing
        let text20Rect = CGRect(x: 219.42, y: 165.65, width: 172.92, height: 67.1)
        let text20Style = NSMutableParagraphStyle()
        text20Style.alignment = .center
        let text20FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 78)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text20Style,
        ] as [NSAttributedString.Key: Any]

        let text20TextHeight: CGFloat = betFireproofLevel.boundingRect(with: CGSize(width: text20Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text20FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text20Rect)
        betFireproofLevel.draw(in: CGRect(x: text20Rect.minX, y: text20Rect.minY + (text20Rect.height - text20TextHeight) / 2, width: text20Rect.width, height: text20TextHeight), withAttributes: text20FontAttributes)
        context.restoreGState()


        //// Text Drawing
        let textRect = CGRect(x: 219.76, y: 226.43, width: 172.88, height: 60.62)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 24)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        "Ð²Ð¾Ð¿ÑÐ¾Ñ".draw(in: textRect, withAttributes: textFontAttributes)




        //// Group 2
        //// Text 21 Drawing
        let text21Rect = CGRect(x: 29.24, y: 562.28, width: 293.75, height: 60.62)
        let text21TextContent = "Ð¡Ð¾ÑÑÐ¾ÑÐ½Ð¸Ðµ Ð·Ð¾Ð½Ð´Ð°:"
        let text21Style = NSMutableParagraphStyle()
        text21Style.alignment = .left
        let text21FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text21Style,
        ] as [NSAttributedString.Key: Any]

        let text21TextHeight: CGFloat = text21TextContent.boundingRect(with: CGSize(width: text21Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text21FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text21Rect)
        text21TextContent.draw(in: CGRect(x: text21Rect.minX, y: text21Rect.minY + (text21Rect.height - text21TextHeight) / 2, width: text21Rect.width, height: text21TextHeight), withAttributes: text21FontAttributes)
        context.restoreGState()


        //// Text 22 Drawing
        let text22Rect = CGRect(x: 270.47, y: 558.66, width: 118.34, height: 67.1)
        let text22Style = NSMutableParagraphStyle()
        text22Style.alignment = .right
        let text22FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 45)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text22Style,
        ] as [NSAttributedString.Key: Any]

        let text22TextHeight: CGFloat = betRecoveryExp.boundingRect(with: CGSize(width: text22Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text22FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text22Rect)
        betRecoveryExp.draw(in: CGRect(x: text22Rect.minX, y: text22Rect.minY + (text22Rect.height - text22TextHeight) / 2, width: text22Rect.width, height: text22TextHeight), withAttributes: text22FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawBetScreen_47(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit, betAim: CGFloat = 1063, betFireproofLevel: String = "25", betDepo: CGFloat = 48, betSum: CGFloat = 134, betMinAward: CGFloat = 224, betRecovery: CGFloat = 104, betTip: CGFloat = 1, actualCurrencySymbol: String = "â¬") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)


        //// Color Declarations
        let fillColor15 = UIColor(red: 1.000, green: 0.000, blue: 0.647, alpha: 1.000)
        let gradientColor4 = UIColor(red: 0.000, green: 1.000, blue: 0.761, alpha: 1.000)
        let bezierGradientColor5 = UIColor(red: 0.192, green: 1.000, blue: 0.953, alpha: 1.000)
        let color = UIColor(red: 0.000, green: 0.333, blue: 1.000, alpha: 1.000)
        let hintGradientColor = UIColor(red: 0.121, green: 0.068, blue: 0.948, alpha: 1.000)
        let hintGradientColor2 = UIColor(red: 0.151, green: 0.202, blue: 0.532, alpha: 1.000)
        let color6 = UIColor(red: 0.176, green: 0.333, blue: 0.698, alpha: 1.000)

        //// Gradient Declarations
        let hintGradient = CGGradient(colorsSpace: nil, colors: [hintGradientColor.cgColor, hintGradientColor2.cgColor] as CFArray, locations: [0, 1])!

        //// Variable Declarations
        let betBarExp: CGFloat = (1 - betDepo / betAim) * 155
        let betRecoveryExp = "\(Int(round(betRecovery)))" + "%"
        let betTipExp: CGFloat = betTip >= 0.06 ? abs(cos((betTip - 0.224) * 10 / CGFloat.pi * 180 * CGFloat.pi/180)) : 0
        let betAimExp = actualCurrencySymbol + "\(Int(round(betAim)))"
        let betDepoExp = actualCurrencySymbol + "\(Int(round(betDepo)))"
        let betSumExp = actualCurrencySymbol + "\(Int(round(betSum)))"
        let betMinAwardExp = actualCurrencySymbol + "\(Int(round(betMinAward)))"

        //// Rectangle 28 Drawing
        context.saveGState()
        context.setAlpha(0.9)

        let rectangle28Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 667))
        context.saveGState()
        rectangle28Path.addClip()
        context.drawLinearGradient(hintGradient, start: CGPoint(x: 187.5, y: -0), end: CGPoint(x: 187.5, y: 667), options: [])
        context.restoreGState()

        context.restoreGState()


        //// Buttons Group
        //// Win Group
        //// Win Button
        //// Rectangle 31 Drawing
        let rectangle31Path = UIBezierPath(rect: CGRect(x: 166.79, y: 391.59, width: 184.75, height: 30.7))
        color6.setFill()
        rectangle31Path.fill()


        //// Text 14 Drawing
        let text14Rect = CGRect(x: 167.19, y: 391.47, width: 184.28, height: 30.43)
        let text14Style = NSMutableParagraphStyle()
        text14Style.alignment = .center
        let text14FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text14Style,
        ] as [NSAttributedString.Key: Any]

        let text14TextHeight: CGFloat = betMinAwardExp.boundingRect(with: CGSize(width: text14Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text14FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text14Rect)
        betMinAwardExp.draw(in: CGRect(x: text14Rect.minX, y: text14Rect.minY + (text14Rect.height - text14TextHeight) / 2, width: text14Rect.width, height: text14TextHeight), withAttributes: text14FontAttributes)
        context.restoreGState()




        //// Win Title Drawing
        let winTitleRect = CGRect(x: 20, y: 391.45, width: 142.05, height: 30.38)
        let winTitleTextContent = "ÐÐ¸Ð½. Ð²ÑÐ¸Ð³ÑÑÑ:"
        let winTitleStyle = NSMutableParagraphStyle()
        winTitleStyle.alignment = .left
        let winTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: winTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let winTitleTextHeight: CGFloat = winTitleTextContent.boundingRect(with: CGSize(width: winTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: winTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: winTitleRect)
        winTitleTextContent.draw(in: CGRect(x: winTitleRect.minX, y: winTitleRect.minY + (winTitleRect.height - winTitleTextHeight) / 2, width: winTitleRect.width, height: winTitleTextHeight), withAttributes: winTitleFontAttributes)
        context.restoreGState()




        //// Bet Sum Group
        //// Bet Button
        //// Rectangle 29 Drawing
        let rectangle29Path = UIBezierPath(rect: CGRect(x: 167, y: 342.2, width: 184.75, height: 30.7))
        color6.setFill()
        rectangle29Path.fill()


        //// Bet Sum Text Drawing
        let betSumTextRect = CGRect(x: 167.35, y: 342.1, width: 184.37, height: 30.38)
        let betSumTextStyle = NSMutableParagraphStyle()
        betSumTextStyle.alignment = .center
        let betSumTextFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: betSumTextStyle,
        ] as [NSAttributedString.Key: Any]

        let betSumTextTextHeight: CGFloat = betSumExp.boundingRect(with: CGSize(width: betSumTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: betSumTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: betSumTextRect)
        betSumExp.draw(in: CGRect(x: betSumTextRect.minX, y: betSumTextRect.minY + (betSumTextRect.height - betSumTextTextHeight) / 2, width: betSumTextRect.width, height: betSumTextTextHeight), withAttributes: betSumTextFontAttributes)
        context.restoreGState()




        //// Bet Title Drawing
        let betTitleRect = CGRect(x: 20, y: 342.92, width: 142.05, height: 30.18)
        let betTitleTextContent = "Ð¡ÑÐ°Ð²ÐºÐ° Ð½Ð° Ð¸Ð³ÑÑ:"
        let betTitleStyle = NSMutableParagraphStyle()
        betTitleStyle.alignment = .left
        let betTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: betTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let betTitleTextHeight: CGFloat = betTitleTextContent.boundingRect(with: CGSize(width: betTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: betTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: betTitleRect)
        betTitleTextContent.draw(in: CGRect(x: betTitleRect.minX, y: betTitleRect.minY + (betTitleRect.height - betTitleTextHeight) / 2, width: betTitleRect.width, height: betTitleTextHeight), withAttributes: betTitleFontAttributes)
        context.restoreGState()


        //// Tip Drawing
        context.saveGState()
        context.setAlpha(betTipExp)

        let tipPath = UIBezierPath(rect: CGRect(x: 167.54, y: 341.91, width: 184.75, height: 30.7))
        fillColor15.setStroke()
        tipPath.lineWidth = 1
        tipPath.stroke()

        context.restoreGState()




        //// Depo Group
        //// Depo Button
        //// Rectangle 30 Drawing
        let rectangle30Path = UIBezierPath(rect: CGRect(x: 167, y: 292.06, width: 184.75, height: 30.7))
        color6.setFill()
        rectangle30Path.fill()


        //// BetDepoText Drawing
        let betDepoTextRect = CGRect(x: 167.27, y: 292.14, width: 184.62, height: 30.12)
        let betDepoTextStyle = NSMutableParagraphStyle()
        betDepoTextStyle.alignment = .center
        let betDepoTextFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: betDepoTextStyle,
        ] as [NSAttributedString.Key: Any]

        let betDepoTextTextHeight: CGFloat = betDepoExp.boundingRect(with: CGSize(width: betDepoTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: betDepoTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: betDepoTextRect)
        betDepoExp.draw(in: CGRect(x: betDepoTextRect.minX, y: betDepoTextRect.minY + (betDepoTextRect.height - betDepoTextTextHeight) / 2, width: betDepoTextRect.width, height: betDepoTextTextHeight), withAttributes: betDepoTextFontAttributes)
        context.restoreGState()




        //// Depo Title Drawing
        let depoTitleRect = CGRect(x: 20, y: 292.32, width: 142.05, height: 30.18)
        let depoTitleTextContent = "ÐÐµÐ¿Ð¾Ð·Ð¸Ñ:"
        let depoTitleStyle = NSMutableParagraphStyle()
        depoTitleStyle.alignment = .left
        let depoTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: depoTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let depoTitleTextHeight: CGFloat = depoTitleTextContent.boundingRect(with: CGSize(width: depoTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: depoTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: depoTitleRect)
        depoTitleTextContent.draw(in: CGRect(x: depoTitleRect.minX, y: depoTitleRect.minY + (depoTitleRect.height - depoTitleTextHeight) / 2, width: depoTitleRect.width, height: depoTitleTextHeight), withAttributes: depoTitleFontAttributes)
        context.restoreGState()




        //// Rectangle 33 Drawing
        let rectangle33Path = UIBezierPath(roundedRect: CGRect(x: 11.32, y: 249.15, width: 353.82, height: 214.95), cornerRadius: 10)
        bezierGradientColor5.setStroke()
        rectangle33Path.lineWidth = 1
        rectangle33Path.stroke()




        //// Aim Group
        //// Depo1 Drawing
        let depo1Rect = CGRect(x: 72.22, y: 128.44, width: 52.77, height: 26.92)
        let depo1Style = NSMutableParagraphStyle()
        depo1Style.alignment = .left
        let depo1FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: gradientColor4,
            .paragraphStyle: depo1Style,
        ] as [NSAttributedString.Key: Any]

        let depo1TextHeight: CGFloat = betDepoExp.boundingRect(with: CGSize(width: depo1Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: depo1FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: depo1Rect)
        betDepoExp.draw(in: CGRect(x: depo1Rect.minX, y: depo1Rect.minY + (depo1Rect.height - depo1TextHeight) / 2, width: depo1Rect.width, height: depo1TextHeight), withAttributes: depo1FontAttributes)
        context.restoreGState()


        //// Rectangle 35 Drawing
        let rectangle35Path = UIBezierPath(rect: CGRect(x: 9.86, y: 43.38, width: 50.76, height: 155))
        gradientColor4.setFill()
        rectangle35Path.fill()


        //// Rectangle 34 Drawing
        let rectangle34Path = UIBezierPath(rect: CGRect(x: 9.91, y: 43.11, width: 50.7, height: betBarExp))
        color.setFill()
        rectangle34Path.fill()


        //// Aim Drawing
        let aimRect = CGRect(x: 68.18, y: 63.32, width: 109, height: 44.64)
        let aimStyle = NSMutableParagraphStyle()
        aimStyle.alignment = .left
        let aimFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 32)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: aimStyle,
        ] as [NSAttributedString.Key: Any]

        let aimTextHeight: CGFloat = betAimExp.boundingRect(with: CGSize(width: aimRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: aimFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: aimRect)
        betAimExp.draw(in: CGRect(x: aimRect.minX, y: aimRect.minY + (aimRect.height - aimTextHeight) / 2, width: aimRect.width, height: aimTextHeight), withAttributes: aimFontAttributes)
        context.restoreGState()


        //// Text 16 Drawing
        let text16Rect = CGRect(x: 70.15, y: 25.77, width: 104.84, height: 47)
        let text16TextContent = "ÑÐµÐ»Ñ:"
        let text16Style = NSMutableParagraphStyle()
        text16Style.alignment = .left
        let text16FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text16Style,
        ] as [NSAttributedString.Key: Any]

        let text16TextHeight: CGFloat = text16TextContent.boundingRect(with: CGSize(width: text16Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text16FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text16Rect)
        text16TextContent.draw(in: CGRect(x: text16Rect.minX, y: text16Rect.minY + (text16Rect.height - text16TextHeight) / 2, width: text16Rect.width, height: text16TextHeight), withAttributes: text16FontAttributes)
        context.restoreGState()




        //// Remaining Group
        //// Text 18 Drawing
        let text18Rect = CGRect(x: 195.07, y: 35.1, width: 173.24, height: 60.62)
        let text18Style = NSMutableParagraphStyle()
        text18Style.alignment = .left
        let text18FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 24)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text18Style,
        ] as [NSAttributedString.Key: Any]

        "Ð½ÐµÑÐ³Ð¾ÑÐ°ÐµÐ¼Ð°Ñ ÑÐ¾ÑÐºÐ°:".draw(in: text18Rect, withAttributes: text18FontAttributes)


        //// Text 20 Drawing
        let text20Rect = CGRect(x: 196.04, y: 101.65, width: 163.58, height: 67.1)
        let text20Style = NSMutableParagraphStyle()
        text20Style.alignment = .center
        let text20FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 78)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text20Style,
        ] as [NSAttributedString.Key: Any]

        let text20TextHeight: CGFloat = betFireproofLevel.boundingRect(with: CGSize(width: text20Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text20FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text20Rect)
        betFireproofLevel.draw(in: CGRect(x: text20Rect.minX, y: text20Rect.minY + (text20Rect.height - text20TextHeight) / 2, width: text20Rect.width, height: text20TextHeight), withAttributes: text20FontAttributes)
        context.restoreGState()


        //// Text Drawing
        let textRect = CGRect(x: 195.78, y: 162.93, width: 172.88, height: 60.62)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 24)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        "Ð²Ð¾Ð¿ÑÐ¾Ñ".draw(in: textRect, withAttributes: textFontAttributes)




        //// Group 2
        //// Text 21 Drawing
        let text21Rect = CGRect(x: 10.24, y: 498.28, width: 293.75, height: 60.62)
        let text21TextContent = "Ð¡Ð¾ÑÑÐ¾ÑÐ½Ð¸Ðµ Ð·Ð¾Ð½Ð´Ð°:"
        let text21Style = NSMutableParagraphStyle()
        text21Style.alignment = .left
        let text21FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text21Style,
        ] as [NSAttributedString.Key: Any]

        let text21TextHeight: CGFloat = text21TextContent.boundingRect(with: CGSize(width: text21Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text21FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text21Rect)
        text21TextContent.draw(in: CGRect(x: text21Rect.minX, y: text21Rect.minY + (text21Rect.height - text21TextHeight) / 2, width: text21Rect.width, height: text21TextHeight), withAttributes: text21FontAttributes)
        context.restoreGState()


        //// Text 22 Drawing
        let text22Rect = CGRect(x: 251.47, y: 494.66, width: 118.34, height: 67.1)
        let text22Style = NSMutableParagraphStyle()
        text22Style.alignment = .right
        let text22FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 45)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text22Style,
        ] as [NSAttributedString.Key: Any]

        let text22TextHeight: CGFloat = betRecoveryExp.boundingRect(with: CGSize(width: text22Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text22FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text22Rect)
        betRecoveryExp.draw(in: CGRect(x: text22Rect.minX, y: text22Rect.minY + (text22Rect.height - text22TextHeight) / 2, width: text22Rect.width, height: text22TextHeight), withAttributes: text22FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawStatScreen_65(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 896), resizing: ResizingBehavior = .aspectFit, betAim: CGFloat = 1063, betDepo: CGFloat = 48, betMinAward: CGFloat = 224, betRecovery: CGFloat = 104, statBeforeDisasterLeft: String = "24", statLevel: String = "4", statGamesCount: String = "11", actualCurrencyText: String = "shekel", moneyMove: CGFloat = 1, actualCurrencySymbol: String = "â¬") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 896), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 896)


        //// Color Declarations
        let paint0_linear3Color3 = UIColor(red: 0.033, green: 0.360, blue: 0.892, alpha: 1.000)
        let gradientColor4 = UIColor(red: 0.000, green: 1.000, blue: 0.761, alpha: 1.000)
        let bezierGradientColor5 = UIColor(red: 0.192, green: 1.000, blue: 0.953, alpha: 1.000)
        let color = UIColor(red: 0.000, green: 0.333, blue: 1.000, alpha: 1.000)
        let hintGradientColor = UIColor(red: 0.121, green: 0.068, blue: 0.948, alpha: 1.000)
        let hintGradientColor2 = UIColor(red: 0.151, green: 0.202, blue: 0.532, alpha: 1.000)
        let color6 = UIColor(red: 0.176, green: 0.333, blue: 0.698, alpha: 1.000)

        //// Gradient Declarations
        let hintGradient = CGGradient(colorsSpace: nil, colors: [hintGradientColor.cgColor, hintGradientColor2.cgColor] as CFArray, locations: [0, 1])!

        //// Image Declarations
        let dollar = UIImage(named: "dollar.png")!
        let rupees = UIImage(named: "rupees.png")!
        let pound = UIImage(named: "pound.png")!
        let shekel = UIImage(named: "shekel.png")!
        let euro = UIImage(named: "euro.png")!
        let ruble = UIImage(named: "ruble.png")!
        let iena = UIImage(named: "iena.png")!

        //// Variable Declarations
        let statWinExp2 = betMinAward > 0 ? "â²" : "â¼"
        let statBarColor = betMinAward > 0 ? UIColor(red: 0, green: 1, blue: 0.76, alpha: 1) : UIColor(red: 0.94, green: 0.07, blue: 0.095, alpha: 1)
        let statBarExp: CGFloat = (1 - (betDepo + betMinAward) / betAim) * 155
        let expression = betMinAward > 0 ? "ÐÑÐ¸Ð³ÑÑÑ:" : "ÐÑÐ¾Ð¸Ð³ÑÑÑ:"
        let betRecoveryExp = "\(Int(round(betRecovery)))" + "%"
        let moneyMoveExpr1 = moneyMove <= 0.1 ? CGPoint(x: (1 - moneyMove * 10) * 65 + moneyMove * 10, y: (1 - moneyMove * 10) * 0 + moneyMove * 10 * 20) : CGPoint(x: 1, y: 20)
        let moneyMoveExpr2 = moneyMove <= 0.1 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.1 && moneyMove <= 0.2 ? CGPoint(x: (1 - (moneyMove - 0.1) * 10) * 65 + (moneyMove - 0.1) * 10, y: (1 - (moneyMove - 0.1) * 10) * 0 + (moneyMove - 0.1) * 10 * 18) : CGPoint(x: 1, y: 18))
        let moneyMoveExpr3 = moneyMove <= 0.2 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.2 && moneyMove <= 0.3 ? CGPoint(x: (1 - (moneyMove - 0.2) * 10) * 65 + (moneyMove - 0.2) * 10, y: (1 - (moneyMove - 0.2) * 10) * 0 + (moneyMove - 0.2) * 10 * 16) : CGPoint(x: 1, y: 16))
        let moneyMoveExpr4 = moneyMove <= 0.3 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.3 && moneyMove <= 0.4 ? CGPoint(x: (1 - (moneyMove - 0.3) * 10) * 65 + (moneyMove - 0.3) * 10, y: (1 - (moneyMove - 0.3) * 10) * 0 + (moneyMove - 0.3) * 10 * 14) : CGPoint(x: 1, y: 14))
        let moneyMoveExpr5 = moneyMove <= 0.4 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.4 && moneyMove <= 0.5 ? CGPoint(x: (1 - (moneyMove - 0.4) * 10) * 65 + (moneyMove - 0.4) * 10, y: (1 - (moneyMove - 0.4) * 10) * 0 + (moneyMove - 0.4) * 10 * 12) : CGPoint(x: 1, y: 12))
        let moneyMoveExpr6 = moneyMove <= 0.5 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.5 && moneyMove <= 0.6 ? CGPoint(x: (1 - (moneyMove - 0.5) * 10) * 65 + (moneyMove - 0.5) * 10, y: (1 - (moneyMove - 0.5) * 10) * 0 + (moneyMove - 0.5) * 10 * 10) : CGPoint(x: 1, y: 10))
        let moneyMoveExpr7 = moneyMove <= 0.6 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.6 && moneyMove <= 0.7 ? CGPoint(x: (1 - (moneyMove - 0.6) * 10) * 65 + (moneyMove - 0.6) * 10, y: (1 - (moneyMove - 0.6) * 10) * 0 + (moneyMove - 0.6) * 10 * 8) : CGPoint(x: 1, y: 8))
        let moneyMoveExpr8 = moneyMove <= 0.7 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.7 && moneyMove <= 0.8 ? CGPoint(x: (1 - (moneyMove - 0.7) * 10) * 65 + (moneyMove - 0.7) * 10, y: (1 - (moneyMove - 0.7) * 10) * 0 + (moneyMove - 0.7) * 10 * 6) : CGPoint(x: 1, y: 6))
        let moneyMoveExpr9 = moneyMove <= 0.8 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.8 && moneyMove <= 0.9 ? CGPoint(x: (1 - (moneyMove - 0.8) * 10) * 65 + (moneyMove - 0.9) * 10, y: (1 - (moneyMove - 0.8) * 10) * 0 + (moneyMove - 0.9) * 10 * 2) : CGPoint(x: 1, y: 4))
        let dollarOpacityExpr: CGFloat = moneyMove == 0 ? 0 : (actualCurrencyText == "dollar" ? 1 : 0)
        let rupeeOpacityExpr: CGFloat = moneyMove == 0 ? 0 : (actualCurrencyText == "rupee" ? 1 : 0)
        let poundOpacityExpr: CGFloat = moneyMove == 0 ? 0 : (actualCurrencyText == "pound" ? 1 : 0)
        let shekelOpacityExpr: CGFloat = moneyMove == 0 ? 0 : (actualCurrencyText == "shekel" ? 1 : 0)
        let euroOpacityExpr: CGFloat = moneyMove == 0 ? 0 : (actualCurrencyText == "euro" ? 1 : 0)
        let rubleOpacityExpr: CGFloat = moneyMove == 0 ? 0 : (actualCurrencyText == "ruble" ? 1 : 0)
        let ienaOpacityExpr: CGFloat = moneyMove == 0 ? 0 : (actualCurrencyText == "iena" ? 1 : 0)
        let betAimExp = actualCurrencySymbol + "\(Int(round(betAim)))"
        let betDepoExp = actualCurrencySymbol + "\(Int(round(betDepo)))"
        let statWinExp = betMinAward > 0 ? actualCurrencySymbol + "\(Int(round(betMinAward)))" : actualCurrencySymbol + "\(Int(round(abs(betMinAward))))"

        //// Rectangle 28 Drawing
        context.saveGState()
        context.setAlpha(0.9)

        let rectangle28Path = UIBezierPath(rect: CGRect(x: -0.02, y: 0, width: 414, height: 896))
        context.saveGState()
        rectangle28Path.addClip()
        context.drawLinearGradient(hintGradient, start: CGPoint(x: 206.98, y: -0), end: CGPoint(x: 206.98, y: 896), options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 33 Drawing
        let rectangle33Path = UIBezierPath(roundedRect: CGRect(x: 30.23, y: 342.34, width: 353.82, height: 210.77), cornerRadius: 10)
        bezierGradientColor5.setStroke()
        rectangle33Path.lineWidth = 1
        rectangle33Path.stroke()


        //// Buttons Group
        //// Games Group
        //// Games Button
        //// Rectangle 31 Drawing
        let rectangle31Path = UIBezierPath(rect: CGRect(x: 186.81, y: 505.33, width: 184.75, height: 30))
        color6.setFill()
        rectangle31Path.fill()


        //// Text 14 Drawing
        let text14Rect = CGRect(x: 187.21, y: 505.22, width: 184.28, height: 30)
        let text14Style = NSMutableParagraphStyle()
        text14Style.alignment = .center
        let text14FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text14Style,
        ] as [NSAttributedString.Key: Any]

        let text14TextHeight: CGFloat = statGamesCount.boundingRect(with: CGSize(width: text14Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text14FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text14Rect)
        statGamesCount.draw(in: CGRect(x: text14Rect.minX, y: text14Rect.minY + (text14Rect.height - text14TextHeight) / 2, width: text14Rect.width, height: text14TextHeight), withAttributes: text14FontAttributes)
        context.restoreGState()




        //// Games Title Drawing
        let gamesTitleRect = CGRect(x: 41.12, y: 505.19, width: 142.05, height: 30)
        let gamesTitleTextContent = "ÐÑÐµÐ³Ð¾ ÑÑÐ³ÑÐ°Ð½Ð¾:"
        let gamesTitleStyle = NSMutableParagraphStyle()
        gamesTitleStyle.alignment = .left
        let gamesTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: gamesTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let gamesTitleTextHeight: CGFloat = gamesTitleTextContent.boundingRect(with: CGSize(width: gamesTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: gamesTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: gamesTitleRect)
        gamesTitleTextContent.draw(in: CGRect(x: gamesTitleRect.minX, y: gamesTitleRect.minY + (gamesTitleRect.height - gamesTitleTextHeight) / 2, width: gamesTitleRect.width, height: gamesTitleTextHeight), withAttributes: gamesTitleFontAttributes)
        context.restoreGState()




        //// Level Group
        //// Level Button
        //// Rectangle 29 Drawing
        let rectangle29Path = UIBezierPath(rect: CGRect(x: 187.12, y: 455.9, width: 184.75, height: 31))
        color6.setFill()
        rectangle29Path.fill()


        //// Level Text Drawing
        let levelTextRect = CGRect(x: 187.48, y: 455.9, width: 184.37, height: 31)
        let levelTextStyle = NSMutableParagraphStyle()
        levelTextStyle.alignment = .center
        let levelTextFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: levelTextStyle,
        ] as [NSAttributedString.Key: Any]

        let levelTextTextHeight: CGFloat = statLevel.boundingRect(with: CGSize(width: levelTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: levelTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: levelTextRect)
        statLevel.draw(in: CGRect(x: levelTextRect.minX, y: levelTextRect.minY + (levelTextRect.height - levelTextTextHeight) / 2, width: levelTextRect.width, height: levelTextTextHeight), withAttributes: levelTextFontAttributes)
        context.restoreGState()




        //// Level Title Drawing
        let levelTitleRect = CGRect(x: 41.12, y: 455.9, width: 142.05, height: 31)
        let levelTitleTextContent = "Ð£ÑÐ¾Ð²ÐµÐ½Ñ:"
        let levelTitleStyle = NSMutableParagraphStyle()
        levelTitleStyle.alignment = .left
        let levelTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: levelTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let levelTitleTextHeight: CGFloat = levelTitleTextContent.boundingRect(with: CGSize(width: levelTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: levelTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: levelTitleRect)
        levelTitleTextContent.draw(in: CGRect(x: levelTitleRect.minX, y: levelTitleRect.minY + (levelTitleRect.height - levelTitleTextHeight) / 2, width: levelTitleRect.width, height: levelTitleTextHeight), withAttributes: levelTitleFontAttributes)
        context.restoreGState()




        //// Depo Group
        //// Depo Button
        //// Rectangle 30 Drawing
        let rectangle30Path = UIBezierPath(rect: CGRect(x: 187.49, y: 408.15, width: 184.75, height: 30))
        color6.setFill()
        rectangle30Path.fill()


        //// BetDepoText Drawing
        let betDepoTextRect = CGRect(x: 187.76, y: 408.15, width: 184.62, height: 30)
        let betDepoTextStyle = NSMutableParagraphStyle()
        betDepoTextStyle.alignment = .center
        let betDepoTextFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: betDepoTextStyle,
        ] as [NSAttributedString.Key: Any]

        let betDepoTextTextHeight: CGFloat = betDepoExp.boundingRect(with: CGSize(width: betDepoTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: betDepoTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: betDepoTextRect)
        betDepoExp.draw(in: CGRect(x: betDepoTextRect.minX, y: betDepoTextRect.minY + (betDepoTextRect.height - betDepoTextTextHeight) / 2, width: betDepoTextRect.width, height: betDepoTextTextHeight), withAttributes: betDepoTextFontAttributes)
        context.restoreGState()




        //// Depo Title Drawing
        let depoTitleRect = CGRect(x: 41.49, y: 408.42, width: 142.05, height: 30)
        let depoTitleTextContent = "ÐÐµÐ¿Ð¾Ð·Ð¸Ñ:"
        let depoTitleStyle = NSMutableParagraphStyle()
        depoTitleStyle.alignment = .left
        let depoTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: depoTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let depoTitleTextHeight: CGFloat = depoTitleTextContent.boundingRect(with: CGSize(width: depoTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: depoTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: depoTitleRect)
        depoTitleTextContent.draw(in: CGRect(x: depoTitleRect.minX, y: depoTitleRect.minY + (depoTitleRect.height - depoTitleTextHeight) / 2, width: depoTitleRect.width, height: depoTitleTextHeight), withAttributes: depoTitleFontAttributes)
        context.restoreGState()




        //// Win Group
        //// Win Button
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 187.33, y: 361.06, width: 184.75, height: 29.7))
        color6.setFill()
        rectanglePath.fill()


        //// Text Drawing
        let textRect = CGRect(x: 187.73, y: 360.95, width: 184.28, height: 29)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: statBarColor,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = statWinExp.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        statWinExp.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()




        //// Win Title Drawing
        let winTitleRect = CGRect(x: 41.54, y: 360.95, width: 142.05, height: 30)
        let winTitleStyle = NSMutableParagraphStyle()
        winTitleStyle.alignment = .left
        let winTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: winTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let winTitleTextHeight: CGFloat = expression.boundingRect(with: CGSize(width: winTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: winTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: winTitleRect)
        expression.draw(in: CGRect(x: winTitleRect.minX, y: winTitleRect.minY + (winTitleRect.height - winTitleTextHeight) / 2, width: winTitleRect.width, height: winTitleTextHeight), withAttributes: winTitleFontAttributes)
        context.restoreGState()






        //// Aim Group
        //// Win Drawing
        let winRect = CGRect(x: 96.05, y: 215.35, width: 74.6, height: 26.92)
        let winStyle = NSMutableParagraphStyle()
        winStyle.alignment = .left
        let winFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: statBarColor,
            .paragraphStyle: winStyle,
        ] as [NSAttributedString.Key: Any]

        let winTextHeight: CGFloat = statWinExp.boundingRect(with: CGSize(width: winRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: winFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: winRect)
        statWinExp.draw(in: CGRect(x: winRect.minX, y: winRect.minY + (winRect.height - winTextHeight) / 2, width: winRect.width, height: winTextHeight), withAttributes: winFontAttributes)
        context.restoreGState()


        //// Win Arrow Drawing
        let winArrowRect = CGRect(x: 81.88, y: 220.85, width: 14.94, height: 18.41)
        let winArrowStyle = NSMutableParagraphStyle()
        winArrowStyle.alignment = .center
        let winArrowFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 10)!,
            .foregroundColor: statBarColor,
            .paragraphStyle: winArrowStyle,
        ] as [NSAttributedString.Key: Any]

        let winArrowTextHeight: CGFloat = statWinExp2.boundingRect(with: CGSize(width: winArrowRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: winArrowFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: winArrowRect)
        statWinExp2.draw(in: CGRect(x: winArrowRect.minX, y: winArrowRect.minY + (winArrowRect.height - winArrowTextHeight) / 2, width: winArrowRect.width, height: winArrowTextHeight), withAttributes: winArrowFontAttributes)
        context.restoreGState()


        //// Rectangle 35 Drawing
        let rectangle35Path = UIBezierPath(rect: CGRect(x: 28.94, y: 130, width: 50.76, height: 155))
        gradientColor4.setFill()
        rectangle35Path.fill()


        //// Rectangle 34 Drawing
        let rectangle34Path = UIBezierPath(rect: CGRect(x: 28.95, y: 130, width: 50.7, height: statBarExp))
        color.setFill()
        rectangle34Path.fill()


        //// Aim Drawing
        let aimRect = CGRect(x: 87.05, y: 150.28, width: 109, height: 44.64)
        let aimStyle = NSMutableParagraphStyle()
        aimStyle.alignment = .left
        let aimFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 32)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: aimStyle,
        ] as [NSAttributedString.Key: Any]

        let aimTextHeight: CGFloat = betAimExp.boundingRect(with: CGSize(width: aimRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: aimFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: aimRect)
        betAimExp.draw(in: CGRect(x: aimRect.minX, y: aimRect.minY + (aimRect.height - aimTextHeight) / 2, width: aimRect.width, height: aimTextHeight), withAttributes: aimFontAttributes)
        context.restoreGState()


        //// Text 16 Drawing
        let text16Rect = CGRect(x: 89.01, y: 112.73, width: 104.84, height: 47)
        let text16TextContent = "ÑÐµÐ»Ñ:"
        let text16Style = NSMutableParagraphStyle()
        text16Style.alignment = .left
        let text16FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text16Style,
        ] as [NSAttributedString.Key: Any]

        let text16TextHeight: CGFloat = text16TextContent.boundingRect(with: CGSize(width: text16Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text16FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text16Rect)
        text16TextContent.draw(in: CGRect(x: text16Rect.minX, y: text16Rect.minY + (text16Rect.height - text16TextHeight) / 2, width: text16Rect.width, height: text16TextHeight), withAttributes: text16FontAttributes)
        context.restoreGState()




        //// Remaining Group
        //// Text 18 Drawing
        let text18Rect = CGRect(x: 220.07, y: 122.1, width: 173.24, height: 60.62)
        let text18Style = NSMutableParagraphStyle()
        text18Style.alignment = .left
        let text18FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 24)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text18Style,
        ] as [NSAttributedString.Key: Any]

        "Ð²ÑÐµÐ¼Ñ Ð´Ð¾ ÑÑÐ¾Ð»ÐºÐ½Ð¾Ð²ÐµÐ½Ð¸Ñ:".draw(in: text18Rect, withAttributes: text18FontAttributes)


        //// Text 20 Drawing
        let text20Rect = CGRect(x: 220.2, y: 188.65, width: 172.87, height: 67.1)
        let text20Style = NSMutableParagraphStyle()
        text20Style.alignment = .center
        let text20FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 78)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text20Style,
        ] as [NSAttributedString.Key: Any]

        let text20TextHeight: CGFloat = statBeforeDisasterLeft.boundingRect(with: CGSize(width: text20Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text20FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text20Rect)
        statBeforeDisasterLeft.draw(in: CGRect(x: text20Rect.minX, y: text20Rect.minY + (text20Rect.height - text20TextHeight) / 2, width: text20Rect.width, height: text20TextHeight), withAttributes: text20FontAttributes)
        context.restoreGState()




        //// Group 2
        //// Text 21 Drawing
        let text21Rect = CGRect(x: 29.24, y: 585.28, width: 293.75, height: 60.62)
        let text21TextContent = "Ð¡Ð¾ÑÑÐ¾ÑÐ½Ð¸Ðµ Ð·Ð¾Ð½Ð´Ð°:"
        let text21Style = NSMutableParagraphStyle()
        text21Style.alignment = .left
        let text21FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text21Style,
        ] as [NSAttributedString.Key: Any]

        let text21TextHeight: CGFloat = text21TextContent.boundingRect(with: CGSize(width: text21Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text21FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text21Rect)
        text21TextContent.draw(in: CGRect(x: text21Rect.minX, y: text21Rect.minY + (text21Rect.height - text21TextHeight) / 2, width: text21Rect.width, height: text21TextHeight), withAttributes: text21FontAttributes)
        context.restoreGState()


        //// Text 22 Drawing
        let text22Rect = CGRect(x: 270.47, y: 581.66, width: 118.34, height: 67.1)
        let text22Style = NSMutableParagraphStyle()
        text22Style.alignment = .right
        let text22FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 45)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text22Style,
        ] as [NSAttributedString.Key: Any]

        let text22TextHeight: CGFloat = betRecoveryExp.boundingRect(with: CGSize(width: text22Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text22FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text22Rect)
        betRecoveryExp.draw(in: CGRect(x: text22Rect.minX, y: text22Rect.minY + (text22Rect.height - text22TextHeight) / 2, width: text22Rect.width, height: text22TextHeight), withAttributes: text22FontAttributes)
        context.restoreGState()




        //// Text 23 Drawing
        let text23Rect = CGRect(x: 40.31, y: 331.14, width: 119.21, height: 21)
        let text23Path = UIBezierPath(roundedRect: text23Rect, cornerRadius: 4)
        paint0_linear3Color3.setFill()
        text23Path.fill()
        let text23TextContent = "Ð¡ÑÐ°ÑÐ¸ÑÑÐ¸ÐºÐ°"
        let text23Style = NSMutableParagraphStyle()
        text23Style.alignment = .center
        let text23FontAttributes = [
            .font: UIFont(name: "Gilroy-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text23Style,
        ] as [NSAttributedString.Key: Any]

        let text23TextHeight: CGFloat = text23TextContent.boundingRect(with: CGSize(width: text23Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text23FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text23Rect)
        text23TextContent.draw(in: CGRect(x: text23Rect.minX, y: text23Rect.minY + (text23Rect.height - text23TextHeight) / 2, width: text23Rect.width, height: text23TextHeight), withAttributes: text23FontAttributes)
        context.restoreGState()


        //// d1 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr1.x + 38.53125), y: (moneyMoveExpr1.y + 243.25390625))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d1Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d1Path = UIBezierPath(rect: d1Rect)
        context.saveGState()
        d1Path.addClip()
        context.translateBy(x: floor(d1Rect.minX + 0.5), y: floor(d1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d2 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr2.x + 38.53125), y: (moneyMoveExpr2.y + 243.25390625))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d2Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d2Path = UIBezierPath(rect: d2Rect)
        context.saveGState()
        d2Path.addClip()
        context.translateBy(x: floor(d2Rect.minX + 0.5), y: floor(d2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d3 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr3.x + 38.53125), y: (moneyMoveExpr3.y + 243.25390625))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d3Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d3Path = UIBezierPath(rect: d3Rect)
        context.saveGState()
        d3Path.addClip()
        context.translateBy(x: floor(d3Rect.minX + 0.5), y: floor(d3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d4 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr4.x + 38.53125), y: (moneyMoveExpr4.y + 243.25390625))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d4Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d4Path = UIBezierPath(rect: d4Rect)
        context.saveGState()
        d4Path.addClip()
        context.translateBy(x: floor(d4Rect.minX + 0.5), y: floor(d4Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d5 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr5.x + 38.53125), y: (moneyMoveExpr5.y + 243.25390625))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d5Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d5Path = UIBezierPath(rect: d5Rect)
        context.saveGState()
        d5Path.addClip()
        context.translateBy(x: floor(d5Rect.minX + 0.5), y: floor(d5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d6 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr6.x + 38.53125), y: (moneyMoveExpr6.y + 243.25390625))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d6Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d6Path = UIBezierPath(rect: d6Rect)
        context.saveGState()
        d6Path.addClip()
        context.translateBy(x: floor(d6Rect.minX + 0.5), y: floor(d6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d7 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr7.x + 38.53125), y: (moneyMoveExpr7.y + 243.25390625))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d7Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d7Path = UIBezierPath(rect: d7Rect)
        context.saveGState()
        d7Path.addClip()
        context.translateBy(x: floor(d7Rect.minX + 0.5), y: floor(d7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d8 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr8.x + 38.53125), y: (moneyMoveExpr8.y + 243.25390625))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d8Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d8Path = UIBezierPath(rect: d8Rect)
        context.saveGState()
        d8Path.addClip()
        context.translateBy(x: floor(d8Rect.minX + 0.5), y: floor(d8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d9 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr9.x + 38.53125), y: (moneyMoveExpr9.y + 243.25390625))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d9Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d9Path = UIBezierPath(rect: d9Rect)
        context.saveGState()
        d9Path.addClip()
        context.translateBy(x: floor(d9Rect.minX + 0.5), y: floor(d9Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r1 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr1.x + 38.875), y: (moneyMoveExpr1.y + 243.40625))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r1Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r1Path = UIBezierPath(rect: r1Rect)
        context.saveGState()
        r1Path.addClip()
        context.translateBy(x: floor(r1Rect.minX + 0.5), y: floor(r1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r2 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr2.x + 38.875), y: (moneyMoveExpr2.y + 243.40625))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r2Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r2Path = UIBezierPath(rect: r2Rect)
        context.saveGState()
        r2Path.addClip()
        context.translateBy(x: floor(r2Rect.minX + 0.5), y: floor(r2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r3 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr3.x + 38.875), y: (moneyMoveExpr3.y + 243.40625))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r3Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r3Path = UIBezierPath(rect: r3Rect)
        context.saveGState()
        r3Path.addClip()
        context.translateBy(x: floor(r3Rect.minX + 0.5), y: floor(r3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r4 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr4.x + 38.875), y: (moneyMoveExpr4.y + 243.40625))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r4Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r4Path = UIBezierPath(rect: r4Rect)
        context.saveGState()
        r4Path.addClip()
        context.translateBy(x: floor(r4Rect.minX + 0.5), y: floor(r4Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r5 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr5.x + 38.875), y: (moneyMoveExpr5.y + 243.40625))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r5Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r5Path = UIBezierPath(rect: r5Rect)
        context.saveGState()
        r5Path.addClip()
        context.translateBy(x: floor(r5Rect.minX + 0.5), y: floor(r5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r6 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr6.x + 38.875), y: (moneyMoveExpr6.y + 243.40625))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r6Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r6Path = UIBezierPath(rect: r6Rect)
        context.saveGState()
        r6Path.addClip()
        context.translateBy(x: floor(r6Rect.minX + 0.5), y: floor(r6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r7 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr7.x + 38.875), y: (moneyMoveExpr7.y + 243.40625))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r7Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r7Path = UIBezierPath(rect: r7Rect)
        context.saveGState()
        r7Path.addClip()
        context.translateBy(x: floor(r7Rect.minX + 0.5), y: floor(r7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r8 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr8.x + 38.875), y: (moneyMoveExpr8.y + 243.40625))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r8Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r8Path = UIBezierPath(rect: r8Rect)
        context.saveGState()
        r8Path.addClip()
        context.translateBy(x: floor(r8Rect.minX + 0.5), y: floor(r8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r9 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr9.x + 38.875), y: (moneyMoveExpr9.y + 243.40625))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r9Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r9Path = UIBezierPath(rect: r9Rect)
        context.saveGState()
        r9Path.addClip()
        context.translateBy(x: floor(r9Rect.minX + 0.5), y: floor(r9Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p1 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr1.x + 38.7109375), y: (moneyMoveExpr1.y + 243.45703125))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p1Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p1Path = UIBezierPath(rect: p1Rect)
        context.saveGState()
        p1Path.addClip()
        context.translateBy(x: floor(p1Rect.minX + 0.5), y: floor(p1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p2 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr2.x + 38.7109375), y: (moneyMoveExpr2.y + 243.45703125))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p2Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p2Path = UIBezierPath(rect: p2Rect)
        context.saveGState()
        p2Path.addClip()
        context.translateBy(x: floor(p2Rect.minX + 0.5), y: floor(p2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p3 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr3.x + 38.7109375), y: (moneyMoveExpr3.y + 243.45703125))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p3Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p3Path = UIBezierPath(rect: p3Rect)
        context.saveGState()
        p3Path.addClip()
        context.translateBy(x: floor(p3Rect.minX + 0.5), y: floor(p3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p4 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr4.x + 38.7109375), y: (moneyMoveExpr4.y + 243.45703125))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p4Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p4Path = UIBezierPath(rect: p4Rect)
        context.saveGState()
        p4Path.addClip()
        context.translateBy(x: floor(p4Rect.minX + 0.5), y: floor(p4Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p5 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr5.x + 38.7109375), y: (moneyMoveExpr5.y + 243.45703125))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p5Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p5Path = UIBezierPath(rect: p5Rect)
        context.saveGState()
        p5Path.addClip()
        context.translateBy(x: floor(p5Rect.minX + 0.5), y: floor(p5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p6 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr6.x + 38.7109375), y: (moneyMoveExpr6.y + 243.45703125))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p6Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p6Path = UIBezierPath(rect: p6Rect)
        context.saveGState()
        p6Path.addClip()
        context.translateBy(x: floor(p6Rect.minX + 0.5), y: floor(p6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p7 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr7.x + 38.7109375), y: (moneyMoveExpr7.y + 243.45703125))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p7Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p7Path = UIBezierPath(rect: p7Rect)
        context.saveGState()
        p7Path.addClip()
        context.translateBy(x: floor(p7Rect.minX + 0.5), y: floor(p7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p8 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr8.x + 38.7109375), y: (moneyMoveExpr8.y + 243.45703125))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p8Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p8Path = UIBezierPath(rect: p8Rect)
        context.saveGState()
        p8Path.addClip()
        context.translateBy(x: floor(p8Rect.minX + 0.5), y: floor(p8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p9 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr9.x + 38.7109375), y: (moneyMoveExpr9.y + 243.45703125))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p9Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p9Path = UIBezierPath(rect: p9Rect)
        context.saveGState()
        p9Path.addClip()
        context.translateBy(x: floor(p9Rect.minX + 0.5), y: floor(p9Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s1 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr1.x + 38.8408203125), y: (moneyMoveExpr1.y + 242.959960938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s1Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s1Path = UIBezierPath(rect: s1Rect)
        context.saveGState()
        s1Path.addClip()
        context.translateBy(x: floor(s1Rect.minX + 0.5), y: floor(s1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s2 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr2.x + 38.8408203125), y: (moneyMoveExpr2.y + 242.959960938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s2Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s2Path = UIBezierPath(rect: s2Rect)
        context.saveGState()
        s2Path.addClip()
        context.translateBy(x: floor(s2Rect.minX + 0.5), y: floor(s2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s3 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr3.x + 38.8408203125), y: (moneyMoveExpr3.y + 242.959960938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s3Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s3Path = UIBezierPath(rect: s3Rect)
        context.saveGState()
        s3Path.addClip()
        context.translateBy(x: floor(s3Rect.minX + 0.5), y: floor(s3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s4 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr4.x + 38.8408203125), y: (moneyMoveExpr4.y + 242.959960938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s4Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s4Path = UIBezierPath(rect: s4Rect)
        context.saveGState()
        s4Path.addClip()
        context.translateBy(x: floor(s4Rect.minX + 0.5), y: floor(s4Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s5 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr5.x + 38.8408203125), y: (moneyMoveExpr5.y + 242.959960938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s5Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s5Path = UIBezierPath(rect: s5Rect)
        context.saveGState()
        s5Path.addClip()
        context.translateBy(x: floor(s5Rect.minX + 0.5), y: floor(s5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s6 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr6.x + 38.8408203125), y: (moneyMoveExpr6.y + 242.959960938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s6Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s6Path = UIBezierPath(rect: s6Rect)
        context.saveGState()
        s6Path.addClip()
        context.translateBy(x: floor(s6Rect.minX + 0.5), y: floor(s6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s7 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr7.x + 38.8408203125), y: (moneyMoveExpr7.y + 242.959960938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s7Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s7Path = UIBezierPath(rect: s7Rect)
        context.saveGState()
        s7Path.addClip()
        context.translateBy(x: floor(s7Rect.minX + 0.5), y: floor(s7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s8 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr8.x + 38.8408203125), y: (moneyMoveExpr8.y + 242.959960938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s8Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s8Path = UIBezierPath(rect: s8Rect)
        context.saveGState()
        s8Path.addClip()
        context.translateBy(x: floor(s8Rect.minX + 0.5), y: floor(s8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s9 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr9.x + 38.8408203125), y: (moneyMoveExpr9.y + 242.959960938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s9Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s9Path = UIBezierPath(rect: s9Rect)
        context.saveGState()
        s9Path.addClip()
        context.translateBy(x: floor(s9Rect.minX + 0.5), y: floor(s9Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e1 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr1.x + 38.9055989583), y: (moneyMoveExpr1.y + 243.360026042))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e1Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e1Path = UIBezierPath(rect: e1Rect)
        context.saveGState()
        e1Path.addClip()
        context.translateBy(x: floor(e1Rect.minX + 0.5), y: floor(e1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e2 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr2.x + 38.9055989583), y: (moneyMoveExpr2.y + 243.360026042))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e2Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e2Path = UIBezierPath(rect: e2Rect)
        context.saveGState()
        e2Path.addClip()
        context.translateBy(x: floor(e2Rect.minX + 0.5), y: floor(e2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e3 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr3.x + 38.9055989583), y: (moneyMoveExpr3.y + 243.360026042))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e3Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e3Path = UIBezierPath(rect: e3Rect)
        context.saveGState()
        e3Path.addClip()
        context.translateBy(x: floor(e3Rect.minX + 0.5), y: floor(e3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e4 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr4.x + 38.9055989583), y: (moneyMoveExpr4.y + 243.360026042))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e4Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e4Path = UIBezierPath(rect: e4Rect)
        context.saveGState()
        e4Path.addClip()
        context.translateBy(x: floor(e4Rect.minX + 0.5), y: floor(e4Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e5 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr5.x + 38.9055989583), y: (moneyMoveExpr5.y + 243.360026042))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e5Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e5Path = UIBezierPath(rect: e5Rect)
        context.saveGState()
        e5Path.addClip()
        context.translateBy(x: floor(e5Rect.minX + 0.5), y: floor(e5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e6 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr6.x + 38.9055989583), y: (moneyMoveExpr6.y + 243.360026042))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e6Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e6Path = UIBezierPath(rect: e6Rect)
        context.saveGState()
        e6Path.addClip()
        context.translateBy(x: floor(e6Rect.minX + 0.5), y: floor(e6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e7 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr7.x + 38.9055989583), y: (moneyMoveExpr7.y + 243.360026042))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e7Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e7Path = UIBezierPath(rect: e7Rect)
        context.saveGState()
        e7Path.addClip()
        context.translateBy(x: floor(e7Rect.minX + 0.5), y: floor(e7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e8 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr8.x + 38.9055989583), y: (moneyMoveExpr8.y + 243.360026042))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e8Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e8Path = UIBezierPath(rect: e8Rect)
        context.saveGState()
        e8Path.addClip()
        context.translateBy(x: floor(e8Rect.minX + 0.5), y: floor(e8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e9 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr9.x + 38.9055989583), y: (moneyMoveExpr9.y + 243.360026042))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e9Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e9Path = UIBezierPath(rect: e9Rect)
        context.saveGState()
        e9Path.addClip()
        context.translateBy(x: floor(e9Rect.minX + 0.5), y: floor(e9Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru1 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr1.x + 38.193359375), y: (moneyMoveExpr1.y + 242.439453125))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru1Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru1Path = UIBezierPath(rect: ru1Rect)
        context.saveGState()
        ru1Path.addClip()
        context.translateBy(x: floor(ru1Rect.minX + 0.5), y: floor(ru1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru2 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr2.x + 38.193359375), y: (moneyMoveExpr2.y + 242.439453125))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru2Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru2Path = UIBezierPath(rect: ru2Rect)
        context.saveGState()
        ru2Path.addClip()
        context.translateBy(x: floor(ru2Rect.minX + 0.5), y: floor(ru2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru3 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr3.x + 38.193359375), y: (moneyMoveExpr3.y + 242.439453125))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru3Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru3Path = UIBezierPath(rect: ru3Rect)
        context.saveGState()
        ru3Path.addClip()
        context.translateBy(x: floor(ru3Rect.minX + 0.5), y: floor(ru3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru4 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr4.x + 38.193359375), y: (moneyMoveExpr4.y + 242.439453125))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru4Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru4Path = UIBezierPath(rect: ru4Rect)
        context.saveGState()
        ru4Path.addClip()
        context.translateBy(x: floor(ru4Rect.minX + 0.5), y: floor(ru4Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru5 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr5.x + 38.193359375), y: (moneyMoveExpr5.y + 242.439453125))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru5Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru5Path = UIBezierPath(rect: ru5Rect)
        context.saveGState()
        ru5Path.addClip()
        context.translateBy(x: floor(ru5Rect.minX + 0.5), y: floor(ru5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru6 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr6.x + 38.193359375), y: (moneyMoveExpr6.y + 242.439453125))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru6Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru6Path = UIBezierPath(rect: ru6Rect)
        context.saveGState()
        ru6Path.addClip()
        context.translateBy(x: floor(ru6Rect.minX + 0.5), y: floor(ru6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru7 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr7.x + 38.193359375), y: (moneyMoveExpr7.y + 242.439453125))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru7Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru7Path = UIBezierPath(rect: ru7Rect)
        context.saveGState()
        ru7Path.addClip()
        context.translateBy(x: floor(ru7Rect.minX + 0.5), y: floor(ru7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru8 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr8.x + 38.193359375), y: (moneyMoveExpr8.y + 242.439453125))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru8Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru8Path = UIBezierPath(rect: ru8Rect)
        context.saveGState()
        ru8Path.addClip()
        context.translateBy(x: floor(ru8Rect.minX + 0.5), y: floor(ru8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru9 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr9.x + 38.193359375), y: (moneyMoveExpr9.y + 242.739453125))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru9Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru9Path = UIBezierPath(rect: ru9Rect)
        context.saveGState()
        ru9Path.addClip()
        context.translateBy(x: floor(ru9Rect.minX + 0.5), y: floor(ru9Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie1 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr1.x + 38.12109375), y: (moneyMoveExpr1.y + 242.984375))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie1Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie1Path = UIBezierPath(rect: ie1Rect)
        context.saveGState()
        ie1Path.addClip()
        context.translateBy(x: floor(ie1Rect.minX + 0.5), y: floor(ie1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie 2 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr2.x + 38.12109375), y: (moneyMoveExpr2.y + 242.984375))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie2Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie2Path = UIBezierPath(rect: ie2Rect)
        context.saveGState()
        ie2Path.addClip()
        context.translateBy(x: floor(ie2Rect.minX + 0.5), y: floor(ie2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie 3 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr3.x + 38.12109375), y: (moneyMoveExpr3.y + 242.984375))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie3Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie3Path = UIBezierPath(rect: ie3Rect)
        context.saveGState()
        ie3Path.addClip()
        context.translateBy(x: floor(ie3Rect.minX + 0.5), y: floor(ie3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie 4 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr4.x + 38.12109375), y: (moneyMoveExpr4.y + 242.984375))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie4Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie4Path = UIBezierPath(rect: ie4Rect)
        context.saveGState()
        ie4Path.addClip()
        context.translateBy(x: floor(ie4Rect.minX + 0.5), y: floor(ie4Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie 5 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr5.x + 38.12109375), y: (moneyMoveExpr5.y + 242.984375))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie5Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie5Path = UIBezierPath(rect: ie5Rect)
        context.saveGState()
        ie5Path.addClip()
        context.translateBy(x: floor(ie5Rect.minX + 0.5), y: floor(ie5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie 6 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr6.x + 38.12109375), y: (moneyMoveExpr6.y + 242.984375))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie6Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie6Path = UIBezierPath(rect: ie6Rect)
        context.saveGState()
        ie6Path.addClip()
        context.translateBy(x: floor(ie6Rect.minX + 0.5), y: floor(ie6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie 7 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr7.x + 38.12109375), y: (moneyMoveExpr7.y + 242.984375))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie7Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie7Path = UIBezierPath(rect: ie7Rect)
        context.saveGState()
        ie7Path.addClip()
        context.translateBy(x: floor(ie7Rect.minX + 0.5), y: floor(ie7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie 8 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr8.x + 38.12109375), y: (moneyMoveExpr8.y + 242.984375))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie8Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie8Path = UIBezierPath(rect: ie8Rect)
        context.saveGState()
        ie8Path.addClip()
        context.translateBy(x: floor(ie8Rect.minX + 0.5), y: floor(ie8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie9 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr9.x + 38.12109375), y: (moneyMoveExpr9.y + 242.984375))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie9Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie9Path = UIBezierPath(rect: ie9Rect)
        context.saveGState()
        ie9Path.addClip()
        context.translateBy(x: floor(ie9Rect.minX + 0.5), y: floor(ie9Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawStatScreen_58(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit, betAim: CGFloat = 1063, betDepo: CGFloat = 48, betMinAward: CGFloat = 224, betRecovery: CGFloat = 104, statBeforeDisasterLeft: String = "24", statLevel: String = "4", statGamesCount: String = "11", actualCurrencyText: String = "shekel", moneyMove: CGFloat = 1, actualCurrencySymbol: String = "â¬") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)


        //// Color Declarations
        let paint0_linear3Color3 = UIColor(red: 0.033, green: 0.360, blue: 0.892, alpha: 1.000)
        let gradientColor4 = UIColor(red: 0.000, green: 1.000, blue: 0.761, alpha: 1.000)
        let bezierGradientColor5 = UIColor(red: 0.192, green: 1.000, blue: 0.953, alpha: 1.000)
        let color = UIColor(red: 0.000, green: 0.333, blue: 1.000, alpha: 1.000)
        let hintGradientColor = UIColor(red: 0.121, green: 0.068, blue: 0.948, alpha: 1.000)
        let hintGradientColor2 = UIColor(red: 0.151, green: 0.202, blue: 0.532, alpha: 1.000)
        let color6 = UIColor(red: 0.176, green: 0.333, blue: 0.698, alpha: 1.000)

        //// Gradient Declarations
        let hintGradient = CGGradient(colorsSpace: nil, colors: [hintGradientColor.cgColor, hintGradientColor2.cgColor] as CFArray, locations: [0, 1])!

        //// Image Declarations
        let dollar = UIImage(named: "dollar.png")!
        let rupees = UIImage(named: "rupees.png")!
        let pound = UIImage(named: "pound.png")!
        let shekel = UIImage(named: "shekel.png")!
        let euro = UIImage(named: "euro.png")!
        let ruble = UIImage(named: "ruble.png")!
        let iena = UIImage(named: "iena.png")!

        //// Variable Declarations
        let statWinExp2 = betMinAward > 0 ? "â²" : "â¼"
        let statBarColor = betMinAward > 0 ? UIColor(red: 0, green: 1, blue: 0.76, alpha: 1) : UIColor(red: 0.94, green: 0.07, blue: 0.095, alpha: 1)
        let statBarExp: CGFloat = (1 - (betDepo + betMinAward) / betAim) * 155
        let expression = betMinAward > 0 ? "ÐÑÐ¸Ð³ÑÑÑ:" : "ÐÑÐ¾Ð¸Ð³ÑÑÑ:"
        let betRecoveryExp = "\(Int(round(betRecovery)))" + "%"
        let moneyMoveExpr1 = moneyMove <= 0.1 ? CGPoint(x: (1 - moneyMove * 10) * 65 + moneyMove * 10, y: (1 - moneyMove * 10) * 0 + moneyMove * 10 * 20) : CGPoint(x: 1, y: 20)
        let moneyMoveExpr2 = moneyMove <= 0.1 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.1 && moneyMove <= 0.2 ? CGPoint(x: (1 - (moneyMove - 0.1) * 10) * 65 + (moneyMove - 0.1) * 10, y: (1 - (moneyMove - 0.1) * 10) * 0 + (moneyMove - 0.1) * 10 * 18) : CGPoint(x: 1, y: 18))
        let moneyMoveExpr3 = moneyMove <= 0.2 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.2 && moneyMove <= 0.3 ? CGPoint(x: (1 - (moneyMove - 0.2) * 10) * 65 + (moneyMove - 0.2) * 10, y: (1 - (moneyMove - 0.2) * 10) * 0 + (moneyMove - 0.2) * 10 * 16) : CGPoint(x: 1, y: 16))
        let moneyMoveExpr4 = moneyMove <= 0.3 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.3 && moneyMove <= 0.4 ? CGPoint(x: (1 - (moneyMove - 0.3) * 10) * 65 + (moneyMove - 0.3) * 10, y: (1 - (moneyMove - 0.3) * 10) * 0 + (moneyMove - 0.3) * 10 * 14) : CGPoint(x: 1, y: 14))
        let moneyMoveExpr5 = moneyMove <= 0.4 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.4 && moneyMove <= 0.5 ? CGPoint(x: (1 - (moneyMove - 0.4) * 10) * 65 + (moneyMove - 0.4) * 10, y: (1 - (moneyMove - 0.4) * 10) * 0 + (moneyMove - 0.4) * 10 * 12) : CGPoint(x: 1, y: 12))
        let moneyMoveExpr6 = moneyMove <= 0.5 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.5 && moneyMove <= 0.6 ? CGPoint(x: (1 - (moneyMove - 0.5) * 10) * 65 + (moneyMove - 0.5) * 10, y: (1 - (moneyMove - 0.5) * 10) * 0 + (moneyMove - 0.5) * 10 * 10) : CGPoint(x: 1, y: 10))
        let moneyMoveExpr7 = moneyMove <= 0.6 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.6 && moneyMove <= 0.7 ? CGPoint(x: (1 - (moneyMove - 0.6) * 10) * 65 + (moneyMove - 0.6) * 10, y: (1 - (moneyMove - 0.6) * 10) * 0 + (moneyMove - 0.6) * 10 * 8) : CGPoint(x: 1, y: 8))
        let moneyMoveExpr8 = moneyMove <= 0.7 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.7 && moneyMove <= 0.8 ? CGPoint(x: (1 - (moneyMove - 0.7) * 10) * 65 + (moneyMove - 0.7) * 10, y: (1 - (moneyMove - 0.7) * 10) * 0 + (moneyMove - 0.7) * 10 * 6) : CGPoint(x: 1, y: 6))
        let moneyMoveExpr9 = moneyMove <= 0.8 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.8 && moneyMove <= 0.9 ? CGPoint(x: (1 - (moneyMove - 0.8) * 10) * 65 + (moneyMove - 0.9) * 10, y: (1 - (moneyMove - 0.8) * 10) * 0 + (moneyMove - 0.9) * 10 * 2) : CGPoint(x: 1, y: 4))
        let dollarOpacityExpr: CGFloat = moneyMove == 0 ? 0 : (actualCurrencyText == "dollar" ? 1 : 0)
        let rupeeOpacityExpr: CGFloat = moneyMove == 0 ? 0 : (actualCurrencyText == "rupee" ? 1 : 0)
        let poundOpacityExpr: CGFloat = moneyMove == 0 ? 0 : (actualCurrencyText == "pound" ? 1 : 0)
        let shekelOpacityExpr: CGFloat = moneyMove == 0 ? 0 : (actualCurrencyText == "shekel" ? 1 : 0)
        let euroOpacityExpr: CGFloat = moneyMove == 0 ? 0 : (actualCurrencyText == "euro" ? 1 : 0)
        let rubleOpacityExpr: CGFloat = moneyMove == 0 ? 0 : (actualCurrencyText == "ruble" ? 1 : 0)
        let ienaOpacityExpr: CGFloat = moneyMove == 0 ? 0 : (actualCurrencyText == "iena" ? 1 : 0)
        let betAimExp = actualCurrencySymbol + "\(Int(round(betAim)))"
        let betDepoExp = actualCurrencySymbol + "\(Int(round(betDepo)))"
        let statWinExp = betMinAward > 0 ? actualCurrencySymbol + "\(Int(round(betMinAward)))" : actualCurrencySymbol + "\(Int(round(abs(betMinAward))))"

        //// Rectangle 28 Drawing
        context.saveGState()
        context.setAlpha(0.9)

        let rectangle28Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 812))
        context.saveGState()
        rectangle28Path.addClip()
        context.drawLinearGradient(hintGradient, start: CGPoint(x: 187.5, y: -0), end: CGPoint(x: 187.5, y: 812), options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 33 Drawing
        let rectangle33Path = UIBezierPath(roundedRect: CGRect(x: 11.23, y: 306.34, width: 353.82, height: 210.77), cornerRadius: 10)
        bezierGradientColor5.setStroke()
        rectangle33Path.lineWidth = 1
        rectangle33Path.stroke()


        //// Buttons Group
        //// Games Group
        //// Games Button
        //// Rectangle 31 Drawing
        let rectangle31Path = UIBezierPath(rect: CGRect(x: 167.81, y: 469.33, width: 184.75, height: 30))
        color6.setFill()
        rectangle31Path.fill()


        //// Text 14 Drawing
        let text14Rect = CGRect(x: 168.21, y: 469.22, width: 184.28, height: 30)
        let text14Style = NSMutableParagraphStyle()
        text14Style.alignment = .center
        let text14FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text14Style,
        ] as [NSAttributedString.Key: Any]

        let text14TextHeight: CGFloat = statGamesCount.boundingRect(with: CGSize(width: text14Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text14FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text14Rect)
        statGamesCount.draw(in: CGRect(x: text14Rect.minX, y: text14Rect.minY + (text14Rect.height - text14TextHeight) / 2, width: text14Rect.width, height: text14TextHeight), withAttributes: text14FontAttributes)
        context.restoreGState()




        //// Games Title Drawing
        let gamesTitleRect = CGRect(x: 22.12, y: 469.19, width: 142.05, height: 30)
        let gamesTitleTextContent = "ÐÑÐµÐ³Ð¾ ÑÑÐ³ÑÐ°Ð½Ð¾:"
        let gamesTitleStyle = NSMutableParagraphStyle()
        gamesTitleStyle.alignment = .left
        let gamesTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: gamesTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let gamesTitleTextHeight: CGFloat = gamesTitleTextContent.boundingRect(with: CGSize(width: gamesTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: gamesTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: gamesTitleRect)
        gamesTitleTextContent.draw(in: CGRect(x: gamesTitleRect.minX, y: gamesTitleRect.minY + (gamesTitleRect.height - gamesTitleTextHeight) / 2, width: gamesTitleRect.width, height: gamesTitleTextHeight), withAttributes: gamesTitleFontAttributes)
        context.restoreGState()




        //// Level Group
        //// Level Button
        //// Rectangle 29 Drawing
        let rectangle29Path = UIBezierPath(rect: CGRect(x: 168.12, y: 419.9, width: 184.75, height: 31))
        color6.setFill()
        rectangle29Path.fill()


        //// Level Text Drawing
        let levelTextRect = CGRect(x: 168.48, y: 419.9, width: 184.37, height: 31)
        let levelTextStyle = NSMutableParagraphStyle()
        levelTextStyle.alignment = .center
        let levelTextFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: levelTextStyle,
        ] as [NSAttributedString.Key: Any]

        let levelTextTextHeight: CGFloat = statLevel.boundingRect(with: CGSize(width: levelTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: levelTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: levelTextRect)
        statLevel.draw(in: CGRect(x: levelTextRect.minX, y: levelTextRect.minY + (levelTextRect.height - levelTextTextHeight) / 2, width: levelTextRect.width, height: levelTextTextHeight), withAttributes: levelTextFontAttributes)
        context.restoreGState()




        //// Level Title Drawing
        let levelTitleRect = CGRect(x: 22.12, y: 419.9, width: 142.05, height: 31)
        let levelTitleTextContent = "Ð£ÑÐ¾Ð²ÐµÐ½Ñ:"
        let levelTitleStyle = NSMutableParagraphStyle()
        levelTitleStyle.alignment = .left
        let levelTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: levelTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let levelTitleTextHeight: CGFloat = levelTitleTextContent.boundingRect(with: CGSize(width: levelTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: levelTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: levelTitleRect)
        levelTitleTextContent.draw(in: CGRect(x: levelTitleRect.minX, y: levelTitleRect.minY + (levelTitleRect.height - levelTitleTextHeight) / 2, width: levelTitleRect.width, height: levelTitleTextHeight), withAttributes: levelTitleFontAttributes)
        context.restoreGState()




        //// Depo Group
        //// Depo Button
        //// Rectangle 30 Drawing
        let rectangle30Path = UIBezierPath(rect: CGRect(x: 168.49, y: 372.15, width: 184.75, height: 30))
        color6.setFill()
        rectangle30Path.fill()


        //// BetDepoText Drawing
        let betDepoTextRect = CGRect(x: 168.76, y: 372.15, width: 184.62, height: 30)
        let betDepoTextStyle = NSMutableParagraphStyle()
        betDepoTextStyle.alignment = .center
        let betDepoTextFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: betDepoTextStyle,
        ] as [NSAttributedString.Key: Any]

        let betDepoTextTextHeight: CGFloat = betDepoExp.boundingRect(with: CGSize(width: betDepoTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: betDepoTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: betDepoTextRect)
        betDepoExp.draw(in: CGRect(x: betDepoTextRect.minX, y: betDepoTextRect.minY + (betDepoTextRect.height - betDepoTextTextHeight) / 2, width: betDepoTextRect.width, height: betDepoTextTextHeight), withAttributes: betDepoTextFontAttributes)
        context.restoreGState()




        //// Depo Title Drawing
        let depoTitleRect = CGRect(x: 22.49, y: 372.42, width: 142.05, height: 30)
        let depoTitleTextContent = "ÐÐµÐ¿Ð¾Ð·Ð¸Ñ:"
        let depoTitleStyle = NSMutableParagraphStyle()
        depoTitleStyle.alignment = .left
        let depoTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: depoTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let depoTitleTextHeight: CGFloat = depoTitleTextContent.boundingRect(with: CGSize(width: depoTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: depoTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: depoTitleRect)
        depoTitleTextContent.draw(in: CGRect(x: depoTitleRect.minX, y: depoTitleRect.minY + (depoTitleRect.height - depoTitleTextHeight) / 2, width: depoTitleRect.width, height: depoTitleTextHeight), withAttributes: depoTitleFontAttributes)
        context.restoreGState()




        //// Win Group
        //// Win Button
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 168.33, y: 325.06, width: 184.75, height: 29.7))
        color6.setFill()
        rectanglePath.fill()


        //// Text Drawing
        let textRect = CGRect(x: 168.73, y: 324.95, width: 184.28, height: 29)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: statBarColor,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = statWinExp.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        statWinExp.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()




        //// Win Title Drawing
        let winTitleRect = CGRect(x: 22.54, y: 324.95, width: 142.05, height: 30)
        let winTitleStyle = NSMutableParagraphStyle()
        winTitleStyle.alignment = .left
        let winTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: winTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let winTitleTextHeight: CGFloat = expression.boundingRect(with: CGSize(width: winTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: winTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: winTitleRect)
        expression.draw(in: CGRect(x: winTitleRect.minX, y: winTitleRect.minY + (winTitleRect.height - winTitleTextHeight) / 2, width: winTitleRect.width, height: winTitleTextHeight), withAttributes: winTitleFontAttributes)
        context.restoreGState()






        //// Aim Group
        //// Win Drawing
        let winRect = CGRect(x: 74.96, y: 179.61, width: 52.77, height: 26.92)
        let winStyle = NSMutableParagraphStyle()
        winStyle.alignment = .left
        let winFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: statBarColor,
            .paragraphStyle: winStyle,
        ] as [NSAttributedString.Key: Any]

        let winTextHeight: CGFloat = statWinExp.boundingRect(with: CGSize(width: winRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: winFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: winRect)
        statWinExp.draw(in: CGRect(x: winRect.minX, y: winRect.minY + (winRect.height - winTextHeight) / 2, width: winRect.width, height: winTextHeight), withAttributes: winFontAttributes)
        context.restoreGState()


        //// Win Arrow Drawing
        let winArrowRect = CGRect(x: 61.18, y: 184.96, width: 14.94, height: 18.41)
        let winArrowStyle = NSMutableParagraphStyle()
        winArrowStyle.alignment = .center
        let winArrowFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 10)!,
            .foregroundColor: statBarColor,
            .paragraphStyle: winArrowStyle,
        ] as [NSAttributedString.Key: Any]

        let winArrowTextHeight: CGFloat = statWinExp2.boundingRect(with: CGSize(width: winArrowRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: winArrowFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: winArrowRect)
        statWinExp2.draw(in: CGRect(x: winArrowRect.minX, y: winArrowRect.minY + (winArrowRect.height - winArrowTextHeight) / 2, width: winArrowRect.width, height: winArrowTextHeight), withAttributes: winArrowFontAttributes)
        context.restoreGState()


        //// Rectangle 35 Drawing
        let rectangle35Path = UIBezierPath(rect: CGRect(x: 9.94, y: 94, width: 50.76, height: 155))
        gradientColor4.setFill()
        rectangle35Path.fill()


        //// Rectangle 34 Drawing
        let rectangle34Path = UIBezierPath(rect: CGRect(x: 9.95, y: 94, width: 50.7, height: statBarExp))
        color.setFill()
        rectangle34Path.fill()


        //// Aim Drawing
        let aimRect = CGRect(x: 68.4, y: 114.1, width: 109, height: 44.64)
        let aimStyle = NSMutableParagraphStyle()
        aimStyle.alignment = .left
        let aimFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 32)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: aimStyle,
        ] as [NSAttributedString.Key: Any]

        let aimTextHeight: CGFloat = betAimExp.boundingRect(with: CGSize(width: aimRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: aimFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: aimRect)
        betAimExp.draw(in: CGRect(x: aimRect.minX, y: aimRect.minY + (aimRect.height - aimTextHeight) / 2, width: aimRect.width, height: aimTextHeight), withAttributes: aimFontAttributes)
        context.restoreGState()


        //// Text 16 Drawing
        let text16Rect = CGRect(x: 70.19, y: 76.73, width: 104.84, height: 47)
        let text16TextContent = "ÑÐµÐ»Ñ:"
        let text16Style = NSMutableParagraphStyle()
        text16Style.alignment = .left
        let text16FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text16Style,
        ] as [NSAttributedString.Key: Any]

        let text16TextHeight: CGFloat = text16TextContent.boundingRect(with: CGSize(width: text16Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text16FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text16Rect)
        text16TextContent.draw(in: CGRect(x: text16Rect.minX, y: text16Rect.minY + (text16Rect.height - text16TextHeight) / 2, width: text16Rect.width, height: text16TextHeight), withAttributes: text16FontAttributes)
        context.restoreGState()




        //// Remaining Group
        //// Text 18 Drawing
        let text18Rect = CGRect(x: 194.98, y: 86.1, width: 173.24, height: 60.62)
        let text18Style = NSMutableParagraphStyle()
        text18Style.alignment = .left
        let text18FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 24)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text18Style,
        ] as [NSAttributedString.Key: Any]

        "Ð²ÑÐµÐ¼Ñ Ð´Ð¾ ÑÑÐ¾Ð»ÐºÐ½Ð¾Ð²ÐµÐ½Ð¸Ñ:".draw(in: text18Rect, withAttributes: text18FontAttributes)


        //// Text 20 Drawing
        let text20Rect = CGRect(x: 195.11, y: 152.65, width: 172.87, height: 67.1)
        let text20Style = NSMutableParagraphStyle()
        text20Style.alignment = .center
        let text20FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 78)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text20Style,
        ] as [NSAttributedString.Key: Any]

        let text20TextHeight: CGFloat = statBeforeDisasterLeft.boundingRect(with: CGSize(width: text20Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text20FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text20Rect)
        statBeforeDisasterLeft.draw(in: CGRect(x: text20Rect.minX, y: text20Rect.minY + (text20Rect.height - text20TextHeight) / 2, width: text20Rect.width, height: text20TextHeight), withAttributes: text20FontAttributes)
        context.restoreGState()




        //// Group 2
        //// Text 21 Drawing
        let text21Rect = CGRect(x: 10.24, y: 549.28, width: 293.75, height: 60.62)
        let text21TextContent = "Ð¡Ð¾ÑÑÐ¾ÑÐ½Ð¸Ðµ Ð·Ð¾Ð½Ð´Ð°:"
        let text21Style = NSMutableParagraphStyle()
        text21Style.alignment = .left
        let text21FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text21Style,
        ] as [NSAttributedString.Key: Any]

        let text21TextHeight: CGFloat = text21TextContent.boundingRect(with: CGSize(width: text21Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text21FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text21Rect)
        text21TextContent.draw(in: CGRect(x: text21Rect.minX, y: text21Rect.minY + (text21Rect.height - text21TextHeight) / 2, width: text21Rect.width, height: text21TextHeight), withAttributes: text21FontAttributes)
        context.restoreGState()


        //// Text 22 Drawing
        let text22Rect = CGRect(x: 251.47, y: 545.66, width: 118.34, height: 67.1)
        let text22Style = NSMutableParagraphStyle()
        text22Style.alignment = .right
        let text22FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 45)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text22Style,
        ] as [NSAttributedString.Key: Any]

        let text22TextHeight: CGFloat = betRecoveryExp.boundingRect(with: CGSize(width: text22Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text22FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text22Rect)
        betRecoveryExp.draw(in: CGRect(x: text22Rect.minX, y: text22Rect.minY + (text22Rect.height - text22TextHeight) / 2, width: text22Rect.width, height: text22TextHeight), withAttributes: text22FontAttributes)
        context.restoreGState()




        //// Text 23 Drawing
        let text23Rect = CGRect(x: 21.31, y: 295.14, width: 119.21, height: 21)
        let text23Path = UIBezierPath(roundedRect: text23Rect, cornerRadius: 4)
        paint0_linear3Color3.setFill()
        text23Path.fill()
        let text23TextContent = "Ð¡ÑÐ°ÑÐ¸ÑÑÐ¸ÐºÐ°"
        let text23Style = NSMutableParagraphStyle()
        text23Style.alignment = .center
        let text23FontAttributes = [
            .font: UIFont(name: "Gilroy-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text23Style,
        ] as [NSAttributedString.Key: Any]

        let text23TextHeight: CGFloat = text23TextContent.boundingRect(with: CGSize(width: text23Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text23FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text23Rect)
        text23TextContent.draw(in: CGRect(x: text23Rect.minX, y: text23Rect.minY + (text23Rect.height - text23TextHeight) / 2, width: text23Rect.width, height: text23TextHeight), withAttributes: text23FontAttributes)
        context.restoreGState()


        //// d1 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr1.x + 18.1328125), y: (moneyMoveExpr1.y + 204.541992188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d1Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d1Path = UIBezierPath(rect: d1Rect)
        context.saveGState()
        d1Path.addClip()
        context.translateBy(x: floor(d1Rect.minX + 0.5), y: floor(d1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d2 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr2.x + 18.1328125), y: (moneyMoveExpr2.y + 204.541992188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d2Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d2Path = UIBezierPath(rect: d2Rect)
        context.saveGState()
        d2Path.addClip()
        context.translateBy(x: floor(d2Rect.minX + 0.5), y: floor(d2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d3 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr3.x + 18.1328125), y: (moneyMoveExpr3.y + 204.541992188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d3Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d3Path = UIBezierPath(rect: d3Rect)
        context.saveGState()
        d3Path.addClip()
        context.translateBy(x: floor(d3Rect.minX + 0.5), y: floor(d3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d4 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr4.x + 18.1328125), y: (moneyMoveExpr4.y + 204.541992188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d4Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d4Path = UIBezierPath(rect: d4Rect)
        context.saveGState()
        d4Path.addClip()
        context.translateBy(x: floor(d4Rect.minX + 0.5), y: floor(d4Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d5 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr5.x + 18.1328125), y: (moneyMoveExpr5.y + 204.541992188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d5Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d5Path = UIBezierPath(rect: d5Rect)
        context.saveGState()
        d5Path.addClip()
        context.translateBy(x: floor(d5Rect.minX + 0.5), y: floor(d5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d6 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr6.x + 18.1328125), y: (moneyMoveExpr6.y + 204.541992188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d6Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d6Path = UIBezierPath(rect: d6Rect)
        context.saveGState()
        d6Path.addClip()
        context.translateBy(x: floor(d6Rect.minX + 0.5), y: floor(d6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d7 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr7.x + 18.1328125), y: (moneyMoveExpr7.y + 204.541992188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d7Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d7Path = UIBezierPath(rect: d7Rect)
        context.saveGState()
        d7Path.addClip()
        context.translateBy(x: floor(d7Rect.minX + 0.5), y: floor(d7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d8 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr8.x + 18.1328125), y: (moneyMoveExpr8.y + 204.541992188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d8Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d8Path = UIBezierPath(rect: d8Rect)
        context.saveGState()
        d8Path.addClip()
        context.translateBy(x: floor(d8Rect.minX + 0.5), y: floor(d8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d9 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr9.x + 18.1328125), y: (moneyMoveExpr9.y + 204.541992188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d9Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d9Path = UIBezierPath(rect: d9Rect)
        context.saveGState()
        d9Path.addClip()
        context.translateBy(x: floor(d9Rect.minX + 0.5), y: floor(d9Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r1 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr1.x + 18.4765625), y: (moneyMoveExpr1.y + 204.694335938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r1Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r1Path = UIBezierPath(rect: r1Rect)
        context.saveGState()
        r1Path.addClip()
        context.translateBy(x: floor(r1Rect.minX + 0.5), y: floor(r1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r2 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr2.x + 18.4765625), y: (moneyMoveExpr2.y + 204.694335938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r2Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r2Path = UIBezierPath(rect: r2Rect)
        context.saveGState()
        r2Path.addClip()
        context.translateBy(x: floor(r2Rect.minX + 0.5), y: floor(r2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r3 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr3.x + 18.4765625), y: (moneyMoveExpr3.y + 204.694335938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r3Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r3Path = UIBezierPath(rect: r3Rect)
        context.saveGState()
        r3Path.addClip()
        context.translateBy(x: floor(r3Rect.minX + 0.5), y: floor(r3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r4 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr4.x + 18.4765625), y: (moneyMoveExpr4.y + 204.694335938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r4Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r4Path = UIBezierPath(rect: r4Rect)
        context.saveGState()
        r4Path.addClip()
        context.translateBy(x: floor(r4Rect.minX + 0.5), y: floor(r4Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r5 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr5.x + 18.4765625), y: (moneyMoveExpr5.y + 204.694335938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r5Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r5Path = UIBezierPath(rect: r5Rect)
        context.saveGState()
        r5Path.addClip()
        context.translateBy(x: floor(r5Rect.minX + 0.5), y: floor(r5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r6 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr6.x + 18.4765625), y: (moneyMoveExpr6.y + 204.694335938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r6Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r6Path = UIBezierPath(rect: r6Rect)
        context.saveGState()
        r6Path.addClip()
        context.translateBy(x: floor(r6Rect.minX + 0.5), y: floor(r6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r7 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr7.x + 18.4765625), y: (moneyMoveExpr7.y + 204.694335938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r7Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r7Path = UIBezierPath(rect: r7Rect)
        context.saveGState()
        r7Path.addClip()
        context.translateBy(x: floor(r7Rect.minX + 0.5), y: floor(r7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r8 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr8.x + 18.4765625), y: (moneyMoveExpr8.y + 204.694335938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r8Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r8Path = UIBezierPath(rect: r8Rect)
        context.saveGState()
        r8Path.addClip()
        context.translateBy(x: floor(r8Rect.minX + 0.5), y: floor(r8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r9 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr9.x + 18.4765625), y: (moneyMoveExpr9.y + 204.694335938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r9Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r9Path = UIBezierPath(rect: r9Rect)
        context.saveGState()
        r9Path.addClip()
        context.translateBy(x: floor(r9Rect.minX + 0.5), y: floor(r9Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p1 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr1.x + 18.3125), y: (moneyMoveExpr1.y + 204.745117188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p1Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p1Path = UIBezierPath(rect: p1Rect)
        context.saveGState()
        p1Path.addClip()
        context.translateBy(x: floor(p1Rect.minX + 0.5), y: floor(p1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p2 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr2.x + 18.3125), y: (moneyMoveExpr2.y + 204.745117188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p2Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p2Path = UIBezierPath(rect: p2Rect)
        context.saveGState()
        p2Path.addClip()
        context.translateBy(x: floor(p2Rect.minX + 0.5), y: floor(p2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p3 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr3.x + 18.3125), y: (moneyMoveExpr3.y + 204.745117188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p3Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p3Path = UIBezierPath(rect: p3Rect)
        context.saveGState()
        p3Path.addClip()
        context.translateBy(x: floor(p3Rect.minX + 0.5), y: floor(p3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p4 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr4.x + 18.3125), y: (moneyMoveExpr4.y + 204.745117188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p4Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p4Path = UIBezierPath(rect: p4Rect)
        context.saveGState()
        p4Path.addClip()
        context.translateBy(x: floor(p4Rect.minX + 0.5), y: floor(p4Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p5 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr5.x + 18.3125), y: (moneyMoveExpr5.y + 204.745117188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p5Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p5Path = UIBezierPath(rect: p5Rect)
        context.saveGState()
        p5Path.addClip()
        context.translateBy(x: floor(p5Rect.minX + 0.5), y: floor(p5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p6 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr6.x + 18.3125), y: (moneyMoveExpr6.y + 204.745117188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p6Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p6Path = UIBezierPath(rect: p6Rect)
        context.saveGState()
        p6Path.addClip()
        context.translateBy(x: floor(p6Rect.minX + 0.5), y: floor(p6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p7 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr7.x + 18.3125), y: (moneyMoveExpr7.y + 204.745117188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p7Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p7Path = UIBezierPath(rect: p7Rect)
        context.saveGState()
        p7Path.addClip()
        context.translateBy(x: floor(p7Rect.minX + 0.5), y: floor(p7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p8 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr8.x + 18.3125), y: (moneyMoveExpr8.y + 204.745117188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p8Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p8Path = UIBezierPath(rect: p8Rect)
        context.saveGState()
        p8Path.addClip()
        context.translateBy(x: floor(p8Rect.minX + 0.5), y: floor(p8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p9 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr9.x + 18.3125), y: (moneyMoveExpr9.y + 204.745117188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p9Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p9Path = UIBezierPath(rect: p9Rect)
        context.saveGState()
        p9Path.addClip()
        context.translateBy(x: floor(p9Rect.minX + 0.5), y: floor(p9Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s1 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr1.x + 18.4423828125), y: (moneyMoveExpr1.y + 204.248046875))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s1Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s1Path = UIBezierPath(rect: s1Rect)
        context.saveGState()
        s1Path.addClip()
        context.translateBy(x: floor(s1Rect.minX + 0.5), y: floor(s1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s2 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr2.x + 18.4423828125), y: (moneyMoveExpr2.y + 204.248046875))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s2Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s2Path = UIBezierPath(rect: s2Rect)
        context.saveGState()
        s2Path.addClip()
        context.translateBy(x: floor(s2Rect.minX + 0.5), y: floor(s2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s3 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr3.x + 18.4423828125), y: (moneyMoveExpr3.y + 204.248046875))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s3Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s3Path = UIBezierPath(rect: s3Rect)
        context.saveGState()
        s3Path.addClip()
        context.translateBy(x: floor(s3Rect.minX + 0.5), y: floor(s3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s4 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr4.x + 18.4423828125), y: (moneyMoveExpr4.y + 204.248046875))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s4Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s4Path = UIBezierPath(rect: s4Rect)
        context.saveGState()
        s4Path.addClip()
        context.translateBy(x: floor(s4Rect.minX + 0.5), y: floor(s4Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s5 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr5.x + 18.4423828125), y: (moneyMoveExpr5.y + 204.248046875))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s5Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s5Path = UIBezierPath(rect: s5Rect)
        context.saveGState()
        s5Path.addClip()
        context.translateBy(x: floor(s5Rect.minX + 0.5), y: floor(s5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s6 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr6.x + 18.4423828125), y: (moneyMoveExpr6.y + 204.248046875))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s6Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s6Path = UIBezierPath(rect: s6Rect)
        context.saveGState()
        s6Path.addClip()
        context.translateBy(x: floor(s6Rect.minX + 0.5), y: floor(s6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s7 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr7.x + 18.4423828125), y: (moneyMoveExpr7.y + 204.248046875))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s7Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s7Path = UIBezierPath(rect: s7Rect)
        context.saveGState()
        s7Path.addClip()
        context.translateBy(x: floor(s7Rect.minX + 0.5), y: floor(s7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s8 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr8.x + 18.4423828125), y: (moneyMoveExpr8.y + 204.248046875))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s8Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s8Path = UIBezierPath(rect: s8Rect)
        context.saveGState()
        s8Path.addClip()
        context.translateBy(x: floor(s8Rect.minX + 0.5), y: floor(s8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s9 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr9.x + 18.4423828125), y: (moneyMoveExpr9.y + 204.248046875))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s9Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s9Path = UIBezierPath(rect: s9Rect)
        context.saveGState()
        s9Path.addClip()
        context.translateBy(x: floor(s9Rect.minX + 0.5), y: floor(s9Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e1 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr1.x + 18.5071614583), y: (moneyMoveExpr1.y + 204.648111979))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e1Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e1Path = UIBezierPath(rect: e1Rect)
        context.saveGState()
        e1Path.addClip()
        context.translateBy(x: floor(e1Rect.minX + 0.5), y: floor(e1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e2 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr2.x + 18.5071614583), y: (moneyMoveExpr2.y + 204.648111979))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e2Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e2Path = UIBezierPath(rect: e2Rect)
        context.saveGState()
        e2Path.addClip()
        context.translateBy(x: floor(e2Rect.minX + 0.5), y: floor(e2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e3 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr3.x + 18.5071614583), y: (moneyMoveExpr3.y + 204.648111979))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e3Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e3Path = UIBezierPath(rect: e3Rect)
        context.saveGState()
        e3Path.addClip()
        context.translateBy(x: floor(e3Rect.minX + 0.5), y: floor(e3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e4 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr4.x + 18.5071614583), y: (moneyMoveExpr4.y + 204.648111979))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e4Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e4Path = UIBezierPath(rect: e4Rect)
        context.saveGState()
        e4Path.addClip()
        context.translateBy(x: floor(e4Rect.minX + 0.5), y: floor(e4Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e5 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr5.x + 18.5071614583), y: (moneyMoveExpr5.y + 204.648111979))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e5Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e5Path = UIBezierPath(rect: e5Rect)
        context.saveGState()
        e5Path.addClip()
        context.translateBy(x: floor(e5Rect.minX + 0.5), y: floor(e5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e6 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr6.x + 18.5071614583), y: (moneyMoveExpr6.y + 204.648111979))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e6Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e6Path = UIBezierPath(rect: e6Rect)
        context.saveGState()
        e6Path.addClip()
        context.translateBy(x: floor(e6Rect.minX + 0.5), y: floor(e6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e7 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr7.x + 18.5071614583), y: (moneyMoveExpr7.y + 204.648111979))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e7Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e7Path = UIBezierPath(rect: e7Rect)
        context.saveGState()
        e7Path.addClip()
        context.translateBy(x: floor(e7Rect.minX + 0.5), y: floor(e7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e8 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr8.x + 18.5071614583), y: (moneyMoveExpr8.y + 204.648111979))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e8Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e8Path = UIBezierPath(rect: e8Rect)
        context.saveGState()
        e8Path.addClip()
        context.translateBy(x: floor(e8Rect.minX + 0.5), y: floor(e8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e9 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr9.x + 18.5071614583), y: (moneyMoveExpr9.y + 204.648111979))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e9Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e9Path = UIBezierPath(rect: e9Rect)
        context.saveGState()
        e9Path.addClip()
        context.translateBy(x: floor(e9Rect.minX + 0.5), y: floor(e9Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru1 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr1.x + 17.794921875), y: (moneyMoveExpr1.y + 203.727539062))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru1Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru1Path = UIBezierPath(rect: ru1Rect)
        context.saveGState()
        ru1Path.addClip()
        context.translateBy(x: floor(ru1Rect.minX + 0.5), y: floor(ru1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru2 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr2.x + 17.794921875), y: (moneyMoveExpr2.y + 203.727539062))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru2Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru2Path = UIBezierPath(rect: ru2Rect)
        context.saveGState()
        ru2Path.addClip()
        context.translateBy(x: floor(ru2Rect.minX + 0.5), y: floor(ru2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru3 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr3.x + 17.794921875), y: (moneyMoveExpr3.y + 203.727539062))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru3Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru3Path = UIBezierPath(rect: ru3Rect)
        context.saveGState()
        ru3Path.addClip()
        context.translateBy(x: floor(ru3Rect.minX + 0.5), y: floor(ru3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru4 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr4.x + 17.794921875), y: (moneyMoveExpr4.y + 203.727539062))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru4Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru4Path = UIBezierPath(rect: ru4Rect)
        context.saveGState()
        ru4Path.addClip()
        context.translateBy(x: floor(ru4Rect.minX + 0.5), y: floor(ru4Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru5 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr5.x + 17.794921875), y: (moneyMoveExpr5.y + 203.727539062))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru5Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru5Path = UIBezierPath(rect: ru5Rect)
        context.saveGState()
        ru5Path.addClip()
        context.translateBy(x: floor(ru5Rect.minX + 0.5), y: floor(ru5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru6 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr6.x + 17.794921875), y: (moneyMoveExpr6.y + 203.727539062))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru6Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru6Path = UIBezierPath(rect: ru6Rect)
        context.saveGState()
        ru6Path.addClip()
        context.translateBy(x: floor(ru6Rect.minX + 0.5), y: floor(ru6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru7 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr7.x + 17.794921875), y: (moneyMoveExpr7.y + 203.727539062))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru7Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru7Path = UIBezierPath(rect: ru7Rect)
        context.saveGState()
        ru7Path.addClip()
        context.translateBy(x: floor(ru7Rect.minX + 0.5), y: floor(ru7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru8 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr8.x + 17.794921875), y: (moneyMoveExpr8.y + 203.727539062))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru8Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru8Path = UIBezierPath(rect: ru8Rect)
        context.saveGState()
        ru8Path.addClip()
        context.translateBy(x: floor(ru8Rect.minX + 0.5), y: floor(ru8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru9 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr9.x + 17.794921875), y: (moneyMoveExpr9.y + 204.027539062))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru9Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru9Path = UIBezierPath(rect: ru9Rect)
        context.saveGState()
        ru9Path.addClip()
        context.translateBy(x: floor(ru9Rect.minX + 0.5), y: floor(ru9Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie1 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr1.x + 17.72265625), y: (moneyMoveExpr1.y + 204.272460938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie1Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie1Path = UIBezierPath(rect: ie1Rect)
        context.saveGState()
        ie1Path.addClip()
        context.translateBy(x: floor(ie1Rect.minX + 0.5), y: floor(ie1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie 2 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr2.x + 17.72265625), y: (moneyMoveExpr2.y + 204.272460938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie2Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie2Path = UIBezierPath(rect: ie2Rect)
        context.saveGState()
        ie2Path.addClip()
        context.translateBy(x: floor(ie2Rect.minX + 0.5), y: floor(ie2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie 3 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr3.x + 17.72265625), y: (moneyMoveExpr3.y + 204.272460938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie3Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie3Path = UIBezierPath(rect: ie3Rect)
        context.saveGState()
        ie3Path.addClip()
        context.translateBy(x: floor(ie3Rect.minX + 0.5), y: floor(ie3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie 4 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr4.x + 17.72265625), y: (moneyMoveExpr4.y + 204.272460938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie4Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie4Path = UIBezierPath(rect: ie4Rect)
        context.saveGState()
        ie4Path.addClip()
        context.translateBy(x: floor(ie4Rect.minX + 0.5), y: floor(ie4Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie 5 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr5.x + 17.72265625), y: (moneyMoveExpr5.y + 204.272460938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie5Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie5Path = UIBezierPath(rect: ie5Rect)
        context.saveGState()
        ie5Path.addClip()
        context.translateBy(x: floor(ie5Rect.minX + 0.5), y: floor(ie5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie 6 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr6.x + 17.72265625), y: (moneyMoveExpr6.y + 204.272460938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie6Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie6Path = UIBezierPath(rect: ie6Rect)
        context.saveGState()
        ie6Path.addClip()
        context.translateBy(x: floor(ie6Rect.minX + 0.5), y: floor(ie6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie 7 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr7.x + 17.72265625), y: (moneyMoveExpr7.y + 204.272460938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie7Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie7Path = UIBezierPath(rect: ie7Rect)
        context.saveGState()
        ie7Path.addClip()
        context.translateBy(x: floor(ie7Rect.minX + 0.5), y: floor(ie7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie 8 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr8.x + 17.72265625), y: (moneyMoveExpr8.y + 204.272460938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie8Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie8Path = UIBezierPath(rect: ie8Rect)
        context.saveGState()
        ie8Path.addClip()
        context.translateBy(x: floor(ie8Rect.minX + 0.5), y: floor(ie8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie9 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr9.x + 17.72265625), y: (moneyMoveExpr9.y + 204.272460938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie9Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie9Path = UIBezierPath(rect: ie9Rect)
        context.saveGState()
        ie9Path.addClip()
        context.translateBy(x: floor(ie9Rect.minX + 0.5), y: floor(ie9Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawStatScreen_55(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 737), resizing: ResizingBehavior = .aspectFit, betAim: CGFloat = 1063, betDepo: CGFloat = 48, betMinAward: CGFloat = 224, betRecovery: CGFloat = 104, statBeforeDisasterLeft: String = "24", statLevel: String = "4", statGamesCount: String = "11", actualCurrencyText: String = "shekel", moneyMove: CGFloat = 1, actualCurrencySymbol: String = "â¬") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 737), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 737)


        //// Color Declarations
        let paint0_linear3Color3 = UIColor(red: 0.033, green: 0.360, blue: 0.892, alpha: 1.000)
        let gradientColor4 = UIColor(red: 0.000, green: 1.000, blue: 0.761, alpha: 1.000)
        let bezierGradientColor5 = UIColor(red: 0.192, green: 1.000, blue: 0.953, alpha: 1.000)
        let color = UIColor(red: 0.000, green: 0.333, blue: 1.000, alpha: 1.000)
        let hintGradientColor = UIColor(red: 0.121, green: 0.068, blue: 0.948, alpha: 1.000)
        let hintGradientColor2 = UIColor(red: 0.151, green: 0.202, blue: 0.532, alpha: 1.000)
        let color6 = UIColor(red: 0.176, green: 0.333, blue: 0.698, alpha: 1.000)

        //// Gradient Declarations
        let hintGradient = CGGradient(colorsSpace: nil, colors: [hintGradientColor.cgColor, hintGradientColor2.cgColor] as CFArray, locations: [0, 1])!

        //// Image Declarations
        let dollar = UIImage(named: "dollar.png")!
        let rupees = UIImage(named: "rupees.png")!
        let pound = UIImage(named: "pound.png")!
        let shekel = UIImage(named: "shekel.png")!
        let euro = UIImage(named: "euro.png")!
        let ruble = UIImage(named: "ruble.png")!
        let iena = UIImage(named: "iena.png")!

        //// Variable Declarations
        let statWinExp2 = betMinAward > 0 ? "â²" : "â¼"
        let statBarColor = betMinAward > 0 ? UIColor(red: 0, green: 1, blue: 0.76, alpha: 1) : UIColor(red: 0.94, green: 0.07, blue: 0.095, alpha: 1)
        let statBarExp: CGFloat = (1 - (betDepo + betMinAward) / betAim) * 155
        let expression = betMinAward > 0 ? "ÐÑÐ¸Ð³ÑÑÑ:" : "ÐÑÐ¾Ð¸Ð³ÑÑÑ:"
        let betRecoveryExp = "\(Int(round(betRecovery)))" + "%"
        let moneyMoveExpr1 = moneyMove <= 0.1 ? CGPoint(x: (1 - moneyMove * 10) * 65 + moneyMove * 10, y: (1 - moneyMove * 10) * 0 + moneyMove * 10 * 20) : CGPoint(x: 1, y: 20)
        let moneyMoveExpr2 = moneyMove <= 0.1 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.1 && moneyMove <= 0.2 ? CGPoint(x: (1 - (moneyMove - 0.1) * 10) * 65 + (moneyMove - 0.1) * 10, y: (1 - (moneyMove - 0.1) * 10) * 0 + (moneyMove - 0.1) * 10 * 18) : CGPoint(x: 1, y: 18))
        let moneyMoveExpr3 = moneyMove <= 0.2 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.2 && moneyMove <= 0.3 ? CGPoint(x: (1 - (moneyMove - 0.2) * 10) * 65 + (moneyMove - 0.2) * 10, y: (1 - (moneyMove - 0.2) * 10) * 0 + (moneyMove - 0.2) * 10 * 16) : CGPoint(x: 1, y: 16))
        let moneyMoveExpr4 = moneyMove <= 0.3 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.3 && moneyMove <= 0.4 ? CGPoint(x: (1 - (moneyMove - 0.3) * 10) * 65 + (moneyMove - 0.3) * 10, y: (1 - (moneyMove - 0.3) * 10) * 0 + (moneyMove - 0.3) * 10 * 14) : CGPoint(x: 1, y: 14))
        let moneyMoveExpr5 = moneyMove <= 0.4 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.4 && moneyMove <= 0.5 ? CGPoint(x: (1 - (moneyMove - 0.4) * 10) * 65 + (moneyMove - 0.4) * 10, y: (1 - (moneyMove - 0.4) * 10) * 0 + (moneyMove - 0.4) * 10 * 12) : CGPoint(x: 1, y: 12))
        let moneyMoveExpr6 = moneyMove <= 0.5 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.5 && moneyMove <= 0.6 ? CGPoint(x: (1 - (moneyMove - 0.5) * 10) * 65 + (moneyMove - 0.5) * 10, y: (1 - (moneyMove - 0.5) * 10) * 0 + (moneyMove - 0.5) * 10 * 10) : CGPoint(x: 1, y: 10))
        let moneyMoveExpr7 = moneyMove <= 0.6 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.6 && moneyMove <= 0.7 ? CGPoint(x: (1 - (moneyMove - 0.6) * 10) * 65 + (moneyMove - 0.6) * 10, y: (1 - (moneyMove - 0.6) * 10) * 0 + (moneyMove - 0.6) * 10 * 8) : CGPoint(x: 1, y: 8))
        let moneyMoveExpr8 = moneyMove <= 0.7 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.7 && moneyMove <= 0.8 ? CGPoint(x: (1 - (moneyMove - 0.7) * 10) * 65 + (moneyMove - 0.7) * 10, y: (1 - (moneyMove - 0.7) * 10) * 0 + (moneyMove - 0.7) * 10 * 6) : CGPoint(x: 1, y: 6))
        let moneyMoveExpr9 = moneyMove <= 0.8 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.8 && moneyMove <= 0.9 ? CGPoint(x: (1 - (moneyMove - 0.8) * 10) * 65 + (moneyMove - 0.9) * 10, y: (1 - (moneyMove - 0.8) * 10) * 0 + (moneyMove - 0.9) * 10 * 2) : CGPoint(x: 1, y: 4))
        let dollarOpacityExpr: CGFloat = moneyMove == 0 ? 0 : (actualCurrencyText == "dollar" ? 1 : 0)
        let rupeeOpacityExpr: CGFloat = moneyMove == 0 ? 0 : (actualCurrencyText == "rupee" ? 1 : 0)
        let poundOpacityExpr: CGFloat = moneyMove == 0 ? 0 : (actualCurrencyText == "pound" ? 1 : 0)
        let shekelOpacityExpr: CGFloat = moneyMove == 0 ? 0 : (actualCurrencyText == "shekel" ? 1 : 0)
        let euroOpacityExpr: CGFloat = moneyMove == 0 ? 0 : (actualCurrencyText == "euro" ? 1 : 0)
        let rubleOpacityExpr: CGFloat = moneyMove == 0 ? 0 : (actualCurrencyText == "ruble" ? 1 : 0)
        let ienaOpacityExpr: CGFloat = moneyMove == 0 ? 0 : (actualCurrencyText == "iena" ? 1 : 0)
        let betAimExp = actualCurrencySymbol + "\(Int(round(betAim)))"
        let betDepoExp = actualCurrencySymbol + "\(Int(round(betDepo)))"
        let statWinExp = betMinAward > 0 ? actualCurrencySymbol + "\(Int(round(betMinAward)))" : actualCurrencySymbol + "\(Int(round(abs(betMinAward))))"

        //// Rectangle 28 Drawing
        context.saveGState()
        context.setAlpha(0.9)

        let rectangle28Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 414, height: 736))
        context.saveGState()
        rectangle28Path.addClip()
        context.drawLinearGradient(hintGradient, start: CGPoint(x: 207, y: -0), end: CGPoint(x: 207, y: 736), options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 33 Drawing
        let rectangle33Path = UIBezierPath(roundedRect: CGRect(x: 30.23, y: 312.34, width: 353.82, height: 210.77), cornerRadius: 10)
        bezierGradientColor5.setStroke()
        rectangle33Path.lineWidth = 1
        rectangle33Path.stroke()


        //// Buttons Group
        //// Games Group
        //// Games Button
        //// Rectangle 31 Drawing
        let rectangle31Path = UIBezierPath(rect: CGRect(x: 186.81, y: 475.33, width: 184.75, height: 30))
        color6.setFill()
        rectangle31Path.fill()


        //// Text 14 Drawing
        let text14Rect = CGRect(x: 187.21, y: 475.22, width: 184.28, height: 30)
        let text14Style = NSMutableParagraphStyle()
        text14Style.alignment = .center
        let text14FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text14Style,
        ] as [NSAttributedString.Key: Any]

        let text14TextHeight: CGFloat = statGamesCount.boundingRect(with: CGSize(width: text14Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text14FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text14Rect)
        statGamesCount.draw(in: CGRect(x: text14Rect.minX, y: text14Rect.minY + (text14Rect.height - text14TextHeight) / 2, width: text14Rect.width, height: text14TextHeight), withAttributes: text14FontAttributes)
        context.restoreGState()




        //// Games Title Drawing
        let gamesTitleRect = CGRect(x: 41.12, y: 475.19, width: 142.05, height: 30)
        let gamesTitleTextContent = "ÐÑÐµÐ³Ð¾ ÑÑÐ³ÑÐ°Ð½Ð¾:"
        let gamesTitleStyle = NSMutableParagraphStyle()
        gamesTitleStyle.alignment = .left
        let gamesTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: gamesTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let gamesTitleTextHeight: CGFloat = gamesTitleTextContent.boundingRect(with: CGSize(width: gamesTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: gamesTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: gamesTitleRect)
        gamesTitleTextContent.draw(in: CGRect(x: gamesTitleRect.minX, y: gamesTitleRect.minY + (gamesTitleRect.height - gamesTitleTextHeight) / 2, width: gamesTitleRect.width, height: gamesTitleTextHeight), withAttributes: gamesTitleFontAttributes)
        context.restoreGState()




        //// Level Group
        //// Level Button
        //// Rectangle 29 Drawing
        let rectangle29Path = UIBezierPath(rect: CGRect(x: 187.12, y: 425.9, width: 184.75, height: 31))
        color6.setFill()
        rectangle29Path.fill()


        //// Level Text Drawing
        let levelTextRect = CGRect(x: 187.48, y: 425.9, width: 184.37, height: 31)
        let levelTextStyle = NSMutableParagraphStyle()
        levelTextStyle.alignment = .center
        let levelTextFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: levelTextStyle,
        ] as [NSAttributedString.Key: Any]

        let levelTextTextHeight: CGFloat = statLevel.boundingRect(with: CGSize(width: levelTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: levelTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: levelTextRect)
        statLevel.draw(in: CGRect(x: levelTextRect.minX, y: levelTextRect.minY + (levelTextRect.height - levelTextTextHeight) / 2, width: levelTextRect.width, height: levelTextTextHeight), withAttributes: levelTextFontAttributes)
        context.restoreGState()




        //// Level Title Drawing
        let levelTitleRect = CGRect(x: 41.12, y: 425.9, width: 142.05, height: 31)
        let levelTitleTextContent = "Ð£ÑÐ¾Ð²ÐµÐ½Ñ:"
        let levelTitleStyle = NSMutableParagraphStyle()
        levelTitleStyle.alignment = .left
        let levelTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: levelTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let levelTitleTextHeight: CGFloat = levelTitleTextContent.boundingRect(with: CGSize(width: levelTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: levelTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: levelTitleRect)
        levelTitleTextContent.draw(in: CGRect(x: levelTitleRect.minX, y: levelTitleRect.minY + (levelTitleRect.height - levelTitleTextHeight) / 2, width: levelTitleRect.width, height: levelTitleTextHeight), withAttributes: levelTitleFontAttributes)
        context.restoreGState()




        //// Depo Group
        //// Depo Button
        //// Rectangle 30 Drawing
        let rectangle30Path = UIBezierPath(rect: CGRect(x: 187.49, y: 378.15, width: 184.75, height: 30))
        color6.setFill()
        rectangle30Path.fill()


        //// BetDepoText Drawing
        let betDepoTextRect = CGRect(x: 187.76, y: 378.15, width: 184.62, height: 30)
        let betDepoTextStyle = NSMutableParagraphStyle()
        betDepoTextStyle.alignment = .center
        let betDepoTextFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: betDepoTextStyle,
        ] as [NSAttributedString.Key: Any]

        let betDepoTextTextHeight: CGFloat = betDepoExp.boundingRect(with: CGSize(width: betDepoTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: betDepoTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: betDepoTextRect)
        betDepoExp.draw(in: CGRect(x: betDepoTextRect.minX, y: betDepoTextRect.minY + (betDepoTextRect.height - betDepoTextTextHeight) / 2, width: betDepoTextRect.width, height: betDepoTextTextHeight), withAttributes: betDepoTextFontAttributes)
        context.restoreGState()




        //// Depo Title Drawing
        let depoTitleRect = CGRect(x: 41.49, y: 378.42, width: 142.05, height: 30)
        let depoTitleTextContent = "ÐÐµÐ¿Ð¾Ð·Ð¸Ñ:"
        let depoTitleStyle = NSMutableParagraphStyle()
        depoTitleStyle.alignment = .left
        let depoTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: depoTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let depoTitleTextHeight: CGFloat = depoTitleTextContent.boundingRect(with: CGSize(width: depoTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: depoTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: depoTitleRect)
        depoTitleTextContent.draw(in: CGRect(x: depoTitleRect.minX, y: depoTitleRect.minY + (depoTitleRect.height - depoTitleTextHeight) / 2, width: depoTitleRect.width, height: depoTitleTextHeight), withAttributes: depoTitleFontAttributes)
        context.restoreGState()




        //// Win Group
        //// Win Button
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 187.33, y: 331.06, width: 184.75, height: 29.7))
        color6.setFill()
        rectanglePath.fill()


        //// Text Drawing
        let textRect = CGRect(x: 187.73, y: 330.95, width: 184.28, height: 29)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: statBarColor,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = statWinExp.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        statWinExp.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()




        //// Win Title Drawing
        let winTitleRect = CGRect(x: 41.54, y: 330.95, width: 142.05, height: 30)
        let winTitleStyle = NSMutableParagraphStyle()
        winTitleStyle.alignment = .left
        let winTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: winTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let winTitleTextHeight: CGFloat = expression.boundingRect(with: CGSize(width: winTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: winTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: winTitleRect)
        expression.draw(in: CGRect(x: winTitleRect.minX, y: winTitleRect.minY + (winTitleRect.height - winTitleTextHeight) / 2, width: winTitleRect.width, height: winTitleTextHeight), withAttributes: winTitleFontAttributes)
        context.restoreGState()






        //// Aim Group
        //// Win Drawing
        let winRect = CGRect(x: 93.76, y: 185.36, width: 52.77, height: 26.92)
        let winStyle = NSMutableParagraphStyle()
        winStyle.alignment = .left
        let winFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: statBarColor,
            .paragraphStyle: winStyle,
        ] as [NSAttributedString.Key: Any]

        let winTextHeight: CGFloat = statWinExp.boundingRect(with: CGSize(width: winRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: winFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: winRect)
        statWinExp.draw(in: CGRect(x: winRect.minX, y: winRect.minY + (winRect.height - winTextHeight) / 2, width: winRect.width, height: winTextHeight), withAttributes: winFontAttributes)
        context.restoreGState()


        //// Win Arrow Drawing
        let winArrowRect = CGRect(x: 79.49, y: 191.17, width: 14.94, height: 18.41)
        let winArrowStyle = NSMutableParagraphStyle()
        winArrowStyle.alignment = .center
        let winArrowFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 10)!,
            .foregroundColor: statBarColor,
            .paragraphStyle: winArrowStyle,
        ] as [NSAttributedString.Key: Any]

        let winArrowTextHeight: CGFloat = statWinExp2.boundingRect(with: CGSize(width: winArrowRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: winArrowFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: winArrowRect)
        statWinExp2.draw(in: CGRect(x: winArrowRect.minX, y: winArrowRect.minY + (winArrowRect.height - winArrowTextHeight) / 2, width: winArrowRect.width, height: winArrowTextHeight), withAttributes: winArrowFontAttributes)
        context.restoreGState()


        //// Rectangle 35 Drawing
        let rectangle35Path = UIBezierPath(rect: CGRect(x: 28.94, y: 100, width: 50.76, height: 155))
        gradientColor4.setFill()
        rectangle35Path.fill()


        //// Rectangle 34 Drawing
        let rectangle34Path = UIBezierPath(rect: CGRect(x: 28.95, y: 100, width: 50.7, height: statBarExp))
        color.setFill()
        rectangle34Path.fill()


        //// Aim Drawing
        let aimRect = CGRect(x: 87.23, y: 120.28, width: 109, height: 44.64)
        let aimStyle = NSMutableParagraphStyle()
        aimStyle.alignment = .left
        let aimFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 32)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: aimStyle,
        ] as [NSAttributedString.Key: Any]

        let aimTextHeight: CGFloat = betAimExp.boundingRect(with: CGSize(width: aimRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: aimFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: aimRect)
        betAimExp.draw(in: CGRect(x: aimRect.minX, y: aimRect.minY + (aimRect.height - aimTextHeight) / 2, width: aimRect.width, height: aimTextHeight), withAttributes: aimFontAttributes)
        context.restoreGState()


        //// Text 16 Drawing
        let text16Rect = CGRect(x: 89.19, y: 82.73, width: 104.84, height: 47)
        let text16TextContent = "ÑÐµÐ»Ñ:"
        let text16Style = NSMutableParagraphStyle()
        text16Style.alignment = .left
        let text16FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text16Style,
        ] as [NSAttributedString.Key: Any]

        let text16TextHeight: CGFloat = text16TextContent.boundingRect(with: CGSize(width: text16Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text16FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text16Rect)
        text16TextContent.draw(in: CGRect(x: text16Rect.minX, y: text16Rect.minY + (text16Rect.height - text16TextHeight) / 2, width: text16Rect.width, height: text16TextHeight), withAttributes: text16FontAttributes)
        context.restoreGState()




        //// Remaining Group
        //// Text 18 Drawing
        let text18Rect = CGRect(x: 220.07, y: 92.1, width: 173.24, height: 60.62)
        let text18Style = NSMutableParagraphStyle()
        text18Style.alignment = .left
        let text18FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 24)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text18Style,
        ] as [NSAttributedString.Key: Any]

        "Ð²ÑÐµÐ¼Ñ Ð´Ð¾ ÑÑÐ¾Ð»ÐºÐ½Ð¾Ð²ÐµÐ½Ð¸Ñ:".draw(in: text18Rect, withAttributes: text18FontAttributes)


        //// Text 20 Drawing
        let text20Rect = CGRect(x: 220.2, y: 158.65, width: 172.87, height: 67.1)
        let text20Style = NSMutableParagraphStyle()
        text20Style.alignment = .center
        let text20FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 78)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text20Style,
        ] as [NSAttributedString.Key: Any]

        let text20TextHeight: CGFloat = statBeforeDisasterLeft.boundingRect(with: CGSize(width: text20Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text20FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text20Rect)
        statBeforeDisasterLeft.draw(in: CGRect(x: text20Rect.minX, y: text20Rect.minY + (text20Rect.height - text20TextHeight) / 2, width: text20Rect.width, height: text20TextHeight), withAttributes: text20FontAttributes)
        context.restoreGState()




        //// Group 2
        //// Text 21 Drawing
        let text21Rect = CGRect(x: 29.24, y: 555.28, width: 293.75, height: 60.62)
        let text21TextContent = "Ð¡Ð¾ÑÑÐ¾ÑÐ½Ð¸Ðµ Ð·Ð¾Ð½Ð´Ð°:"
        let text21Style = NSMutableParagraphStyle()
        text21Style.alignment = .left
        let text21FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text21Style,
        ] as [NSAttributedString.Key: Any]

        let text21TextHeight: CGFloat = text21TextContent.boundingRect(with: CGSize(width: text21Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text21FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text21Rect)
        text21TextContent.draw(in: CGRect(x: text21Rect.minX, y: text21Rect.minY + (text21Rect.height - text21TextHeight) / 2, width: text21Rect.width, height: text21TextHeight), withAttributes: text21FontAttributes)
        context.restoreGState()


        //// Text 22 Drawing
        let text22Rect = CGRect(x: 270.47, y: 551.66, width: 118.34, height: 67.1)
        let text22Style = NSMutableParagraphStyle()
        text22Style.alignment = .right
        let text22FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 45)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text22Style,
        ] as [NSAttributedString.Key: Any]

        let text22TextHeight: CGFloat = betRecoveryExp.boundingRect(with: CGSize(width: text22Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text22FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text22Rect)
        betRecoveryExp.draw(in: CGRect(x: text22Rect.minX, y: text22Rect.minY + (text22Rect.height - text22TextHeight) / 2, width: text22Rect.width, height: text22TextHeight), withAttributes: text22FontAttributes)
        context.restoreGState()




        //// Text 23 Drawing
        let text23Rect = CGRect(x: 40.31, y: 301.14, width: 119.21, height: 21)
        let text23Path = UIBezierPath(roundedRect: text23Rect, cornerRadius: 4)
        paint0_linear3Color3.setFill()
        text23Path.fill()
        let text23TextContent = "Ð¡ÑÐ°ÑÐ¸ÑÑÐ¸ÐºÐ°"
        let text23Style = NSMutableParagraphStyle()
        text23Style.alignment = .center
        let text23FontAttributes = [
            .font: UIFont(name: "Gilroy-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text23Style,
        ] as [NSAttributedString.Key: Any]

        let text23TextHeight: CGFloat = text23TextContent.boundingRect(with: CGSize(width: text23Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text23FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text23Rect)
        text23TextContent.draw(in: CGRect(x: text23Rect.minX, y: text23Rect.minY + (text23Rect.height - text23TextHeight) / 2, width: text23Rect.width, height: text23TextHeight), withAttributes: text23FontAttributes)
        context.restoreGState()


        //// d1 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr1.x + 37.2548828125), y: (moneyMoveExpr1.y + 208.749023438))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d1Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d1Path = UIBezierPath(rect: d1Rect)
        context.saveGState()
        d1Path.addClip()
        context.translateBy(x: floor(d1Rect.minX + 0.5), y: floor(d1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d2 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr2.x + 37.2548828125), y: (moneyMoveExpr2.y + 208.749023438))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d2Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d2Path = UIBezierPath(rect: d2Rect)
        context.saveGState()
        d2Path.addClip()
        context.translateBy(x: floor(d2Rect.minX + 0.5), y: floor(d2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d3 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr3.x + 37.2548828125), y: (moneyMoveExpr3.y + 208.749023437))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d3Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d3Path = UIBezierPath(rect: d3Rect)
        context.saveGState()
        d3Path.addClip()
        context.translateBy(x: floor(d3Rect.minX + 0.5), y: floor(d3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d4 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr4.x + 37.2548828125), y: (moneyMoveExpr4.y + 208.749023438))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d4Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d4Path = UIBezierPath(rect: d4Rect)
        context.saveGState()
        d4Path.addClip()
        context.translateBy(x: floor(d4Rect.minX + 0.5), y: floor(d4Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d5 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr5.x + 37.2548828125), y: (moneyMoveExpr5.y + 208.749023438))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d5Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d5Path = UIBezierPath(rect: d5Rect)
        context.saveGState()
        d5Path.addClip()
        context.translateBy(x: floor(d5Rect.minX + 0.5), y: floor(d5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d6 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr6.x + 37.2548828125), y: (moneyMoveExpr6.y + 208.749023438))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d6Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d6Path = UIBezierPath(rect: d6Rect)
        context.saveGState()
        d6Path.addClip()
        context.translateBy(x: floor(d6Rect.minX + 0.5), y: floor(d6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d7 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr7.x + 37.2548828125), y: (moneyMoveExpr7.y + 208.749023438))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d7Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d7Path = UIBezierPath(rect: d7Rect)
        context.saveGState()
        d7Path.addClip()
        context.translateBy(x: floor(d7Rect.minX + 0.5), y: floor(d7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d8 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr8.x + 37.2548828125), y: (moneyMoveExpr8.y + 208.749023438))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d8Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d8Path = UIBezierPath(rect: d8Rect)
        context.saveGState()
        d8Path.addClip()
        context.translateBy(x: floor(d8Rect.minX + 0.5), y: floor(d8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d9 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr9.x + 37.2548828125), y: (moneyMoveExpr9.y + 208.749023438))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d9Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d9Path = UIBezierPath(rect: d9Rect)
        context.saveGState()
        d9Path.addClip()
        context.translateBy(x: floor(d9Rect.minX + 0.5), y: floor(d9Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r1 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr1.x + 37.5986328125), y: (moneyMoveExpr1.y + 208.901367188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r1Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r1Path = UIBezierPath(rect: r1Rect)
        context.saveGState()
        r1Path.addClip()
        context.translateBy(x: floor(r1Rect.minX + 0.5), y: floor(r1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r2 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr2.x + 37.5986328125), y: (moneyMoveExpr2.y + 208.901367188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r2Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r2Path = UIBezierPath(rect: r2Rect)
        context.saveGState()
        r2Path.addClip()
        context.translateBy(x: floor(r2Rect.minX + 0.5), y: floor(r2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r3 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr3.x + 37.5986328125), y: (moneyMoveExpr3.y + 208.901367188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r3Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r3Path = UIBezierPath(rect: r3Rect)
        context.saveGState()
        r3Path.addClip()
        context.translateBy(x: floor(r3Rect.minX + 0.5), y: floor(r3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r4 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr4.x + 37.5986328125), y: (moneyMoveExpr4.y + 208.901367188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r4Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r4Path = UIBezierPath(rect: r4Rect)
        context.saveGState()
        r4Path.addClip()
        context.translateBy(x: floor(r4Rect.minX + 0.5), y: floor(r4Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r5 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr5.x + 37.5986328125), y: (moneyMoveExpr5.y + 208.901367188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r5Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r5Path = UIBezierPath(rect: r5Rect)
        context.saveGState()
        r5Path.addClip()
        context.translateBy(x: floor(r5Rect.minX + 0.5), y: floor(r5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r6 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr6.x + 37.5986328125), y: (moneyMoveExpr6.y + 208.901367188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r6Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r6Path = UIBezierPath(rect: r6Rect)
        context.saveGState()
        r6Path.addClip()
        context.translateBy(x: floor(r6Rect.minX + 0.5), y: floor(r6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r7 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr7.x + 37.5986328125), y: (moneyMoveExpr7.y + 208.901367188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r7Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r7Path = UIBezierPath(rect: r7Rect)
        context.saveGState()
        r7Path.addClip()
        context.translateBy(x: floor(r7Rect.minX + 0.5), y: floor(r7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r8 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr8.x + 37.5986328125), y: (moneyMoveExpr8.y + 208.901367188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r8Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r8Path = UIBezierPath(rect: r8Rect)
        context.saveGState()
        r8Path.addClip()
        context.translateBy(x: floor(r8Rect.minX + 0.5), y: floor(r8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r9 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr9.x + 37.5986328125), y: (moneyMoveExpr9.y + 208.901367188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r9Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r9Path = UIBezierPath(rect: r9Rect)
        context.saveGState()
        r9Path.addClip()
        context.translateBy(x: floor(r9Rect.minX + 0.5), y: floor(r9Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p1 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr1.x + 37.4345703125), y: (moneyMoveExpr1.y + 208.952148438))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p1Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p1Path = UIBezierPath(rect: p1Rect)
        context.saveGState()
        p1Path.addClip()
        context.translateBy(x: floor(p1Rect.minX + 0.5), y: floor(p1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p2 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr2.x + 37.4345703125), y: (moneyMoveExpr2.y + 208.952148438))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p2Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p2Path = UIBezierPath(rect: p2Rect)
        context.saveGState()
        p2Path.addClip()
        context.translateBy(x: floor(p2Rect.minX + 0.5), y: floor(p2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p3 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr3.x + 37.4345703125), y: (moneyMoveExpr3.y + 208.952148438))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p3Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p3Path = UIBezierPath(rect: p3Rect)
        context.saveGState()
        p3Path.addClip()
        context.translateBy(x: floor(p3Rect.minX + 0.5), y: floor(p3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p4 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr4.x + 37.4345703125), y: (moneyMoveExpr4.y + 208.952148438))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p4Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p4Path = UIBezierPath(rect: p4Rect)
        context.saveGState()
        p4Path.addClip()
        context.translateBy(x: floor(p4Rect.minX + 0.5), y: floor(p4Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p5 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr5.x + 37.4345703125), y: (moneyMoveExpr5.y + 208.952148438))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p5Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p5Path = UIBezierPath(rect: p5Rect)
        context.saveGState()
        p5Path.addClip()
        context.translateBy(x: floor(p5Rect.minX + 0.5), y: floor(p5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p6 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr6.x + 37.4345703125), y: (moneyMoveExpr6.y + 208.952148438))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p6Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p6Path = UIBezierPath(rect: p6Rect)
        context.saveGState()
        p6Path.addClip()
        context.translateBy(x: floor(p6Rect.minX + 0.5), y: floor(p6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p7 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr7.x + 37.4345703125), y: (moneyMoveExpr7.y + 208.952148438))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p7Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p7Path = UIBezierPath(rect: p7Rect)
        context.saveGState()
        p7Path.addClip()
        context.translateBy(x: floor(p7Rect.minX + 0.5), y: floor(p7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p8 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr8.x + 37.4345703125), y: (moneyMoveExpr8.y + 208.952148438))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p8Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p8Path = UIBezierPath(rect: p8Rect)
        context.saveGState()
        p8Path.addClip()
        context.translateBy(x: floor(p8Rect.minX + 0.5), y: floor(p8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p9 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr9.x + 37.4345703125), y: (moneyMoveExpr9.y + 208.952148438))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p9Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p9Path = UIBezierPath(rect: p9Rect)
        context.saveGState()
        p9Path.addClip()
        context.translateBy(x: floor(p9Rect.minX + 0.5), y: floor(p9Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s1 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr1.x + 37.564453125), y: (moneyMoveExpr1.y + 208.455078125))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s1Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s1Path = UIBezierPath(rect: s1Rect)
        context.saveGState()
        s1Path.addClip()
        context.translateBy(x: floor(s1Rect.minX + 0.5), y: floor(s1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s2 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr2.x + 37.564453125), y: (moneyMoveExpr2.y + 208.455078125))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s2Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s2Path = UIBezierPath(rect: s2Rect)
        context.saveGState()
        s2Path.addClip()
        context.translateBy(x: floor(s2Rect.minX + 0.5), y: floor(s2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s3 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr3.x + 37.564453125), y: (moneyMoveExpr3.y + 208.455078125))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s3Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s3Path = UIBezierPath(rect: s3Rect)
        context.saveGState()
        s3Path.addClip()
        context.translateBy(x: floor(s3Rect.minX + 0.5), y: floor(s3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s4 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr4.x + 37.564453125), y: (moneyMoveExpr4.y + 208.455078125))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s4Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s4Path = UIBezierPath(rect: s4Rect)
        context.saveGState()
        s4Path.addClip()
        context.translateBy(x: floor(s4Rect.minX + 0.5), y: floor(s4Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s5 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr5.x + 37.564453125), y: (moneyMoveExpr5.y + 208.455078125))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s5Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s5Path = UIBezierPath(rect: s5Rect)
        context.saveGState()
        s5Path.addClip()
        context.translateBy(x: floor(s5Rect.minX + 0.5), y: floor(s5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s6 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr6.x + 37.564453125), y: (moneyMoveExpr6.y + 208.455078125))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s6Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s6Path = UIBezierPath(rect: s6Rect)
        context.saveGState()
        s6Path.addClip()
        context.translateBy(x: floor(s6Rect.minX + 0.5), y: floor(s6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s7 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr7.x + 37.564453125), y: (moneyMoveExpr7.y + 208.455078125))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s7Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s7Path = UIBezierPath(rect: s7Rect)
        context.saveGState()
        s7Path.addClip()
        context.translateBy(x: floor(s7Rect.minX + 0.5), y: floor(s7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s8 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr8.x + 37.564453125), y: (moneyMoveExpr8.y + 208.455078125))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s8Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s8Path = UIBezierPath(rect: s8Rect)
        context.saveGState()
        s8Path.addClip()
        context.translateBy(x: floor(s8Rect.minX + 0.5), y: floor(s8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s9 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr9.x + 37.564453125), y: (moneyMoveExpr9.y + 208.455078125))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s9Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s9Path = UIBezierPath(rect: s9Rect)
        context.saveGState()
        s9Path.addClip()
        context.translateBy(x: floor(s9Rect.minX + 0.5), y: floor(s9Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e1 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr1.x + 37.6292317708), y: (moneyMoveExpr1.y + 208.855143229))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e1Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e1Path = UIBezierPath(rect: e1Rect)
        context.saveGState()
        e1Path.addClip()
        context.translateBy(x: floor(e1Rect.minX + 0.5), y: floor(e1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e2 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr2.x + 37.6292317708), y: (moneyMoveExpr2.y + 208.855143229))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e2Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e2Path = UIBezierPath(rect: e2Rect)
        context.saveGState()
        e2Path.addClip()
        context.translateBy(x: floor(e2Rect.minX + 0.5), y: floor(e2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e3 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr3.x + 37.6292317708), y: (moneyMoveExpr3.y + 208.855143229))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e3Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e3Path = UIBezierPath(rect: e3Rect)
        context.saveGState()
        e3Path.addClip()
        context.translateBy(x: floor(e3Rect.minX + 0.5), y: floor(e3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e4 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr4.x + 37.6292317708), y: (moneyMoveExpr4.y + 208.855143229))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e4Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e4Path = UIBezierPath(rect: e4Rect)
        context.saveGState()
        e4Path.addClip()
        context.translateBy(x: floor(e4Rect.minX + 0.5), y: floor(e4Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e5 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr5.x + 37.6292317708), y: (moneyMoveExpr5.y + 208.855143229))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e5Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e5Path = UIBezierPath(rect: e5Rect)
        context.saveGState()
        e5Path.addClip()
        context.translateBy(x: floor(e5Rect.minX + 0.5), y: floor(e5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e6 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr6.x + 37.6292317708), y: (moneyMoveExpr6.y + 208.855143229))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e6Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e6Path = UIBezierPath(rect: e6Rect)
        context.saveGState()
        e6Path.addClip()
        context.translateBy(x: floor(e6Rect.minX + 0.5), y: floor(e6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e7 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr7.x + 37.6292317708), y: (moneyMoveExpr7.y + 208.855143229))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e7Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e7Path = UIBezierPath(rect: e7Rect)
        context.saveGState()
        e7Path.addClip()
        context.translateBy(x: floor(e7Rect.minX + 0.5), y: floor(e7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e8 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr8.x + 37.6292317708), y: (moneyMoveExpr8.y + 208.855143229))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e8Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e8Path = UIBezierPath(rect: e8Rect)
        context.saveGState()
        e8Path.addClip()
        context.translateBy(x: floor(e8Rect.minX + 0.5), y: floor(e8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e9 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr9.x + 37.6292317708), y: (moneyMoveExpr9.y + 208.855143229))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e9Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e9Path = UIBezierPath(rect: e9Rect)
        context.saveGState()
        e9Path.addClip()
        context.translateBy(x: floor(e9Rect.minX + 0.5), y: floor(e9Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru1 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr1.x + 36.9169921875), y: (moneyMoveExpr1.y + 207.934570312))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru1Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru1Path = UIBezierPath(rect: ru1Rect)
        context.saveGState()
        ru1Path.addClip()
        context.translateBy(x: floor(ru1Rect.minX + 0.5), y: floor(ru1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru2 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr2.x + 36.9169921875), y: (moneyMoveExpr2.y + 207.934570312))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru2Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru2Path = UIBezierPath(rect: ru2Rect)
        context.saveGState()
        ru2Path.addClip()
        context.translateBy(x: floor(ru2Rect.minX + 0.5), y: floor(ru2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru3 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr3.x + 36.9169921875), y: (moneyMoveExpr3.y + 207.934570312))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru3Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru3Path = UIBezierPath(rect: ru3Rect)
        context.saveGState()
        ru3Path.addClip()
        context.translateBy(x: floor(ru3Rect.minX + 0.5), y: floor(ru3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru4 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr4.x + 36.9169921875), y: (moneyMoveExpr4.y + 207.934570312))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru4Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru4Path = UIBezierPath(rect: ru4Rect)
        context.saveGState()
        ru4Path.addClip()
        context.translateBy(x: floor(ru4Rect.minX + 0.5), y: floor(ru4Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru5 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr5.x + 36.9169921875), y: (moneyMoveExpr5.y + 207.934570312))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru5Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru5Path = UIBezierPath(rect: ru5Rect)
        context.saveGState()
        ru5Path.addClip()
        context.translateBy(x: floor(ru5Rect.minX + 0.5), y: floor(ru5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru6 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr6.x + 36.9169921875), y: (moneyMoveExpr6.y + 207.934570312))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru6Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru6Path = UIBezierPath(rect: ru6Rect)
        context.saveGState()
        ru6Path.addClip()
        context.translateBy(x: floor(ru6Rect.minX + 0.5), y: floor(ru6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru7 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr7.x + 36.9169921875), y: (moneyMoveExpr7.y + 207.934570312))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru7Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru7Path = UIBezierPath(rect: ru7Rect)
        context.saveGState()
        ru7Path.addClip()
        context.translateBy(x: floor(ru7Rect.minX + 0.5), y: floor(ru7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru8 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr8.x + 36.9169921875), y: (moneyMoveExpr8.y + 207.934570312))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru8Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru8Path = UIBezierPath(rect: ru8Rect)
        context.saveGState()
        ru8Path.addClip()
        context.translateBy(x: floor(ru8Rect.minX + 0.5), y: floor(ru8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru9 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr9.x + 36.9169921875), y: (moneyMoveExpr9.y + 208.234570312))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru9Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru9Path = UIBezierPath(rect: ru9Rect)
        context.saveGState()
        ru9Path.addClip()
        context.translateBy(x: floor(ru9Rect.minX + 0.5), y: floor(ru9Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie1 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr1.x + 36.8447265625), y: (moneyMoveExpr1.y + 208.479492188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie1Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie1Path = UIBezierPath(rect: ie1Rect)
        context.saveGState()
        ie1Path.addClip()
        context.translateBy(x: floor(ie1Rect.minX + 0.5), y: floor(ie1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie 2 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr2.x + 36.8447265625), y: (moneyMoveExpr2.y + 208.479492188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie2Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie2Path = UIBezierPath(rect: ie2Rect)
        context.saveGState()
        ie2Path.addClip()
        context.translateBy(x: floor(ie2Rect.minX + 0.5), y: floor(ie2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie 3 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr3.x + 36.8447265625), y: (moneyMoveExpr3.y + 208.479492188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie3Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie3Path = UIBezierPath(rect: ie3Rect)
        context.saveGState()
        ie3Path.addClip()
        context.translateBy(x: floor(ie3Rect.minX + 0.5), y: floor(ie3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie 4 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr4.x + 36.8447265625), y: (moneyMoveExpr4.y + 208.479492188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie4Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie4Path = UIBezierPath(rect: ie4Rect)
        context.saveGState()
        ie4Path.addClip()
        context.translateBy(x: floor(ie4Rect.minX + 0.5), y: floor(ie4Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie 5 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr5.x + 36.8447265625), y: (moneyMoveExpr5.y + 208.479492188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie5Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie5Path = UIBezierPath(rect: ie5Rect)
        context.saveGState()
        ie5Path.addClip()
        context.translateBy(x: floor(ie5Rect.minX + 0.5), y: floor(ie5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie 6 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr6.x + 36.8447265625), y: (moneyMoveExpr6.y + 208.479492188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie6Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie6Path = UIBezierPath(rect: ie6Rect)
        context.saveGState()
        ie6Path.addClip()
        context.translateBy(x: floor(ie6Rect.minX + 0.5), y: floor(ie6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie 7 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr7.x + 36.8447265625), y: (moneyMoveExpr7.y + 208.479492188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie7Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie7Path = UIBezierPath(rect: ie7Rect)
        context.saveGState()
        ie7Path.addClip()
        context.translateBy(x: floor(ie7Rect.minX + 0.5), y: floor(ie7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie 8 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr8.x + 36.8447265625), y: (moneyMoveExpr8.y + 208.479492188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie8Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie8Path = UIBezierPath(rect: ie8Rect)
        context.saveGState()
        ie8Path.addClip()
        context.translateBy(x: floor(ie8Rect.minX + 0.5), y: floor(ie8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie9 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr9.x + 36.8447265625), y: (moneyMoveExpr9.y + 208.479492188))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie9Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie9Path = UIBezierPath(rect: ie9Rect)
        context.saveGState()
        ie9Path.addClip()
        context.translateBy(x: floor(ie9Rect.minX + 0.5), y: floor(ie9Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawStatScreen_47(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit, betAim: CGFloat = 1063, betDepo: CGFloat = 48, betMinAward: CGFloat = 224, betRecovery: CGFloat = 104, statBeforeDisasterLeft: String = "24", statLevel: String = "4", statGamesCount: String = "11", actualCurrencyText: String = "shekel", moneyMove: CGFloat = 1, actualCurrencySymbol: String = "â¬") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)


        //// Color Declarations
        let paint0_linear3Color3 = UIColor(red: 0.033, green: 0.360, blue: 0.892, alpha: 1.000)
        let gradientColor4 = UIColor(red: 0.000, green: 1.000, blue: 0.761, alpha: 1.000)
        let bezierGradientColor5 = UIColor(red: 0.192, green: 1.000, blue: 0.953, alpha: 1.000)
        let color = UIColor(red: 0.000, green: 0.333, blue: 1.000, alpha: 1.000)
        let hintGradientColor = UIColor(red: 0.121, green: 0.068, blue: 0.948, alpha: 1.000)
        let hintGradientColor2 = UIColor(red: 0.151, green: 0.202, blue: 0.532, alpha: 1.000)
        let color6 = UIColor(red: 0.176, green: 0.333, blue: 0.698, alpha: 1.000)

        //// Gradient Declarations
        let hintGradient = CGGradient(colorsSpace: nil, colors: [hintGradientColor.cgColor, hintGradientColor2.cgColor] as CFArray, locations: [0, 1])!

        //// Image Declarations
        let dollar = UIImage(named: "dollar.png")!
        let rupees = UIImage(named: "rupees.png")!
        let pound = UIImage(named: "pound.png")!
        let shekel = UIImage(named: "shekel.png")!
        let euro = UIImage(named: "euro.png")!
        let ruble = UIImage(named: "ruble.png")!
        let iena = UIImage(named: "iena.png")!

        //// Variable Declarations
        let statWinExp2 = betMinAward > 0 ? "â²" : "â¼"
        let statBarColor = betMinAward > 0 ? UIColor(red: 0, green: 1, blue: 0.76, alpha: 1) : UIColor(red: 0.94, green: 0.07, blue: 0.095, alpha: 1)
        let statBarExp: CGFloat = (1 - (betDepo + betMinAward) / betAim) * 155
        let expression = betMinAward > 0 ? "ÐÑÐ¸Ð³ÑÑÑ:" : "ÐÑÐ¾Ð¸Ð³ÑÑÑ:"
        let betRecoveryExp = "\(Int(round(betRecovery)))" + "%"
        let moneyMoveExpr1 = moneyMove <= 0.1 ? CGPoint(x: (1 - moneyMove * 10) * 65 + moneyMove * 10, y: (1 - moneyMove * 10) * 0 + moneyMove * 10 * 20) : CGPoint(x: 1, y: 20)
        let moneyMoveExpr2 = moneyMove <= 0.1 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.1 && moneyMove <= 0.2 ? CGPoint(x: (1 - (moneyMove - 0.1) * 10) * 65 + (moneyMove - 0.1) * 10, y: (1 - (moneyMove - 0.1) * 10) * 0 + (moneyMove - 0.1) * 10 * 18) : CGPoint(x: 1, y: 18))
        let moneyMoveExpr3 = moneyMove <= 0.2 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.2 && moneyMove <= 0.3 ? CGPoint(x: (1 - (moneyMove - 0.2) * 10) * 65 + (moneyMove - 0.2) * 10, y: (1 - (moneyMove - 0.2) * 10) * 0 + (moneyMove - 0.2) * 10 * 16) : CGPoint(x: 1, y: 16))
        let moneyMoveExpr4 = moneyMove <= 0.3 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.3 && moneyMove <= 0.4 ? CGPoint(x: (1 - (moneyMove - 0.3) * 10) * 65 + (moneyMove - 0.3) * 10, y: (1 - (moneyMove - 0.3) * 10) * 0 + (moneyMove - 0.3) * 10 * 14) : CGPoint(x: 1, y: 14))
        let moneyMoveExpr5 = moneyMove <= 0.4 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.4 && moneyMove <= 0.5 ? CGPoint(x: (1 - (moneyMove - 0.4) * 10) * 65 + (moneyMove - 0.4) * 10, y: (1 - (moneyMove - 0.4) * 10) * 0 + (moneyMove - 0.4) * 10 * 12) : CGPoint(x: 1, y: 12))
        let moneyMoveExpr6 = moneyMove <= 0.5 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.5 && moneyMove <= 0.6 ? CGPoint(x: (1 - (moneyMove - 0.5) * 10) * 65 + (moneyMove - 0.5) * 10, y: (1 - (moneyMove - 0.5) * 10) * 0 + (moneyMove - 0.5) * 10 * 10) : CGPoint(x: 1, y: 10))
        let moneyMoveExpr7 = moneyMove <= 0.6 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.6 && moneyMove <= 0.7 ? CGPoint(x: (1 - (moneyMove - 0.6) * 10) * 65 + (moneyMove - 0.6) * 10, y: (1 - (moneyMove - 0.6) * 10) * 0 + (moneyMove - 0.6) * 10 * 8) : CGPoint(x: 1, y: 8))
        let moneyMoveExpr8 = moneyMove <= 0.7 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.7 && moneyMove <= 0.8 ? CGPoint(x: (1 - (moneyMove - 0.7) * 10) * 65 + (moneyMove - 0.7) * 10, y: (1 - (moneyMove - 0.7) * 10) * 0 + (moneyMove - 0.7) * 10 * 6) : CGPoint(x: 1, y: 6))
        let moneyMoveExpr9 = moneyMove <= 0.8 ? CGPoint(x: 65, y: 0) : (moneyMove > 0.8 && moneyMove <= 0.9 ? CGPoint(x: (1 - (moneyMove - 0.8) * 10) * 65 + (moneyMove - 0.9) * 10, y: (1 - (moneyMove - 0.8) * 10) * 0 + (moneyMove - 0.9) * 10 * 2) : CGPoint(x: 1, y: 4))
        let dollarOpacityExpr: CGFloat = moneyMove == 0 ? 0 : (actualCurrencyText == "dollar" ? 1 : 0)
        let rupeeOpacityExpr: CGFloat = moneyMove == 0 ? 0 : (actualCurrencyText == "rupee" ? 1 : 0)
        let poundOpacityExpr: CGFloat = moneyMove == 0 ? 0 : (actualCurrencyText == "pound" ? 1 : 0)
        let shekelOpacityExpr: CGFloat = moneyMove == 0 ? 0 : (actualCurrencyText == "shekel" ? 1 : 0)
        let euroOpacityExpr: CGFloat = moneyMove == 0 ? 0 : (actualCurrencyText == "euro" ? 1 : 0)
        let rubleOpacityExpr: CGFloat = moneyMove == 0 ? 0 : (actualCurrencyText == "ruble" ? 1 : 0)
        let ienaOpacityExpr: CGFloat = moneyMove == 0 ? 0 : (actualCurrencyText == "iena" ? 1 : 0)
        let betAimExp = actualCurrencySymbol + "\(Int(round(betAim)))"
        let betDepoExp = actualCurrencySymbol + "\(Int(round(betDepo)))"
        let statWinExp = betMinAward > 0 ? actualCurrencySymbol + "\(Int(round(betMinAward)))" : actualCurrencySymbol + "\(Int(round(abs(betMinAward))))"

        //// Rectangle 28 Drawing
        context.saveGState()
        context.setAlpha(0.9)

        let rectangle28Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 667))
        context.saveGState()
        rectangle28Path.addClip()
        context.drawLinearGradient(hintGradient, start: CGPoint(x: 187.5, y: -0), end: CGPoint(x: 187.5, y: 667), options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 33 Drawing
        let rectangle33Path = UIBezierPath(roundedRect: CGRect(x: 11.23, y: 255.34, width: 353.82, height: 210.77), cornerRadius: 10)
        bezierGradientColor5.setStroke()
        rectangle33Path.lineWidth = 1
        rectangle33Path.stroke()


        //// Buttons Group
        //// Games Group
        //// Games Button
        //// Rectangle 31 Drawing
        let rectangle31Path = UIBezierPath(rect: CGRect(x: 167.81, y: 418.33, width: 184.75, height: 30))
        color6.setFill()
        rectangle31Path.fill()


        //// Text 14 Drawing
        let text14Rect = CGRect(x: 168.21, y: 418.22, width: 184.28, height: 30)
        let text14Style = NSMutableParagraphStyle()
        text14Style.alignment = .center
        let text14FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text14Style,
        ] as [NSAttributedString.Key: Any]

        let text14TextHeight: CGFloat = statGamesCount.boundingRect(with: CGSize(width: text14Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text14FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text14Rect)
        statGamesCount.draw(in: CGRect(x: text14Rect.minX, y: text14Rect.minY + (text14Rect.height - text14TextHeight) / 2, width: text14Rect.width, height: text14TextHeight), withAttributes: text14FontAttributes)
        context.restoreGState()




        //// Games Title Drawing
        let gamesTitleRect = CGRect(x: 22.12, y: 418.19, width: 142.05, height: 30)
        let gamesTitleTextContent = "ÐÑÐµÐ³Ð¾ ÑÑÐ³ÑÐ°Ð½Ð¾:"
        let gamesTitleStyle = NSMutableParagraphStyle()
        gamesTitleStyle.alignment = .left
        let gamesTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: gamesTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let gamesTitleTextHeight: CGFloat = gamesTitleTextContent.boundingRect(with: CGSize(width: gamesTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: gamesTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: gamesTitleRect)
        gamesTitleTextContent.draw(in: CGRect(x: gamesTitleRect.minX, y: gamesTitleRect.minY + (gamesTitleRect.height - gamesTitleTextHeight) / 2, width: gamesTitleRect.width, height: gamesTitleTextHeight), withAttributes: gamesTitleFontAttributes)
        context.restoreGState()




        //// Level Group
        //// Level Button
        //// Rectangle 29 Drawing
        let rectangle29Path = UIBezierPath(rect: CGRect(x: 168.12, y: 368.9, width: 184.75, height: 31))
        color6.setFill()
        rectangle29Path.fill()


        //// Level Text Drawing
        let levelTextRect = CGRect(x: 168.48, y: 368.9, width: 184.37, height: 31)
        let levelTextStyle = NSMutableParagraphStyle()
        levelTextStyle.alignment = .center
        let levelTextFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: levelTextStyle,
        ] as [NSAttributedString.Key: Any]

        let levelTextTextHeight: CGFloat = statLevel.boundingRect(with: CGSize(width: levelTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: levelTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: levelTextRect)
        statLevel.draw(in: CGRect(x: levelTextRect.minX, y: levelTextRect.minY + (levelTextRect.height - levelTextTextHeight) / 2, width: levelTextRect.width, height: levelTextTextHeight), withAttributes: levelTextFontAttributes)
        context.restoreGState()




        //// Level Title Drawing
        let levelTitleRect = CGRect(x: 22.12, y: 368.9, width: 142.05, height: 31)
        let levelTitleTextContent = "Ð£ÑÐ¾Ð²ÐµÐ½Ñ:"
        let levelTitleStyle = NSMutableParagraphStyle()
        levelTitleStyle.alignment = .left
        let levelTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: levelTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let levelTitleTextHeight: CGFloat = levelTitleTextContent.boundingRect(with: CGSize(width: levelTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: levelTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: levelTitleRect)
        levelTitleTextContent.draw(in: CGRect(x: levelTitleRect.minX, y: levelTitleRect.minY + (levelTitleRect.height - levelTitleTextHeight) / 2, width: levelTitleRect.width, height: levelTitleTextHeight), withAttributes: levelTitleFontAttributes)
        context.restoreGState()




        //// Depo Group
        //// Depo Button
        //// Rectangle 30 Drawing
        let rectangle30Path = UIBezierPath(rect: CGRect(x: 168.49, y: 321.15, width: 184.75, height: 30))
        color6.setFill()
        rectangle30Path.fill()


        //// BetDepoText Drawing
        let betDepoTextRect = CGRect(x: 168.76, y: 321.15, width: 184.62, height: 30)
        let betDepoTextStyle = NSMutableParagraphStyle()
        betDepoTextStyle.alignment = .center
        let betDepoTextFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: betDepoTextStyle,
        ] as [NSAttributedString.Key: Any]

        let betDepoTextTextHeight: CGFloat = betDepoExp.boundingRect(with: CGSize(width: betDepoTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: betDepoTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: betDepoTextRect)
        betDepoExp.draw(in: CGRect(x: betDepoTextRect.minX, y: betDepoTextRect.minY + (betDepoTextRect.height - betDepoTextTextHeight) / 2, width: betDepoTextRect.width, height: betDepoTextTextHeight), withAttributes: betDepoTextFontAttributes)
        context.restoreGState()




        //// Depo Title Drawing
        let depoTitleRect = CGRect(x: 22.49, y: 321.42, width: 142.05, height: 30)
        let depoTitleTextContent = "ÐÐµÐ¿Ð¾Ð·Ð¸Ñ:"
        let depoTitleStyle = NSMutableParagraphStyle()
        depoTitleStyle.alignment = .left
        let depoTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: depoTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let depoTitleTextHeight: CGFloat = depoTitleTextContent.boundingRect(with: CGSize(width: depoTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: depoTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: depoTitleRect)
        depoTitleTextContent.draw(in: CGRect(x: depoTitleRect.minX, y: depoTitleRect.minY + (depoTitleRect.height - depoTitleTextHeight) / 2, width: depoTitleRect.width, height: depoTitleTextHeight), withAttributes: depoTitleFontAttributes)
        context.restoreGState()




        //// Win Group
        //// Win Button
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 168.33, y: 274.06, width: 184.75, height: 29.7))
        color6.setFill()
        rectanglePath.fill()


        //// Text Drawing
        let textRect = CGRect(x: 168.73, y: 273.95, width: 184.28, height: 29)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: statBarColor,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = statWinExp.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        statWinExp.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()




        //// Win Title Drawing
        let winTitleRect = CGRect(x: 22.54, y: 273.95, width: 142.05, height: 30)
        let winTitleStyle = NSMutableParagraphStyle()
        winTitleStyle.alignment = .left
        let winTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: winTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let winTitleTextHeight: CGFloat = expression.boundingRect(with: CGSize(width: winTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: winTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: winTitleRect)
        expression.draw(in: CGRect(x: winTitleRect.minX, y: winTitleRect.minY + (winTitleRect.height - winTitleTextHeight) / 2, width: winTitleRect.width, height: winTitleTextHeight), withAttributes: winTitleFontAttributes)
        context.restoreGState()






        //// Aim Group
        //// Win Drawing
        let winRect = CGRect(x: 75.59, y: 128.08, width: 52.77, height: 26.92)
        let winStyle = NSMutableParagraphStyle()
        winStyle.alignment = .left
        let winFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: statBarColor,
            .paragraphStyle: winStyle,
        ] as [NSAttributedString.Key: Any]

        let winTextHeight: CGFloat = statWinExp.boundingRect(with: CGSize(width: winRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: winFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: winRect)
        statWinExp.draw(in: CGRect(x: winRect.minX, y: winRect.minY + (winRect.height - winTextHeight) / 2, width: winRect.width, height: winTextHeight), withAttributes: winFontAttributes)
        context.restoreGState()


        //// Win Arrow Drawing
        let winArrowRect = CGRect(x: 61.4, y: 133.86, width: 14.94, height: 18.41)
        let winArrowStyle = NSMutableParagraphStyle()
        winArrowStyle.alignment = .center
        let winArrowFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 10)!,
            .foregroundColor: statBarColor,
            .paragraphStyle: winArrowStyle,
        ] as [NSAttributedString.Key: Any]

        let winArrowTextHeight: CGFloat = statWinExp2.boundingRect(with: CGSize(width: winArrowRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: winArrowFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: winArrowRect)
        statWinExp2.draw(in: CGRect(x: winArrowRect.minX, y: winArrowRect.minY + (winArrowRect.height - winArrowTextHeight) / 2, width: winArrowRect.width, height: winArrowTextHeight), withAttributes: winArrowFontAttributes)
        context.restoreGState()


        //// Rectangle 35 Drawing
        let rectangle35Path = UIBezierPath(rect: CGRect(x: 9.94, y: 43, width: 50.76, height: 155))
        gradientColor4.setFill()
        rectangle35Path.fill()


        //// Rectangle 34 Drawing
        let rectangle34Path = UIBezierPath(rect: CGRect(x: 9.95, y: 43, width: 50.7, height: statBarExp))
        color.setFill()
        rectangle34Path.fill()


        //// Aim Drawing
        let aimRect = CGRect(x: 68.4, y: 63.28, width: 109, height: 44.64)
        let aimStyle = NSMutableParagraphStyle()
        aimStyle.alignment = .left
        let aimFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 32)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: aimStyle,
        ] as [NSAttributedString.Key: Any]

        let aimTextHeight: CGFloat = betAimExp.boundingRect(with: CGSize(width: aimRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: aimFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: aimRect)
        betAimExp.draw(in: CGRect(x: aimRect.minX, y: aimRect.minY + (aimRect.height - aimTextHeight) / 2, width: aimRect.width, height: aimTextHeight), withAttributes: aimFontAttributes)
        context.restoreGState()


        //// Text 16 Drawing
        let text16Rect = CGRect(x: 70.19, y: 25.73, width: 104.84, height: 47)
        let text16TextContent = "ÑÐµÐ»Ñ:"
        let text16Style = NSMutableParagraphStyle()
        text16Style.alignment = .left
        let text16FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text16Style,
        ] as [NSAttributedString.Key: Any]

        let text16TextHeight: CGFloat = text16TextContent.boundingRect(with: CGSize(width: text16Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text16FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text16Rect)
        text16TextContent.draw(in: CGRect(x: text16Rect.minX, y: text16Rect.minY + (text16Rect.height - text16TextHeight) / 2, width: text16Rect.width, height: text16TextHeight), withAttributes: text16FontAttributes)
        context.restoreGState()




        //// Remaining Group
        //// Text 18 Drawing
        let text18Rect = CGRect(x: 194.07, y: 35.1, width: 173.24, height: 60.62)
        let text18Style = NSMutableParagraphStyle()
        text18Style.alignment = .left
        let text18FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 24)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text18Style,
        ] as [NSAttributedString.Key: Any]

        "Ð²ÑÐµÐ¼Ñ Ð´Ð¾ ÑÑÐ¾Ð»ÐºÐ½Ð¾Ð²ÐµÐ½Ð¸Ñ:".draw(in: text18Rect, withAttributes: text18FontAttributes)


        //// Text 20 Drawing
        let text20Rect = CGRect(x: 194.2, y: 101.65, width: 172.87, height: 67.1)
        let text20Style = NSMutableParagraphStyle()
        text20Style.alignment = .center
        let text20FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 78)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text20Style,
        ] as [NSAttributedString.Key: Any]

        let text20TextHeight: CGFloat = statBeforeDisasterLeft.boundingRect(with: CGSize(width: text20Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text20FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text20Rect)
        statBeforeDisasterLeft.draw(in: CGRect(x: text20Rect.minX, y: text20Rect.minY + (text20Rect.height - text20TextHeight) / 2, width: text20Rect.width, height: text20TextHeight), withAttributes: text20FontAttributes)
        context.restoreGState()




        //// Group 2
        //// Text 21 Drawing
        let text21Rect = CGRect(x: 10.24, y: 498.28, width: 293.75, height: 60.62)
        let text21TextContent = "Ð¡Ð¾ÑÑÐ¾ÑÐ½Ð¸Ðµ Ð·Ð¾Ð½Ð´Ð°:"
        let text21Style = NSMutableParagraphStyle()
        text21Style.alignment = .left
        let text21FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text21Style,
        ] as [NSAttributedString.Key: Any]

        let text21TextHeight: CGFloat = text21TextContent.boundingRect(with: CGSize(width: text21Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text21FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text21Rect)
        text21TextContent.draw(in: CGRect(x: text21Rect.minX, y: text21Rect.minY + (text21Rect.height - text21TextHeight) / 2, width: text21Rect.width, height: text21TextHeight), withAttributes: text21FontAttributes)
        context.restoreGState()


        //// Text 22 Drawing
        let text22Rect = CGRect(x: 251.47, y: 494.66, width: 118.34, height: 67.1)
        let text22Style = NSMutableParagraphStyle()
        text22Style.alignment = .right
        let text22FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 45)!,
            .foregroundColor: PlayScreenV2.gradientColor27,
            .paragraphStyle: text22Style,
        ] as [NSAttributedString.Key: Any]

        let text22TextHeight: CGFloat = betRecoveryExp.boundingRect(with: CGSize(width: text22Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text22FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text22Rect)
        betRecoveryExp.draw(in: CGRect(x: text22Rect.minX, y: text22Rect.minY + (text22Rect.height - text22TextHeight) / 2, width: text22Rect.width, height: text22TextHeight), withAttributes: text22FontAttributes)
        context.restoreGState()




        //// Text 23 Drawing
        let text23Rect = CGRect(x: 21.31, y: 244.14, width: 119.21, height: 21)
        let text23Path = UIBezierPath(roundedRect: text23Rect, cornerRadius: 4)
        paint0_linear3Color3.setFill()
        text23Path.fill()
        let text23TextContent = "Ð¡ÑÐ°ÑÐ¸ÑÑÐ¸ÐºÐ°"
        let text23Style = NSMutableParagraphStyle()
        text23Style.alignment = .center
        let text23FontAttributes = [
            .font: UIFont(name: "Gilroy-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text23Style,
        ] as [NSAttributedString.Key: Any]

        let text23TextHeight: CGFloat = text23TextContent.boundingRect(with: CGSize(width: text23Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text23FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text23Rect)
        text23TextContent.draw(in: CGRect(x: text23Rect.minX, y: text23Rect.minY + (text23Rect.height - text23TextHeight) / 2, width: text23Rect.width, height: text23TextHeight), withAttributes: text23FontAttributes)
        context.restoreGState()


        //// d1 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr1.x + 20.193359375), y: (moneyMoveExpr1.y + 153.586914062))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d1Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d1Path = UIBezierPath(rect: d1Rect)
        context.saveGState()
        d1Path.addClip()
        context.translateBy(x: floor(d1Rect.minX + 0.5), y: floor(d1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d2 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr2.x + 20.193359375), y: (moneyMoveExpr2.y + 153.586914062))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d2Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d2Path = UIBezierPath(rect: d2Rect)
        context.saveGState()
        d2Path.addClip()
        context.translateBy(x: floor(d2Rect.minX + 0.5), y: floor(d2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d3 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr3.x + 20.193359375), y: (moneyMoveExpr3.y + 153.586914063))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d3Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d3Path = UIBezierPath(rect: d3Rect)
        context.saveGState()
        d3Path.addClip()
        context.translateBy(x: floor(d3Rect.minX + 0.5), y: floor(d3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d4 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr4.x + 20.193359375), y: (moneyMoveExpr4.y + 153.586914062))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d4Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d4Path = UIBezierPath(rect: d4Rect)
        context.saveGState()
        d4Path.addClip()
        context.translateBy(x: floor(d4Rect.minX + 0.5), y: floor(d4Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d5 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr5.x + 20.193359375), y: (moneyMoveExpr5.y + 153.586914062))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d5Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d5Path = UIBezierPath(rect: d5Rect)
        context.saveGState()
        d5Path.addClip()
        context.translateBy(x: floor(d5Rect.minX + 0.5), y: floor(d5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d6 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr6.x + 20.193359375), y: (moneyMoveExpr6.y + 153.586914063))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d6Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d6Path = UIBezierPath(rect: d6Rect)
        context.saveGState()
        d6Path.addClip()
        context.translateBy(x: floor(d6Rect.minX + 0.5), y: floor(d6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d7 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr7.x + 20.193359375), y: (moneyMoveExpr7.y + 153.586914063))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d7Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d7Path = UIBezierPath(rect: d7Rect)
        context.saveGState()
        d7Path.addClip()
        context.translateBy(x: floor(d7Rect.minX + 0.5), y: floor(d7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d8 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr8.x + 20.193359375), y: (moneyMoveExpr8.y + 153.586914062))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d8Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d8Path = UIBezierPath(rect: d8Rect)
        context.saveGState()
        d8Path.addClip()
        context.translateBy(x: floor(d8Rect.minX + 0.5), y: floor(d8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// d9 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr9.x + 20.193359375), y: (moneyMoveExpr9.y + 153.586914063))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(dollarOpacityExpr)

        let d9Rect = CGRect(x: 0, y: 0, width: 198, height: 131)
        let d9Path = UIBezierPath(rect: d9Rect)
        context.saveGState()
        d9Path.addClip()
        context.translateBy(x: floor(d9Rect.minX + 0.5), y: floor(d9Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r1 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr1.x + 20.537109375), y: (moneyMoveExpr1.y + 153.739257812))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r1Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r1Path = UIBezierPath(rect: r1Rect)
        context.saveGState()
        r1Path.addClip()
        context.translateBy(x: floor(r1Rect.minX + 0.5), y: floor(r1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r2 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr2.x + 20.537109375), y: (moneyMoveExpr2.y + 153.739257812))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r2Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r2Path = UIBezierPath(rect: r2Rect)
        context.saveGState()
        r2Path.addClip()
        context.translateBy(x: floor(r2Rect.minX + 0.5), y: floor(r2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r3 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr3.x + 20.537109375), y: (moneyMoveExpr3.y + 153.739257812))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r3Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r3Path = UIBezierPath(rect: r3Rect)
        context.saveGState()
        r3Path.addClip()
        context.translateBy(x: floor(r3Rect.minX + 0.5), y: floor(r3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r4 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr4.x + 20.537109375), y: (moneyMoveExpr4.y + 153.739257812))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r4Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r4Path = UIBezierPath(rect: r4Rect)
        context.saveGState()
        r4Path.addClip()
        context.translateBy(x: floor(r4Rect.minX + 0.5), y: floor(r4Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r5 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr5.x + 20.537109375), y: (moneyMoveExpr5.y + 153.739257812))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r5Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r5Path = UIBezierPath(rect: r5Rect)
        context.saveGState()
        r5Path.addClip()
        context.translateBy(x: floor(r5Rect.minX + 0.5), y: floor(r5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r6 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr6.x + 20.537109375), y: (moneyMoveExpr6.y + 153.739257812))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r6Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r6Path = UIBezierPath(rect: r6Rect)
        context.saveGState()
        r6Path.addClip()
        context.translateBy(x: floor(r6Rect.minX + 0.5), y: floor(r6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r7 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr7.x + 20.537109375), y: (moneyMoveExpr7.y + 153.739257812))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r7Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r7Path = UIBezierPath(rect: r7Rect)
        context.saveGState()
        r7Path.addClip()
        context.translateBy(x: floor(r7Rect.minX + 0.5), y: floor(r7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r8 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr8.x + 20.537109375), y: (moneyMoveExpr8.y + 153.739257812))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r8Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r8Path = UIBezierPath(rect: r8Rect)
        context.saveGState()
        r8Path.addClip()
        context.translateBy(x: floor(r8Rect.minX + 0.5), y: floor(r8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// r9 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr9.x + 20.537109375), y: (moneyMoveExpr9.y + 153.739257812))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rupeeOpacityExpr)

        let r9Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let r9Path = UIBezierPath(rect: r9Rect)
        context.saveGState()
        r9Path.addClip()
        context.translateBy(x: floor(r9Rect.minX + 0.5), y: floor(r9Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p1 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr1.x + 20.373046875), y: (moneyMoveExpr1.y + 153.790039062))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p1Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p1Path = UIBezierPath(rect: p1Rect)
        context.saveGState()
        p1Path.addClip()
        context.translateBy(x: floor(p1Rect.minX + 0.5), y: floor(p1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p2 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr2.x + 20.373046875), y: (moneyMoveExpr2.y + 153.790039062))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p2Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p2Path = UIBezierPath(rect: p2Rect)
        context.saveGState()
        p2Path.addClip()
        context.translateBy(x: floor(p2Rect.minX + 0.5), y: floor(p2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p3 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr3.x + 20.373046875), y: (moneyMoveExpr3.y + 153.790039062))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p3Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p3Path = UIBezierPath(rect: p3Rect)
        context.saveGState()
        p3Path.addClip()
        context.translateBy(x: floor(p3Rect.minX + 0.5), y: floor(p3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p4 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr4.x + 20.373046875), y: (moneyMoveExpr4.y + 153.790039062))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p4Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p4Path = UIBezierPath(rect: p4Rect)
        context.saveGState()
        p4Path.addClip()
        context.translateBy(x: floor(p4Rect.minX + 0.5), y: floor(p4Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p5 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr5.x + 20.373046875), y: (moneyMoveExpr5.y + 153.790039062))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p5Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p5Path = UIBezierPath(rect: p5Rect)
        context.saveGState()
        p5Path.addClip()
        context.translateBy(x: floor(p5Rect.minX + 0.5), y: floor(p5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p6 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr6.x + 20.373046875), y: (moneyMoveExpr6.y + 153.790039062))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p6Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p6Path = UIBezierPath(rect: p6Rect)
        context.saveGState()
        p6Path.addClip()
        context.translateBy(x: floor(p6Rect.minX + 0.5), y: floor(p6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p7 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr7.x + 20.373046875), y: (moneyMoveExpr7.y + 153.790039062))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p7Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p7Path = UIBezierPath(rect: p7Rect)
        context.saveGState()
        p7Path.addClip()
        context.translateBy(x: floor(p7Rect.minX + 0.5), y: floor(p7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p8 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr8.x + 20.373046875), y: (moneyMoveExpr8.y + 153.790039062))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p8Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p8Path = UIBezierPath(rect: p8Rect)
        context.saveGState()
        p8Path.addClip()
        context.translateBy(x: floor(p8Rect.minX + 0.5), y: floor(p8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// p9 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr9.x + 20.373046875), y: (moneyMoveExpr9.y + 153.790039062))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(poundOpacityExpr)

        let p9Rect = CGRect(x: 0, y: 0, width: 202, height: 136)
        let p9Path = UIBezierPath(rect: p9Rect)
        context.saveGState()
        p9Path.addClip()
        context.translateBy(x: floor(p9Rect.minX + 0.5), y: floor(p9Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s1 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr1.x + 20.5029296875), y: (moneyMoveExpr1.y + 153.29296875))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s1Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s1Path = UIBezierPath(rect: s1Rect)
        context.saveGState()
        s1Path.addClip()
        context.translateBy(x: floor(s1Rect.minX + 0.5), y: floor(s1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s2 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr2.x + 20.5029296875), y: (moneyMoveExpr2.y + 153.29296875))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s2Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s2Path = UIBezierPath(rect: s2Rect)
        context.saveGState()
        s2Path.addClip()
        context.translateBy(x: floor(s2Rect.minX + 0.5), y: floor(s2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s3 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr3.x + 20.5029296875), y: (moneyMoveExpr3.y + 153.29296875))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s3Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s3Path = UIBezierPath(rect: s3Rect)
        context.saveGState()
        s3Path.addClip()
        context.translateBy(x: floor(s3Rect.minX + 0.5), y: floor(s3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s4 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr4.x + 20.5029296875), y: (moneyMoveExpr4.y + 153.29296875))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s4Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s4Path = UIBezierPath(rect: s4Rect)
        context.saveGState()
        s4Path.addClip()
        context.translateBy(x: floor(s4Rect.minX + 0.5), y: floor(s4Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s5 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr5.x + 20.5029296875), y: (moneyMoveExpr5.y + 153.29296875))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s5Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s5Path = UIBezierPath(rect: s5Rect)
        context.saveGState()
        s5Path.addClip()
        context.translateBy(x: floor(s5Rect.minX + 0.5), y: floor(s5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s6 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr6.x + 20.5029296875), y: (moneyMoveExpr6.y + 153.29296875))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s6Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s6Path = UIBezierPath(rect: s6Rect)
        context.saveGState()
        s6Path.addClip()
        context.translateBy(x: floor(s6Rect.minX + 0.5), y: floor(s6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s7 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr7.x + 20.5029296875), y: (moneyMoveExpr7.y + 153.29296875))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s7Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s7Path = UIBezierPath(rect: s7Rect)
        context.saveGState()
        s7Path.addClip()
        context.translateBy(x: floor(s7Rect.minX + 0.5), y: floor(s7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s8 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr8.x + 20.5029296875), y: (moneyMoveExpr8.y + 153.29296875))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s8Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s8Path = UIBezierPath(rect: s8Rect)
        context.saveGState()
        s8Path.addClip()
        context.translateBy(x: floor(s8Rect.minX + 0.5), y: floor(s8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// s9 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr9.x + 20.5029296875), y: (moneyMoveExpr9.y + 153.29296875))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(shekelOpacityExpr)

        let s9Rect = CGRect(x: 0, y: 0, width: 199, height: 134)
        let s9Path = UIBezierPath(rect: s9Rect)
        context.saveGState()
        s9Path.addClip()
        context.translateBy(x: floor(s9Rect.minX + 0.5), y: floor(s9Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e1 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr1.x + 20.5677083333), y: (moneyMoveExpr1.y + 153.693033854))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e1Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e1Path = UIBezierPath(rect: e1Rect)
        context.saveGState()
        e1Path.addClip()
        context.translateBy(x: floor(e1Rect.minX + 0.5), y: floor(e1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e2 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr2.x + 20.5677083333), y: (moneyMoveExpr2.y + 153.693033854))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e2Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e2Path = UIBezierPath(rect: e2Rect)
        context.saveGState()
        e2Path.addClip()
        context.translateBy(x: floor(e2Rect.minX + 0.5), y: floor(e2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e3 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr3.x + 20.5677083333), y: (moneyMoveExpr3.y + 153.693033854))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e3Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e3Path = UIBezierPath(rect: e3Rect)
        context.saveGState()
        e3Path.addClip()
        context.translateBy(x: floor(e3Rect.minX + 0.5), y: floor(e3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e4 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr4.x + 20.5677083333), y: (moneyMoveExpr4.y + 153.693033854))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e4Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e4Path = UIBezierPath(rect: e4Rect)
        context.saveGState()
        e4Path.addClip()
        context.translateBy(x: floor(e4Rect.minX + 0.5), y: floor(e4Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e5 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr5.x + 20.5677083333), y: (moneyMoveExpr5.y + 153.693033854))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e5Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e5Path = UIBezierPath(rect: e5Rect)
        context.saveGState()
        e5Path.addClip()
        context.translateBy(x: floor(e5Rect.minX + 0.5), y: floor(e5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e6 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr6.x + 20.5677083333), y: (moneyMoveExpr6.y + 153.693033854))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e6Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e6Path = UIBezierPath(rect: e6Rect)
        context.saveGState()
        e6Path.addClip()
        context.translateBy(x: floor(e6Rect.minX + 0.5), y: floor(e6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e7 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr7.x + 20.5677083333), y: (moneyMoveExpr7.y + 153.693033854))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e7Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e7Path = UIBezierPath(rect: e7Rect)
        context.saveGState()
        e7Path.addClip()
        context.translateBy(x: floor(e7Rect.minX + 0.5), y: floor(e7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e8 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr8.x + 20.5677083333), y: (moneyMoveExpr8.y + 153.693033854))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e8Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e8Path = UIBezierPath(rect: e8Rect)
        context.saveGState()
        e8Path.addClip()
        context.translateBy(x: floor(e8Rect.minX + 0.5), y: floor(e8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// e9 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr9.x + 20.5677083333), y: (moneyMoveExpr9.y + 153.693033854))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(euroOpacityExpr)

        let e9Rect = CGRect(x: 0, y: 0, width: 196, height: 129)
        let e9Path = UIBezierPath(rect: e9Rect)
        context.saveGState()
        e9Path.addClip()
        context.translateBy(x: floor(e9Rect.minX + 0.5), y: floor(e9Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru1 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr1.x + 19.85546875), y: (moneyMoveExpr1.y + 152.772460938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru1Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru1Path = UIBezierPath(rect: ru1Rect)
        context.saveGState()
        ru1Path.addClip()
        context.translateBy(x: floor(ru1Rect.minX + 0.5), y: floor(ru1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru2 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr2.x + 19.85546875), y: (moneyMoveExpr2.y + 152.772460938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru2Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru2Path = UIBezierPath(rect: ru2Rect)
        context.saveGState()
        ru2Path.addClip()
        context.translateBy(x: floor(ru2Rect.minX + 0.5), y: floor(ru2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru3 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr3.x + 19.85546875), y: (moneyMoveExpr3.y + 152.772460938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru3Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru3Path = UIBezierPath(rect: ru3Rect)
        context.saveGState()
        ru3Path.addClip()
        context.translateBy(x: floor(ru3Rect.minX + 0.5), y: floor(ru3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru4 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr4.x + 19.85546875), y: (moneyMoveExpr4.y + 152.772460938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru4Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru4Path = UIBezierPath(rect: ru4Rect)
        context.saveGState()
        ru4Path.addClip()
        context.translateBy(x: floor(ru4Rect.minX + 0.5), y: floor(ru4Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru5 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr5.x + 19.85546875), y: (moneyMoveExpr5.y + 152.772460938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru5Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru5Path = UIBezierPath(rect: ru5Rect)
        context.saveGState()
        ru5Path.addClip()
        context.translateBy(x: floor(ru5Rect.minX + 0.5), y: floor(ru5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru6 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr6.x + 19.85546875), y: (moneyMoveExpr6.y + 152.772460938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru6Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru6Path = UIBezierPath(rect: ru6Rect)
        context.saveGState()
        ru6Path.addClip()
        context.translateBy(x: floor(ru6Rect.minX + 0.5), y: floor(ru6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru7 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr7.x + 19.85546875), y: (moneyMoveExpr7.y + 152.772460938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru7Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru7Path = UIBezierPath(rect: ru7Rect)
        context.saveGState()
        ru7Path.addClip()
        context.translateBy(x: floor(ru7Rect.minX + 0.5), y: floor(ru7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru8 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr8.x + 19.85546875), y: (moneyMoveExpr8.y + 152.772460938))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru8Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru8Path = UIBezierPath(rect: ru8Rect)
        context.saveGState()
        ru8Path.addClip()
        context.translateBy(x: floor(ru8Rect.minX + 0.5), y: floor(ru8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ru9 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr9.x + 19.85546875), y: (moneyMoveExpr9.y + 153.072460937))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(rubleOpacityExpr)

        let ru9Rect = CGRect(x: 0, y: 0, width: 209, height: 138)
        let ru9Path = UIBezierPath(rect: ru9Rect)
        context.saveGState()
        ru9Path.addClip()
        context.translateBy(x: floor(ru9Rect.minX + 0.5), y: floor(ru9Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie1 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr1.x + 19.783203125), y: (moneyMoveExpr1.y + 153.317382812))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie1Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie1Path = UIBezierPath(rect: ie1Rect)
        context.saveGState()
        ie1Path.addClip()
        context.translateBy(x: floor(ie1Rect.minX + 0.5), y: floor(ie1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie 2 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr2.x + 19.783203125), y: (moneyMoveExpr2.y + 153.317382812))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie2Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie2Path = UIBezierPath(rect: ie2Rect)
        context.saveGState()
        ie2Path.addClip()
        context.translateBy(x: floor(ie2Rect.minX + 0.5), y: floor(ie2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie 3 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr3.x + 19.783203125), y: (moneyMoveExpr3.y + 153.317382812))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie3Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie3Path = UIBezierPath(rect: ie3Rect)
        context.saveGState()
        ie3Path.addClip()
        context.translateBy(x: floor(ie3Rect.minX + 0.5), y: floor(ie3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie 4 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr4.x + 19.783203125), y: (moneyMoveExpr4.y + 153.317382812))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie4Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie4Path = UIBezierPath(rect: ie4Rect)
        context.saveGState()
        ie4Path.addClip()
        context.translateBy(x: floor(ie4Rect.minX + 0.5), y: floor(ie4Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie 5 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr5.x + 19.783203125), y: (moneyMoveExpr5.y + 153.317382812))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie5Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie5Path = UIBezierPath(rect: ie5Rect)
        context.saveGState()
        ie5Path.addClip()
        context.translateBy(x: floor(ie5Rect.minX + 0.5), y: floor(ie5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie 6 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr6.x + 19.783203125), y: (moneyMoveExpr6.y + 153.317382812))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie6Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie6Path = UIBezierPath(rect: ie6Rect)
        context.saveGState()
        ie6Path.addClip()
        context.translateBy(x: floor(ie6Rect.minX + 0.5), y: floor(ie6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie 7 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr7.x + 19.783203125), y: (moneyMoveExpr7.y + 153.317382812))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie7Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie7Path = UIBezierPath(rect: ie7Rect)
        context.saveGState()
        ie7Path.addClip()
        context.translateBy(x: floor(ie7Rect.minX + 0.5), y: floor(ie7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie 8 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr8.x + 19.783203125), y: (moneyMoveExpr8.y + 153.317382812))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie8Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie8Path = UIBezierPath(rect: ie8Rect)
        context.saveGState()
        ie8Path.addClip()
        context.translateBy(x: floor(ie8Rect.minX + 0.5), y: floor(ie8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// ie9 Drawing
        context.saveGState()
        context.translateBy(x: (moneyMoveExpr9.x + 19.783203125), y: (moneyMoveExpr9.y + 153.317382812))
        context.scaleBy(x: 0.15, y: 0.15)

        context.saveGState()
        context.setAlpha(ienaOpacityExpr)

        let ie9Rect = CGRect(x: 0, y: 0, width: 201, height: 135)
        let ie9Path = UIBezierPath(rect: ie9Rect)
        context.saveGState()
        ie9Path.addClip()
        context.translateBy(x: floor(ie9Rect.minX + 0.5), y: floor(ie9Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawTranslucentCover(frame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let color2 = UIColor(red: 0.165, green: 0.094, blue: 0.655, alpha: 1.000)

        //// Rectangle 29 Drawing
        context.saveGState()
        context.setAlpha(0.9)

        let rectangle29Path = UIBezierPath(rect: CGRect(x: frame.minX + fastFloor(frame.width * 0.00086 + 0.41) + 0.09, y: frame.minY + fastFloor(frame.height * -0.00090 - 0.41) + 0.91, width: fastFloor(frame.width * 1.00086 + 0.41) - fastFloor(frame.width * 0.00086 + 0.41), height: fastFloor(frame.height * 0.99910 - 0.41) - fastFloor(frame.height * -0.00090 - 0.41)))
        color2.setFill()
        rectangle29Path.fill()

        context.restoreGState()
    }

    @objc dynamic public class func drawDialogButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 170, height: 52), resizing: ResizingBehavior = .aspectFit, dialogButtonTitle: String = "ÐÐ") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 170, height: 52), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 170, y: resizedFrame.height / 52)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 170, resizedFrame.height / 52)


        //// Color Declarations
        let gradientColor4 = UIColor(red: 0.000, green: 1.000, blue: 0.761, alpha: 1.000)
        let color2 = UIColor(red: 0.165, green: 0.094, blue: 0.655, alpha: 1.000)

        //// Shadow Declarations
        let tabBarShadow = NSShadow()
        tabBarShadow.shadowColor = UIColor.black.withAlphaComponent(0.41)
        tabBarShadow.shadowOffset = CGSize(width: 0, height: -2)
        tabBarShadow.shadowBlurRadius = 2

        //// Image Declarations
        let dotted = UIImage(named: "dotted.png")!

        //// Rectangle 30 Drawing
        let rectangle30Path = UIBezierPath(roundedRect: CGRect(x: 1, y: 1.31, width: 168, height: 50), cornerRadius: 10)
        color2.setFill()
        rectangle30Path.fill()

        ////// Rectangle 30 Inner Shadow
        context.saveGState()
        context.clip(to: rectangle30Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((tabBarShadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let rectangle30OpaqueShadow = (tabBarShadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: tabBarShadow.shadowOffset.width * resizedShadowScale, height: tabBarShadow.shadowOffset.height * resizedShadowScale), blur: tabBarShadow.shadowBlurRadius * resizedShadowScale, color: rectangle30OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        rectangle30OpaqueShadow.setFill()
        rectangle30Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()

        gradientColor4.setStroke()
        rectangle30Path.lineWidth = 1
        rectangle30Path.stroke()


        //// Rectangle 31 Drawing
        context.saveGState()
        context.translateBy(x: 6.69, y: 13.49)
        context.scaleBy(x: 0.4, y: 0.4)

        let rectangle31Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 233.37, height: 93.04))
        context.saveGState()
        rectangle31Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dotted.size.height)
        context.draw(dotted.cgImage!, in: CGRect(x: 0, y: 0, width: dotted.size.width, height: dotted.size.height))
        context.restoreGState()

        context.restoreGState()


        //// Text 16 Drawing
        let text16Rect = CGRect(x: 1.65, y: 1.1, width: 166.83, height: 49.62)
        let text16Style = NSMutableParagraphStyle()
        text16Style.alignment = .center
        let text16FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 14)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text16Style,
        ] as [NSAttributedString.Key: Any]

        let text16TextHeight: CGFloat = dialogButtonTitle.boundingRect(with: CGSize(width: text16Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text16FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text16Rect)
        dialogButtonTitle.draw(in: CGRect(x: text16Rect.minX, y: text16Rect.minY + (text16Rect.height - text16TextHeight) / 2, width: text16Rect.width, height: text16TextHeight), withAttributes: text16FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawDialog(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 348, height: 220), resizing: ResizingBehavior = .aspectFit, dialogTitle: String = "ÐÑÐ»Ð¸ÑÐ½Ð¾,  ÑÐµÐ»Ñ Ð´Ð¾ÑÑÐ¸Ð³Ð½ÑÑÐ°!", dialogDesc: String = "ÐÐ° ÐºÐ°Ð¶Ð´ÑÐ¹ ÑÐ»ÐµÐ´ÑÑÑÐ¸Ð¹ Ð²Ð¾Ð¿ÑÐ¾Ñ ÑÑÐ¼Ð¼Ð° Ð²ÑÐ¸Ð³ÑÑÑÐ° ÑÐ´Ð²Ð°Ð¸Ð²Ð°ÐµÑÑÑ ð°ð°, \nÐ½Ð¾ Ð¾ÑÐ²ÐµÑÐ¸Ð² Ð½ÐµÐ²ÐµÑÐ½Ð¾ Ð²Ñ ÑÐµÑÑÐµÑÐµ Ð²ÐµÑÑ Ð²ÑÐ¸Ð³ÑÑÑ. ð¥  ÐÐ°Ð²ÐµÑÑÐ¸ÑÑ Ð¸ Ð·Ð°Ð±ÑÐ°ÑÑ ÑÑÐ¼Ð¼Ñ Ð¼Ð¾Ð¶Ð½Ð¾ Ð²ÑÐµÐ³Ð´Ð° Ð½Ð°Ð¶Ð°Ð² Ð½Ð° ð") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 348, height: 220), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 348, y: resizedFrame.height / 220)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 348, resizedFrame.height / 220)


        //// Color Declarations
        let gradientColor4 = UIColor(red: 0.000, green: 1.000, blue: 0.761, alpha: 1.000)
        let color2 = UIColor(red: 0.165, green: 0.094, blue: 0.655, alpha: 1.000)

        //// Shadow Declarations
        let tabBarShadow = NSShadow()
        tabBarShadow.shadowColor = UIColor.black.withAlphaComponent(0.41)
        tabBarShadow.shadowOffset = CGSize(width: 0, height: -2)
        tabBarShadow.shadowBlurRadius = 2

        //// Rectangle 28 Drawing
        let rectangle28Path = UIBezierPath(roundedRect: CGRect(x: 1, y: 2, width: 346, height: 215.95), cornerRadius: 10)
        color2.setFill()
        rectangle28Path.fill()

        ////// Rectangle 28 Inner Shadow
        context.saveGState()
        context.clip(to: rectangle28Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((tabBarShadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let rectangle28OpaqueShadow = (tabBarShadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: tabBarShadow.shadowOffset.width * resizedShadowScale, height: tabBarShadow.shadowOffset.height * resizedShadowScale), blur: tabBarShadow.shadowBlurRadius * resizedShadowScale, color: rectangle28OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        rectangle28OpaqueShadow.setFill()
        rectangle28Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()

        gradientColor4.setStroke()
        rectangle28Path.lineWidth = 1
        rectangle28Path.stroke()


        //// Text 14 Drawing
        let text14Rect = CGRect(x: 9.12, y: 8.43, width: 332.73, height: 47.16)
        let text14Style = NSMutableParagraphStyle()
        text14Style.alignment = .center
        let text14FontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 21)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text14Style,
        ] as [NSAttributedString.Key: Any]

        let text14TextHeight: CGFloat = dialogTitle.boundingRect(with: CGSize(width: text14Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text14FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text14Rect)
        dialogTitle.draw(in: CGRect(x: text14Rect.minX, y: text14Rect.minY + (text14Rect.height - text14TextHeight) / 2, width: text14Rect.width, height: text14TextHeight), withAttributes: text14FontAttributes)
        context.restoreGState()


        //// Text 15 Drawing
        let text15Rect = CGRect(x: 10.46, y: 57.63, width: 331.44, height: 148.43)
        let text15Style = NSMutableParagraphStyle()
        text15Style.alignment = .left
        let text15FontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 14)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text15Style,
        ] as [NSAttributedString.Key: Any]

        let text15TextHeight: CGFloat = dialogDesc.boundingRect(with: CGSize(width: text15Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text15FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text15Rect)
        dialogDesc.draw(in: CGRect(x: text15Rect.minX, y: text15Rect.minY + (text15Rect.height - text15TextHeight) / 2, width: text15Rect.width, height: text15TextHeight), withAttributes: text15FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawNotification(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 352, height: 74), resizing: ResizingBehavior = .aspectFit, dialogTitle: String = "ÐÑÐ»Ð¸ÑÐ½Ð¾,  ÑÐµÐ»Ñ Ð´Ð¾ÑÑÐ¸Ð³Ð½ÑÑÐ°!") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 352, height: 74), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 352, y: resizedFrame.height / 74)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 352, resizedFrame.height / 74)


        //// Color Declarations
        let gradientColor4 = UIColor(red: 0.000, green: 1.000, blue: 0.761, alpha: 1.000)
        let color2 = UIColor(red: 0.165, green: 0.094, blue: 0.655, alpha: 1.000)

        //// Shadow Declarations
        let tabBarShadow = NSShadow()
        tabBarShadow.shadowColor = UIColor.black.withAlphaComponent(0.41)
        tabBarShadow.shadowOffset = CGSize(width: 0, height: -2)
        tabBarShadow.shadowBlurRadius = 2

        //// Rectangle 28 Drawing
        let rectangle28Path = UIBezierPath(roundedRect: CGRect(x: 2.72, y: 8.25, width: 346, height: 58.45), cornerRadius: 10)
        color2.setFill()
        rectangle28Path.fill()

        ////// Rectangle 28 Inner Shadow
        context.saveGState()
        context.clip(to: rectangle28Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((tabBarShadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let rectangle28OpaqueShadow = (tabBarShadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: tabBarShadow.shadowOffset.width * resizedShadowScale, height: tabBarShadow.shadowOffset.height * resizedShadowScale), blur: tabBarShadow.shadowBlurRadius * resizedShadowScale, color: rectangle28OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        rectangle28OpaqueShadow.setFill()
        rectangle28Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()

        gradientColor4.setStroke()
        rectangle28Path.lineWidth = 1
        rectangle28Path.stroke()


        //// Text 14 Drawing
        let text14Rect = CGRect(x: 7.73, y: 23.47, width: 336.34, height: 29.41)
        let text14Style = NSMutableParagraphStyle()
        text14Style.alignment = .center
        let text14FontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 21)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text14Style,
        ] as [NSAttributedString.Key: Any]

        let text14TextHeight: CGFloat = dialogTitle.boundingRect(with: CGSize(width: text14Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text14FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text14Rect)
        dialogTitle.draw(in: CGRect(x: text14Rect.minX, y: text14Rect.minY + (text14Rect.height - text14TextHeight) / 2, width: text14Rect.width, height: text14TextHeight), withAttributes: text14FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawNeverShowAgainButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 180, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 180, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 180, y: resizedFrame.height / 32)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 180, resizedFrame.height / 32)


        //// Color Declarations
        let color4 = UIColor(red: 0.059, green: 0.166, blue: 0.987, alpha: 1.000)
        let color8 = UIColor(red: 0.214, green: 0.117, blue: 0.567, alpha: 1.000)

        //// Shadow Declarations
        let tabBarShadow = NSShadow()
        tabBarShadow.shadowColor = UIColor.black.withAlphaComponent(0.41)
        tabBarShadow.shadowOffset = CGSize(width: 0, height: -2)
        tabBarShadow.shadowBlurRadius = 2

        //// Group
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 1.88, y: 4.92, width: 174.07, height: 18.32), cornerRadius: 9.16)
        color4.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        context.saveGState()
        context.clip(to: rectanglePath.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((tabBarShadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let rectangleOpaqueShadow = (tabBarShadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: tabBarShadow.shadowOffset.width * resizedShadowScale, height: tabBarShadow.shadowOffset.height * resizedShadowScale), blur: tabBarShadow.shadowBlurRadius * resizedShadowScale, color: rectangleOpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()

        color8.setStroke()
        rectanglePath.lineWidth = 0.5
        rectanglePath.stroke()


        //// Text Drawing
        let textRect = CGRect(x: 8.87, y: 5.81, width: 158.52, height: 15.42)
        let textTextContent = "Ð±Ð¾Ð»ÑÑÐµ Ð½Ðµ Ð¿Ð¾ÐºÐ°Ð·ÑÐ²Ð°ÑÑ"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 14)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }




    @objc(PlayScreenV2ResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



private extension UIColor {
    func blended(withFraction fraction: CGFloat, of color: UIColor) -> UIColor {
        var r1: CGFloat = 1, g1: CGFloat = 1, b1: CGFloat = 1, a1: CGFloat = 1
        var r2: CGFloat = 1, g2: CGFloat = 1, b2: CGFloat = 1, a2: CGFloat = 1

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}
