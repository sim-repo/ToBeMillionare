//
//  ProgressScreen.swift
//  ProjectName
//
//  Created by Igor Ivanov on 18.08.2020.
//  Copyright Â© 2020 None. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class ProgressScreen : NSObject {

    //// Cache

    private struct Cache {
        static let markPGradientColor4: UIColor = UIColor(red: 0.843, green: 0.095, blue: 0.759, alpha: 0.500)
        static let primaryTextColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        static let gradientColor26: UIColor = UIColor(red: 0.082, green: 0.627, blue: 1.000, alpha: 1.000)
    }

    //// Colors

    @objc dynamic public class var markPGradientColor4: UIColor { return Cache.markPGradientColor4 }
    @objc dynamic public class var primaryTextColor: UIColor { return Cache.primaryTextColor }
    @objc dynamic public class var gradientColor26: UIColor { return Cache.gradientColor26 }

    //// Drawing Methods

    @objc dynamic public class func drawRadarChart_ScreenAll(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 325, height: 301), resizing: ResizingBehavior = .aspectFit, retension: CGFloat = 0.138, degree: CGFloat = 0.131, speed: CGFloat = 0.352) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 325, height: 301), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 325, y: resizedFrame.height / 301)


        //// Color Declarations
        let radarCircleColor1 = UIColor(red: 0.079, green: 0.138, blue: 0.479, alpha: 0.560)
        let radarCircleColor2 = UIColor(red: 0.020, green: 0.576, blue: 0.996, alpha: 0.850)
        let radarTriangleColor2 = UIColor(red: 0.020, green: 0.576, blue: 0.996, alpha: 0.280)
        let radarTriangleColor1 = UIColor(red: 0.000, green: 1.000, blue: 0.761, alpha: 1.000)
        let radarChartBkg = UIColor(red: 0.123, green: 0.118, blue: 0.271, alpha: 0.451)
        let strokeColor = UIColor(red: 0.000, green: 0.878, blue: 1.000, alpha: 1.000)
        let radarChartTextBkg = UIColor(red: 0.076, green: 0.095, blue: 0.403, alpha: 1.000)

        //// Gradient Declarations
        let radarCircleGradient = CGGradient(colorsSpace: nil, colors: [radarCircleColor1.cgColor, radarCircleColor2.cgColor] as CFArray, locations: [0.49, 0.92])!
        let radarTriangleGradient = CGGradient(colorsSpace: nil, colors: [radarTriangleColor2.cgColor, radarTriangleColor1.cgColor] as CFArray, locations: [0.18, 1])!

        //// Variable Declarations
        let retensionPoint1 = CGPoint(x: 12.86 * retension * 10 + 30 * (1 - retension * 10), y: 10.5 * retension * 10 + 0)
        let retensionPoint2 = CGPoint(x: -4.37 * (retension - 0.1) * 10 + 12.86 * (1 - (retension - 0.1) * 10), y: 21.07 * (retension - 0.1) * 10 + 10.5 * (1 - (retension - 0.1) * 10))
        let retensionPoint3 = CGPoint(x: -21.55 * (retension - 0.2) * 10 + -4.37 * (1 - (retension - 0.2) * 10), y: 31.65 * (retension - 0.2) * 10 + 21.07 * (1 - (retension - 0.2) * 10))
        let retensionPoint4 = CGPoint(x: -38.21 * (retension - 0.3) * 10 + -21.55 * (1 - (retension - 0.3) * 10), y: 42 * (retension - 0.3) * 10 + 31.65 * (1 - (retension - 0.3) * 10))
        let retensionOpacity1: CGFloat = retension <= 0.1 ? 1 : 0
        let retensionOpacity2: CGFloat = retension <= 0.1 ? 0 : (retension > 0.1 && retension <= 0.2 ? 1 : 0)
        let retensionOpacity3: CGFloat = retension <= 0.2 ? 0 : (retension > 0.2 && retension <= 0.3 ? 1 : 0)
        let retensionOpacity4: CGFloat = retension <= 0.3 ? 0 : 1
        let retensionPoint5 = CGPoint(x: -38.21, y: 42)
        let retensionExpr = retension <= 0.1 ? retensionPoint1 : (retension > 0.1 && retension <= 0.2 ? retensionPoint2 : (retension > 0.2 && retension <= 0.3 ? retensionPoint3 : (retension > 0.3 && retension <= 0.4 ? retensionPoint4 : retensionPoint5)))
        let degreePoint1 = CGPoint(x: 47 * degree * 10 + 30 * (1 - degree * 10), y: 11.08 * degree * 10 + 0)
        let degreePoint2 = CGPoint(x: 64.15 * (degree - 0.1) * 10 + 47.03 * (1 - (degree - 0.1) * 10), y: 22.4 * (degree - 0.1) * 10 + 11.1 * (1 - (degree - 0.1) * 10))
        let degreePoint3 = CGPoint(x: 81.32 * (degree - 0.2) * 10 + 64.15 * (1 - (degree - 0.2) * 10), y: 33.64 * (degree - 0.2) * 10 + 22.4 * (1 - (degree - 0.2) * 10))
        let degreePoint4 = CGPoint(x: 95.25 * (degree - 0.3) * 10 + 81.32 * (1 - (degree - 0.3) * 10), y: 42.78 * (degree - 0.3) * 10 + 33.64 * (1 - (degree - 0.3) * 10))
        let degreeOpacity1: CGFloat = degree <= 0.1 ? 1 : 0
        let degreeOpacity2: CGFloat = degree <= 0.1 ? 0 : (degree > 0.1 && degree <= 0.2 ? 1 : 0)
        let degreeOpacity3: CGFloat = degree <= 0.2 ? 0 : (degree > 0.2 && degree <= 0.3 ? 1 : 0)
        let degreeOpacity4: CGFloat = degree <= 0.3 ? 0 : 1
        let degreePoint5 = CGPoint(x: 95.25, y: 42.78)
        let degreeExpr = degree <= 0.1 ? degreePoint1 : (degree > 0.1 && degree <= 0.2 ? degreePoint2 : (degree > 0.2 && degree <= 0.3 ? degreePoint3 : (degree > 0.3 && degree <= 0.41 ? degreePoint4 : degreePoint5)))
        let speedExpr = speed <= 0.41 ? CGPoint(x: 186, y: 180 - 200 * speed) : CGPoint(x: 186, y: 100)
        let speedOpacity1: CGFloat = speed <= 0.1 ? 1 : 0
        let speedOpacity2: CGFloat = speed <= 0.1 ? 0 : (speed > 0.1 && speed <= 0.2 ? 1 : 0)
        let speedOpacity3: CGFloat = speed <= 0.2 ? 0 : (speed > 0.2 && speed <= 0.3 ? 1 : 0)
        let speedOpacity4: CGFloat = speed <= 0.3 ? 0 : 1

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 324, height: 300), cornerRadius: 4)
        radarChartBkg.setFill()
        rectanglePath.fill()
        UIColor.white.setStroke()
        rectanglePath.lineWidth = 0.2
        rectanglePath.stroke()


        //// Group 2
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 131.01, y: 123.78, width: 74, height: 74))
        context.saveGState()
        ovalPath.addClip()
        context.drawRadialGradient(radarCircleGradient,
            startCenter: CGPoint(x: 168.01, y: 160.78), startRadius: 0,
            endCenter: CGPoint(x: 168.01, y: 160.78), endRadius: 37,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 131.01, y: 123.78, width: 74, height: 74))
        strokeColor.setStroke()
        oval2Path.lineWidth = 0.5
        oval2Path.stroke()




        //// Group 3
        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 110.01, y: 97.78, width: 117, height: 124))
        context.saveGState()
        oval3Path.addClip()
        context.drawRadialGradient(radarCircleGradient,
            startCenter: CGPoint(x: 168.51, y: 159.78), startRadius: 0,
            endCenter: CGPoint(x: 168.51, y: 159.78), endRadius: 60.25,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 110.16, y: 97.93, width: 116.7, height: 123.7))
        strokeColor.setStroke()
        oval4Path.lineWidth = 0.5
        oval4Path.stroke()




        //// Group 4
        //// Oval 5 Drawing
        let oval5Path = UIBezierPath(ovalIn: CGRect(x: 88.01, y: 78.78, width: 158, height: 159))
        context.saveGState()
        oval5Path.addClip()
        context.drawRadialGradient(radarCircleGradient,
            startCenter: CGPoint(x: 167.01, y: 158.28), startRadius: 0,
            endCenter: CGPoint(x: 167.01, y: 158.28), endRadius: 78.93,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Oval 6 Drawing
        let oval6Path = UIBezierPath(ovalIn: CGRect(x: 87.66, y: 79.43, width: 158.7, height: 157.7))
        strokeColor.setStroke()
        oval6Path.lineWidth = 0.5
        oval6Path.stroke()




        //// Triangle Drawing
        context.saveGState()
        context.translateBy(x: 138.04, y: 159.78)

        let trianglePath = UIBezierPath()
        trianglePath.move(to: retensionExpr)
        trianglePath.addLine(to: CGPoint(x: (speedExpr.x - 155.999674479), y: (speedExpr.y - 180)))
        trianglePath.addLine(to: degreeExpr)
        trianglePath.addLine(to: retensionExpr)
        trianglePath.close()
        context.saveGState()
        trianglePath.addClip()
        context.drawRadialGradient(radarTriangleGradient,
            startCenter: CGPoint(x: 18.32, y: -19.15), startRadius: 0,
            endCenter: CGPoint(x: 18.32, y: -19.15), endRadius: 54.9,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// AxisZ Drawing
        let axisZPath = UIBezierPath()
        axisZPath.move(to: CGPoint(x: 168.12, y: 32.67))
        axisZPath.addCurve(to: CGPoint(x: 167.91, y: 32.67), controlPoint1: CGPoint(x: 168.06, y: 32.61), controlPoint2: CGPoint(x: 167.97, y: 32.61))
        axisZPath.addLine(to: CGPoint(x: 166.95, y: 33.63))
        axisZPath.addCurve(to: CGPoint(x: 166.95, y: 33.84), controlPoint1: CGPoint(x: 166.9, y: 33.68), controlPoint2: CGPoint(x: 166.9, y: 33.78))
        axisZPath.addCurve(to: CGPoint(x: 167.17, y: 33.84), controlPoint1: CGPoint(x: 167.01, y: 33.9), controlPoint2: CGPoint(x: 167.11, y: 33.9))
        axisZPath.addLine(to: CGPoint(x: 168.01, y: 32.99))
        axisZPath.addLine(to: CGPoint(x: 168.86, y: 33.84))
        axisZPath.addCurve(to: CGPoint(x: 169.08, y: 33.84), controlPoint1: CGPoint(x: 168.92, y: 33.9), controlPoint2: CGPoint(x: 169.02, y: 33.9))
        axisZPath.addCurve(to: CGPoint(x: 169.08, y: 33.63), controlPoint1: CGPoint(x: 169.13, y: 33.78), controlPoint2: CGPoint(x: 169.13, y: 33.68))
        axisZPath.addLine(to: CGPoint(x: 168.12, y: 32.67))
        axisZPath.close()
        axisZPath.move(to: CGPoint(x: 168.16, y: 159.78))
        axisZPath.addLine(to: CGPoint(x: 168.16, y: 32.78))
        axisZPath.addLine(to: CGPoint(x: 167.86, y: 32.78))
        axisZPath.addLine(to: CGPoint(x: 167.86, y: 159.78))
        axisZPath.addLine(to: CGPoint(x: 168.16, y: 159.78))
        axisZPath.close()
        UIColor.white.setFill()
        axisZPath.fill()


        //// AxisX Drawing
        let axisXPath = UIBezierPath()
        axisXPath.move(to: CGPoint(x: 291.55, y: 240.92))
        axisXPath.addCurve(to: CGPoint(x: 291.66, y: 240.75), controlPoint1: CGPoint(x: 291.63, y: 240.91), controlPoint2: CGPoint(x: 291.68, y: 240.83))
        axisXPath.addLine(to: CGPoint(x: 291.39, y: 239.43))
        axisXPath.addCurve(to: CGPoint(x: 291.21, y: 239.31), controlPoint1: CGPoint(x: 291.37, y: 239.34), controlPoint2: CGPoint(x: 291.29, y: 239.29))
        axisXPath.addCurve(to: CGPoint(x: 291.09, y: 239.49), controlPoint1: CGPoint(x: 291.13, y: 239.33), controlPoint2: CGPoint(x: 291.08, y: 239.41))
        axisXPath.addLine(to: CGPoint(x: 291.34, y: 240.66))
        axisXPath.addLine(to: CGPoint(x: 290.16, y: 240.91))
        axisXPath.addCurve(to: CGPoint(x: 290.05, y: 241.08), controlPoint1: CGPoint(x: 290.08, y: 240.92), controlPoint2: CGPoint(x: 290.03, y: 241))
        axisXPath.addCurve(to: CGPoint(x: 290.22, y: 241.2), controlPoint1: CGPoint(x: 290.06, y: 241.16), controlPoint2: CGPoint(x: 290.14, y: 241.22))
        axisXPath.addLine(to: CGPoint(x: 291.55, y: 240.92))
        axisXPath.close()
        axisXPath.move(to: CGPoint(x: 167.93, y: 159.9))
        axisXPath.addLine(to: CGPoint(x: 291.43, y: 240.9))
        axisXPath.addLine(to: CGPoint(x: 291.6, y: 240.65))
        axisXPath.addLine(to: CGPoint(x: 168.1, y: 159.65))
        axisXPath.addLine(to: CGPoint(x: 167.93, y: 159.9))
        axisXPath.close()
        UIColor.white.setFill()
        axisXPath.fill()


        //// AxisY Drawing
        let axisYPath = UIBezierPath()
        axisYPath.move(to: CGPoint(x: 35.87, y: 240.74))
        axisYPath.addCurve(to: CGPoint(x: 35.98, y: 240.92), controlPoint1: CGPoint(x: 35.85, y: 240.82), controlPoint2: CGPoint(x: 35.9, y: 240.9))
        axisYPath.addLine(to: CGPoint(x: 37.29, y: 241.24))
        axisYPath.addCurve(to: CGPoint(x: 37.47, y: 241.13), controlPoint1: CGPoint(x: 37.37, y: 241.26), controlPoint2: CGPoint(x: 37.45, y: 241.21))
        axisYPath.addCurve(to: CGPoint(x: 37.36, y: 240.95), controlPoint1: CGPoint(x: 37.49, y: 241.05), controlPoint2: CGPoint(x: 37.44, y: 240.97))
        axisYPath.addLine(to: CGPoint(x: 36.2, y: 240.67))
        axisYPath.addLine(to: CGPoint(x: 36.47, y: 239.5))
        axisYPath.addCurve(to: CGPoint(x: 36.36, y: 239.32), controlPoint1: CGPoint(x: 36.49, y: 239.42), controlPoint2: CGPoint(x: 36.44, y: 239.34))
        axisYPath.addCurve(to: CGPoint(x: 36.18, y: 239.43), controlPoint1: CGPoint(x: 36.28, y: 239.3), controlPoint2: CGPoint(x: 36.2, y: 239.35))
        axisYPath.addLine(to: CGPoint(x: 35.87, y: 240.74))
        axisYPath.close()
        axisYPath.move(to: CGPoint(x: 167.94, y: 159.65))
        axisYPath.addLine(to: CGPoint(x: 35.94, y: 240.65))
        axisYPath.addLine(to: CGPoint(x: 36.09, y: 240.91))
        axisYPath.addLine(to: CGPoint(x: 168.09, y: 159.91))
        axisYPath.addLine(to: CGPoint(x: 167.94, y: 159.65))
        axisYPath.close()
        UIColor.white.setFill()
        axisYPath.fill()


        //// SpeedUndeline4 Drawing
        context.saveGState()
        context.setAlpha(speedOpacity4)

        let speedUndeline4Path = UIBezierPath()
        speedUndeline4Path.move(to: CGPoint(x: 167.95, y: 79.14))
        speedUndeline4Path.addLine(to: CGPoint(x: 173.32, y: 65.14))
        speedUndeline4Path.addLine(to: CGPoint(x: 232.47, y: 65.15))
        UIColor.white.setStroke()
        speedUndeline4Path.lineWidth = 0.3
        speedUndeline4Path.miterLimit = 4
        speedUndeline4Path.stroke()

        context.restoreGState()


        //// SpeedUndeline3 Drawing
        context.saveGState()
        context.setAlpha(speedOpacity3)

        let speedUndeline3Path = UIBezierPath()
        speedUndeline3Path.move(to: CGPoint(x: 168, y: 100.15))
        speedUndeline3Path.addLine(to: CGPoint(x: 176.52, y: 86.71))
        speedUndeline3Path.addLine(to: CGPoint(x: 256.1, y: 86.71))
        UIColor.white.setStroke()
        speedUndeline3Path.lineWidth = 0.1
        speedUndeline3Path.miterLimit = 4
        speedUndeline3Path.stroke()

        context.restoreGState()


        //// SpeedUndeline2 Drawing
        context.saveGState()
        context.setAlpha(speedOpacity2)

        let speedUndeline2Path = UIBezierPath()
        speedUndeline2Path.move(to: CGPoint(x: 168.04, y: 119.97))
        speedUndeline2Path.addLine(to: CGPoint(x: 176.54, y: 105.97))
        speedUndeline2Path.addLine(to: CGPoint(x: 225.54, y: 105.97))
        UIColor.white.setStroke()
        speedUndeline2Path.lineWidth = 0.3
        speedUndeline2Path.miterLimit = 4
        speedUndeline2Path.stroke()

        context.restoreGState()


        //// SpeedUndeline1 Drawing
        context.saveGState()
        context.setAlpha(speedOpacity1)

        let speedUndeline1Path = UIBezierPath()
        speedUndeline1Path.move(to: CGPoint(x: 168.08, y: 139.8))
        speedUndeline1Path.addLine(to: CGPoint(x: 176.58, y: 125.8))
        speedUndeline1Path.addLine(to: CGPoint(x: 225.58, y: 125.8))
        UIColor.white.setStroke()
        speedUndeline1Path.lineWidth = 0.3
        speedUndeline1Path.miterLimit = 4
        speedUndeline1Path.stroke()

        context.restoreGState()


        //// SpeedText4 Drawing
        context.saveGState()
        context.setAlpha(speedOpacity4)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let speedText4Rect = CGRect(x: 174, y: 52, width: 60, height: 12)
        let speedText4Path = UIBezierPath(roundedRect: speedText4Rect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        speedText4Path.fill()
        let speedText4TextContent = "ÐºÐ¾ÑÐ¾Ð»Ñ"
        let speedText4Style = NSMutableParagraphStyle()
        speedText4Style.alignment = .center
        let speedText4FontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 12)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: speedText4Style,
        ] as [NSAttributedString.Key: Any]

        let speedText4TextHeight: CGFloat = speedText4TextContent.boundingRect(with: CGSize(width: speedText4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: speedText4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: speedText4Rect)
        speedText4TextContent.draw(in: CGRect(x: speedText4Rect.minX, y: speedText4Rect.minY + (speedText4Rect.height - speedText4TextHeight) / 2, width: speedText4Rect.width, height: speedText4TextHeight), withAttributes: speedText4FontAttributes)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// SpeedText3 Drawing
        context.saveGState()
        context.setAlpha(speedOpacity3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let speedText3Rect = CGRect(x: 176, y: 74, width: 86, height: 12)
        let speedText3Path = UIBezierPath(roundedRect: speedText3Rect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        speedText3Path.fill()
        let speedText3TextContent = "ÑÐµÐ°ÐºÑÐ¸Ð²Ð½Ð¾ÑÑÑ"
        let speedText3Style = NSMutableParagraphStyle()
        speedText3Style.alignment = .center
        let speedText3FontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 12)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: speedText3Style,
        ] as [NSAttributedString.Key: Any]

        let speedText3TextHeight: CGFloat = speedText3TextContent.boundingRect(with: CGSize(width: speedText3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: speedText3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: speedText3Rect)
        speedText3TextContent.draw(in: CGRect(x: speedText3Rect.minX, y: speedText3Rect.minY + (speedText3Rect.height - speedText3TextHeight) / 2, width: speedText3Rect.width, height: speedText3TextHeight), withAttributes: speedText3FontAttributes)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// SpeedText2 Drawing
        context.saveGState()
        context.setAlpha(speedOpacity2)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let speedText2Rect = CGRect(x: 174, y: 93, width: 102, height: 12)
        let speedText2Path = UIBezierPath(roundedRect: speedText2Rect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        speedText2Path.fill()
        let speedText2TextContent = "ÑÑÑÐµÐ¼Ð¸ÑÐµÐ»ÑÐ½Ð¾ÑÑÑ"
        let speedText2Style = NSMutableParagraphStyle()
        speedText2Style.alignment = .center
        let speedText2FontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 12)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: speedText2Style,
        ] as [NSAttributedString.Key: Any]

        let speedText2TextHeight: CGFloat = speedText2TextContent.boundingRect(with: CGSize(width: speedText2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: speedText2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: speedText2Rect)
        speedText2TextContent.draw(in: CGRect(x: speedText2Rect.minX, y: speedText2Rect.minY + (speedText2Rect.height - speedText2TextHeight) / 2, width: speedText2Rect.width, height: speedText2TextHeight), withAttributes: speedText2FontAttributes)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// SpeedText1 Drawing
        context.saveGState()
        context.setAlpha(speedOpacity1)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let speedText1Rect = CGRect(x: 176.39, y: 112.92, width: 58.77, height: 11.99)
        let speedText1Path = UIBezierPath(roundedRect: speedText1Rect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        speedText1Path.fill()
        let speedText1TextContent = "ÑÐµÐ·Ð²Ð¾ÑÑÑ"
        let speedText1Style = NSMutableParagraphStyle()
        speedText1Style.alignment = .center
        let speedText1FontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 12)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: speedText1Style,
        ] as [NSAttributedString.Key: Any]

        let speedText1TextHeight: CGFloat = speedText1TextContent.boundingRect(with: CGSize(width: speedText1Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: speedText1FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: speedText1Rect)
        speedText1TextContent.draw(in: CGRect(x: speedText1Rect.minX, y: speedText1Rect.minY + (speedText1Rect.height - speedText1TextHeight) / 2, width: speedText1Rect.width, height: speedText1TextHeight), withAttributes: speedText1FontAttributes)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// RetensionUndeline4 Drawing
        context.saveGState()
        context.setAlpha(retensionOpacity4)

        let retensionUndeline4Path = UIBezierPath()
        retensionUndeline4Path.move(to: CGPoint(x: 99.79, y: 201.58))
        retensionUndeline4Path.addLine(to: CGPoint(x: 90.29, y: 191.08))
        retensionUndeline4Path.addLine(to: CGPoint(x: 11.48, y: 191.08))
        UIColor.white.setStroke()
        retensionUndeline4Path.lineWidth = 0.3
        retensionUndeline4Path.miterLimit = 4
        retensionUndeline4Path.stroke()

        context.restoreGState()


        //// RetensionUndeline3 Drawing
        context.saveGState()
        context.setAlpha(retensionOpacity3)

        let retensionUndeline3Path = UIBezierPath()
        retensionUndeline3Path.move(to: CGPoint(x: 116.59, y: 191.46))
        retensionUndeline3Path.addLine(to: CGPoint(x: 107.09, y: 180.96))
        retensionUndeline3Path.addLine(to: CGPoint(x: 33.16, y: 180.96))
        UIColor.white.setStroke()
        retensionUndeline3Path.lineWidth = 0.3
        retensionUndeline3Path.miterLimit = 4
        retensionUndeline3Path.stroke()

        context.restoreGState()


        //// RetensionUndeline2 Drawing
        context.saveGState()
        context.setAlpha(retensionOpacity2)

        let retensionUndeline2Path = UIBezierPath()
        retensionUndeline2Path.move(to: CGPoint(x: 133.7, y: 180.97))
        retensionUndeline2Path.addLine(to: CGPoint(x: 124.2, y: 170.47))
        retensionUndeline2Path.addLine(to: CGPoint(x: 19.21, y: 170.47))
        UIColor.white.setStroke()
        retensionUndeline2Path.lineWidth = 0.3
        retensionUndeline2Path.miterLimit = 4
        retensionUndeline2Path.stroke()

        context.restoreGState()


        //// RetensionUndeline1 Drawing
        context.saveGState()
        context.setAlpha(retensionOpacity1)

        let retensionUndeline1Path = UIBezierPath()
        retensionUndeline1Path.move(to: CGPoint(x: 150.72, y: 170.62))
        retensionUndeline1Path.addLine(to: CGPoint(x: 141.22, y: 160.12))
        retensionUndeline1Path.addLine(to: CGPoint(x: 62.12, y: 160.13))
        UIColor.white.setStroke()
        retensionUndeline1Path.lineWidth = 0.3
        retensionUndeline1Path.miterLimit = 4
        retensionUndeline1Path.stroke()

        context.restoreGState()


        //// RetensionText4 Drawing
        context.saveGState()
        context.setAlpha(retensionOpacity4)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let retensionText4Rect = CGRect(x: 8, y: 178, width: 82, height: 12)
        let retensionText4Path = UIBezierPath(roundedRect: retensionText4Rect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        retensionText4Path.fill()
        let retensionText4TextContent = "Ð·Ð°ÐºÐ°Ð»ÑÐ½Ð½Ð¾ÑÑÑ"
        let retensionText4Style = NSMutableParagraphStyle()
        retensionText4Style.alignment = .center
        let retensionText4FontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 12)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: retensionText4Style,
        ] as [NSAttributedString.Key: Any]

        let retensionText4TextHeight: CGFloat = retensionText4TextContent.boundingRect(with: CGSize(width: retensionText4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: retensionText4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: retensionText4Rect)
        retensionText4TextContent.draw(in: CGRect(x: retensionText4Rect.minX, y: retensionText4Rect.minY + (retensionText4Rect.height - retensionText4TextHeight) / 2, width: retensionText4Rect.width, height: retensionText4TextHeight), withAttributes: retensionText4FontAttributes)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// RetensionText3 Drawing
        context.saveGState()
        context.setAlpha(retensionOpacity3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let retensionText3Rect = CGRect(x: 33, y: 168, width: 78, height: 12)
        let retensionText3Path = UIBezierPath(roundedRect: retensionText3Rect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        retensionText3Path.fill()
        let retensionText3TextContent = "Ð¿Ð¾ÑÑÐ¾ÑÐ½ÑÑÐ²Ð¾"
        let retensionText3Style = NSMutableParagraphStyle()
        retensionText3Style.alignment = .center
        let retensionText3FontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 12)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: retensionText3Style,
        ] as [NSAttributedString.Key: Any]

        let retensionText3TextHeight: CGFloat = retensionText3TextContent.boundingRect(with: CGSize(width: retensionText3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: retensionText3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: retensionText3Rect)
        retensionText3TextContent.draw(in: CGRect(x: retensionText3Rect.minX, y: retensionText3Rect.minY + (retensionText3Rect.height - retensionText3TextHeight) / 2, width: retensionText3Rect.width, height: retensionText3TextHeight), withAttributes: retensionText3FontAttributes)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// RetensionText2 Drawing
        context.saveGState()
        context.setAlpha(retensionOpacity2)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let retensionText2Rect = CGRect(x: 16, y: 157, width: 114, height: 12)
        let retensionText2Path = UIBezierPath(roundedRect: retensionText2Rect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        retensionText2Path.fill()
        let retensionText2TextContent = "Ð¼Ð¾ÑÐ¸Ð²Ð¸ÑÐ¾Ð²Ð°Ð½Ð½Ð¾ÑÑÑ"
        let retensionText2Style = NSMutableParagraphStyle()
        retensionText2Style.alignment = .center
        let retensionText2FontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 12)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: retensionText2Style,
        ] as [NSAttributedString.Key: Any]

        let retensionText2TextHeight: CGFloat = retensionText2TextContent.boundingRect(with: CGSize(width: retensionText2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: retensionText2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: retensionText2Rect)
        retensionText2TextContent.draw(in: CGRect(x: retensionText2Rect.minX, y: retensionText2Rect.minY + (retensionText2Rect.height - retensionText2TextHeight) / 2, width: retensionText2Rect.width, height: retensionText2TextHeight), withAttributes: retensionText2FontAttributes)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// RetensionText1 Drawing
        context.saveGState()
        context.setAlpha(retensionOpacity1)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let retensionText1Rect = CGRect(x: 60.1, y: 147, width: 86.36, height: 12)
        let retensionText1Path = UIBezierPath(roundedRect: retensionText1Rect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        retensionText1Path.fill()
        let retensionText1TextContent = "ÑÐ°Ð³ Ð·Ð° ÑÐ°Ð³Ð¾Ð¼"
        let retensionText1Style = NSMutableParagraphStyle()
        retensionText1Style.alignment = .center
        let retensionText1FontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 12)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: retensionText1Style,
        ] as [NSAttributedString.Key: Any]

        let retensionText1TextHeight: CGFloat = retensionText1TextContent.boundingRect(with: CGSize(width: retensionText1Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: retensionText1FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: retensionText1Rect)
        retensionText1TextContent.draw(in: CGRect(x: retensionText1Rect.minX, y: retensionText1Rect.minY + (retensionText1Rect.height - retensionText1TextHeight) / 2, width: retensionText1Rect.width, height: retensionText1TextHeight), withAttributes: retensionText1FontAttributes)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// DegreeUndeline4 Drawing
        context.saveGState()
        context.setAlpha(degreeOpacity4)

        let degreeUndeline4Path = UIBezierPath()
        degreeUndeline4Path.move(to: CGPoint(x: 233.04, y: 202.78))
        degreeUndeline4Path.addLine(to: CGPoint(x: 246.65, y: 191.78))
        degreeUndeline4Path.addLine(to: CGPoint(x: 288.04, y: 191.78))
        UIColor.white.setStroke()
        degreeUndeline4Path.lineWidth = 0.3
        degreeUndeline4Path.miterLimit = 4
        degreeUndeline4Path.stroke()

        context.restoreGState()


        //// DegreeUndeline3 Drawing
        context.saveGState()
        context.setAlpha(degreeOpacity3)

        let degreeUndeline3Path = UIBezierPath()
        degreeUndeline3Path.move(to: CGPoint(x: 219.27, y: 193.5))
        degreeUndeline3Path.addLine(to: CGPoint(x: 227.77, y: 179.5))
        degreeUndeline3Path.addLine(to: CGPoint(x: 268.86, y: 179.51))
        UIColor.white.setStroke()
        degreeUndeline3Path.lineWidth = 0.3
        degreeUndeline3Path.miterLimit = 4
        degreeUndeline3Path.stroke()

        context.restoreGState()


        //// DegreeUndeline2 Drawing
        context.saveGState()
        context.setAlpha(degreeOpacity2)

        let degreeUndeline2Path = UIBezierPath()
        degreeUndeline2Path.move(to: CGPoint(x: 202.08, y: 182.3))
        degreeUndeline2Path.addLine(to: CGPoint(x: 210.61, y: 168.56))
        degreeUndeline2Path.addLine(to: CGPoint(x: 248.93, y: 168.56))
        UIColor.white.setStroke()
        degreeUndeline2Path.lineWidth = 0.3
        degreeUndeline2Path.miterLimit = 4
        degreeUndeline2Path.stroke()

        context.restoreGState()


        //// DegreeUndeline1 Drawing
        context.saveGState()
        context.setAlpha(degreeOpacity1)

        let degreeUndeline1Path = UIBezierPath()
        degreeUndeline1Path.move(to: CGPoint(x: 184.95, y: 171.03))
        degreeUndeline1Path.addLine(to: CGPoint(x: 193.45, y: 157.03))
        degreeUndeline1Path.addLine(to: CGPoint(x: 235.85, y: 157.03))
        UIColor.white.setStroke()
        degreeUndeline1Path.lineWidth = 0.3
        degreeUndeline1Path.miterLimit = 4
        degreeUndeline1Path.stroke()

        context.restoreGState()


        //// DegreeText4 Drawing
        context.saveGState()
        context.setAlpha(degreeOpacity4)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let degreeText4Rect = CGRect(x: 242, y: 179, width: 54, height: 12)
        let degreeText4Path = UIBezierPath(roundedRect: degreeText4Rect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        degreeText4Path.fill()
        let degreeText4TextContent = "Ð¼Ð°ÑÑÐµÑ"
        let degreeText4Style = NSMutableParagraphStyle()
        degreeText4Style.alignment = .center
        let degreeText4FontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 12)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: degreeText4Style,
        ] as [NSAttributedString.Key: Any]

        let degreeText4TextHeight: CGFloat = degreeText4TextContent.boundingRect(with: CGSize(width: degreeText4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: degreeText4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: degreeText4Rect)
        degreeText4TextContent.draw(in: CGRect(x: degreeText4Rect.minX, y: degreeText4Rect.minY + (degreeText4Rect.height - degreeText4TextHeight) / 2, width: degreeText4Rect.width, height: degreeText4TextHeight), withAttributes: degreeText4FontAttributes)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// DegreeText3 Drawing
        context.saveGState()
        context.setAlpha(degreeOpacity3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let degreeText3Rect = CGRect(x: 226, y: 167, width: 46, height: 12)
        let degreeText3Path = UIBezierPath(roundedRect: degreeText3Rect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        degreeText3Path.fill()
        let degreeText3TextContent = "ÑÑÑÐ´Ð¸Ñ"
        let degreeText3Style = NSMutableParagraphStyle()
        degreeText3Style.alignment = .center
        let degreeText3FontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 12)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: degreeText3Style,
        ] as [NSAttributedString.Key: Any]

        let degreeText3TextHeight: CGFloat = degreeText3TextContent.boundingRect(with: CGSize(width: degreeText3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: degreeText3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: degreeText3Rect)
        degreeText3TextContent.draw(in: CGRect(x: degreeText3Rect.minX, y: degreeText3Rect.minY + (degreeText3Rect.height - degreeText3TextHeight) / 2, width: degreeText3Rect.width, height: degreeText3TextHeight), withAttributes: degreeText3FontAttributes)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// DegreeText2 Drawing
        context.saveGState()
        context.setAlpha(degreeOpacity2)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let degreeText2Rect = CGRect(x: 208, y: 156, width: 46, height: 12)
        let degreeText2Path = UIBezierPath(roundedRect: degreeText2Rect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        degreeText2Path.fill()
        let degreeText2TextContent = "Ð·Ð½Ð°ÑÐ¾Ðº"
        let degreeText2Style = NSMutableParagraphStyle()
        degreeText2Style.alignment = .center
        let degreeText2FontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 12)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: degreeText2Style,
        ] as [NSAttributedString.Key: Any]

        let degreeText2TextHeight: CGFloat = degreeText2TextContent.boundingRect(with: CGSize(width: degreeText2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: degreeText2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: degreeText2Rect)
        degreeText2TextContent.draw(in: CGRect(x: degreeText2Rect.minX, y: degreeText2Rect.minY + (degreeText2Rect.height - degreeText2TextHeight) / 2, width: degreeText2Rect.width, height: degreeText2TextHeight), withAttributes: degreeText2FontAttributes)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// DegreeText1 Drawing
        context.saveGState()
        context.setAlpha(degreeOpacity1)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let degreeText1Rect = CGRect(x: 190, y: 144, width: 50, height: 12)
        let degreeText1Path = UIBezierPath(roundedRect: degreeText1Rect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        degreeText1Path.fill()
        let degreeText1TextContent = "Ð´Ð¾ÐºÐ°"
        let degreeText1Style = NSMutableParagraphStyle()
        degreeText1Style.alignment = .center
        let degreeText1FontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 12)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: degreeText1Style,
        ] as [NSAttributedString.Key: Any]

        let degreeText1TextHeight: CGFloat = degreeText1TextContent.boundingRect(with: CGSize(width: degreeText1Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: degreeText1FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: degreeText1Rect)
        degreeText1TextContent.draw(in: CGRect(x: degreeText1Rect.minX, y: degreeText1Rect.minY + (degreeText1Rect.height - degreeText1TextHeight) / 2, width: degreeText1Rect.width, height: degreeText1TextHeight), withAttributes: degreeText1FontAttributes)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// SpeedTitle Drawing
        let speedTitleRect = CGRect(x: 140, y: 20, width: 58, height: 12)
        let speedTitlePath = UIBezierPath(roundedRect: speedTitleRect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        speedTitlePath.fill()
        let speedTitleTextContent = "ÑÐºÐ¾ÑÐ¾ÑÑÑ"
        let speedTitleStyle = NSMutableParagraphStyle()
        speedTitleStyle.alignment = .center
        let speedTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 11)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: speedTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let speedTitleTextHeight: CGFloat = speedTitleTextContent.boundingRect(with: CGSize(width: speedTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: speedTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: speedTitleRect)
        speedTitleTextContent.draw(in: CGRect(x: speedTitleRect.minX, y: speedTitleRect.minY + (speedTitleRect.height - speedTitleTextHeight) / 2, width: speedTitleRect.width, height: speedTitleTextHeight), withAttributes: speedTitleFontAttributes)
        context.restoreGState()


        //// DegreeTitle Drawing
        let degreeTitleRect = CGRect(x: 266, y: 242, width: 52, height: 12)
        let degreeTitlePath = UIBezierPath(roundedRect: degreeTitleRect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        degreeTitlePath.fill()
        let degreeTitleTextContent = "ÑÑÐµÐ¿ÐµÐ½Ñ"
        let degreeTitleStyle = NSMutableParagraphStyle()
        degreeTitleStyle.alignment = .center
        let degreeTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 11)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: degreeTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let degreeTitleTextHeight: CGFloat = degreeTitleTextContent.boundingRect(with: CGSize(width: degreeTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: degreeTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: degreeTitleRect)
        degreeTitleTextContent.draw(in: CGRect(x: degreeTitleRect.minX, y: degreeTitleRect.minY + (degreeTitleRect.height - degreeTitleTextHeight) / 2, width: degreeTitleRect.width, height: degreeTitleTextHeight), withAttributes: degreeTitleFontAttributes)
        context.restoreGState()


        //// DegreeTitle 2 Drawing
        let degreeTitle2Rect = CGRect(x: 10.39, y: 241.71, width: 89, height: 12)
        let degreeTitle2Path = UIBezierPath(roundedRect: degreeTitle2Rect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        degreeTitle2Path.fill()
        let degreeTitle2TextContent = "Ð²Ð¾Ð²Ð»ÐµÑÐµÐ½Ð½Ð¾ÑÑÑ"
        let degreeTitle2Style = NSMutableParagraphStyle()
        degreeTitle2Style.alignment = .center
        let degreeTitle2FontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 11)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: degreeTitle2Style,
        ] as [NSAttributedString.Key: Any]

        let degreeTitle2TextHeight: CGFloat = degreeTitle2TextContent.boundingRect(with: CGSize(width: degreeTitle2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: degreeTitle2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: degreeTitle2Rect)
        degreeTitle2TextContent.draw(in: CGRect(x: degreeTitle2Rect.minX, y: degreeTitle2Rect.minY + (degreeTitle2Rect.height - degreeTitle2TextHeight) / 2, width: degreeTitle2Rect.width, height: degreeTitle2TextHeight), withAttributes: degreeTitle2FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawBarChart(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 204, height: 40), resizing: ResizingBehavior = .aspectFit, column1: CGFloat = 83, column2: CGFloat = 91, column3: CGFloat = 86, column4: CGFloat = 81, column5: CGFloat = 43, column6: CGFloat = 0, column7: CGFloat = 0, column8: CGFloat = 0, column9: CGFloat = 0, column10: CGFloat = 0, column11: CGFloat = 0, column12: CGFloat = 0, column13: CGFloat = 0, column14: CGFloat = 0, column15: CGFloat = 0, column16: CGFloat = 0, column17: CGFloat = 0, column18: CGFloat = 0, column19: CGFloat = 0, column20: CGFloat = 0, column21: CGFloat = 0, column22: CGFloat = 0, column23: CGFloat = 0, column24: CGFloat = 0, column25: CGFloat = 0, column26: CGFloat = 0, column27: CGFloat = 0, column28: CGFloat = 0, column29: CGFloat = 0, column30: CGFloat = 0, barChartLineY: CGFloat = 62, barChartLineText: String = "100", diffPerDay: String = "+10%", isDiffPositive: Bool = true, radioProgress: CGFloat = 0.204) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 204, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 204, y: resizedFrame.height / 40)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 204, resizedFrame.height / 40)


        //// Color Declarations
        let barChartBkgColor = UIColor(red: 0.177, green: 0.065, blue: 0.539, alpha: 1.000)
        let barColumnColor3 = UIColor(red: 0.000, green: 1.000, blue: 0.984, alpha: 1.000)
        let barColumnColor2 = UIColor(red: 0.506, green: 0.917, blue: 0.948, alpha: 1.000)
        let barColumnColor1 = UIColor(red: 0.000, green: 0.257, blue: 1.000, alpha: 1.000)
        let avgLineColor1 = UIColor(red: 1.000, green: 0.000, blue: 0.914, alpha: 1.000)
        let avgLineColor2 = UIColor(red: 0.538, green: 0.000, blue: 1.000, alpha: 1.000)

        //// Gradient Declarations
        let barColumnGradient = CGGradient(colorsSpace: nil, colors: [barColumnColor2.cgColor, barColumnColor2.blended(withFraction: 0.5, of: barColumnColor1).cgColor, barColumnColor1.cgColor, barColumnColor1.blended(withFraction: 0.5, of: barColumnColor3).cgColor, barColumnColor3.cgColor] as CFArray, locations: [0, 0, 0.9, 0.9, 1])!
        let avgLineGradient = CGGradient(colorsSpace: nil, colors: [avgLineColor1.cgColor, avgLineColor2.cgColor] as CFArray, locations: [0.01, 1])!

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black
        shadow.shadowOffset = CGSize(width: 0, height: 1)
        shadow.shadowBlurRadius = 2

        //// Variable Declarations
        let barChartExpr1: CGFloat = 40 - barChartLineY
        let diffPerDayColor = isDiffPositive ? UIColor(red: 0.56, green: 1, blue: 0.55, alpha: 1) : UIColor(red: 1, green: 0, blue: 0.91, alpha: 1)
        let radioHeight: CGFloat = radioProgress * 20

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 83.06, y: -0.52, width: 120, height: 40), cornerRadius: 4)
        barChartBkgColor.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        context.saveGState()
        context.clip(to: rectanglePath.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let rectangleOpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: rectangleOpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 83.03, y: 6.55))
        bezierPath.addLine(to: CGPoint(x: 203.03, y: 6.48))
        barChartBkgColor.setFill()
        bezierPath.fill()
        UIColor.gray.setStroke()
        bezierPath.lineWidth = 0.1
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 83.03, y: 9.39))
        bezier2Path.addLine(to: CGPoint(x: 203.03, y: 9.32))
        barChartBkgColor.setFill()
        bezier2Path.fill()
        UIColor.gray.setStroke()
        bezier2Path.lineWidth = 0.1
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 83.03, y: 3.46))
        bezier3Path.addLine(to: CGPoint(x: 203.03, y: 3.39))
        barChartBkgColor.setFill()
        bezier3Path.fill()
        UIColor.gray.setStroke()
        bezier3Path.lineWidth = 0.1
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 83.03, y: 12.42))
        bezier4Path.addLine(to: CGPoint(x: 203.03, y: 12.35))
        barChartBkgColor.setFill()
        bezier4Path.fill()
        UIColor.gray.setStroke()
        bezier4Path.lineWidth = 0.1
        bezier4Path.stroke()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 83.03, y: 15.63))
        bezier5Path.addLine(to: CGPoint(x: 203.03, y: 15.55))
        barChartBkgColor.setFill()
        bezier5Path.fill()
        UIColor.gray.setStroke()
        bezier5Path.lineWidth = 0.1
        bezier5Path.stroke()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 83.03, y: 18.58))
        bezier6Path.addLine(to: CGPoint(x: 203.03, y: 18.51))
        barChartBkgColor.setFill()
        bezier6Path.fill()
        UIColor.gray.setStroke()
        bezier6Path.lineWidth = 0.1
        bezier6Path.stroke()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 83.03, y: 21.43))
        bezier7Path.addLine(to: CGPoint(x: 203.03, y: 21.36))
        barChartBkgColor.setFill()
        bezier7Path.fill()
        UIColor.gray.setStroke()
        bezier7Path.lineWidth = 0.1
        bezier7Path.stroke()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 83.03, y: 23.91))
        bezier8Path.addLine(to: CGPoint(x: 203.03, y: 23.84))
        barChartBkgColor.setFill()
        bezier8Path.fill()
        UIColor.gray.setStroke()
        bezier8Path.lineWidth = 0.1
        bezier8Path.stroke()


        //// Group
        //// Rectangle 1 Drawing
        context.saveGState()
        context.translateBy(x: 87.18, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle1Rect = CGRect(x: 0, y: 0, width: 4, height: column1)
        let rectangle1Path = UIBezierPath(roundedRect: rectangle1Rect, byRoundingCorners: [.topRight, .bottomRight], cornerRadii: CGSize(width: 2, height: 2))
        rectangle1Path.close()
        context.saveGState()
        rectangle1Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle1Rect.midX, y: rectangle1Rect.minY),
            end: CGPoint(x: rectangle1Rect.midX, y: rectangle1Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 91.17, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle2Rect = CGRect(x: 0, y: 0, width: 4, height: (column2 - 1.83572685474))
        let rectangle2Path = UIBezierPath(rect: rectangle2Rect)
        context.saveGState()
        rectangle2Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle2Rect.midX, y: rectangle2Rect.minY),
            end: CGPoint(x: rectangle2Rect.midX, y: rectangle2Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 3 Drawing
        context.saveGState()
        context.translateBy(x: 95.17, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle3Rect = CGRect(x: 0, y: 0, width: 4, height: (column3 - 1.83572685474))
        let rectangle3Path = UIBezierPath(rect: rectangle3Rect)
        context.saveGState()
        rectangle3Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle3Rect.midX, y: rectangle3Rect.minY),
            end: CGPoint(x: rectangle3Rect.midX, y: rectangle3Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 4 Drawing
        context.saveGState()
        context.translateBy(x: 99.17, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle4Rect = CGRect(x: 0, y: 0, width: 4, height: (column4 - 1.46858148379))
        let rectangle4Path = UIBezierPath(rect: rectangle4Rect)
        context.saveGState()
        rectangle4Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle4Rect.midX, y: rectangle4Rect.minY),
            end: CGPoint(x: rectangle4Rect.midX, y: rectangle4Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 5 Drawing
        context.saveGState()
        context.translateBy(x: 103.17, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle5Rect = CGRect(x: 0, y: 0, width: 4, height: (column5 - 1.65215416927))
        let rectangle5Path = UIBezierPath(rect: rectangle5Rect)
        context.saveGState()
        rectangle5Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle5Rect.midX, y: rectangle5Rect.minY),
            end: CGPoint(x: rectangle5Rect.midX, y: rectangle5Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 6 Drawing
        context.saveGState()
        context.translateBy(x: 107.17, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle6Rect = CGRect(x: 0, y: 0, width: 4, height: (column6 - 1.10143611285))
        let rectangle6Path = UIBezierPath(rect: rectangle6Rect)
        context.saveGState()
        rectangle6Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle6Rect.midX, y: rectangle6Rect.minY),
            end: CGPoint(x: rectangle6Rect.midX, y: rectangle6Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 7 Drawing
        context.saveGState()
        context.translateBy(x: 111.17, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle7Rect = CGRect(x: 0, y: 0, width: 4, height: (column7 - 2.01929954022))
        let rectangle7Path = UIBezierPath(rect: rectangle7Rect)
        context.saveGState()
        rectangle7Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle7Rect.midX, y: rectangle7Rect.minY),
            end: CGPoint(x: rectangle7Rect.midX, y: rectangle7Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 8 Drawing
        context.saveGState()
        context.translateBy(x: 115.17, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle8Rect = CGRect(x: 0, y: 0, width: 4, height: (column8 - 1.00964977011))
        let rectangle8Path = UIBezierPath(rect: rectangle8Rect)
        context.saveGState()
        rectangle8Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle8Rect.midX, y: rectangle8Rect.minY),
            end: CGPoint(x: rectangle8Rect.midX, y: rectangle8Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 9 Drawing
        context.saveGState()
        context.translateBy(x: 119.17, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle9Rect = CGRect(x: 0, y: 0, width: 4, height: (column9 - 1.56036782653))
        let rectangle9Path = UIBezierPath(rect: rectangle9Rect)
        context.saveGState()
        rectangle9Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle9Rect.midX, y: rectangle9Rect.minY),
            end: CGPoint(x: rectangle9Rect.midX, y: rectangle9Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 10 Drawing
        context.saveGState()
        context.translateBy(x: 123.17, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle10Rect = CGRect(x: 0, y: 0, width: 4, height: (column10 - 1.10143611285))
        let rectangle10Path = UIBezierPath(rect: rectangle10Rect)
        context.saveGState()
        rectangle10Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle10Rect.midX, y: rectangle10Rect.minY),
            end: CGPoint(x: rectangle10Rect.midX, y: rectangle10Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 11 Drawing
        context.saveGState()
        context.translateBy(x: 127.17, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle11Rect = CGRect(x: 0, y: 0, width: 4, height: (column11 - 1.10143611285))
        let rectangle11Path = UIBezierPath(rect: rectangle11Rect)
        context.saveGState()
        rectangle11Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle11Rect.midX, y: rectangle11Rect.minY),
            end: CGPoint(x: rectangle11Rect.midX, y: rectangle11Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 12 Drawing
        context.saveGState()
        context.translateBy(x: 131.17, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle12Rect = CGRect(x: 0, y: 0, width: 4, height: (column12 - 1.37679514106))
        let rectangle12Path = UIBezierPath(rect: rectangle12Rect)
        context.saveGState()
        rectangle12Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle12Rect.midX, y: rectangle12Rect.minY),
            end: CGPoint(x: rectangle12Rect.midX, y: rectangle12Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 13 Drawing
        context.saveGState()
        context.translateBy(x: 135.17, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle13Rect = CGRect(x: 0, y: 0, width: 4, height: (column13 - 0.64250439916))
        let rectangle13Path = UIBezierPath(rect: rectangle13Rect)
        context.saveGState()
        rectangle13Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle13Rect.midX, y: rectangle13Rect.minY),
            end: CGPoint(x: rectangle13Rect.midX, y: rectangle13Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 14 Drawing
        context.saveGState()
        context.translateBy(x: 139.17, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle14Rect = CGRect(x: 0, y: 0, width: 4, height: (column14 - 0.734290741897))
        let rectangle14Path = UIBezierPath(rect: rectangle14Rect)
        context.saveGState()
        rectangle14Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle14Rect.midX, y: rectangle14Rect.minY),
            end: CGPoint(x: rectangle14Rect.midX, y: rectangle14Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 15 Drawing
        context.saveGState()
        context.translateBy(x: 143.17, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle15Rect = CGRect(x: 0, y: 0, width: 4, height: (column15 - 1.28500879832))
        let rectangle15Path = UIBezierPath(rect: rectangle15Rect)
        context.saveGState()
        rectangle15Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle15Rect.midX, y: rectangle15Rect.minY),
            end: CGPoint(x: rectangle15Rect.midX, y: rectangle15Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 16 Drawing
        context.saveGState()
        context.translateBy(x: 147.17, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle16Rect = CGRect(x: 0, y: 0, width: 4, height: (column16 - 1.00964977011))
        let rectangle16Path = UIBezierPath(rect: rectangle16Rect)
        context.saveGState()
        rectangle16Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle16Rect.midX, y: rectangle16Rect.minY),
            end: CGPoint(x: rectangle16Rect.midX, y: rectangle16Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 17 Drawing
        context.saveGState()
        context.translateBy(x: 151.17, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle17Rect = CGRect(x: 0, y: 0, width: 4, height: (column17 - 1.46858148379))
        let rectangle17Path = UIBezierPath(rect: rectangle17Rect)
        context.saveGState()
        rectangle17Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle17Rect.midX, y: rectangle17Rect.minY),
            end: CGPoint(x: rectangle17Rect.midX, y: rectangle17Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 18 Drawing
        context.saveGState()
        context.translateBy(x: 155.17, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle18Rect = CGRect(x: 0, y: 0, width: 4, height: (column18 - 0.917863427371))
        let rectangle18Path = UIBezierPath(rect: rectangle18Rect)
        context.saveGState()
        rectangle18Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle18Rect.midX, y: rectangle18Rect.minY),
            end: CGPoint(x: rectangle18Rect.midX, y: rectangle18Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 19 Drawing
        context.saveGState()
        context.translateBy(x: 159.17, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle19Rect = CGRect(x: 0, y: 0, width: 4, height: (column19 - 1.65215416927))
        let rectangle19Path = UIBezierPath(rect: rectangle19Rect)
        context.saveGState()
        rectangle19Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle19Rect.midX, y: rectangle19Rect.minY),
            end: CGPoint(x: rectangle19Rect.midX, y: rectangle19Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 20 Drawing
        context.saveGState()
        context.translateBy(x: 163.17, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle20Rect = CGRect(x: 0, y: 0, width: 4, height: (column20 - 0.826077084634))
        let rectangle20Path = UIBezierPath(rect: rectangle20Rect)
        context.saveGState()
        rectangle20Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle20Rect.midX, y: rectangle20Rect.minY),
            end: CGPoint(x: rectangle20Rect.midX, y: rectangle20Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 21 Drawing
        context.saveGState()
        context.translateBy(x: 167.17, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle21Rect = CGRect(x: 0, y: 0, width: 4, height: (column21 - 0.275359028211))
        let rectangle21Path = UIBezierPath(rect: rectangle21Rect)
        context.saveGState()
        rectangle21Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle21Rect.midX, y: rectangle21Rect.minY),
            end: CGPoint(x: rectangle21Rect.midX, y: rectangle21Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 22 Drawing
        context.saveGState()
        context.translateBy(x: 171.17, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle22Rect = CGRect(x: 0, y: 0, width: 4, height: (column22 - 0.458931713686))
        let rectangle22Path = UIBezierPath(rect: rectangle22Rect)
        context.saveGState()
        rectangle22Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle22Rect.midX, y: rectangle22Rect.minY),
            end: CGPoint(x: rectangle22Rect.midX, y: rectangle22Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 23 Drawing
        context.saveGState()
        context.translateBy(x: 175.16, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle23Rect = CGRect(x: 0, y: 0, width: 4, height: (column23 - 0.275359028211))
        let rectangle23Path = UIBezierPath(rect: rectangle23Rect)
        context.saveGState()
        rectangle23Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle23Rect.midX, y: rectangle23Rect.minY),
            end: CGPoint(x: rectangle23Rect.midX, y: rectangle23Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 24 Drawing
        context.saveGState()
        context.translateBy(x: 179.16, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle24Rect = CGRect(x: 0, y: 0, width: 4, height: (column24 - 1.19322245558))
        let rectangle24Path = UIBezierPath(rect: rectangle24Rect)
        context.saveGState()
        rectangle24Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle24Rect.midX, y: rectangle24Rect.minY),
            end: CGPoint(x: rectangle24Rect.midX, y: rectangle24Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 25 Drawing
        context.saveGState()
        context.translateBy(x: 183.16, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle25Rect = CGRect(x: 0, y: 0, width: 4, height: (column25 - 1.37679514106))
        let rectangle25Path = UIBezierPath(rect: rectangle25Rect)
        context.saveGState()
        rectangle25Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle25Rect.midX, y: rectangle25Rect.minY),
            end: CGPoint(x: rectangle25Rect.midX, y: rectangle25Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 26 Drawing
        context.saveGState()
        context.translateBy(x: 187.16, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle26Rect = CGRect(x: 0, y: 0, width: 4, height: (column26 - 0.64250439916))
        let rectangle26Path = UIBezierPath(rect: rectangle26Rect)
        context.saveGState()
        rectangle26Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle26Rect.midX, y: rectangle26Rect.minY),
            end: CGPoint(x: rectangle26Rect.midX, y: rectangle26Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 27 Drawing
        context.saveGState()
        context.translateBy(x: 191.16, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle27Rect = CGRect(x: 0, y: 0, width: 4, height: (column27 - 1.65215416927))
        let rectangle27Path = UIBezierPath(rect: rectangle27Rect)
        context.saveGState()
        rectangle27Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle27Rect.midX, y: rectangle27Rect.minY),
            end: CGPoint(x: rectangle27Rect.midX, y: rectangle27Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 28 Drawing
        context.saveGState()
        context.translateBy(x: 195.16, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle28Rect = CGRect(x: 0, y: 0, width: 4, height: (column28 - 0.826077084634))
        let rectangle28Path = UIBezierPath(rect: rectangle28Rect)
        context.saveGState()
        rectangle28Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle28Rect.midX, y: rectangle28Rect.minY),
            end: CGPoint(x: rectangle28Rect.midX, y: rectangle28Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 29 Drawing
        context.saveGState()
        context.translateBy(x: 199.16, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle29Rect = CGRect(x: 0, y: 0, width: 4, height: (column29 - 1.56036782653))
        let rectangle29Path = UIBezierPath(rect: rectangle29Rect)
        context.saveGState()
        rectangle29Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle29Rect.midX, y: rectangle29Rect.minY),
            end: CGPoint(x: rectangle29Rect.midX, y: rectangle29Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 30 Drawing
        context.saveGState()
        context.translateBy(x: 203.16, y: 39.5)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle30Rect = CGRect(x: 0, y: 0, width: 4, height: (column30 - 1.56036782653))
        let rectangle30Path = UIBezierPath(roundedRect: rectangle30Rect, byRoundingCorners: [.topLeft, .bottomLeft], cornerRadii: CGSize(width: 0.5, height: 0.5))
        rectangle30Path.close()
        context.saveGState()
        rectangle30Path.addClip()
        context.drawLinearGradient(barColumnGradient,
            start: CGPoint(x: rectangle30Rect.midX, y: rectangle30Rect.minY),
            end: CGPoint(x: rectangle30Rect.midX, y: rectangle30Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()




        //// AvgLine Drawing
        context.saveGState()
        context.translateBy(x: 83.2, y: (barChartExpr1 - 0.60205078125))

        let avgLinePath = UIBezierPath()
        avgLinePath.move(to: CGPoint(x: 0.12, y: 0))
        avgLinePath.addLine(to: CGPoint(x: 0, y: 0.5))
        avgLinePath.addLine(to: CGPoint(x: 120, y: 0.5))
        avgLinePath.addLine(to: CGPoint(x: 120, y: 0))
        avgLinePath.addLine(to: CGPoint(x: 0.12, y: 0))
        avgLinePath.close()
        context.saveGState()
        avgLinePath.addClip()
        let avgLineBounds: CGRect = avgLinePath.cgPath.boundingBoxOfPath
        context.drawLinearGradient(avgLineGradient,
            start: CGPoint(x: avgLineBounds.midX + 5.08 * avgLineBounds.width / 120, y: avgLineBounds.midY + -2.3 * avgLineBounds.height / 0.5),
            end: CGPoint(x: avgLineBounds.midX + -5.08 * avgLineBounds.width / 120, y: avgLineBounds.midY + 2.3 * avgLineBounds.height / 0.5),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// Group 10
        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 50.3, y: 0.15, width: 21, height: 20))
        barChartBkgColor.setFill()
        oval3Path.fill()

        ////// Oval 3 Inner Shadow
        context.saveGState()
        context.clip(to: oval3Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let oval3OpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: oval3OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        oval3OpaqueShadow.setFill()
        oval3Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Rectangle 31 Drawing
        context.saveGState()
        context.translateBy(x: 71.25, y: 20.16)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle31Rect = CGRect(x: 0, y: 0, width: 21, height: radioHeight)
        let rectangle31Path = UIBezierPath(rect: rectangle31Rect)
        context.saveGState()
        rectangle31Path.addClip()
        context.drawLinearGradient(avgLineGradient,
            start: CGPoint(x: rectangle31Rect.midX, y: rectangle31Rect.minY),
            end: CGPoint(x: rectangle31Rect.midX, y: rectangle31Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Oval Drawing
        context.saveGState()
        context.setBlendMode(.destinationIn)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 50.29, y: 0.2, width: 21, height: 20))
        barChartBkgColor.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        context.saveGState()
        context.clip(to: ovalPath.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let ovalOpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: ovalOpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Text 13 Drawing
        let text13Rect = CGRect(x: 51.99, y: 4.84, width: 17.62, height: 10.26)
        let text13Style = NSMutableParagraphStyle()
        text13Style.alignment = .center
        let text13FontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 11)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text13Style,
        ] as [NSAttributedString.Key: Any]

        let text13TextHeight: CGFloat = barChartLineText.boundingRect(with: CGSize(width: text13Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text13FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text13Rect)
        barChartLineText.draw(in: CGRect(x: text13Rect.minX, y: text13Rect.minY + (text13Rect.height - text13TextHeight) / 2, width: text13Rect.width, height: text13TextHeight), withAttributes: text13FontAttributes)
        context.restoreGState()


        //// Bezier 43 Drawing
        let bezier43Path = UIBezierPath()
        bezier43Path.move(to: CGPoint(x: 70.96, y: 7.59))
        bezier43Path.addLine(to: CGPoint(x: 76.77, y: 7.67))
        bezier43Path.addLine(to: CGPoint(x: 76.78, y: 12.24))
        bezier43Path.addLine(to: CGPoint(x: 83.2, y: 12.32))
        bezier43Path.addLine(to: CGPoint(x: 83.18, y: 13.57))
        bezier43Path.addLine(to: CGPoint(x: 75.27, y: 13.51))
        bezier43Path.addLine(to: CGPoint(x: 75.33, y: 8.93))
        bezier43Path.addLine(to: CGPoint(x: 71.09, y: 8.92))
        bezier43Path.addLine(to: CGPoint(x: 70.96, y: 7.59))
        bezier43Path.close()
        barChartBkgColor.setFill()
        bezier43Path.fill()

        ////// Bezier 43 Inner Shadow
        context.saveGState()
        context.clip(to: bezier43Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezier43OpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: bezier43OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        bezier43OpaqueShadow.setFill()
        bezier43Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()

        UIColor.black.setStroke()
        bezier43Path.lineWidth = 0
        bezier43Path.stroke()


        //// Bezier 44 Drawing
        let bezier44Path = UIBezierPath()
        bezier44Path.move(to: CGPoint(x: 52.32, y: 4.55))
        bezier44Path.addLine(to: CGPoint(x: 69.04, y: 4.68))
        UIColor.gray.setStroke()
        bezier44Path.lineWidth = 0.2
        bezier44Path.stroke()


        //// Bezier 45 Drawing
        let bezier45Path = UIBezierPath()
        bezier45Path.move(to: CGPoint(x: 51.45, y: 6.82))
        bezier45Path.addLine(to: CGPoint(x: 70.36, y: 6.88))
        UIColor.gray.setStroke()
        bezier45Path.lineWidth = 0.2
        bezier45Path.stroke()


        //// Bezier 46 Drawing
        let bezier46Path = UIBezierPath()
        bezier46Path.move(to: CGPoint(x: 50.85, y: 8.96))
        bezier46Path.addLine(to: CGPoint(x: 70.97, y: 9.02))
        UIColor.gray.setStroke()
        bezier46Path.lineWidth = 0.2
        bezier46Path.stroke()


        //// Bezier 47 Drawing
        let bezier47Path = UIBezierPath()
        bezier47Path.move(to: CGPoint(x: 50.74, y: 11.21))
        bezier47Path.addLine(to: CGPoint(x: 71.13, y: 11.28))
        UIColor.gray.setStroke()
        bezier47Path.lineWidth = 0.2
        bezier47Path.stroke()


        //// Bezier 48 Drawing
        let bezier48Path = UIBezierPath()
        bezier48Path.move(to: CGPoint(x: 51.26, y: 13.19))
        bezier48Path.addLine(to: CGPoint(x: 70.42, y: 13.22))
        UIColor.gray.setStroke()
        bezier48Path.lineWidth = 0.2
        bezier48Path.stroke()


        //// Bezier 49 Drawing
        let bezier49Path = UIBezierPath()
        bezier49Path.move(to: CGPoint(x: 52.16, y: 15.29))
        bezier49Path.addLine(to: CGPoint(x: 69.57, y: 15.42))
        UIColor.gray.setStroke()
        bezier49Path.lineWidth = 0.2
        bezier49Path.stroke()


        //// Bezier 50 Drawing
        let bezier50Path = UIBezierPath()
        bezier50Path.move(to: CGPoint(x: 53.91, y: 17.35))
        bezier50Path.addLine(to: CGPoint(x: 67.79, y: 17.47))
        UIColor.gray.setStroke()
        bezier50Path.lineWidth = 0.2
        bezier50Path.stroke()


        //// Bezier 51 Drawing
        let bezier51Path = UIBezierPath()
        bezier51Path.move(to: CGPoint(x: 54.55, y: 2.35))
        bezier51Path.addLine(to: CGPoint(x: 67.19, y: 2.41))
        UIColor.gray.setStroke()
        bezier51Path.lineWidth = 0.2
        bezier51Path.stroke()




        //// Text 14 Drawing
        let text14Rect = CGRect(x: 50.19, y: 25.18, width: 30.97, height: 9.4)
        let text14Style = NSMutableParagraphStyle()
        text14Style.alignment = .left
        let text14FontAttributes = [
            .font: UIFont(name: "Gilroy-Bold", size: 8)!,
            .foregroundColor: diffPerDayColor,
            .paragraphStyle: text14Style,
        ] as [NSAttributedString.Key: Any]

        let text14TextHeight: CGFloat = diffPerDay.boundingRect(with: CGSize(width: text14Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text14FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text14Rect)
        diffPerDay.draw(in: CGRect(x: text14Rect.minX, y: text14Rect.minY + (text14Rect.height - text14TextHeight) / 2, width: text14Rect.width, height: text14TextHeight), withAttributes: text14FontAttributes)
        context.restoreGState()


        //// Text 16 Drawing
        let text16Rect = CGRect(x: 0, y: 3.99, width: 48.26, height: 14.35)
        let text16TextContent = "Ð¿ÑÐ¾Ð³ÑÐµÑÑ:"
        let text16Style = NSMutableParagraphStyle()
        text16Style.alignment = .left
        let text16FontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 10)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text16Style,
        ] as [NSAttributedString.Key: Any]

        let text16TextHeight: CGFloat = text16TextContent.boundingRect(with: CGSize(width: text16Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text16FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text16Rect)
        text16TextContent.draw(in: CGRect(x: text16Rect.minX, y: text16Rect.minY + (text16Rect.height - text16TextHeight) / 2, width: text16Rect.width, height: text16TextHeight), withAttributes: text16FontAttributes)
        context.restoreGState()


        //// Text 17 Drawing
        let text17Rect = CGRect(x: 0, y: 21.18, width: 43.09, height: 14.35)
        let text17TextContent = "Ð·Ð° ÑÑÑÐºÐ¸:"
        let text17Style = NSMutableParagraphStyle()
        text17Style.alignment = .left
        let text17FontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 10)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text17Style,
        ] as [NSAttributedString.Key: Any]

        let text17TextHeight: CGFloat = text17TextContent.boundingRect(with: CGSize(width: text17Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text17FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text17Rect)
        text17TextContent.draw(in: CGRect(x: text17Rect.minX, y: text17Rect.minY + (text17Rect.height - text17TextHeight) / 2, width: text17Rect.width, height: text17TextHeight), withAttributes: text17FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawButtonGroupView(frame: CGRect = CGRect(x: 0, y: 0, width: 358, height: 282)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let buttonGroupColor = UIColor(red: 0.075, green: 0.031, blue: 0.356, alpha: 1.000)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black
        shadow.shadowOffset = CGSize(width: 0, height: 1)
        shadow.shadowBlurRadius = 2

        //// Rectangle 96 Drawing
        let rectangle96Path = UIBezierPath(rect: CGRect(x: frame.minX + fastFloor(frame.width * 0.00048 + 0.33) + 0.17, y: frame.minY + fastFloor(frame.height * 0.04965 + 0.5), width: fastFloor(frame.width * 1.00048 + 0.33) - fastFloor(frame.width * 0.00048 + 0.33), height: fastFloor(frame.height * 1.00000 + 0.5) - fastFloor(frame.height * 0.04965 + 0.5)))
        buttonGroupColor.setFill()
        rectangle96Path.fill()

        ////// Rectangle 96 Inner Shadow
        context.saveGState()
        context.clip(to: rectangle96Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let rectangle96OpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: rectangle96OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        rectangle96OpaqueShadow.setFill()
        rectangle96Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Group 17
        //// Rectangle 98 Drawing
        let rectangle98Path = UIBezierPath(rect: CGRect(x: frame.minX, y: frame.minY, width: 128, height: 28))
        buttonGroupColor.setFill()
        rectangle98Path.fill()

        ////// Rectangle 98 Inner Shadow
        context.saveGState()
        context.clip(to: rectangle98Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let rectangle98OpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: rectangle98OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        rectangle98OpaqueShadow.setFill()
        rectangle98Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// crb Drawing
        let crbRect = CGRect(x: frame.minX + 2.21, y: frame.minY + 0.25, width: 124.79, height: 26.9)
        let crbTextContent = "ÐÑÐ¾Ð³ÑÐµÑÑ:"
        let crbStyle = NSMutableParagraphStyle()
        crbStyle.alignment = .center
        let crbFontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: crbStyle,
        ] as [NSAttributedString.Key: Any]

        let crbTextHeight: CGFloat = crbTextContent.boundingRect(with: CGSize(width: crbRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: crbFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: crbRect)
        crbTextContent.draw(in: CGRect(x: crbRect.minX, y: crbRect.minY + (crbRect.height - crbTextHeight) / 2, width: crbRect.width, height: crbTextHeight), withAttributes: crbFontAttributes)
        context.restoreGState()


        //// Bezier 60 Drawing
        let bezier60Path = UIBezierPath()
        buttonGroupColor.setFill()
        bezier60Path.fill()

        ////// Bezier 60 Inner Shadow
        context.saveGState()
        context.clip(to: bezier60Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezier60OpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: bezier60OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        bezier60OpaqueShadow.setFill()
        bezier60Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()
    }

    @objc dynamic public class func drawProgressOkButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 80, height: 83), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 80, height: 83), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 80, y: resizedFrame.height / 83)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 80, resizedFrame.height / 83)


        //// Color Declarations
        let commonControlColor = UIColor(red: 0.139, green: 0.083, blue: 0.564, alpha: 1.000)
        let buttonGroupColor = UIColor(red: 0.075, green: 0.031, blue: 0.356, alpha: 1.000)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black
        shadow.shadowOffset = CGSize(width: 0, height: 1)
        shadow.shadowBlurRadius = 2

        //// Group 16
        //// Bezier 59 Drawing
        let bezier59Path = UIBezierPath()
        bezier59Path.move(to: CGPoint(x: 39.15, y: 78.46))
        bezier59Path.addLine(to: CGPoint(x: 39.04, y: 82.45))
        bezier59Path.addLine(to: CGPoint(x: 42.25, y: 82.46))
        bezier59Path.addLine(to: CGPoint(x: 42.22, y: 78.49))
        bezier59Path.addLine(to: CGPoint(x: 39.15, y: 78.46))
        bezier59Path.close()
        buttonGroupColor.setFill()
        bezier59Path.fill()


        //// Oval 11 Drawing
        let oval11Path = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 80, height: 80))
        buttonGroupColor.setFill()
        oval11Path.fill()

        ////// Oval 11 Inner Shadow
        context.saveGState()
        context.clip(to: oval11Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let oval11OpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: oval11OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        oval11OpaqueShadow.setFill()
        oval11Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Oval 10 Drawing
        let oval10Path = UIBezierPath(ovalIn: CGRect(x: 10.37, y: 10.35, width: 60, height: 60))
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        commonControlColor.setFill()
        oval10Path.fill()
        context.restoreGState()



        //// Text 19 Drawing
        let text19Rect = CGRect(x: 27.83, y: 30.97, width: 27.21, height: 21)
        let text19TextContent = "OK"
        let text19Style = NSMutableParagraphStyle()
        text19Style.alignment = .left
        let text19FontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text19Style,
        ] as [NSAttributedString.Key: Any]

        let text19TextHeight: CGFloat = text19TextContent.boundingRect(with: CGSize(width: text19Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text19FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text19Rect)
        text19TextContent.draw(in: CGRect(x: text19Rect.minX, y: text19Rect.minY + (text19Rect.height - text19TextHeight) / 2, width: text19Rect.width, height: text19TextHeight), withAttributes: text19FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawRadarChart_Screen47(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 325, height: 200), resizing: ResizingBehavior = .aspectFit, retension: CGFloat = 0.138, degree: CGFloat = 0.131, speed: CGFloat = 0.352) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 325, height: 200), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 325, y: resizedFrame.height / 200)


        //// Color Declarations
        let radarCircleColor1 = UIColor(red: 0.079, green: 0.138, blue: 0.479, alpha: 0.560)
        let radarCircleColor2 = UIColor(red: 0.020, green: 0.576, blue: 0.996, alpha: 0.850)
        let radarTriangleColor2 = UIColor(red: 0.020, green: 0.576, blue: 0.996, alpha: 0.280)
        let radarTriangleColor1 = UIColor(red: 0.000, green: 1.000, blue: 0.761, alpha: 1.000)
        let radarChartBkg = UIColor(red: 0.123, green: 0.118, blue: 0.271, alpha: 0.451)
        let strokeColor = UIColor(red: 0.000, green: 0.878, blue: 1.000, alpha: 1.000)
        let radarChartTextBkg = UIColor(red: 0.076, green: 0.095, blue: 0.403, alpha: 1.000)

        //// Gradient Declarations
        let radarCircleGradient = CGGradient(colorsSpace: nil, colors: [radarCircleColor1.cgColor, radarCircleColor2.cgColor] as CFArray, locations: [0.49, 0.92])!
        let radarTriangleGradient = CGGradient(colorsSpace: nil, colors: [radarTriangleColor2.cgColor, radarTriangleColor1.cgColor] as CFArray, locations: [0.18, 1])!

        //// Variable Declarations
        let retensionPoint1 = CGPoint(x: 12.86 * retension * 10 + 30 * (1 - retension * 10), y: 10.5 * retension * 10 + 0)
        let retensionPoint2 = CGPoint(x: -4.37 * (retension - 0.1) * 10 + 12.86 * (1 - (retension - 0.1) * 10), y: 21.07 * (retension - 0.1) * 10 + 10.5 * (1 - (retension - 0.1) * 10))
        let retensionPoint3 = CGPoint(x: -21.55 * (retension - 0.2) * 10 + -4.37 * (1 - (retension - 0.2) * 10), y: 31.65 * (retension - 0.2) * 10 + 21.07 * (1 - (retension - 0.2) * 10))
        let retensionPoint4 = CGPoint(x: -38.21 * (retension - 0.3) * 10 + -21.55 * (1 - (retension - 0.3) * 10), y: 42 * (retension - 0.3) * 10 + 31.65 * (1 - (retension - 0.3) * 10))
        let retensionOpacity1: CGFloat = retension <= 0.1 ? 1 : 0
        let retensionOpacity2: CGFloat = retension <= 0.1 ? 0 : (retension > 0.1 && retension <= 0.2 ? 1 : 0)
        let retensionOpacity3: CGFloat = retension <= 0.2 ? 0 : (retension > 0.2 && retension <= 0.3 ? 1 : 0)
        let retensionOpacity4: CGFloat = retension <= 0.3 ? 0 : 1
        let retensionPoint5 = CGPoint(x: -38.21, y: 42)
        let retensionExpr = retension <= 0.1 ? retensionPoint1 : (retension > 0.1 && retension <= 0.2 ? retensionPoint2 : (retension > 0.2 && retension <= 0.3 ? retensionPoint3 : (retension > 0.3 && retension <= 0.4 ? retensionPoint4 : retensionPoint5)))
        let degreePoint1 = CGPoint(x: 47 * degree * 10 + 30 * (1 - degree * 10), y: 11.08 * degree * 10 + 0)
        let degreePoint2 = CGPoint(x: 64.15 * (degree - 0.1) * 10 + 47.03 * (1 - (degree - 0.1) * 10), y: 22.4 * (degree - 0.1) * 10 + 11.1 * (1 - (degree - 0.1) * 10))
        let degreePoint3 = CGPoint(x: 81.32 * (degree - 0.2) * 10 + 64.15 * (1 - (degree - 0.2) * 10), y: 33.64 * (degree - 0.2) * 10 + 22.4 * (1 - (degree - 0.2) * 10))
        let degreePoint4 = CGPoint(x: 95.25 * (degree - 0.3) * 10 + 81.32 * (1 - (degree - 0.3) * 10), y: 42.78 * (degree - 0.3) * 10 + 33.64 * (1 - (degree - 0.3) * 10))
        let degreeOpacity1: CGFloat = degree <= 0.1 ? 1 : 0
        let degreeOpacity2: CGFloat = degree <= 0.1 ? 0 : (degree > 0.1 && degree <= 0.2 ? 1 : 0)
        let degreeOpacity3: CGFloat = degree <= 0.2 ? 0 : (degree > 0.2 && degree <= 0.3 ? 1 : 0)
        let degreeOpacity4: CGFloat = degree <= 0.3 ? 0 : 1
        let degreePoint5 = CGPoint(x: 95.25, y: 42.78)
        let degreeExpr = degree <= 0.1 ? degreePoint1 : (degree > 0.1 && degree <= 0.2 ? degreePoint2 : (degree > 0.2 && degree <= 0.3 ? degreePoint3 : (degree > 0.3 && degree <= 0.41 ? degreePoint4 : degreePoint5)))
        let speedExpr = speed <= 0.41 ? CGPoint(x: 186, y: 180 - 200 * speed) : CGPoint(x: 186, y: 100)
        let speedOpacity1: CGFloat = speed <= 0.1 ? 1 : 0
        let speedOpacity2: CGFloat = speed <= 0.1 ? 0 : (speed > 0.1 && speed <= 0.2 ? 1 : 0)
        let speedOpacity3: CGFloat = speed <= 0.2 ? 0 : (speed > 0.2 && speed <= 0.3 ? 1 : 0)
        let speedOpacity4: CGFloat = speed <= 0.3 ? 0 : 1

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 325, height: 200), cornerRadius: 4)
        radarChartBkg.setFill()
        rectanglePath.fill()
        UIColor.white.setStroke()
        rectanglePath.lineWidth = 0.3
        rectanglePath.stroke()


        //// Group 2
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 131.35, y: 83.97, width: 74, height: 74))
        context.saveGState()
        ovalPath.addClip()
        context.drawRadialGradient(radarCircleGradient,
            startCenter: CGPoint(x: 168.35, y: 120.97), startRadius: 0,
            endCenter: CGPoint(x: 168.35, y: 120.97), endRadius: 37,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 131.35, y: 83.97, width: 74, height: 74))
        strokeColor.setStroke()
        oval2Path.lineWidth = 0.5
        oval2Path.stroke()




        //// Group 3
        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 110.35, y: 57.97, width: 117, height: 124))
        context.saveGState()
        oval3Path.addClip()
        context.drawRadialGradient(radarCircleGradient,
            startCenter: CGPoint(x: 168.85, y: 119.97), startRadius: 0,
            endCenter: CGPoint(x: 168.85, y: 119.97), endRadius: 60.25,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 110.5, y: 58.12, width: 116.7, height: 123.7))
        strokeColor.setStroke()
        oval4Path.lineWidth = 0.5
        oval4Path.stroke()




        //// Group 4
        //// Oval 5 Drawing
        let oval5Path = UIBezierPath(ovalIn: CGRect(x: 88.35, y: 38.97, width: 158, height: 159))
        context.saveGState()
        oval5Path.addClip()
        context.drawRadialGradient(radarCircleGradient,
            startCenter: CGPoint(x: 167.35, y: 118.47), startRadius: 0,
            endCenter: CGPoint(x: 167.35, y: 118.47), endRadius: 78.93,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Oval 6 Drawing
        let oval6Path = UIBezierPath(ovalIn: CGRect(x: 88, y: 39.62, width: 158.7, height: 157.7))
        strokeColor.setStroke()
        oval6Path.lineWidth = 0.5
        oval6Path.stroke()




        //// Triangle Drawing
        context.saveGState()
        context.translateBy(x: 138.38, y: 119.97)

        let trianglePath = UIBezierPath()
        trianglePath.move(to: retensionExpr)
        trianglePath.addLine(to: CGPoint(x: (speedExpr.x - 155.999674479), y: (speedExpr.y - 180)))
        trianglePath.addLine(to: degreeExpr)
        trianglePath.addLine(to: retensionExpr)
        trianglePath.close()
        context.saveGState()
        trianglePath.addClip()
        context.drawRadialGradient(radarTriangleGradient,
            startCenter: CGPoint(x: 18.32, y: -19.15), startRadius: 0,
            endCenter: CGPoint(x: 18.32, y: -19.15), endRadius: 54.9,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// AxisZ Drawing
        let axisZPath = UIBezierPath()
        axisZPath.move(to: CGPoint(x: 168.46, y: 13.18))
        axisZPath.addCurve(to: CGPoint(x: 168.25, y: 13.18), controlPoint1: CGPoint(x: 168.4, y: 13.13), controlPoint2: CGPoint(x: 168.31, y: 13.13))
        axisZPath.addLine(to: CGPoint(x: 167.29, y: 13.98))
        axisZPath.addCurve(to: CGPoint(x: 167.29, y: 14.16), controlPoint1: CGPoint(x: 167.24, y: 14.03), controlPoint2: CGPoint(x: 167.24, y: 14.11))
        axisZPath.addCurve(to: CGPoint(x: 167.51, y: 14.16), controlPoint1: CGPoint(x: 167.35, y: 14.21), controlPoint2: CGPoint(x: 167.45, y: 14.21))
        axisZPath.addLine(to: CGPoint(x: 168.35, y: 13.45))
        axisZPath.addLine(to: CGPoint(x: 169.2, y: 14.16))
        axisZPath.addCurve(to: CGPoint(x: 169.42, y: 14.16), controlPoint1: CGPoint(x: 169.26, y: 14.21), controlPoint2: CGPoint(x: 169.36, y: 14.21))
        axisZPath.addCurve(to: CGPoint(x: 169.42, y: 13.98), controlPoint1: CGPoint(x: 169.47, y: 14.11), controlPoint2: CGPoint(x: 169.47, y: 14.03))
        axisZPath.addLine(to: CGPoint(x: 168.46, y: 13.18))
        axisZPath.close()
        axisZPath.move(to: CGPoint(x: 168.5, y: 119.97))
        axisZPath.addLine(to: CGPoint(x: 168.5, y: 13.27))
        axisZPath.addLine(to: CGPoint(x: 168.2, y: 13.27))
        axisZPath.addLine(to: CGPoint(x: 168.2, y: 119.97))
        axisZPath.addLine(to: CGPoint(x: 168.5, y: 119.97))
        axisZPath.close()
        UIColor.white.setFill()
        axisZPath.fill()


        //// AxisX Drawing
        let axisXPath = UIBezierPath()
        axisXPath.move(to: CGPoint(x: 252.78, y: 175.37))
        axisXPath.addCurve(to: CGPoint(x: 252.9, y: 175.19), controlPoint1: CGPoint(x: 252.87, y: 175.35), controlPoint2: CGPoint(x: 252.92, y: 175.28))
        axisXPath.addLine(to: CGPoint(x: 252.63, y: 173.87))
        axisXPath.addCurve(to: CGPoint(x: 252.45, y: 173.76), controlPoint1: CGPoint(x: 252.61, y: 173.79), controlPoint2: CGPoint(x: 252.53, y: 173.74))
        axisXPath.addCurve(to: CGPoint(x: 252.33, y: 173.93), controlPoint1: CGPoint(x: 252.37, y: 173.77), controlPoint2: CGPoint(x: 252.32, y: 173.85))
        axisXPath.addLine(to: CGPoint(x: 252.58, y: 175.11))
        axisXPath.addLine(to: CGPoint(x: 251.4, y: 175.35))
        axisXPath.addCurve(to: CGPoint(x: 251.28, y: 175.53), controlPoint1: CGPoint(x: 251.32, y: 175.37), controlPoint2: CGPoint(x: 251.27, y: 175.45))
        axisXPath.addCurve(to: CGPoint(x: 251.46, y: 175.65), controlPoint1: CGPoint(x: 251.3, y: 175.61), controlPoint2: CGPoint(x: 251.38, y: 175.66))
        axisXPath.addLine(to: CGPoint(x: 252.78, y: 175.37))
        axisXPath.close()
        axisXPath.move(to: CGPoint(x: 168.27, y: 120.1))
        axisXPath.addLine(to: CGPoint(x: 252.67, y: 175.35))
        axisXPath.addLine(to: CGPoint(x: 252.84, y: 175.1))
        axisXPath.addLine(to: CGPoint(x: 168.44, y: 119.85))
        axisXPath.addLine(to: CGPoint(x: 168.27, y: 120.1))
        axisXPath.close()
        UIColor.white.setFill()
        axisXPath.fill()


        //// AxisY Drawing
        let axisYPath = UIBezierPath()
        axisYPath.move(to: CGPoint(x: 79.87, y: 174.11))
        axisYPath.addCurve(to: CGPoint(x: 79.98, y: 174.29), controlPoint1: CGPoint(x: 79.85, y: 174.19), controlPoint2: CGPoint(x: 79.9, y: 174.27))
        axisYPath.addLine(to: CGPoint(x: 81.29, y: 174.61))
        axisYPath.addCurve(to: CGPoint(x: 81.47, y: 174.5), controlPoint1: CGPoint(x: 81.37, y: 174.63), controlPoint2: CGPoint(x: 81.45, y: 174.58))
        axisYPath.addCurve(to: CGPoint(x: 81.36, y: 174.31), controlPoint1: CGPoint(x: 81.49, y: 174.42), controlPoint2: CGPoint(x: 81.44, y: 174.33))
        axisYPath.addLine(to: CGPoint(x: 80.19, y: 174.04))
        axisYPath.addLine(to: CGPoint(x: 80.47, y: 172.87))
        axisYPath.addCurve(to: CGPoint(x: 80.36, y: 172.69), controlPoint1: CGPoint(x: 80.49, y: 172.79), controlPoint2: CGPoint(x: 80.44, y: 172.71))
        axisYPath.addCurve(to: CGPoint(x: 80.18, y: 172.8), controlPoint1: CGPoint(x: 80.28, y: 172.67), controlPoint2: CGPoint(x: 80.2, y: 172.72))
        axisYPath.addLine(to: CGPoint(x: 79.87, y: 174.11))
        axisYPath.close()
        axisYPath.move(to: CGPoint(x: 168.28, y: 119.84))
        axisYPath.addLine(to: CGPoint(x: 79.94, y: 174.02))
        axisYPath.addLine(to: CGPoint(x: 80.09, y: 174.27))
        axisYPath.addLine(to: CGPoint(x: 168.43, y: 120.1))
        axisYPath.addLine(to: CGPoint(x: 168.28, y: 119.84))
        axisYPath.close()
        UIColor.white.setFill()
        axisYPath.fill()


        //// SpeedUndeline4 Drawing
        context.saveGState()
        context.setAlpha(speedOpacity4)

        let speedUndeline4Path = UIBezierPath()
        speedUndeline4Path.move(to: CGPoint(x: 168.37, y: 39.14))
        speedUndeline4Path.addLine(to: CGPoint(x: 174.22, y: 32.14))
        speedUndeline4Path.addLine(to: CGPoint(x: 238.74, y: 32.15))
        UIColor.white.setStroke()
        speedUndeline4Path.lineWidth = 0.3
        speedUndeline4Path.miterLimit = 4
        speedUndeline4Path.stroke()

        context.restoreGState()


        //// SpeedUndeline3 Drawing
        context.saveGState()
        context.setAlpha(speedOpacity3)

        let speedUndeline3Path = UIBezierPath()
        speedUndeline3Path.move(to: CGPoint(x: 168.38, y: 59.9))
        speedUndeline3Path.addLine(to: CGPoint(x: 176.9, y: 52.9))
        speedUndeline3Path.addLine(to: CGPoint(x: 256.48, y: 52.9))
        UIColor.white.setStroke()
        speedUndeline3Path.lineWidth = 0.3
        speedUndeline3Path.miterLimit = 4
        speedUndeline3Path.stroke()

        context.restoreGState()


        //// SpeedUndeline2 Drawing
        context.saveGState()
        context.setAlpha(speedOpacity2)

        let speedUndeline2Path = UIBezierPath()
        speedUndeline2Path.move(to: CGPoint(x: 168.38, y: 80.16))
        speedUndeline2Path.addLine(to: CGPoint(x: 176.88, y: 66.16))
        speedUndeline2Path.addLine(to: CGPoint(x: 225.88, y: 66.16))
        UIColor.white.setStroke()
        speedUndeline2Path.lineWidth = 0.3
        speedUndeline2Path.miterLimit = 4
        speedUndeline2Path.stroke()

        context.restoreGState()


        //// SpeedUndeline1 Drawing
        context.saveGState()
        context.setAlpha(speedOpacity1)

        let speedUndeline1Path = UIBezierPath()
        speedUndeline1Path.move(to: CGPoint(x: 168.42, y: 100))
        speedUndeline1Path.addLine(to: CGPoint(x: 176.92, y: 93))
        speedUndeline1Path.addLine(to: CGPoint(x: 225.92, y: 93))
        UIColor.white.setStroke()
        speedUndeline1Path.lineWidth = 0.3
        speedUndeline1Path.miterLimit = 4
        speedUndeline1Path.stroke()

        context.restoreGState()


        //// SpeedText4 Drawing
        context.saveGState()
        context.setAlpha(speedOpacity4)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let speedText4Rect = CGRect(x: 176, y: 19, width: 62, height: 12)
        let speedText4Path = UIBezierPath(roundedRect: speedText4Rect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        speedText4Path.fill()
        let speedText4TextContent = "ÐºÐ¾ÑÐ¾Ð»Ñ"
        let speedText4Style = NSMutableParagraphStyle()
        speedText4Style.alignment = .center
        let speedText4FontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 12)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: speedText4Style,
        ] as [NSAttributedString.Key: Any]

        let speedText4TextHeight: CGFloat = speedText4TextContent.boundingRect(with: CGSize(width: speedText4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: speedText4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: speedText4Rect)
        speedText4TextContent.draw(in: CGRect(x: speedText4Rect.minX, y: speedText4Rect.minY + (speedText4Rect.height - speedText4TextHeight) / 2, width: speedText4Rect.width, height: speedText4TextHeight), withAttributes: speedText4FontAttributes)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// SpeedText3 Drawing
        context.saveGState()
        context.setAlpha(speedOpacity3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let speedText3Rect = CGRect(x: 176.42, y: 41.18, width: 85.26, height: 10.84)
        let speedText3Path = UIBezierPath(roundedRect: speedText3Rect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        speedText3Path.fill()
        let speedText3TextContent = "ÑÐµÐ°ÐºÑÐ¸Ð²Ð½Ð¾ÑÑÑ"
        let speedText3Style = NSMutableParagraphStyle()
        speedText3Style.alignment = .center
        let speedText3FontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 12)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: speedText3Style,
        ] as [NSAttributedString.Key: Any]

        let speedText3TextHeight: CGFloat = speedText3TextContent.boundingRect(with: CGSize(width: speedText3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: speedText3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: speedText3Rect)
        speedText3TextContent.draw(in: CGRect(x: speedText3Rect.minX, y: speedText3Rect.minY + (speedText3Rect.height - speedText3TextHeight) / 2, width: speedText3Rect.width, height: speedText3TextHeight), withAttributes: speedText3FontAttributes)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// SpeedText2 Drawing
        context.saveGState()
        context.setAlpha(speedOpacity2)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let speedText2Rect = CGRect(x: 175.34, y: 53.45, width: 102.71, height: 11.76)
        let speedText2Path = UIBezierPath(roundedRect: speedText2Rect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        speedText2Path.fill()
        let speedText2TextContent = "ÑÑÑÐµÐ¼Ð¸ÑÐµÐ»ÑÐ½Ð¾ÑÑÑ"
        let speedText2Style = NSMutableParagraphStyle()
        speedText2Style.alignment = .center
        let speedText2FontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 12)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: speedText2Style,
        ] as [NSAttributedString.Key: Any]

        let speedText2TextHeight: CGFloat = speedText2TextContent.boundingRect(with: CGSize(width: speedText2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: speedText2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: speedText2Rect)
        speedText2TextContent.draw(in: CGRect(x: speedText2Rect.minX, y: speedText2Rect.minY + (speedText2Rect.height - speedText2TextHeight) / 2, width: speedText2Rect.width, height: speedText2TextHeight), withAttributes: speedText2FontAttributes)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// SpeedText1 Drawing
        context.saveGState()
        context.setAlpha(speedOpacity1)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let speedText1Rect = CGRect(x: 174.89, y: 79.9, width: 59.1, height: 11.94)
        let speedText1Path = UIBezierPath(roundedRect: speedText1Rect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        speedText1Path.fill()
        let speedText1TextContent = "ÑÐµÐ·Ð²Ð¾ÑÑÑ"
        let speedText1Style = NSMutableParagraphStyle()
        speedText1Style.alignment = .center
        let speedText1FontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 12)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: speedText1Style,
        ] as [NSAttributedString.Key: Any]

        let speedText1TextHeight: CGFloat = speedText1TextContent.boundingRect(with: CGSize(width: speedText1Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: speedText1FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: speedText1Rect)
        speedText1TextContent.draw(in: CGRect(x: speedText1Rect.minX, y: speedText1Rect.minY + (speedText1Rect.height - speedText1TextHeight) / 2, width: speedText1Rect.width, height: speedText1TextHeight), withAttributes: speedText1FontAttributes)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// RetensionUndeline4 Drawing
        context.saveGState()
        context.setAlpha(retensionOpacity4)

        let retensionUndeline4Path = UIBezierPath()
        retensionUndeline4Path.move(to: CGPoint(x: 100.13, y: 161.27))
        retensionUndeline4Path.addLine(to: CGPoint(x: 90.63, y: 154.27))
        retensionUndeline4Path.addLine(to: CGPoint(x: 11.82, y: 154.27))
        UIColor.white.setStroke()
        retensionUndeline4Path.lineWidth = 0.3
        retensionUndeline4Path.miterLimit = 4
        retensionUndeline4Path.stroke()

        context.restoreGState()


        //// RetensionUndeline3 Drawing
        context.saveGState()
        context.setAlpha(retensionOpacity3)

        let retensionUndeline3Path = UIBezierPath()
        retensionUndeline3Path.move(to: CGPoint(x: 116.93, y: 151.15))
        retensionUndeline3Path.addLine(to: CGPoint(x: 107.43, y: 144.15))
        retensionUndeline3Path.addLine(to: CGPoint(x: 33.5, y: 144.15))
        UIColor.white.setStroke()
        retensionUndeline3Path.lineWidth = 0.3
        retensionUndeline3Path.miterLimit = 4
        retensionUndeline3Path.stroke()

        context.restoreGState()


        //// RetensionUndeline2 Drawing
        context.saveGState()
        context.setAlpha(retensionOpacity2)

        let retensionUndeline2Path = UIBezierPath()
        retensionUndeline2Path.move(to: CGPoint(x: 134.34, y: 140.54))
        retensionUndeline2Path.addLine(to: CGPoint(x: 124.84, y: 133.54))
        retensionUndeline2Path.addLine(to: CGPoint(x: 19.85, y: 133.54))
        UIColor.white.setStroke()
        retensionUndeline2Path.lineWidth = 0.3
        retensionUndeline2Path.miterLimit = 4
        retensionUndeline2Path.stroke()

        context.restoreGState()


        //// RetensionUndeline1 Drawing
        context.saveGState()
        context.setAlpha(retensionOpacity1)

        let retensionUndeline1Path = UIBezierPath()
        retensionUndeline1Path.move(to: CGPoint(x: 151.13, y: 130.32))
        retensionUndeline1Path.addLine(to: CGPoint(x: 141.63, y: 123.32))
        retensionUndeline1Path.addLine(to: CGPoint(x: 62.53, y: 123.32))
        UIColor.white.setStroke()
        retensionUndeline1Path.lineWidth = 0.3
        retensionUndeline1Path.miterLimit = 4
        retensionUndeline1Path.stroke()

        context.restoreGState()


        //// RetensionText4 Drawing
        context.saveGState()
        context.setAlpha(retensionOpacity4)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let retensionText4Rect = CGRect(x: 8, y: 141, width: 84, height: 12)
        let retensionText4Path = UIBezierPath(roundedRect: retensionText4Rect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        retensionText4Path.fill()
        let retensionText4TextContent = "Ð·Ð°ÐºÐ°Ð»ÑÐ½Ð½Ð¾ÑÑÑ"
        let retensionText4Style = NSMutableParagraphStyle()
        retensionText4Style.alignment = .center
        let retensionText4FontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 12)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: retensionText4Style,
        ] as [NSAttributedString.Key: Any]

        let retensionText4TextHeight: CGFloat = retensionText4TextContent.boundingRect(with: CGSize(width: retensionText4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: retensionText4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: retensionText4Rect)
        retensionText4TextContent.draw(in: CGRect(x: retensionText4Rect.minX, y: retensionText4Rect.minY + (retensionText4Rect.height - retensionText4TextHeight) / 2, width: retensionText4Rect.width, height: retensionText4TextHeight), withAttributes: retensionText4FontAttributes)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// RetensionText3 Drawing
        context.saveGState()
        context.setAlpha(retensionOpacity3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let retensionText3Rect = CGRect(x: 35, y: 131, width: 80, height: 12)
        let retensionText3Path = UIBezierPath(roundedRect: retensionText3Rect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        retensionText3Path.fill()
        let retensionText3TextContent = "Ð¿Ð¾ÑÑÐ¾ÑÐ½ÑÑÐ²Ð¾"
        let retensionText3Style = NSMutableParagraphStyle()
        retensionText3Style.alignment = .center
        let retensionText3FontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 12)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: retensionText3Style,
        ] as [NSAttributedString.Key: Any]

        let retensionText3TextHeight: CGFloat = retensionText3TextContent.boundingRect(with: CGSize(width: retensionText3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: retensionText3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: retensionText3Rect)
        retensionText3TextContent.draw(in: CGRect(x: retensionText3Rect.minX, y: retensionText3Rect.minY + (retensionText3Rect.height - retensionText3TextHeight) / 2, width: retensionText3Rect.width, height: retensionText3TextHeight), withAttributes: retensionText3FontAttributes)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// RetensionText2 Drawing
        context.saveGState()
        context.setAlpha(retensionOpacity2)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let retensionText2Rect = CGRect(x: 20, y: 120, width: 112, height: 12)
        let retensionText2Path = UIBezierPath(roundedRect: retensionText2Rect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        retensionText2Path.fill()
        let retensionText2TextContent = "Ð¼Ð¾ÑÐ¸Ð²Ð¸ÑÐ¾Ð²Ð°Ð½Ð½Ð¾ÑÑÑ"
        let retensionText2Style = NSMutableParagraphStyle()
        retensionText2Style.alignment = .center
        let retensionText2FontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 12)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: retensionText2Style,
        ] as [NSAttributedString.Key: Any]

        let retensionText2TextHeight: CGFloat = retensionText2TextContent.boundingRect(with: CGSize(width: retensionText2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: retensionText2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: retensionText2Rect)
        retensionText2TextContent.draw(in: CGRect(x: retensionText2Rect.minX, y: retensionText2Rect.minY + (retensionText2Rect.height - retensionText2TextHeight) / 2, width: retensionText2Rect.width, height: retensionText2TextHeight), withAttributes: retensionText2FontAttributes)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// RetensionText1 Drawing
        context.saveGState()
        context.setAlpha(retensionOpacity1)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let retensionText1Rect = CGRect(x: 58, y: 110, width: 90, height: 12)
        let retensionText1Path = UIBezierPath(roundedRect: retensionText1Rect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        retensionText1Path.fill()
        let retensionText1TextContent = "ÑÐ°Ð³ Ð·Ð° ÑÐ°Ð³Ð¾Ð¼"
        let retensionText1Style = NSMutableParagraphStyle()
        retensionText1Style.alignment = .center
        let retensionText1FontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 12)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: retensionText1Style,
        ] as [NSAttributedString.Key: Any]

        let retensionText1TextHeight: CGFloat = retensionText1TextContent.boundingRect(with: CGSize(width: retensionText1Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: retensionText1FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: retensionText1Rect)
        retensionText1TextContent.draw(in: CGRect(x: retensionText1Rect.minX, y: retensionText1Rect.minY + (retensionText1Rect.height - retensionText1TextHeight) / 2, width: retensionText1Rect.width, height: retensionText1TextHeight), withAttributes: retensionText1FontAttributes)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// DegreeUndeline4 Drawing
        context.saveGState()
        context.setAlpha(degreeOpacity4)

        let degreeUndeline4Path = UIBezierPath()
        degreeUndeline4Path.move(to: CGPoint(x: 233.38, y: 161.97))
        degreeUndeline4Path.addLine(to: CGPoint(x: 246.98, y: 154.97))
        degreeUndeline4Path.addLine(to: CGPoint(x: 288.38, y: 154.97))
        UIColor.white.setStroke()
        degreeUndeline4Path.lineWidth = 0.3
        degreeUndeline4Path.miterLimit = 4
        degreeUndeline4Path.stroke()

        context.restoreGState()


        //// DegreeUndeline3 Drawing
        context.saveGState()
        context.setAlpha(degreeOpacity3)

        let degreeUndeline3Path = UIBezierPath()
        degreeUndeline3Path.move(to: CGPoint(x: 219.6, y: 153.7))
        degreeUndeline3Path.addLine(to: CGPoint(x: 228.1, y: 146.7))
        degreeUndeline3Path.addLine(to: CGPoint(x: 269.2, y: 146.7))
        UIColor.white.setStroke()
        degreeUndeline3Path.lineWidth = 0.3
        degreeUndeline3Path.miterLimit = 4
        degreeUndeline3Path.stroke()

        context.restoreGState()


        //// DegreeUndeline2 Drawing
        context.saveGState()
        context.setAlpha(degreeOpacity2)

        let degreeUndeline2Path = UIBezierPath()
        degreeUndeline2Path.move(to: CGPoint(x: 202.42, y: 141.75))
        degreeUndeline2Path.addLine(to: CGPoint(x: 210.95, y: 134.75))
        degreeUndeline2Path.addLine(to: CGPoint(x: 249.27, y: 134.75))
        UIColor.white.setStroke()
        degreeUndeline2Path.lineWidth = 0.3
        degreeUndeline2Path.miterLimit = 4
        degreeUndeline2Path.stroke()

        context.restoreGState()


        //// DegreeUndeline1 Drawing
        context.saveGState()
        context.setAlpha(degreeOpacity1)

        let degreeUndeline1Path = UIBezierPath()
        degreeUndeline1Path.move(to: CGPoint(x: 185.29, y: 131.22))
        degreeUndeline1Path.addLine(to: CGPoint(x: 193.79, y: 124.22))
        degreeUndeline1Path.addLine(to: CGPoint(x: 236.18, y: 124.22))
        UIColor.white.setStroke()
        degreeUndeline1Path.lineWidth = 0.3
        degreeUndeline1Path.miterLimit = 4
        degreeUndeline1Path.stroke()

        context.restoreGState()


        //// DegreeText4 Drawing
        context.saveGState()
        context.setAlpha(degreeOpacity4)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let degreeText4Rect = CGRect(x: 246, y: 142, width: 50, height: 12)
        let degreeText4Path = UIBezierPath(roundedRect: degreeText4Rect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        degreeText4Path.fill()
        let degreeText4TextContent = "Ð¼Ð°ÑÑÐµÑ"
        let degreeText4Style = NSMutableParagraphStyle()
        degreeText4Style.alignment = .center
        let degreeText4FontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 12)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: degreeText4Style,
        ] as [NSAttributedString.Key: Any]

        let degreeText4TextHeight: CGFloat = degreeText4TextContent.boundingRect(with: CGSize(width: degreeText4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: degreeText4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: degreeText4Rect)
        degreeText4TextContent.draw(in: CGRect(x: degreeText4Rect.minX, y: degreeText4Rect.minY + (degreeText4Rect.height - degreeText4TextHeight) / 2, width: degreeText4Rect.width, height: degreeText4TextHeight), withAttributes: degreeText4FontAttributes)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// DegreeText3 Drawing
        context.saveGState()
        context.setAlpha(degreeOpacity3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let degreeText3Rect = CGRect(x: 228, y: 134, width: 50, height: 12)
        let degreeText3Path = UIBezierPath(roundedRect: degreeText3Rect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        degreeText3Path.fill()
        let degreeText3TextContent = "ÑÑÑÐ´Ð¸Ñ"
        let degreeText3Style = NSMutableParagraphStyle()
        degreeText3Style.alignment = .center
        let degreeText3FontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 12)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: degreeText3Style,
        ] as [NSAttributedString.Key: Any]

        let degreeText3TextHeight: CGFloat = degreeText3TextContent.boundingRect(with: CGSize(width: degreeText3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: degreeText3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: degreeText3Rect)
        degreeText3TextContent.draw(in: CGRect(x: degreeText3Rect.minX, y: degreeText3Rect.minY + (degreeText3Rect.height - degreeText3TextHeight) / 2, width: degreeText3Rect.width, height: degreeText3TextHeight), withAttributes: degreeText3FontAttributes)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// DegreeText2 Drawing
        context.saveGState()
        context.setAlpha(degreeOpacity2)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let degreeText2Rect = CGRect(x: 210, y: 122, width: 52, height: 12)
        let degreeText2Path = UIBezierPath(roundedRect: degreeText2Rect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        degreeText2Path.fill()
        let degreeText2TextContent = "Ð·Ð½Ð°ÑÐ¾Ðº"
        let degreeText2Style = NSMutableParagraphStyle()
        degreeText2Style.alignment = .center
        let degreeText2FontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 12)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: degreeText2Style,
        ] as [NSAttributedString.Key: Any]

        let degreeText2TextHeight: CGFloat = degreeText2TextContent.boundingRect(with: CGSize(width: degreeText2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: degreeText2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: degreeText2Rect)
        degreeText2TextContent.draw(in: CGRect(x: degreeText2Rect.minX, y: degreeText2Rect.minY + (degreeText2Rect.height - degreeText2TextHeight) / 2, width: degreeText2Rect.width, height: degreeText2TextHeight), withAttributes: degreeText2FontAttributes)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// DegreeText1 Drawing
        context.saveGState()
        context.setAlpha(degreeOpacity1)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let degreeText1Rect = CGRect(x: 192, y: 111, width: 52, height: 12)
        let degreeText1Path = UIBezierPath(roundedRect: degreeText1Rect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        degreeText1Path.fill()
        let degreeText1TextContent = "Ð´Ð¾ÐºÐ°"
        let degreeText1Style = NSMutableParagraphStyle()
        degreeText1Style.alignment = .center
        let degreeText1FontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 12)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: degreeText1Style,
        ] as [NSAttributedString.Key: Any]

        let degreeText1TextHeight: CGFloat = degreeText1TextContent.boundingRect(with: CGSize(width: degreeText1Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: degreeText1FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: degreeText1Rect)
        degreeText1TextContent.draw(in: CGRect(x: degreeText1Rect.minX, y: degreeText1Rect.minY + (degreeText1Rect.height - degreeText1TextHeight) / 2, width: degreeText1Rect.width, height: degreeText1TextHeight), withAttributes: degreeText1FontAttributes)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// SpeedTitle Drawing
        let speedTitleRect = CGRect(x: 140, y: 0.2, width: 58, height: 12)
        let speedTitlePath = UIBezierPath(roundedRect: speedTitleRect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        speedTitlePath.fill()
        let speedTitleTextContent = "ÑÐºÐ¾ÑÐ¾ÑÑÑ"
        let speedTitleStyle = NSMutableParagraphStyle()
        speedTitleStyle.alignment = .center
        let speedTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 11)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: speedTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let speedTitleTextHeight: CGFloat = speedTitleTextContent.boundingRect(with: CGSize(width: speedTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: speedTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: speedTitleRect)
        speedTitleTextContent.draw(in: CGRect(x: speedTitleRect.minX, y: speedTitleRect.minY + (speedTitleRect.height - speedTitleTextHeight) / 2, width: speedTitleRect.width, height: speedTitleTextHeight), withAttributes: speedTitleFontAttributes)
        context.restoreGState()


        //// DegreeTitle Drawing
        let degreeTitleRect = CGRect(x: 203, y: 177, width: 52, height: 12)
        let degreeTitlePath = UIBezierPath(roundedRect: degreeTitleRect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        degreeTitlePath.fill()
        let degreeTitleTextContent = "ÑÑÐµÐ¿ÐµÐ½Ñ"
        let degreeTitleStyle = NSMutableParagraphStyle()
        degreeTitleStyle.alignment = .center
        let degreeTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 11)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: degreeTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let degreeTitleTextHeight: CGFloat = degreeTitleTextContent.boundingRect(with: CGSize(width: degreeTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: degreeTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: degreeTitleRect)
        degreeTitleTextContent.draw(in: CGRect(x: degreeTitleRect.minX, y: degreeTitleRect.minY + (degreeTitleRect.height - degreeTitleTextHeight) / 2, width: degreeTitleRect.width, height: degreeTitleTextHeight), withAttributes: degreeTitleFontAttributes)
        context.restoreGState()


        //// DegreeTitle 2 Drawing
        let degreeTitle2Rect = CGRect(x: 22, y: 176, width: 88, height: 12)
        let degreeTitle2Path = UIBezierPath(roundedRect: degreeTitle2Rect, cornerRadius: 4)
        radarChartTextBkg.setFill()
        degreeTitle2Path.fill()
        let degreeTitle2TextContent = "Ð²Ð¾Ð²Ð»ÐµÑÐµÐ½Ð½Ð¾ÑÑÑ"
        let degreeTitle2Style = NSMutableParagraphStyle()
        degreeTitle2Style.alignment = .center
        let degreeTitle2FontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 11)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: degreeTitle2Style,
        ] as [NSAttributedString.Key: Any]

        let degreeTitle2TextHeight: CGFloat = degreeTitle2TextContent.boundingRect(with: CGSize(width: degreeTitle2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: degreeTitle2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: degreeTitle2Rect)
        degreeTitle2TextContent.draw(in: CGRect(x: degreeTitle2Rect.minX, y: degreeTitle2Rect.minY + (degreeTitle2Rect.height - degreeTitle2TextHeight) / 2, width: degreeTitle2Rect.width, height: degreeTitle2TextHeight), withAttributes: degreeTitle2FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawProgressPressedOkButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 80, height: 83), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 80, height: 83), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 80, y: resizedFrame.height / 83)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 80, resizedFrame.height / 83)


        //// Color Declarations
        let groupButtonColor = UIColor(red: 0.037, green: 0.036, blue: 0.420, alpha: 1.000)
        let color3 = UIColor(red: 0.139, green: 0.083, blue: 0.564, alpha: 1.000)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black
        shadow.shadowOffset = CGSize(width: 0, height: 1)
        shadow.shadowBlurRadius = 2

        //// Ok Button
        //// Bezier 59 Drawing
        let bezier59Path = UIBezierPath()
        bezier59Path.move(to: CGPoint(x: 39.12, y: 78.43))
        bezier59Path.addLine(to: CGPoint(x: 39.04, y: 81.92))
        bezier59Path.addLine(to: CGPoint(x: 41.44, y: 81.92))
        bezier59Path.addLine(to: CGPoint(x: 41.42, y: 78.46))
        bezier59Path.addLine(to: CGPoint(x: 39.12, y: 78.43))
        bezier59Path.close()
        groupButtonColor.setFill()
        bezier59Path.fill()


        //// Oval 11 Drawing
        let oval11Path = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 80, height: 80))
        groupButtonColor.setFill()
        oval11Path.fill()

        ////// Oval 11 Inner Shadow
        context.saveGState()
        context.clip(to: oval11Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let oval11OpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: oval11OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        oval11OpaqueShadow.setFill()
        oval11Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Oval 10 Drawing
        let oval10Path = UIBezierPath(ovalIn: CGRect(x: 10.37, y: 10.35, width: 60, height: 60))
        color3.setFill()
        oval10Path.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 9.91, y: 9.78, width: 61.2, height: 60.95))
        UIColor.red.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()




        //// Text Drawing
        let textRect = CGRect(x: 27.85, y: 30.97, width: 27.21, height: 21)
        let textTextContent = "OK"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            .font: UIFont(name: "Gilroy-Light", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawExtendedBarChart_414(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 410, height: 230), resizing: ResizingBehavior = .aspectFit, column1: CGFloat = 83, column2: CGFloat = 91, column3: CGFloat = 86, column4: CGFloat = 81, column5: CGFloat = 43, column6: CGFloat = 0, column7: CGFloat = 0, column8: CGFloat = 0, column9: CGFloat = 0, column10: CGFloat = 0, column11: CGFloat = 0, column12: CGFloat = 0, column13: CGFloat = 0, column14: CGFloat = 0, column15: CGFloat = 0, column16: CGFloat = 0, column17: CGFloat = 0, column18: CGFloat = 0, column19: CGFloat = 0, column20: CGFloat = 0, column21: CGFloat = 0, column22: CGFloat = 0, column23: CGFloat = 0, column24: CGFloat = 0, column25: CGFloat = 0, column26: CGFloat = 0, column27: CGFloat = 0, column28: CGFloat = 0, column29: CGFloat = 0, column30: CGFloat = 0, barChartLineY: CGFloat = 62, barChartLineX: CGFloat = 1, barChartLineText: String = "100", barChartAxisTitle: String = "ÐºÐ¾Ð»-Ð²Ð¾ Ð¸Ð³ÑÐ¾Ð²ÑÑ Ð¿Ð°ÑÑÐ¸Ð¹", barChartAxisText50: String = "5", barChartAxisText100: String = "10") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 410, height: 230), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 410, y: resizedFrame.height / 230)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 410, resizedFrame.height / 230)


        //// Color Declarations
        let strokeColor = UIColor(red: 0.000, green: 0.878, blue: 1.000, alpha: 1.000)
        let barChartBkgColor = UIColor(red: 0.177, green: 0.065, blue: 0.539, alpha: 1.000)
        let barColumnColor3 = UIColor(red: 0.000, green: 1.000, blue: 0.984, alpha: 1.000)
        let barColumnColor2 = UIColor(red: 0.506, green: 0.917, blue: 0.948, alpha: 1.000)
        let barColumnColor1 = UIColor(red: 0.000, green: 0.257, blue: 1.000, alpha: 1.000)
        let avgLineColor1 = UIColor(red: 1.000, green: 0.000, blue: 0.914, alpha: 1.000)
        let avgLineColor2 = UIColor(red: 0.538, green: 0.000, blue: 1.000, alpha: 1.000)

        //// Gradient Declarations
        let avgLineGradient = CGGradient(colorsSpace: nil, colors: [avgLineColor1.cgColor, avgLineColor2.cgColor] as CFArray, locations: [0.01, 1])!
        let barColumnGradient2 = CGGradient(colorsSpace: nil, colors: [barColumnColor2.cgColor, barColumnColor2.blended(withFraction: 0.5, of: barColumnColor1).cgColor, barColumnColor1.cgColor, barColumnColor1.blended(withFraction: 0.5, of: barColumnColor3).cgColor, barColumnColor3.cgColor] as CFArray, locations: [0, 0, 0.96, 0.96, 1])!

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black
        shadow.shadowOffset = CGSize(width: 0, height: 1)
        shadow.shadowBlurRadius = 2

        //// Variable Declarations
        let barChartExpr2: CGFloat = 205 - barChartLineY
        let barChartLineExpr: CGFloat = 410 * (1 - barChartLineX) + 155 * barChartLineX

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 410, height: 230), cornerRadius: 4)
        barChartBkgColor.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        context.saveGState()
        context.clip(to: rectanglePath.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let rectangleOpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: rectangleOpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Group 2
        //// Group
        //// Group 3
        //// Rectangle 1 Drawing
        context.saveGState()
        context.translateBy(x: 50.16, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle1Rect = CGRect(x: 0, y: 0, width: 11.91, height: column1)
        let rectangle1Path = UIBezierPath(roundedRect: rectangle1Rect, byRoundingCorners: .bottomRight, cornerRadii: CGSize(width: 4, height: 4))
        rectangle1Path.close()
        context.saveGState()
        rectangle1Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle1Rect.midX, y: rectangle1Rect.minY),
            end: CGPoint(x: rectangle1Rect.midX, y: rectangle1Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 62.04, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle2Rect = CGRect(x: 0, y: 0, width: 11.91, height: column2)
        let rectangle2Path = UIBezierPath(rect: rectangle2Rect)
        context.saveGState()
        rectangle2Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle2Rect.midX, y: rectangle2Rect.minY),
            end: CGPoint(x: rectangle2Rect.midX, y: rectangle2Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 3 Drawing
        context.saveGState()
        context.translateBy(x: 73.95, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle3Rect = CGRect(x: 0, y: 0, width: 11.91, height: column3)
        let rectangle3Path = UIBezierPath(rect: rectangle3Rect)
        context.saveGState()
        rectangle3Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle3Rect.midX, y: rectangle3Rect.minY),
            end: CGPoint(x: rectangle3Rect.midX, y: rectangle3Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 4 Drawing
        context.saveGState()
        context.translateBy(x: 85.86, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle4Rect = CGRect(x: 0, y: 0, width: 11.91, height: column4)
        let rectangle4Path = UIBezierPath(rect: rectangle4Rect)
        context.saveGState()
        rectangle4Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle4Rect.midX, y: rectangle4Rect.minY),
            end: CGPoint(x: rectangle4Rect.midX, y: rectangle4Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 5 Drawing
        context.saveGState()
        context.translateBy(x: 97.77, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle5Rect = CGRect(x: 0, y: 0, width: 11.91, height: column5)
        let rectangle5Path = UIBezierPath(rect: rectangle5Rect)
        context.saveGState()
        rectangle5Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle5Rect.midX, y: rectangle5Rect.minY),
            end: CGPoint(x: rectangle5Rect.midX, y: rectangle5Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 6 Drawing
        context.saveGState()
        context.translateBy(x: 109.68, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle6Rect = CGRect(x: 0, y: 0, width: 11.91, height: column6)
        let rectangle6Path = UIBezierPath(rect: rectangle6Rect)
        context.saveGState()
        rectangle6Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle6Rect.midX, y: rectangle6Rect.minY),
            end: CGPoint(x: rectangle6Rect.midX, y: rectangle6Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 7 Drawing
        context.saveGState()
        context.translateBy(x: 121.59, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle7Rect = CGRect(x: 0, y: 0, width: 11.91, height: column7)
        let rectangle7Path = UIBezierPath(rect: rectangle7Rect)
        context.saveGState()
        rectangle7Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle7Rect.midX, y: rectangle7Rect.minY),
            end: CGPoint(x: rectangle7Rect.midX, y: rectangle7Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 8 Drawing
        context.saveGState()
        context.translateBy(x: 133.5, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle8Rect = CGRect(x: 0, y: 0, width: 11.91, height: column8)
        let rectangle8Path = UIBezierPath(rect: rectangle8Rect)
        context.saveGState()
        rectangle8Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle8Rect.midX, y: rectangle8Rect.minY),
            end: CGPoint(x: rectangle8Rect.midX, y: rectangle8Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 9 Drawing
        context.saveGState()
        context.translateBy(x: 145.42, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle9Rect = CGRect(x: 0, y: 0, width: 11.91, height: column9)
        let rectangle9Path = UIBezierPath(rect: rectangle9Rect)
        context.saveGState()
        rectangle9Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle9Rect.midX, y: rectangle9Rect.minY),
            end: CGPoint(x: rectangle9Rect.midX, y: rectangle9Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 10 Drawing
        context.saveGState()
        context.translateBy(x: 157.33, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle10Rect = CGRect(x: 0, y: 0, width: 11.91, height: column10)
        let rectangle10Path = UIBezierPath(rect: rectangle10Rect)
        context.saveGState()
        rectangle10Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle10Rect.midX, y: rectangle10Rect.minY),
            end: CGPoint(x: rectangle10Rect.midX, y: rectangle10Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 11 Drawing
        context.saveGState()
        context.translateBy(x: 169.24, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle11Rect = CGRect(x: 0, y: 0, width: 11.91, height: column11)
        let rectangle11Path = UIBezierPath(rect: rectangle11Rect)
        context.saveGState()
        rectangle11Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle11Rect.midX, y: rectangle11Rect.minY),
            end: CGPoint(x: rectangle11Rect.midX, y: rectangle11Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 12 Drawing
        context.saveGState()
        context.translateBy(x: 181.15, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle12Rect = CGRect(x: 0, y: 0, width: 11.91, height: column12)
        let rectangle12Path = UIBezierPath(rect: rectangle12Rect)
        context.saveGState()
        rectangle12Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle12Rect.midX, y: rectangle12Rect.minY),
            end: CGPoint(x: rectangle12Rect.midX, y: rectangle12Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 13 Drawing
        context.saveGState()
        context.translateBy(x: 193.06, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle13Rect = CGRect(x: 0, y: 0, width: 11.91, height: column13)
        let rectangle13Path = UIBezierPath(rect: rectangle13Rect)
        context.saveGState()
        rectangle13Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle13Rect.midX, y: rectangle13Rect.minY),
            end: CGPoint(x: rectangle13Rect.midX, y: rectangle13Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 14 Drawing
        context.saveGState()
        context.translateBy(x: 204.97, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle14Rect = CGRect(x: 0, y: 0, width: 11.91, height: column14)
        let rectangle14Path = UIBezierPath(rect: rectangle14Rect)
        context.saveGState()
        rectangle14Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle14Rect.midX, y: rectangle14Rect.minY),
            end: CGPoint(x: rectangle14Rect.midX, y: rectangle14Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 15 Drawing
        context.saveGState()
        context.translateBy(x: 216.88, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle15Rect = CGRect(x: 0, y: 0, width: 11.91, height: column15)
        let rectangle15Path = UIBezierPath(rect: rectangle15Rect)
        context.saveGState()
        rectangle15Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle15Rect.midX, y: rectangle15Rect.minY),
            end: CGPoint(x: rectangle15Rect.midX, y: rectangle15Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 16 Drawing
        context.saveGState()
        context.translateBy(x: 228.79, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle16Rect = CGRect(x: 0, y: 0, width: 11.91, height: column16)
        let rectangle16Path = UIBezierPath(rect: rectangle16Rect)
        context.saveGState()
        rectangle16Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle16Rect.midX, y: rectangle16Rect.minY),
            end: CGPoint(x: rectangle16Rect.midX, y: rectangle16Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 17 Drawing
        context.saveGState()
        context.translateBy(x: 240.7, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle17Rect = CGRect(x: 0, y: 0, width: 11.91, height: column17)
        let rectangle17Path = UIBezierPath(rect: rectangle17Rect)
        context.saveGState()
        rectangle17Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle17Rect.midX, y: rectangle17Rect.minY),
            end: CGPoint(x: rectangle17Rect.midX, y: rectangle17Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 18 Drawing
        context.saveGState()
        context.translateBy(x: 252.61, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle18Rect = CGRect(x: 0, y: 0, width: 11.91, height: column18)
        let rectangle18Path = UIBezierPath(rect: rectangle18Rect)
        context.saveGState()
        rectangle18Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle18Rect.midX, y: rectangle18Rect.minY),
            end: CGPoint(x: rectangle18Rect.midX, y: rectangle18Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 19 Drawing
        context.saveGState()
        context.translateBy(x: 264.52, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle19Rect = CGRect(x: 0, y: 0, width: 11.91, height: column19)
        let rectangle19Path = UIBezierPath(rect: rectangle19Rect)
        context.saveGState()
        rectangle19Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle19Rect.midX, y: rectangle19Rect.minY),
            end: CGPoint(x: rectangle19Rect.midX, y: rectangle19Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 20 Drawing
        context.saveGState()
        context.translateBy(x: 276.43, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle20Rect = CGRect(x: 0, y: 0, width: 11.91, height: column20)
        let rectangle20Path = UIBezierPath(rect: rectangle20Rect)
        context.saveGState()
        rectangle20Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle20Rect.midX, y: rectangle20Rect.minY),
            end: CGPoint(x: rectangle20Rect.midX, y: rectangle20Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 21 Drawing
        context.saveGState()
        context.translateBy(x: 288.34, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle21Rect = CGRect(x: 0, y: 0, width: 11.91, height: column21)
        let rectangle21Path = UIBezierPath(rect: rectangle21Rect)
        context.saveGState()
        rectangle21Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle21Rect.midX, y: rectangle21Rect.minY),
            end: CGPoint(x: rectangle21Rect.midX, y: rectangle21Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 22 Drawing
        context.saveGState()
        context.translateBy(x: 300.25, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle22Rect = CGRect(x: 0, y: 0, width: 11.91, height: column22)
        let rectangle22Path = UIBezierPath(rect: rectangle22Rect)
        context.saveGState()
        rectangle22Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle22Rect.midX, y: rectangle22Rect.minY),
            end: CGPoint(x: rectangle22Rect.midX, y: rectangle22Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 23 Drawing
        context.saveGState()
        context.translateBy(x: 312.13, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle23Rect = CGRect(x: 0, y: 0, width: 11.91, height: column23)
        let rectangle23Path = UIBezierPath(rect: rectangle23Rect)
        context.saveGState()
        rectangle23Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle23Rect.midX, y: rectangle23Rect.minY),
            end: CGPoint(x: rectangle23Rect.midX, y: rectangle23Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 24 Drawing
        context.saveGState()
        context.translateBy(x: 324.04, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle24Rect = CGRect(x: 0, y: 0, width: 11.91, height: column24)
        let rectangle24Path = UIBezierPath(rect: rectangle24Rect)
        context.saveGState()
        rectangle24Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle24Rect.midX, y: rectangle24Rect.minY),
            end: CGPoint(x: rectangle24Rect.midX, y: rectangle24Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 25 Drawing
        context.saveGState()
        context.translateBy(x: 335.95, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle25Rect = CGRect(x: 0, y: 0, width: 11.91, height: column25)
        let rectangle25Path = UIBezierPath(rect: rectangle25Rect)
        context.saveGState()
        rectangle25Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle25Rect.midX, y: rectangle25Rect.minY),
            end: CGPoint(x: rectangle25Rect.midX, y: rectangle25Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 26 Drawing
        context.saveGState()
        context.translateBy(x: 347.86, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle26Rect = CGRect(x: 0, y: 0, width: 11.91, height: column26)
        let rectangle26Path = UIBezierPath(rect: rectangle26Rect)
        context.saveGState()
        rectangle26Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle26Rect.midX, y: rectangle26Rect.minY),
            end: CGPoint(x: rectangle26Rect.midX, y: rectangle26Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 27 Drawing
        context.saveGState()
        context.translateBy(x: 359.77, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle27Rect = CGRect(x: 0, y: 0, width: 11.91, height: column27)
        let rectangle27Path = UIBezierPath(rect: rectangle27Rect)
        context.saveGState()
        rectangle27Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle27Rect.midX, y: rectangle27Rect.minY),
            end: CGPoint(x: rectangle27Rect.midX, y: rectangle27Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 28 Drawing
        context.saveGState()
        context.translateBy(x: 371.69, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle28Rect = CGRect(x: 0, y: 0, width: 11.91, height: column28)
        let rectangle28Path = UIBezierPath(rect: rectangle28Rect)
        context.saveGState()
        rectangle28Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle28Rect.midX, y: rectangle28Rect.minY),
            end: CGPoint(x: rectangle28Rect.midX, y: rectangle28Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 29 Drawing
        context.saveGState()
        context.translateBy(x: 383.6, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle29Rect = CGRect(x: 0, y: 0, width: 11.91, height: column29)
        let rectangle29Path = UIBezierPath(rect: rectangle29Rect)
        context.saveGState()
        rectangle29Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle29Rect.midX, y: rectangle29Rect.minY),
            end: CGPoint(x: rectangle29Rect.midX, y: rectangle29Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 30 Drawing
        context.saveGState()
        context.translateBy(x: 395.51, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle30Rect = CGRect(x: 0, y: 0, width: 11.91, height: column30)
        let rectangle30Path = UIBezierPath(roundedRect: rectangle30Rect, byRoundingCorners: [.topLeft, .bottomLeft], cornerRadii: CGSize(width: 0.5, height: 0.5))
        rectangle30Path.close()
        context.saveGState()
        rectangle30Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle30Rect.midX, y: rectangle30Rect.minY),
            end: CGPoint(x: rectangle30Rect.midX, y: rectangle30Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// BarText100 Drawing
        let barText100Rect = CGRect(x: 16.05, y: 11.04, width: 22.14, height: 9.51)
        let barText100Style = NSMutableParagraphStyle()
        barText100Style.alignment = .center
        let barText100FontAttributes = [
            .font: UIFont(name: "Play", size: 8)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: barText100Style,
        ] as [NSAttributedString.Key: Any]

        let barText100TextHeight: CGFloat = barChartAxisText100.boundingRect(with: CGSize(width: barText100Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: barText100FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: barText100Rect)
        barChartAxisText100.draw(in: CGRect(x: barText100Rect.minX, y: barText100Rect.minY + (barText100Rect.height - barText100TextHeight) / 2, width: barText100Rect.width, height: barText100TextHeight), withAttributes: barText100FontAttributes)
        context.restoreGState()


        //// BarText50 Drawing
        let barText50Rect = CGRect(x: 16.49, y: 104.43, width: 23.15, height: 11.89)
        let barText50Style = NSMutableParagraphStyle()
        barText50Style.alignment = .center
        let barText50FontAttributes = [
            .font: UIFont(name: "Play", size: 8)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: barText50Style,
        ] as [NSAttributedString.Key: Any]

        let barText50TextHeight: CGFloat = barChartAxisText50.boundingRect(with: CGSize(width: barText50Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: barText50FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: barText50Rect)
        barChartAxisText50.draw(in: CGRect(x: barText50Rect.minX, y: barText50Rect.minY + (barText50Rect.height - barText50TextHeight) / 2, width: barText50Rect.width, height: barText50TextHeight), withAttributes: barText50FontAttributes)
        context.restoreGState()




        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 395.58, y: 205.02))
        bezierPath.addLine(to: CGPoint(x: 38.58, y: 205.02))
        bezierPath.addLine(to: CGPoint(x: 38.06, y: 14.64))
        barColumnColor3.setStroke()
        bezierPath.lineWidth = 0.3
        bezierPath.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 38.11, y: 14.75))
        bezier3Path.addLine(to: CGPoint(x: 393.51, y: 14.75))
        bezier3Path.addLine(to: CGPoint(x: 38.11, y: 14.75))
        bezier3Path.close()
        UIColor.gray.setFill()
        bezier3Path.fill()
        strokeColor.setStroke()
        bezier3Path.lineWidth = 0.3
        bezier3Path.lineJoinStyle = .bevel
        context.saveGState()
        context.setLineDash(phase: 0, lengths: [2, 2])
        bezier3Path.stroke()
        context.restoreGState()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 38.25, y: 110.66))
        bezier4Path.addLine(to: CGPoint(x: 394.18, y: 110.66))
        bezier4Path.addLine(to: CGPoint(x: 38.25, y: 110.66))
        bezier4Path.close()
        UIColor.gray.setFill()
        bezier4Path.fill()
        strokeColor.setStroke()
        bezier4Path.lineWidth = 0.3
        bezier4Path.lineJoinStyle = .bevel
        context.saveGState()
        context.setLineDash(phase: 0, lengths: [2, 3])
        bezier4Path.stroke()
        context.restoreGState()


        //// 1 Drawing
        let _1Rect = CGRect(x: 41.68, y: 206.83, width: 4.89, height: 9.27)
        let _1TextContent = "1"
        let _1Style = NSMutableParagraphStyle()
        _1Style.alignment = .left
        let _1FontAttributes = [
            .font: UIFont(name: "Play", size: 9)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: _1Style,
        ] as [NSAttributedString.Key: Any]

        let _1TextHeight: CGFloat = _1TextContent.boundingRect(with: CGSize(width: _1Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: _1FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: _1Rect)
        _1TextContent.draw(in: CGRect(x: _1Rect.minX, y: _1Rect.minY + (_1Rect.height - _1TextHeight) / 2, width: _1Rect.width, height: _1TextHeight), withAttributes: _1FontAttributes)
        context.restoreGState()


        //// 5 Drawing
        let _5Rect = CGRect(x: 89.76, y: 206.55, width: 4.89, height: 9.27)
        let _5TextContent = "5"
        let _5Style = NSMutableParagraphStyle()
        _5Style.alignment = .left
        let _5FontAttributes = [
            .font: UIFont(name: "Play", size: 9)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: _5Style,
        ] as [NSAttributedString.Key: Any]

        let _5TextHeight: CGFloat = _5TextContent.boundingRect(with: CGSize(width: _5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: _5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: _5Rect)
        _5TextContent.draw(in: CGRect(x: _5Rect.minX, y: _5Rect.minY + (_5Rect.height - _5TextHeight) / 2, width: _5Rect.width, height: _5TextHeight), withAttributes: _5FontAttributes)
        context.restoreGState()


        //// 10 Drawing
        let _10Rect = CGRect(x: 145.04, y: 206.46, width: 11.85, height: 9.27)
        let _10TextContent = "10"
        let _10Style = NSMutableParagraphStyle()
        _10Style.alignment = .left
        let _10FontAttributes = [
            .font: UIFont(name: "Play", size: 9)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: _10Style,
        ] as [NSAttributedString.Key: Any]

        let _10TextHeight: CGFloat = _10TextContent.boundingRect(with: CGSize(width: _10Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: _10FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: _10Rect)
        _10TextContent.draw(in: CGRect(x: _10Rect.minX, y: _10Rect.minY + (_10Rect.height - _10TextHeight) / 2, width: _10Rect.width, height: _10TextHeight), withAttributes: _10FontAttributes)
        context.restoreGState()


        //// 15 Drawing
        let _15Rect = CGRect(x: 205.01, y: 206.89, width: 11.85, height: 9.27)
        let _15TextContent = "15"
        let _15Style = NSMutableParagraphStyle()
        _15Style.alignment = .left
        let _15FontAttributes = [
            .font: UIFont(name: "Play", size: 9)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: _15Style,
        ] as [NSAttributedString.Key: Any]

        let _15TextHeight: CGFloat = _15TextContent.boundingRect(with: CGSize(width: _15Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: _15FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: _15Rect)
        _15TextContent.draw(in: CGRect(x: _15Rect.minX, y: _15Rect.minY + (_15Rect.height - _15TextHeight) / 2, width: _15Rect.width, height: _15TextHeight), withAttributes: _15FontAttributes)
        context.restoreGState()


        //// 20 Drawing
        let _20Rect = CGRect(x: 264.56, y: 206.6, width: 11.85, height: 9.27)
        let _20TextContent = "20"
        let _20Style = NSMutableParagraphStyle()
        _20Style.alignment = .left
        let _20FontAttributes = [
            .font: UIFont(name: "Play", size: 9)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: _20Style,
        ] as [NSAttributedString.Key: Any]

        let _20TextHeight: CGFloat = _20TextContent.boundingRect(with: CGSize(width: _20Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: _20FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: _20Rect)
        _20TextContent.draw(in: CGRect(x: _20Rect.minX, y: _20Rect.minY + (_20Rect.height - _20TextHeight) / 2, width: _20Rect.width, height: _20TextHeight), withAttributes: _20FontAttributes)
        context.restoreGState()


        //// 25 Drawing
        let _25Rect = CGRect(x: 324.52, y: 207.06, width: 11.85, height: 9.27)
        let _25TextContent = "25"
        let _25Style = NSMutableParagraphStyle()
        _25Style.alignment = .left
        let _25FontAttributes = [
            .font: UIFont(name: "Play", size: 9)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: _25Style,
        ] as [NSAttributedString.Key: Any]

        let _25TextHeight: CGFloat = _25TextContent.boundingRect(with: CGSize(width: _25Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: _25FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: _25Rect)
        _25TextContent.draw(in: CGRect(x: _25Rect.minX, y: _25Rect.minY + (_25Rect.height - _25TextHeight) / 2, width: _25Rect.width, height: _25TextHeight), withAttributes: _25FontAttributes)
        context.restoreGState()


        //// 30 Drawing
        let _30Rect = CGRect(x: 382.36, y: 207.45, width: 11.85, height: 9.27)
        let _30TextContent = "30"
        let _30Style = NSMutableParagraphStyle()
        _30Style.alignment = .left
        let _30FontAttributes = [
            .font: UIFont(name: "Play", size: 9)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: _30Style,
        ] as [NSAttributedString.Key: Any]

        let _30TextHeight: CGFloat = _30TextContent.boundingRect(with: CGSize(width: _30Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: _30FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: _30Rect)
        _30TextContent.draw(in: CGRect(x: _30Rect.minX, y: _30Rect.minY + (_30Rect.height - _30TextHeight) / 2, width: _30Rect.width, height: _30TextHeight), withAttributes: _30FontAttributes)
        context.restoreGState()




        //// Text 2 Drawing
        let text2Rect = CGRect(x: 48, y: 214.88, width: 321.38, height: 13.74)
        let text2TextContent = "Ð²ÑÐµÐ¼Ñ (Ð´Ð½ÐµÐ¹)"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [
            .font: UIFont(name: "Play", size: 10)!,
            .foregroundColor: barColumnColor3,
            .paragraphStyle: text2Style,
        ] as [NSAttributedString.Key: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()


        //// Text 4 Drawing
        context.saveGState()
        context.translateBy(x: 4.28, y: 204.67)
        context.rotate(by: -90 * CGFloat.pi/180)

        let text4Rect = CGRect(x: 0, y: 0, width: 188.96, height: 13.74)
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .center
        let text4FontAttributes = [
            .font: UIFont(name: "Play", size: 10)!,
            .foregroundColor: barColumnColor3,
            .paragraphStyle: text4Style,
        ] as [NSAttributedString.Key: Any]

        let text4TextHeight: CGFloat = barChartAxisTitle.boundingRect(with: CGSize(width: text4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text4Rect)
        barChartAxisTitle.draw(in: CGRect(x: text4Rect.minX, y: text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, width: text4Rect.width, height: text4TextHeight), withAttributes: text4FontAttributes)
        context.restoreGState()

        context.restoreGState()




        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 0.09, y: 15))
        bezier6Path.addLine(to: CGPoint(x: 410.09, y: 15))
        barChartBkgColor.setFill()
        bezier6Path.fill()
        UIColor.gray.setStroke()
        bezier6Path.lineWidth = 0.1
        bezier6Path.stroke()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 0.09, y: 34))
        bezier7Path.addLine(to: CGPoint(x: 410.09, y: 34))
        barChartBkgColor.setFill()
        bezier7Path.fill()
        UIColor.gray.setStroke()
        bezier7Path.lineWidth = 0.1
        bezier7Path.stroke()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 0.09, y: 53))
        bezier8Path.addLine(to: CGPoint(x: 410.09, y: 53))
        barChartBkgColor.setFill()
        bezier8Path.fill()
        UIColor.gray.setStroke()
        bezier8Path.lineWidth = 0.1
        bezier8Path.stroke()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 0.09, y: 72))
        bezier9Path.addLine(to: CGPoint(x: 410.09, y: 72))
        barChartBkgColor.setFill()
        bezier9Path.fill()
        UIColor.gray.setStroke()
        bezier9Path.lineWidth = 0.1
        bezier9Path.stroke()


        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: 0.09, y: 91))
        bezier10Path.addLine(to: CGPoint(x: 410.09, y: 91))
        barChartBkgColor.setFill()
        bezier10Path.fill()
        UIColor.gray.setStroke()
        bezier10Path.lineWidth = 0.1
        bezier10Path.stroke()


        //// Bezier 11 Drawing
        let bezier11Path = UIBezierPath()
        bezier11Path.move(to: CGPoint(x: 0.09, y: 110))
        bezier11Path.addLine(to: CGPoint(x: 410.09, y: 110))
        barChartBkgColor.setFill()
        bezier11Path.fill()
        UIColor.gray.setStroke()
        bezier11Path.lineWidth = 0.1
        bezier11Path.stroke()


        //// Bezier 12 Drawing
        let bezier12Path = UIBezierPath()
        bezier12Path.move(to: CGPoint(x: 0.09, y: 129))
        bezier12Path.addLine(to: CGPoint(x: 410.09, y: 129))
        barChartBkgColor.setFill()
        bezier12Path.fill()
        UIColor.gray.setStroke()
        bezier12Path.lineWidth = 0.1
        bezier12Path.stroke()


        //// Bezier 13 Drawing
        let bezier13Path = UIBezierPath()
        bezier13Path.move(to: CGPoint(x: 0.09, y: 148))
        bezier13Path.addLine(to: CGPoint(x: 410.09, y: 148))
        barChartBkgColor.setFill()
        bezier13Path.fill()
        UIColor.gray.setStroke()
        bezier13Path.lineWidth = 0.1
        bezier13Path.stroke()


        //// Bezier 14 Drawing
        let bezier14Path = UIBezierPath()
        bezier14Path.move(to: CGPoint(x: 0.09, y: 167))
        bezier14Path.addLine(to: CGPoint(x: 410.09, y: 167))
        barChartBkgColor.setFill()
        bezier14Path.fill()
        UIColor.gray.setStroke()
        bezier14Path.lineWidth = 0.1
        bezier14Path.stroke()


        //// Bezier 15 Drawing
        let bezier15Path = UIBezierPath()
        bezier15Path.move(to: CGPoint(x: 0.09, y: 186))
        bezier15Path.addLine(to: CGPoint(x: 410.09, y: 186))
        barChartBkgColor.setFill()
        bezier15Path.fill()
        UIColor.gray.setStroke()
        bezier15Path.lineWidth = 0.1
        bezier15Path.stroke()


        //// Bezier 16 Drawing
        let bezier16Path = UIBezierPath()
        bezier16Path.move(to: CGPoint(x: 0.09, y: 205))
        bezier16Path.addLine(to: CGPoint(x: 410.09, y: 205))
        barChartBkgColor.setFill()
        bezier16Path.fill()
        UIColor.gray.setStroke()
        bezier16Path.lineWidth = 0.1
        bezier16Path.stroke()


        //// AvgLine Drawing
        context.saveGState()
        context.translateBy(x: 38.01, y: barChartExpr2)

        let avgLinePath = UIBezierPath()
        avgLinePath.move(to: CGPoint(x: 0.35, y: 0))
        avgLinePath.addLine(to: CGPoint(x: 0, y: 0.97))
        avgLinePath.addLine(to: CGPoint(x: 359.32, y: 0.97))
        avgLinePath.addLine(to: CGPoint(x: 359.34, y: 0))
        avgLinePath.addLine(to: CGPoint(x: 0.35, y: 0))
        avgLinePath.close()
        context.saveGState()
        avgLinePath.addClip()
        let avgLineBounds: CGRect = avgLinePath.cgPath.boundingBoxOfPath
        context.drawLinearGradient(avgLineGradient,
            start: CGPoint(x: avgLineBounds.midX + 6.09 * avgLineBounds.width / 359.34, y: avgLineBounds.midY + -2.03 * avgLineBounds.height / 0.97),
            end: CGPoint(x: avgLineBounds.midX + -6.09 * avgLineBounds.width / 359.34, y: avgLineBounds.midY + 2.03 * avgLineBounds.height / 0.97),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// Text 10 Drawing
        context.saveGState()
        context.translateBy(x: barChartLineExpr, y: (barChartExpr2 - 13.703125))

        let text10Rect = CGRect(x: -1.08, y: -0.02, width: 148.44, height: 12.66)
        let text10Path = UIBezierPath(rect: text10Rect)
        context.saveGState()
        text10Path.addClip()
        let text10RotatedPath = UIBezierPath()
        text10RotatedPath.append(text10Path)
        var text10Transform = CGAffineTransform(rotationAngle: -135 * -CGFloat.pi/180)
        text10RotatedPath.apply(text10Transform)
        let text10Bounds = text10RotatedPath.cgPath.boundingBoxOfPath
        text10Transform = text10Transform.inverted()
        context.drawLinearGradient(avgLineGradient,
            start: CGPoint(x: text10Bounds.minX, y: text10Bounds.midY).applying(text10Transform),
            end: CGPoint(x: text10Bounds.maxX, y: text10Bounds.midY).applying(text10Transform),
            options: [])
        context.restoreGState()
        let text10Style = NSMutableParagraphStyle()
        text10Style.alignment = .center
        let text10FontAttributes = [
            .font: UIFont(name: "Play", size: 13)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text10Style,
        ] as [NSAttributedString.Key: Any]

        let text10TextHeight: CGFloat = barChartLineText.boundingRect(with: CGSize(width: text10Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text10FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text10Rect)
        barChartLineText.draw(in: CGRect(x: text10Rect.minX, y: text10Rect.minY + (text10Rect.height - text10TextHeight) / 2, width: text10Rect.width, height: text10TextHeight), withAttributes: text10FontAttributes)
        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawExtendedBarChart_FrontLayer(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 410, height: 230), resizing: ResizingBehavior = .aspectFit, reflection: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 410, height: 230), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 410, y: resizedFrame.height / 230)


        //// Color Declarations
        let reflectionMaskGradientColor = UIColor(red: 0.000, green: 0.717, blue: 1.000, alpha: 0.385)
        let reflectionMaskGradientColor2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)
        let reflectionMaskGradientColor3 = UIColor(red: 0.000, green: 0.985, blue: 1.000, alpha: 0.000)
        let reflectionMaskGradientColor4 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.002)
        let reflectionMaskGradientColor5 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Gradient Declarations
        let reflectionMaskGradient = CGGradient(colorsSpace: nil, colors: [reflectionMaskGradientColor2.cgColor, reflectionMaskGradientColor2.blended(withFraction: 0.5, of: reflectionMaskGradientColor5).cgColor, reflectionMaskGradientColor5.cgColor, reflectionMaskGradientColor.cgColor, reflectionMaskGradientColor.blended(withFraction: 0.5, of: reflectionMaskGradientColor4).cgColor, reflectionMaskGradientColor4.cgColor, reflectionMaskGradientColor3.cgColor] as CFArray, locations: [0, 0.36, 0.39, 0.52, 0.53, 0.84, 1])!

        //// Image Declarations
        let maskZed1 = UIImage(named: "maskZed1.png")!

        //// Variable Declarations
        let expression = CGPoint(x: -410 * reflection, y: 0)

        //// Group 5
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Group 4
        //// Picture 3 Drawing
        context.saveGState()
        context.translateBy(x: -0.23, y: 143.41)
        context.scaleBy(x: 0.2, y: 0.2)

        let picture3Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 819.21, height: 134))
        context.saveGState()
        picture3Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -maskZed1.size.height)
        context.draw(maskZed1.cgImage!, in: CGRect(x: 0, y: 0, width: maskZed1.size.width, height: maskZed1.size.height))
        context.restoreGState()

        context.restoreGState()


        //// Picture 2 Drawing
        context.saveGState()
        context.translateBy(x: 213.8, y: 103.11)
        context.scaleBy(x: 0.2, y: 0.2)

        let picture2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 819.55, height: 99.45))
        context.saveGState()
        picture2Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -maskZed1.size.height)
        context.draw(maskZed1.cgImage!, in: CGRect(x: 0, y: 0, width: maskZed1.size.width, height: maskZed1.size.height))
        context.restoreGState()

        context.restoreGState()


        //// Picture 6 Drawing
        context.saveGState()
        context.translateBy(x: 171.73, y: 142.61)
        context.scaleBy(x: 0.2, y: 0.2)

        let picture6Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 818.83, height: 134))
        context.saveGState()
        picture6Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -maskZed1.size.height)
        context.draw(maskZed1.cgImage!, in: CGRect(x: 0, y: 0, width: maskZed1.size.width, height: maskZed1.size.height))
        context.restoreGState()

        context.restoreGState()


        //// Picture 5 Drawing
        context.saveGState()
        context.translateBy(x: 246.55, y: 40.75)
        context.scaleBy(x: 0.2, y: 0.2)

        let picture5Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 818.83, height: 134))
        context.saveGState()
        picture5Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -maskZed1.size.height)
        context.draw(maskZed1.cgImage!, in: CGRect(x: 0, y: 0, width: maskZed1.size.width, height: maskZed1.size.height))
        context.restoreGState()

        context.restoreGState()


        //// Picture Drawing
        context.saveGState()
        context.translateBy(x: 176.47, y: 41.15)
        context.scaleBy(x: 0.2, y: 0.2)

        let picturePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 294.33, height: 134))
        context.saveGState()
        picturePath.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -maskZed1.size.height)
        context.draw(maskZed1.cgImage!, in: CGRect(x: 0, y: 0, width: maskZed1.size.width, height: maskZed1.size.height))
        context.restoreGState()

        context.restoreGState()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 133.29, y: 35))
        bezier2Path.addLine(to: CGPoint(x: 171.46, y: 35))
        bezier2Path.addLine(to: CGPoint(x: 172.02, y: 75))
        bezier2Path.addLine(to: CGPoint(x: 184.72, y: 83))
        bezier2Path.addLine(to: CGPoint(x: 242.49, y: 83))
        UIColor.blue.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 361.5, y: 35.5))
        bezier5Path.addLine(to: CGPoint(x: 241.1, y: 35.59))
        bezier5Path.addLine(to: CGPoint(x: 241.09, y: 71.59))
        bezier5Path.addLine(to: CGPoint(x: 261.81, y: 71.58))
        bezier5Path.addLine(to: CGPoint(x: 261.7, y: 90.38))
        bezier5Path.addLine(to: CGPoint(x: 199, y: 90.58))
        UIColor.blue.setStroke()
        bezier5Path.lineWidth = 1
        bezier5Path.stroke()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 130.37, y: 33.49, width: 3, height: 3))
        UIColor.green.setFill()
        ovalPath.fill()


        //// Picture 4 Drawing
        context.saveGState()
        context.translateBy(x: 199.42, y: 1.21)
        context.scaleBy(x: 0.2, y: 0.2)

        let picture4Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 818.83, height: 134))
        context.saveGState()
        picture4Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -maskZed1.size.height)
        context.draw(maskZed1.cgImage!, in: CGRect(x: 0, y: 0, width: maskZed1.size.width, height: maskZed1.size.height))
        context.restoreGState()

        context.restoreGState()


        //// Picture 7 Drawing
        context.saveGState()
        context.translateBy(x: 108.93, y: 41.9)
        context.scaleBy(x: 0.2, y: 0.2)

        let picture7Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 294.33, height: 134))
        context.saveGState()
        picture7Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -maskZed1.size.height)
        context.draw(maskZed1.cgImage!, in: CGRect(x: 0, y: 0, width: maskZed1.size.width, height: maskZed1.size.height))
        context.restoreGState()

        context.restoreGState()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 242.36, y: 81.46, width: 3, height: 3))
        UIColor.green.setFill()
        oval2Path.fill()




        //// Rectangle 31 Drawing
        context.saveGState()

        context.saveGState()
        context.setBlendMode(.sourceIn)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let rectangle31Path = UIBezierPath(rect: CGRect(x: expression.x, y: expression.y, width: 820, height: 231.21))
        context.saveGState()
        rectangle31Path.addClip()
        let rectangle31RotatedPath = UIBezierPath()
        rectangle31RotatedPath.append(rectangle31Path)
        var rectangle31Transform = CGAffineTransform(rotationAngle: -135 * -CGFloat.pi/180)
        rectangle31RotatedPath.apply(rectangle31Transform)
        let rectangle31Bounds = rectangle31RotatedPath.cgPath.boundingBoxOfPath
        rectangle31Transform = rectangle31Transform.inverted()
        context.drawLinearGradient(reflectionMaskGradient,
            start: CGPoint(x: rectangle31Bounds.minX, y: rectangle31Bounds.midY).applying(rectangle31Transform),
            end: CGPoint(x: rectangle31Bounds.maxX, y: rectangle31Bounds.midY).applying(rectangle31Transform),
            options: [])
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawExtendedBarChart_375(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 230), resizing: ResizingBehavior = .aspectFit, column1: CGFloat = 83, column2: CGFloat = 91, column3: CGFloat = 86, column4: CGFloat = 81, column5: CGFloat = 43, column6: CGFloat = 0, column7: CGFloat = 0, column8: CGFloat = 0, column9: CGFloat = 0, column10: CGFloat = 0, column11: CGFloat = 0, column12: CGFloat = 0, column13: CGFloat = 0, column14: CGFloat = 0, column15: CGFloat = 0, column16: CGFloat = 0, column17: CGFloat = 0, column18: CGFloat = 0, column19: CGFloat = 0, column20: CGFloat = 0, column21: CGFloat = 0, column22: CGFloat = 0, column23: CGFloat = 0, column24: CGFloat = 0, column25: CGFloat = 0, column26: CGFloat = 0, column27: CGFloat = 0, column28: CGFloat = 0, column29: CGFloat = 0, column30: CGFloat = 0, barChartLineY: CGFloat = 62, barChartLineX: CGFloat = 1, barChartLineText: String = "100", barChartAxisTitle: String = "ÐºÐ¾Ð»-Ð²Ð¾ Ð¸Ð³ÑÐ¾Ð²ÑÑ Ð¿Ð°ÑÑÐ¸Ð¹", barChartAxisText50: String = "5", barChartAxisText100: String = "10") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 230), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 230)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 375, resizedFrame.height / 230)


        //// Color Declarations
        let strokeColor = UIColor(red: 0.000, green: 0.878, blue: 1.000, alpha: 1.000)
        let barChartBkgColor = UIColor(red: 0.177, green: 0.065, blue: 0.539, alpha: 1.000)
        let barColumnColor3 = UIColor(red: 0.000, green: 1.000, blue: 0.984, alpha: 1.000)
        let barColumnColor2 = UIColor(red: 0.506, green: 0.917, blue: 0.948, alpha: 1.000)
        let barColumnColor1 = UIColor(red: 0.000, green: 0.257, blue: 1.000, alpha: 1.000)
        let avgLineColor1 = UIColor(red: 1.000, green: 0.000, blue: 0.914, alpha: 1.000)
        let avgLineColor2 = UIColor(red: 0.538, green: 0.000, blue: 1.000, alpha: 1.000)

        //// Gradient Declarations
        let avgLineGradient = CGGradient(colorsSpace: nil, colors: [avgLineColor1.cgColor, avgLineColor2.cgColor] as CFArray, locations: [0.01, 1])!
        let barColumnGradient2 = CGGradient(colorsSpace: nil, colors: [barColumnColor2.cgColor, barColumnColor2.blended(withFraction: 0.5, of: barColumnColor1).cgColor, barColumnColor1.cgColor, barColumnColor1.blended(withFraction: 0.5, of: barColumnColor3).cgColor, barColumnColor3.cgColor] as CFArray, locations: [0, 0, 0.96, 0.96, 1])!

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black
        shadow.shadowOffset = CGSize(width: 0, height: 1)
        shadow.shadowBlurRadius = 2

        //// Variable Declarations
        let barChartExpr2: CGFloat = 205 - barChartLineY
        let barChartLineExpr: CGFloat = 410 * (1 - barChartLineX) + 155 * barChartLineX

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 410, height: 230), cornerRadius: 4)
        barChartBkgColor.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        context.saveGState()
        context.clip(to: rectanglePath.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let rectangleOpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: rectangleOpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Group 2
        //// Group
        //// Group 3
        //// Rectangle 1 Drawing
        context.saveGState()
        context.translateBy(x: 47.32, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle1Rect = CGRect(x: 0, y: 0, width: 10.92, height: column1)
        let rectangle1Path = UIBezierPath(roundedRect: rectangle1Rect, byRoundingCorners: .bottomRight, cornerRadii: CGSize(width: 4, height: 4))
        rectangle1Path.close()
        context.saveGState()
        rectangle1Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle1Rect.midX, y: rectangle1Rect.minY),
            end: CGPoint(x: rectangle1Rect.midX, y: rectangle1Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 58.21, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle2Rect = CGRect(x: 0, y: 0, width: 10.92, height: column2)
        let rectangle2Path = UIBezierPath(rect: rectangle2Rect)
        context.saveGState()
        rectangle2Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle2Rect.midX, y: rectangle2Rect.minY),
            end: CGPoint(x: rectangle2Rect.midX, y: rectangle2Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 3 Drawing
        context.saveGState()
        context.translateBy(x: 69.14, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle3Rect = CGRect(x: 0, y: 0, width: 10.92, height: column3)
        let rectangle3Path = UIBezierPath(rect: rectangle3Rect)
        context.saveGState()
        rectangle3Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle3Rect.midX, y: rectangle3Rect.minY),
            end: CGPoint(x: rectangle3Rect.midX, y: rectangle3Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 4 Drawing
        context.saveGState()
        context.translateBy(x: 80.06, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle4Rect = CGRect(x: 0, y: 0, width: 10.92, height: column4)
        let rectangle4Path = UIBezierPath(rect: rectangle4Rect)
        context.saveGState()
        rectangle4Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle4Rect.midX, y: rectangle4Rect.minY),
            end: CGPoint(x: rectangle4Rect.midX, y: rectangle4Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 5 Drawing
        context.saveGState()
        context.translateBy(x: 90.98, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle5Rect = CGRect(x: 0, y: 0, width: 10.92, height: column5)
        let rectangle5Path = UIBezierPath(rect: rectangle5Rect)
        context.saveGState()
        rectangle5Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle5Rect.midX, y: rectangle5Rect.minY),
            end: CGPoint(x: rectangle5Rect.midX, y: rectangle5Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 6 Drawing
        context.saveGState()
        context.translateBy(x: 101.9, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle6Rect = CGRect(x: 0, y: 0, width: 10.92, height: column6)
        let rectangle6Path = UIBezierPath(rect: rectangle6Rect)
        context.saveGState()
        rectangle6Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle6Rect.midX, y: rectangle6Rect.minY),
            end: CGPoint(x: rectangle6Rect.midX, y: rectangle6Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 7 Drawing
        context.saveGState()
        context.translateBy(x: 112.83, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle7Rect = CGRect(x: 0, y: 0, width: 10.92, height: column7)
        let rectangle7Path = UIBezierPath(rect: rectangle7Rect)
        context.saveGState()
        rectangle7Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle7Rect.midX, y: rectangle7Rect.minY),
            end: CGPoint(x: rectangle7Rect.midX, y: rectangle7Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 8 Drawing
        context.saveGState()
        context.translateBy(x: 123.75, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle8Rect = CGRect(x: 0, y: 0, width: 10.92, height: column8)
        let rectangle8Path = UIBezierPath(rect: rectangle8Rect)
        context.saveGState()
        rectangle8Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle8Rect.midX, y: rectangle8Rect.minY),
            end: CGPoint(x: rectangle8Rect.midX, y: rectangle8Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 9 Drawing
        context.saveGState()
        context.translateBy(x: 134.67, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle9Rect = CGRect(x: 0, y: 0, width: 10.92, height: column9)
        let rectangle9Path = UIBezierPath(rect: rectangle9Rect)
        context.saveGState()
        rectangle9Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle9Rect.midX, y: rectangle9Rect.minY),
            end: CGPoint(x: rectangle9Rect.midX, y: rectangle9Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 10 Drawing
        context.saveGState()
        context.translateBy(x: 145.6, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle10Rect = CGRect(x: 0, y: 0, width: 10.92, height: column10)
        let rectangle10Path = UIBezierPath(rect: rectangle10Rect)
        context.saveGState()
        rectangle10Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle10Rect.midX, y: rectangle10Rect.minY),
            end: CGPoint(x: rectangle10Rect.midX, y: rectangle10Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 11 Drawing
        context.saveGState()
        context.translateBy(x: 156.52, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle11Rect = CGRect(x: 0, y: 0, width: 10.92, height: column11)
        let rectangle11Path = UIBezierPath(rect: rectangle11Rect)
        context.saveGState()
        rectangle11Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle11Rect.midX, y: rectangle11Rect.minY),
            end: CGPoint(x: rectangle11Rect.midX, y: rectangle11Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 12 Drawing
        context.saveGState()
        context.translateBy(x: 167.44, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle12Rect = CGRect(x: 0, y: 0, width: 10.92, height: column12)
        let rectangle12Path = UIBezierPath(rect: rectangle12Rect)
        context.saveGState()
        rectangle12Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle12Rect.midX, y: rectangle12Rect.minY),
            end: CGPoint(x: rectangle12Rect.midX, y: rectangle12Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 13 Drawing
        context.saveGState()
        context.translateBy(x: 178.36, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle13Rect = CGRect(x: 0, y: 0, width: 10.92, height: column13)
        let rectangle13Path = UIBezierPath(rect: rectangle13Rect)
        context.saveGState()
        rectangle13Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle13Rect.midX, y: rectangle13Rect.minY),
            end: CGPoint(x: rectangle13Rect.midX, y: rectangle13Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 14 Drawing
        context.saveGState()
        context.translateBy(x: 189.29, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle14Rect = CGRect(x: 0, y: 0, width: 10.92, height: column14)
        let rectangle14Path = UIBezierPath(rect: rectangle14Rect)
        context.saveGState()
        rectangle14Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle14Rect.midX, y: rectangle14Rect.minY),
            end: CGPoint(x: rectangle14Rect.midX, y: rectangle14Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 15 Drawing
        context.saveGState()
        context.translateBy(x: 200.21, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle15Rect = CGRect(x: 0, y: 0, width: 10.92, height: column15)
        let rectangle15Path = UIBezierPath(rect: rectangle15Rect)
        context.saveGState()
        rectangle15Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle15Rect.midX, y: rectangle15Rect.minY),
            end: CGPoint(x: rectangle15Rect.midX, y: rectangle15Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 16 Drawing
        context.saveGState()
        context.translateBy(x: 211.13, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle16Rect = CGRect(x: 0, y: 0, width: 10.92, height: column16)
        let rectangle16Path = UIBezierPath(rect: rectangle16Rect)
        context.saveGState()
        rectangle16Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle16Rect.midX, y: rectangle16Rect.minY),
            end: CGPoint(x: rectangle16Rect.midX, y: rectangle16Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 17 Drawing
        context.saveGState()
        context.translateBy(x: 222.06, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle17Rect = CGRect(x: 0, y: 0, width: 10.92, height: column17)
        let rectangle17Path = UIBezierPath(rect: rectangle17Rect)
        context.saveGState()
        rectangle17Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle17Rect.midX, y: rectangle17Rect.minY),
            end: CGPoint(x: rectangle17Rect.midX, y: rectangle17Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 18 Drawing
        context.saveGState()
        context.translateBy(x: 232.98, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle18Rect = CGRect(x: 0, y: 0, width: 10.92, height: column18)
        let rectangle18Path = UIBezierPath(rect: rectangle18Rect)
        context.saveGState()
        rectangle18Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle18Rect.midX, y: rectangle18Rect.minY),
            end: CGPoint(x: rectangle18Rect.midX, y: rectangle18Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 19 Drawing
        context.saveGState()
        context.translateBy(x: 243.9, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle19Rect = CGRect(x: 0, y: 0, width: 10.92, height: column19)
        let rectangle19Path = UIBezierPath(rect: rectangle19Rect)
        context.saveGState()
        rectangle19Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle19Rect.midX, y: rectangle19Rect.minY),
            end: CGPoint(x: rectangle19Rect.midX, y: rectangle19Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 20 Drawing
        context.saveGState()
        context.translateBy(x: 254.83, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle20Rect = CGRect(x: 0, y: 0, width: 10.92, height: column20)
        let rectangle20Path = UIBezierPath(rect: rectangle20Rect)
        context.saveGState()
        rectangle20Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle20Rect.midX, y: rectangle20Rect.minY),
            end: CGPoint(x: rectangle20Rect.midX, y: rectangle20Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 21 Drawing
        context.saveGState()
        context.translateBy(x: 265.75, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle21Rect = CGRect(x: 0, y: 0, width: 10.92, height: column21)
        let rectangle21Path = UIBezierPath(rect: rectangle21Rect)
        context.saveGState()
        rectangle21Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle21Rect.midX, y: rectangle21Rect.minY),
            end: CGPoint(x: rectangle21Rect.midX, y: rectangle21Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 22 Drawing
        context.saveGState()
        context.translateBy(x: 276.67, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle22Rect = CGRect(x: 0, y: 0, width: 10.92, height: column22)
        let rectangle22Path = UIBezierPath(rect: rectangle22Rect)
        context.saveGState()
        rectangle22Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle22Rect.midX, y: rectangle22Rect.minY),
            end: CGPoint(x: rectangle22Rect.midX, y: rectangle22Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 23 Drawing
        context.saveGState()
        context.translateBy(x: 287.56, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle23Rect = CGRect(x: 0, y: 0, width: 10.92, height: column23)
        let rectangle23Path = UIBezierPath(rect: rectangle23Rect)
        context.saveGState()
        rectangle23Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle23Rect.midX, y: rectangle23Rect.minY),
            end: CGPoint(x: rectangle23Rect.midX, y: rectangle23Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 24 Drawing
        context.saveGState()
        context.translateBy(x: 298.49, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle24Rect = CGRect(x: 0, y: 0, width: 10.92, height: column24)
        let rectangle24Path = UIBezierPath(rect: rectangle24Rect)
        context.saveGState()
        rectangle24Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle24Rect.midX, y: rectangle24Rect.minY),
            end: CGPoint(x: rectangle24Rect.midX, y: rectangle24Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 25 Drawing
        context.saveGState()
        context.translateBy(x: 309.41, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle25Rect = CGRect(x: 0, y: 0, width: 10.92, height: column25)
        let rectangle25Path = UIBezierPath(rect: rectangle25Rect)
        context.saveGState()
        rectangle25Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle25Rect.midX, y: rectangle25Rect.minY),
            end: CGPoint(x: rectangle25Rect.midX, y: rectangle25Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 26 Drawing
        context.saveGState()
        context.translateBy(x: 320.33, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle26Rect = CGRect(x: 0, y: 0, width: 10.92, height: column26)
        let rectangle26Path = UIBezierPath(rect: rectangle26Rect)
        context.saveGState()
        rectangle26Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle26Rect.midX, y: rectangle26Rect.minY),
            end: CGPoint(x: rectangle26Rect.midX, y: rectangle26Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 27 Drawing
        context.saveGState()
        context.translateBy(x: 331.26, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle27Rect = CGRect(x: 0, y: 0, width: 10.92, height: column27)
        let rectangle27Path = UIBezierPath(rect: rectangle27Rect)
        context.saveGState()
        rectangle27Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle27Rect.midX, y: rectangle27Rect.minY),
            end: CGPoint(x: rectangle27Rect.midX, y: rectangle27Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 28 Drawing
        context.saveGState()
        context.translateBy(x: 342.18, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle28Rect = CGRect(x: 0, y: 0, width: 10.92, height: column28)
        let rectangle28Path = UIBezierPath(rect: rectangle28Rect)
        context.saveGState()
        rectangle28Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle28Rect.midX, y: rectangle28Rect.minY),
            end: CGPoint(x: rectangle28Rect.midX, y: rectangle28Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 29 Drawing
        context.saveGState()
        context.translateBy(x: 353.1, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle29Rect = CGRect(x: 0, y: 0, width: 10.92, height: column29)
        let rectangle29Path = UIBezierPath(rect: rectangle29Rect)
        context.saveGState()
        rectangle29Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle29Rect.midX, y: rectangle29Rect.minY),
            end: CGPoint(x: rectangle29Rect.midX, y: rectangle29Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 30 Drawing
        context.saveGState()
        context.translateBy(x: 364.03, y: 205.07)
        context.rotate(by: -180 * CGFloat.pi/180)

        let rectangle30Rect = CGRect(x: 0, y: 0, width: 10.92, height: column30)
        let rectangle30Path = UIBezierPath(roundedRect: rectangle30Rect, byRoundingCorners: [.topLeft, .bottomLeft], cornerRadii: CGSize(width: 0.5, height: 0.5))
        rectangle30Path.close()
        context.saveGState()
        rectangle30Path.addClip()
        context.drawLinearGradient(barColumnGradient2,
            start: CGPoint(x: rectangle30Rect.midX, y: rectangle30Rect.minY),
            end: CGPoint(x: rectangle30Rect.midX, y: rectangle30Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()


        //// BarText100 Drawing
        let barText100Rect = CGRect(x: 13.49, y: 11.04, width: 22.68, height: 9.51)
        let barText100Style = NSMutableParagraphStyle()
        barText100Style.alignment = .center
        let barText100FontAttributes = [
            .font: UIFont(name: "Play", size: 8)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: barText100Style,
        ] as [NSAttributedString.Key: Any]

        let barText100TextHeight: CGFloat = barChartAxisText100.boundingRect(with: CGSize(width: barText100Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: barText100FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: barText100Rect)
        barChartAxisText100.draw(in: CGRect(x: barText100Rect.minX, y: barText100Rect.minY + (barText100Rect.height - barText100TextHeight) / 2, width: barText100Rect.width, height: barText100TextHeight), withAttributes: barText100FontAttributes)
        context.restoreGState()


        //// BarText50 Drawing
        let barText50Rect = CGRect(x: 15.19, y: 104.43, width: 22.44, height: 11.89)
        let barText50Style = NSMutableParagraphStyle()
        barText50Style.alignment = .center
        let barText50FontAttributes = [
            .font: UIFont(name: "Play", size: 8)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: barText50Style,
        ] as [NSAttributedString.Key: Any]

        let barText50TextHeight: CGFloat = barChartAxisText50.boundingRect(with: CGSize(width: barText50Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: barText50FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: barText50Rect)
        barChartAxisText50.draw(in: CGRect(x: barText50Rect.minX, y: barText50Rect.minY + (barText50Rect.height - barText50TextHeight) / 2, width: barText50Rect.width, height: barText50TextHeight), withAttributes: barText50FontAttributes)
        context.restoreGState()




        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 364.31, y: 205.08))
        bezierPath.addLine(to: CGPoint(x: 36.52, y: 205.08))
        bezierPath.addLine(to: CGPoint(x: 35.82, y: 14.65))
        barColumnColor3.setStroke()
        bezierPath.lineWidth = 0.3
        bezierPath.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 36.09, y: 14.75))
        bezier3Path.addLine(to: CGPoint(x: 363.21, y: 14.9))
        bezier3Path.addLine(to: CGPoint(x: 36.09, y: 14.75))
        bezier3Path.close()
        UIColor.gray.setFill()
        bezier3Path.fill()
        strokeColor.setStroke()
        bezier3Path.lineWidth = 0.3
        bezier3Path.lineJoinStyle = .bevel
        context.saveGState()
        context.setLineDash(phase: 0, lengths: [2, 2])
        bezier3Path.stroke()
        context.restoreGState()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 38.24, y: 110.66))
        bezier4Path.addLine(to: CGPoint(x: 364.25, y: 110.57))
        bezier4Path.addLine(to: CGPoint(x: 38.24, y: 110.66))
        bezier4Path.close()
        UIColor.gray.setFill()
        bezier4Path.fill()
        strokeColor.setStroke()
        bezier4Path.lineWidth = 0.3
        bezier4Path.lineJoinStyle = .bevel
        context.saveGState()
        context.setLineDash(phase: 0, lengths: [2, 3])
        bezier4Path.stroke()
        context.restoreGState()


        //// 1 Drawing
        let _1Rect = CGRect(x: 41.66, y: 206.83, width: 4.89, height: 9.27)
        let _1TextContent = "1"
        let _1Style = NSMutableParagraphStyle()
        _1Style.alignment = .left
        let _1FontAttributes = [
            .font: UIFont(name: "Play", size: 9)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: _1Style,
        ] as [NSAttributedString.Key: Any]

        let _1TextHeight: CGFloat = _1TextContent.boundingRect(with: CGSize(width: _1Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: _1FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: _1Rect)
        _1TextContent.draw(in: CGRect(x: _1Rect.minX, y: _1Rect.minY + (_1Rect.height - _1TextHeight) / 2, width: _1Rect.width, height: _1TextHeight), withAttributes: _1FontAttributes)
        context.restoreGState()


        //// 5 Drawing
        let _5Rect = CGRect(x: 89.75, y: 206.55, width: 4.89, height: 9.27)
        let _5TextContent = "5"
        let _5Style = NSMutableParagraphStyle()
        _5Style.alignment = .left
        let _5FontAttributes = [
            .font: UIFont(name: "Play", size: 9)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: _5Style,
        ] as [NSAttributedString.Key: Any]

        let _5TextHeight: CGFloat = _5TextContent.boundingRect(with: CGSize(width: _5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: _5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: _5Rect)
        _5TextContent.draw(in: CGRect(x: _5Rect.minX, y: _5Rect.minY + (_5Rect.height - _5TextHeight) / 2, width: _5Rect.width, height: _5TextHeight), withAttributes: _5FontAttributes)
        context.restoreGState()


        //// 10 Drawing
        let _10Rect = CGRect(x: 145.03, y: 206.46, width: 11.85, height: 9.27)
        let _10TextContent = "10"
        let _10Style = NSMutableParagraphStyle()
        _10Style.alignment = .left
        let _10FontAttributes = [
            .font: UIFont(name: "Play", size: 9)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: _10Style,
        ] as [NSAttributedString.Key: Any]

        let _10TextHeight: CGFloat = _10TextContent.boundingRect(with: CGSize(width: _10Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: _10FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: _10Rect)
        _10TextContent.draw(in: CGRect(x: _10Rect.minX, y: _10Rect.minY + (_10Rect.height - _10TextHeight) / 2, width: _10Rect.width, height: _10TextHeight), withAttributes: _10FontAttributes)
        context.restoreGState()


        //// 15 Drawing
        let _15Rect = CGRect(x: 205, y: 206.89, width: 11.85, height: 9.27)
        let _15TextContent = "15"
        let _15Style = NSMutableParagraphStyle()
        _15Style.alignment = .left
        let _15FontAttributes = [
            .font: UIFont(name: "Play", size: 9)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: _15Style,
        ] as [NSAttributedString.Key: Any]

        let _15TextHeight: CGFloat = _15TextContent.boundingRect(with: CGSize(width: _15Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: _15FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: _15Rect)
        _15TextContent.draw(in: CGRect(x: _15Rect.minX, y: _15Rect.minY + (_15Rect.height - _15TextHeight) / 2, width: _15Rect.width, height: _15TextHeight), withAttributes: _15FontAttributes)
        context.restoreGState()


        //// 20 Drawing
        let _20Rect = CGRect(x: 264.54, y: 206.6, width: 11.85, height: 9.27)
        let _20TextContent = "20"
        let _20Style = NSMutableParagraphStyle()
        _20Style.alignment = .left
        let _20FontAttributes = [
            .font: UIFont(name: "Play", size: 9)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: _20Style,
        ] as [NSAttributedString.Key: Any]

        let _20TextHeight: CGFloat = _20TextContent.boundingRect(with: CGSize(width: _20Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: _20FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: _20Rect)
        _20TextContent.draw(in: CGRect(x: _20Rect.minX, y: _20Rect.minY + (_20Rect.height - _20TextHeight) / 2, width: _20Rect.width, height: _20TextHeight), withAttributes: _20FontAttributes)
        context.restoreGState()


        //// 25 Drawing
        let _25Rect = CGRect(x: 324.51, y: 207.06, width: 11.85, height: 9.27)
        let _25TextContent = "25"
        let _25Style = NSMutableParagraphStyle()
        _25Style.alignment = .left
        let _25FontAttributes = [
            .font: UIFont(name: "Play", size: 9)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: _25Style,
        ] as [NSAttributedString.Key: Any]

        let _25TextHeight: CGFloat = _25TextContent.boundingRect(with: CGSize(width: _25Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: _25FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: _25Rect)
        _25TextContent.draw(in: CGRect(x: _25Rect.minX, y: _25Rect.minY + (_25Rect.height - _25TextHeight) / 2, width: _25Rect.width, height: _25TextHeight), withAttributes: _25FontAttributes)
        context.restoreGState()


        //// 30 Drawing
        let _30Rect = CGRect(x: 382.35, y: 207.45, width: 11.85, height: 9.27)
        let _30TextContent = "30"
        let _30Style = NSMutableParagraphStyle()
        _30Style.alignment = .left
        let _30FontAttributes = [
            .font: UIFont(name: "Play", size: 9)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: _30Style,
        ] as [NSAttributedString.Key: Any]

        let _30TextHeight: CGFloat = _30TextContent.boundingRect(with: CGSize(width: _30Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: _30FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: _30Rect)
        _30TextContent.draw(in: CGRect(x: _30Rect.minX, y: _30Rect.minY + (_30Rect.height - _30TextHeight) / 2, width: _30Rect.width, height: _30TextHeight), withAttributes: _30FontAttributes)
        context.restoreGState()




        //// Text 2 Drawing
        let text2Rect = CGRect(x: 48, y: 214.88, width: 321.38, height: 13.74)
        let text2TextContent = "Ð²ÑÐµÐ¼Ñ (Ð´Ð½ÐµÐ¹)"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [
            .font: UIFont(name: "Play", size: 10)!,
            .foregroundColor: barColumnColor3,
            .paragraphStyle: text2Style,
        ] as [NSAttributedString.Key: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()


        //// Text 4 Drawing
        context.saveGState()
        context.translateBy(x: 4.28, y: 204.67)
        context.rotate(by: -90 * CGFloat.pi/180)

        let text4Rect = CGRect(x: 0, y: 0, width: 188.96, height: 13.74)
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .center
        let text4FontAttributes = [
            .font: UIFont(name: "Play", size: 10)!,
            .foregroundColor: barColumnColor3,
            .paragraphStyle: text4Style,
        ] as [NSAttributedString.Key: Any]

        let text4TextHeight: CGFloat = barChartAxisTitle.boundingRect(with: CGSize(width: text4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text4Rect)
        barChartAxisTitle.draw(in: CGRect(x: text4Rect.minX, y: text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, width: text4Rect.width, height: text4TextHeight), withAttributes: text4FontAttributes)
        context.restoreGState()

        context.restoreGState()




        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 0.09, y: 15))
        bezier6Path.addLine(to: CGPoint(x: 410.09, y: 15))
        barChartBkgColor.setFill()
        bezier6Path.fill()
        UIColor.gray.setStroke()
        bezier6Path.lineWidth = 0.1
        bezier6Path.stroke()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 0.09, y: 34))
        bezier7Path.addLine(to: CGPoint(x: 410.09, y: 34))
        barChartBkgColor.setFill()
        bezier7Path.fill()
        UIColor.gray.setStroke()
        bezier7Path.lineWidth = 0.1
        bezier7Path.stroke()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 0.09, y: 53))
        bezier8Path.addLine(to: CGPoint(x: 410.09, y: 53))
        barChartBkgColor.setFill()
        bezier8Path.fill()
        UIColor.gray.setStroke()
        bezier8Path.lineWidth = 0.1
        bezier8Path.stroke()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 0.09, y: 72))
        bezier9Path.addLine(to: CGPoint(x: 410.09, y: 72))
        barChartBkgColor.setFill()
        bezier9Path.fill()
        UIColor.gray.setStroke()
        bezier9Path.lineWidth = 0.1
        bezier9Path.stroke()


        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: 0.09, y: 91))
        bezier10Path.addLine(to: CGPoint(x: 410.09, y: 91))
        barChartBkgColor.setFill()
        bezier10Path.fill()
        UIColor.gray.setStroke()
        bezier10Path.lineWidth = 0.1
        bezier10Path.stroke()


        //// Bezier 11 Drawing
        let bezier11Path = UIBezierPath()
        bezier11Path.move(to: CGPoint(x: 0.09, y: 110))
        bezier11Path.addLine(to: CGPoint(x: 410.09, y: 110))
        barChartBkgColor.setFill()
        bezier11Path.fill()
        UIColor.gray.setStroke()
        bezier11Path.lineWidth = 0.1
        bezier11Path.stroke()


        //// Bezier 12 Drawing
        let bezier12Path = UIBezierPath()
        bezier12Path.move(to: CGPoint(x: 0.09, y: 129))
        bezier12Path.addLine(to: CGPoint(x: 410.09, y: 129))
        barChartBkgColor.setFill()
        bezier12Path.fill()
        UIColor.gray.setStroke()
        bezier12Path.lineWidth = 0.1
        bezier12Path.stroke()


        //// Bezier 13 Drawing
        let bezier13Path = UIBezierPath()
        bezier13Path.move(to: CGPoint(x: 0.09, y: 148))
        bezier13Path.addLine(to: CGPoint(x: 410.09, y: 148))
        barChartBkgColor.setFill()
        bezier13Path.fill()
        UIColor.gray.setStroke()
        bezier13Path.lineWidth = 0.1
        bezier13Path.stroke()


        //// Bezier 14 Drawing
        let bezier14Path = UIBezierPath()
        bezier14Path.move(to: CGPoint(x: 0.09, y: 167))
        bezier14Path.addLine(to: CGPoint(x: 410.09, y: 167))
        barChartBkgColor.setFill()
        bezier14Path.fill()
        UIColor.gray.setStroke()
        bezier14Path.lineWidth = 0.1
        bezier14Path.stroke()


        //// Bezier 15 Drawing
        let bezier15Path = UIBezierPath()
        bezier15Path.move(to: CGPoint(x: 0.09, y: 186))
        bezier15Path.addLine(to: CGPoint(x: 410.09, y: 186))
        barChartBkgColor.setFill()
        bezier15Path.fill()
        UIColor.gray.setStroke()
        bezier15Path.lineWidth = 0.1
        bezier15Path.stroke()


        //// Bezier 16 Drawing
        let bezier16Path = UIBezierPath()
        bezier16Path.move(to: CGPoint(x: 0.09, y: 205))
        bezier16Path.addLine(to: CGPoint(x: 410.09, y: 205))
        barChartBkgColor.setFill()
        bezier16Path.fill()
        UIColor.gray.setStroke()
        bezier16Path.lineWidth = 0.1
        bezier16Path.stroke()


        //// AvgLine Drawing
        context.saveGState()
        context.translateBy(x: 36.01, y: barChartExpr2)

        let avgLinePath = UIBezierPath()
        avgLinePath.move(to: CGPoint(x: 0.32, y: 0))
        avgLinePath.addLine(to: CGPoint(x: 0, y: 0.97))
        avgLinePath.addLine(to: CGPoint(x: 326.73, y: 0.97))
        avgLinePath.addLine(to: CGPoint(x: 326.74, y: 0))
        avgLinePath.addLine(to: CGPoint(x: 0.32, y: 0))
        avgLinePath.close()
        context.saveGState()
        avgLinePath.addClip()
        let avgLineBounds: CGRect = avgLinePath.cgPath.boundingBoxOfPath
        context.drawLinearGradient(avgLineGradient,
            start: CGPoint(x: avgLineBounds.midX + 5.54 * avgLineBounds.width / 326.74, y: avgLineBounds.midY + -2.03 * avgLineBounds.height / 0.97),
            end: CGPoint(x: avgLineBounds.midX + -5.54 * avgLineBounds.width / 326.74, y: avgLineBounds.midY + 2.03 * avgLineBounds.height / 0.97),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// Text 10 Drawing
        context.saveGState()
        context.translateBy(x: barChartLineExpr, y: (barChartExpr2 - 14.162109375))

        let text10Rect = CGRect(x: -1.08, y: -0.02, width: 148.89, height: 12.66)
        let text10Path = UIBezierPath(rect: text10Rect)
        context.saveGState()
        text10Path.addClip()
        let text10RotatedPath = UIBezierPath()
        text10RotatedPath.append(text10Path)
        var text10Transform = CGAffineTransform(rotationAngle: -135 * -CGFloat.pi/180)
        text10RotatedPath.apply(text10Transform)
        let text10Bounds = text10RotatedPath.cgPath.boundingBoxOfPath
        text10Transform = text10Transform.inverted()
        context.drawLinearGradient(avgLineGradient,
            start: CGPoint(x: text10Bounds.minX, y: text10Bounds.midY).applying(text10Transform),
            end: CGPoint(x: text10Bounds.maxX, y: text10Bounds.midY).applying(text10Transform),
            options: [])
        context.restoreGState()
        let text10Style = NSMutableParagraphStyle()
        text10Style.alignment = .center
        let text10FontAttributes = [
            .font: UIFont(name: "Play", size: 13)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text10Style,
        ] as [NSAttributedString.Key: Any]

        let text10TextHeight: CGFloat = barChartLineText.boundingRect(with: CGSize(width: text10Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text10FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text10Rect)
        barChartLineText.draw(in: CGRect(x: text10Rect.minX, y: text10Rect.minY + (text10Rect.height - text10TextHeight) / 2, width: text10Rect.width, height: text10TextHeight), withAttributes: text10FontAttributes)
        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }




    @objc(ProgressScreenResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



private extension UIColor {
    func blended(withFraction fraction: CGFloat, of color: UIColor) -> UIColor {
        var r1: CGFloat = 1, g1: CGFloat = 1, b1: CGFloat = 1, a1: CGFloat = 1
        var r2: CGFloat = 1, g2: CGFloat = 1, b2: CGFloat = 1, a2: CGFloat = 1

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}
