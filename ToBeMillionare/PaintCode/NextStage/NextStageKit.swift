//
//  NextStageKit.swift
//  ProjectName
//
//  Created by Igor Ivanov on 19.08.2020.
//  Copyright © 2020 None. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class NextStageKit : NSObject {

    //// Cache

    private struct Cache {
        static let gradientColor27: UIColor = UIColor(red: 0.154, green: 0.439, blue: 1.000, alpha: 1.000)
    }

    //// Colors

    @objc dynamic public class var gradientColor27: UIColor { return Cache.gradientColor27 }

    //// Drawing Methods

    @objc dynamic public class func drawDataLayer_65(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 896), resizing: ResizingBehavior = .aspectFit, stageNum: CGFloat = 5, zondRecovery: CGFloat = 23, beforeDisasterLeft: String = "24", startAnimation: CGFloat = 1, highlightTitle: CGFloat = 0.334) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 896), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 896)


        //// Color Declarations
        let color6 = UIColor(red: 0.176, green: 0.333, blue: 0.698, alpha: 1.000)
        let bezierGradientColor5 = UIColor(red: 0.192, green: 1.000, blue: 0.953, alpha: 1.000)
        let color2 = UIColor(red: 0.029, green: 0.724, blue: 1.000, alpha: 1.000)

        //// Image Declarations
        let dollar = UIImage(named: "dollar.png")!
        let rupees = UIImage(named: "rupees.png")!
        let pound = UIImage(named: "pound.png")!
        let shekel = UIImage(named: "shekel.png")!
        let euro = UIImage(named: "euro.png")!
        let ruble = UIImage(named: "ruble.png")!
        let iena = UIImage(named: "iena.png")!

        //// Variable Declarations
        let aimMoneyExp = stageNum == 1 ? "новая цель 1/7: $1000" : (stageNum == 2 ? "новая цель 2/7: €1000" : (stageNum == 3 ? "новая цель 3/7: ¥1000" : (stageNum == 4 ? "новая цель 4/7: £1000" : (stageNum == 5 ? "новая цель 5/7: ₽1000" : (stageNum == 6 ? "новая цель 6/7: ₹1000" : (stageNum == 7 ? "новая цель 7/7: ₪1000" : ""))))))
        let dollarExp = stageNum > 1 ? "$1000" : "$0"
        let euroExp = stageNum > 2 ? "€1000" : "€0"
        let jpyExp = stageNum > 3 ? "¥1000" : "¥0"
        let gbrExp = stageNum > 4 ? "£1000" : "£0"
        let rubleExp = stageNum > 5 ? "₽1000" : "₽0"
        let inrExp = stageNum > 6 ? "₹1000" : "₹0"
        let sheckelExp = stageNum > 7 ? "₪1000" : "₪0"
        let betRecoveryExp = "\(Int(round(zondRecovery)))" + "%"
        let aimHighlightExp: CGFloat = startAnimation <= 0.1 ? startAnimation * 10 : (startAnimation > 0.1 && startAnimation < 0.2 ? (0.2 - startAnimation) * 10 : 0)
        let disasterHighlightExp: CGFloat = startAnimation >= 0.2 && startAnimation <= 0.3 ? (startAnimation - 0.2) * 10 : (startAnimation > 0.3 && startAnimation < 0.4 ? (0.4 - startAnimation) * 10 : 0)
        let zondRecoveryExp: CGFloat = startAnimation >= 0.4 && startAnimation <= 0.5 ? (startAnimation - 0.4) * 10 : (startAnimation > 0.5 && startAnimation < 0.6 ? (0.6 - startAnimation) * 10 : 0)
        let euroHightlightExp: CGFloat = stageNum != 2 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let jpyHightlightExp: CGFloat = stageNum != 3 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let gbrHightlightExp: CGFloat = stageNum != 4 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let ruHightlightExp: CGFloat = stageNum != 5 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let inrHightlightExp: CGFloat = stageNum != 6 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let sheHightlightExp: CGFloat = stageNum != 7 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let congratTitle: CGFloat = startAnimation <= 0.1 ? -414 * (1 - startAnimation * 10) : 0
        let highlightTitleExp: CGFloat = 90 * (1 - highlightTitle) - 130 * highlightTitle

        //// Money Group
        //// Sheckel Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Sheckel Button
        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 187.81, y: 667, width: 184.75, height: 30.33))
        color6.setFill()
        rectangle4Path.fill()


        //// Text 5 Drawing
        let text5Rect = CGRect(x: 188.21, y: 667.22, width: 184.28, height: 30)
        let text5Style = NSMutableParagraphStyle()
        text5Style.alignment = .center
        let text5FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text5Style,
        ] as [NSAttributedString.Key: Any]

        let text5TextHeight: CGFloat = sheckelExp.boundingRect(with: CGSize(width: text5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text5Rect)
        sheckelExp.draw(in: CGRect(x: text5Rect.minX, y: text5Rect.minY + (text5Rect.height - text5TextHeight) / 2, width: text5Rect.width, height: text5TextHeight), withAttributes: text5FontAttributes)
        context.restoreGState()


        //// s9 Drawing
        context.saveGState()
        context.translateBy(x: 195, y: 671)
        context.scaleBy(x: 0.17, y: 0.17)

        let s9Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 199, height: 134))
        context.saveGState()
        s9Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()




        //// Sheckel Title Drawing
        let sheckelTitleRect = CGRect(x: 42.12, y: 667.19, width: 142.05, height: 30)
        let sheckelTitleTextContent = "Шекель:"
        let sheckelTitleStyle = NSMutableParagraphStyle()
        sheckelTitleStyle.alignment = .left
        let sheckelTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: sheckelTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let sheckelTitleTextHeight: CGFloat = sheckelTitleTextContent.boundingRect(with: CGSize(width: sheckelTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: sheckelTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: sheckelTitleRect)
        sheckelTitleTextContent.draw(in: CGRect(x: sheckelTitleRect.minX, y: sheckelTitleRect.minY + (sheckelTitleRect.height - sheckelTitleTextHeight) / 2, width: sheckelTitleRect.width, height: sheckelTitleTextHeight), withAttributes: sheckelTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 13 Drawing
        context.saveGState()
        context.setAlpha(sheHightlightExp)
        context.setBlendMode(.color)

        let rectangle13Path = UIBezierPath(rect: CGRect(x: 37, y: 667, width: 335, height: 30))
        color2.setFill()
        rectangle13Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// INR Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// INR Button
        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 187.81, y: 620, width: 184.75, height: 30.33))
        color6.setFill()
        rectangle3Path.fill()


        //// Text 4 Drawing
        let text4Rect = CGRect(x: 188.21, y: 620.22, width: 184.28, height: 30)
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .center
        let text4FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text4Style,
        ] as [NSAttributedString.Key: Any]

        let text4TextHeight: CGFloat = inrExp.boundingRect(with: CGSize(width: text4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text4Rect)
        inrExp.draw(in: CGRect(x: text4Rect.minX, y: text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, width: text4Rect.width, height: text4TextHeight), withAttributes: text4FontAttributes)
        context.restoreGState()


        //// i1 Drawing
        context.saveGState()
        context.translateBy(x: 195, y: 623)
        context.scaleBy(x: 0.17, y: 0.17)

        let i1Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 201, height: 135))
        context.saveGState()
        i1Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()




        //// INR Title Drawing
        let iNRTitleRect = CGRect(x: 42.12, y: 620.19, width: 142.05, height: 30)
        let iNRTitleTextContent = "Рупий:"
        let iNRTitleStyle = NSMutableParagraphStyle()
        iNRTitleStyle.alignment = .left
        let iNRTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: iNRTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let iNRTitleTextHeight: CGFloat = iNRTitleTextContent.boundingRect(with: CGSize(width: iNRTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: iNRTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: iNRTitleRect)
        iNRTitleTextContent.draw(in: CGRect(x: iNRTitleRect.minX, y: iNRTitleRect.minY + (iNRTitleRect.height - iNRTitleTextHeight) / 2, width: iNRTitleRect.width, height: iNRTitleTextHeight), withAttributes: iNRTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 12 Drawing
        context.saveGState()
        context.setAlpha(inrHightlightExp)
        context.setBlendMode(.color)

        let rectangle12Path = UIBezierPath(rect: CGRect(x: 37, y: 620, width: 335, height: 30))
        color2.setFill()
        rectangle12Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Ruble Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Ruble Button
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 187.81, y: 572, width: 184.75, height: 30.33))
        color6.setFill()
        rectangle2Path.fill()


        //// Text 3 Drawing
        let text3Rect = CGRect(x: 188.21, y: 572.22, width: 184.28, height: 30)
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .center
        let text3FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text3Style,
        ] as [NSAttributedString.Key: Any]

        let text3TextHeight: CGFloat = rubleExp.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        rubleExp.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()


        //// ru9 Drawing
        context.saveGState()
        context.translateBy(x: 195, y: 575)
        context.scaleBy(x: 0.17, y: 0.17)

        let ru9Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 209, height: 138))
        context.saveGState()
        ru9Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()




        //// Ruble Title Drawing
        let rubleTitleRect = CGRect(x: 42.12, y: 572.19, width: 142.05, height: 30)
        let rubleTitleTextContent = "Рубль:"
        let rubleTitleStyle = NSMutableParagraphStyle()
        rubleTitleStyle.alignment = .left
        let rubleTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: rubleTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let rubleTitleTextHeight: CGFloat = rubleTitleTextContent.boundingRect(with: CGSize(width: rubleTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: rubleTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: rubleTitleRect)
        rubleTitleTextContent.draw(in: CGRect(x: rubleTitleRect.minX, y: rubleTitleRect.minY + (rubleTitleRect.height - rubleTitleTextHeight) / 2, width: rubleTitleRect.width, height: rubleTitleTextHeight), withAttributes: rubleTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 11 Drawing
        context.saveGState()
        context.setAlpha(ruHightlightExp)
        context.setBlendMode(.color)

        let rectangle11Path = UIBezierPath(rect: CGRect(x: 37, y: 572, width: 335, height: 30))
        color2.setFill()
        rectangle11Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// GBP Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// GBP Button
        //// Rectangle 31 Drawing
        let rectangle31Path = UIBezierPath(rect: CGRect(x: 186.81, y: 525, width: 184.75, height: 30.33))
        color6.setFill()
        rectangle31Path.fill()


        //// Text 14 Drawing
        let text14Rect = CGRect(x: 187.21, y: 525.22, width: 184.28, height: 30)
        let text14Style = NSMutableParagraphStyle()
        text14Style.alignment = .center
        let text14FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text14Style,
        ] as [NSAttributedString.Key: Any]

        let text14TextHeight: CGFloat = gbrExp.boundingRect(with: CGSize(width: text14Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text14FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text14Rect)
        gbrExp.draw(in: CGRect(x: text14Rect.minX, y: text14Rect.minY + (text14Rect.height - text14TextHeight) / 2, width: text14Rect.width, height: text14TextHeight), withAttributes: text14FontAttributes)
        context.restoreGState()


        //// p1 Drawing
        context.saveGState()
        context.translateBy(x: 195, y: 528)
        context.scaleBy(x: 0.17, y: 0.17)

        let p1Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 202, height: 136))
        context.saveGState()
        p1Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()




        //// GBP Title Drawing
        let gBPTitleRect = CGRect(x: 41.12, y: 525.19, width: 142.05, height: 30)
        let gBPTitleTextContent = "Фунт:"
        let gBPTitleStyle = NSMutableParagraphStyle()
        gBPTitleStyle.alignment = .left
        let gBPTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: gBPTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let gBPTitleTextHeight: CGFloat = gBPTitleTextContent.boundingRect(with: CGSize(width: gBPTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: gBPTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: gBPTitleRect)
        gBPTitleTextContent.draw(in: CGRect(x: gBPTitleRect.minX, y: gBPTitleRect.minY + (gBPTitleRect.height - gBPTitleTextHeight) / 2, width: gBPTitleRect.width, height: gBPTitleTextHeight), withAttributes: gBPTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 10 Drawing
        context.saveGState()
        context.setAlpha(gbrHightlightExp)
        context.setBlendMode(.color)

        let rectangle10Path = UIBezierPath(rect: CGRect(x: 36, y: 525, width: 335, height: 30))
        color2.setFill()
        rectangle10Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// JPY Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// JPY Button
        //// Rectangle 29 Drawing
        let rectangle29Path = UIBezierPath(rect: CGRect(x: 187.13, y: 476.9, width: 184.75, height: 31))
        color6.setFill()
        rectangle29Path.fill()


        //// JPY Text Drawing
        let jPYTextRect = CGRect(x: 187.48, y: 476.9, width: 184.37, height: 31)
        let jPYTextStyle = NSMutableParagraphStyle()
        jPYTextStyle.alignment = .center
        let jPYTextFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: jPYTextStyle,
        ] as [NSAttributedString.Key: Any]

        let jPYTextTextHeight: CGFloat = jpyExp.boundingRect(with: CGSize(width: jPYTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: jPYTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: jPYTextRect)
        jpyExp.draw(in: CGRect(x: jPYTextRect.minX, y: jPYTextRect.minY + (jPYTextRect.height - jPYTextTextHeight) / 2, width: jPYTextRect.width, height: jPYTextTextHeight), withAttributes: jPYTextFontAttributes)
        context.restoreGState()


        //// ie 8 Drawing
        context.saveGState()
        context.translateBy(x: 195, y: 482)
        context.scaleBy(x: 0.17, y: 0.17)

        let ie8Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 201, height: 135))
        context.saveGState()
        ie8Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()




        //// JPY Title Drawing
        let jPYTitleRect = CGRect(x: 41.13, y: 476.9, width: 142.05, height: 31)
        let jPYTitleTextContent = "Иена:"
        let jPYTitleStyle = NSMutableParagraphStyle()
        jPYTitleStyle.alignment = .left
        let jPYTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: jPYTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let jPYTitleTextHeight: CGFloat = jPYTitleTextContent.boundingRect(with: CGSize(width: jPYTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: jPYTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: jPYTitleRect)
        jPYTitleTextContent.draw(in: CGRect(x: jPYTitleRect.minX, y: jPYTitleRect.minY + (jPYTitleRect.height - jPYTitleTextHeight) / 2, width: jPYTitleRect.width, height: jPYTitleTextHeight), withAttributes: jPYTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 9 Drawing
        context.saveGState()
        context.setAlpha(jpyHightlightExp)
        context.setBlendMode(.color)

        let rectangle9Path = UIBezierPath(rect: CGRect(x: 36, y: 477, width: 336, height: 31))
        color2.setFill()
        rectangle9Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Euro Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Euro Button
        //// Rectangle 30 Drawing
        let rectangle30Path = UIBezierPath(rect: CGRect(x: 187.49, y: 429.15, width: 184.75, height: 30))
        color6.setFill()
        rectangle30Path.fill()


        //// EuroText Drawing
        let euroTextRect = CGRect(x: 187.76, y: 429.15, width: 184.62, height: 30)
        let euroTextStyle = NSMutableParagraphStyle()
        euroTextStyle.alignment = .center
        let euroTextFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: euroTextStyle,
        ] as [NSAttributedString.Key: Any]

        let euroTextTextHeight: CGFloat = euroExp.boundingRect(with: CGSize(width: euroTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: euroTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: euroTextRect)
        euroExp.draw(in: CGRect(x: euroTextRect.minX, y: euroTextRect.minY + (euroTextRect.height - euroTextTextHeight) / 2, width: euroTextRect.width, height: euroTextTextHeight), withAttributes: euroTextFontAttributes)
        context.restoreGState()


        //// e9 Drawing
        context.saveGState()
        context.translateBy(x: 195, y: 433)
        context.scaleBy(x: 0.17, y: 0.17)

        let e9Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 196, height: 129))
        context.saveGState()
        e9Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()




        //// Euro Title Drawing
        let euroTitleRect = CGRect(x: 41.49, y: 429.42, width: 142.05, height: 30)
        let euroTitleTextContent = "Евро:"
        let euroTitleStyle = NSMutableParagraphStyle()
        euroTitleStyle.alignment = .left
        let euroTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: euroTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let euroTitleTextHeight: CGFloat = euroTitleTextContent.boundingRect(with: CGSize(width: euroTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: euroTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: euroTitleRect)
        euroTitleTextContent.draw(in: CGRect(x: euroTitleRect.minX, y: euroTitleRect.minY + (euroTitleRect.height - euroTitleTextHeight) / 2, width: euroTitleRect.width, height: euroTitleTextHeight), withAttributes: euroTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 8 Drawing
        context.saveGState()
        context.setAlpha(euroHightlightExp)
        context.setBlendMode(.color)

        let rectangle8Path = UIBezierPath(rect: CGRect(x: 36, y: 429, width: 336, height: 30))
        color2.setFill()
        rectangle8Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Dollar Group
        //// Dollar Button
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 187.33, y: 383.06, width: 184.75, height: 28.7))
        color6.setFill()
        rectanglePath.fill()


        //// Text Drawing
        let textRect = CGRect(x: 187.73, y: 382.95, width: 184.28, height: 28)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = dollarExp.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        dollarExp.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// d1 Drawing
        context.saveGState()
        context.translateBy(x: 195, y: 386)
        context.scaleBy(x: 0.17, y: 0.17)

        let d1Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 198, height: 131))
        context.saveGState()
        d1Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()




        //// Dollar Title Drawing
        let dollarTitleRect = CGRect(x: 41.54, y: 382.95, width: 142.05, height: 29)
        let dollarTitleTextContent = "Доллар:"
        let dollarTitleStyle = NSMutableParagraphStyle()
        dollarTitleStyle.alignment = .left
        let dollarTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: dollarTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let dollarTitleTextHeight: CGFloat = dollarTitleTextContent.boundingRect(with: CGSize(width: dollarTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: dollarTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: dollarTitleRect)
        dollarTitleTextContent.draw(in: CGRect(x: dollarTitleRect.minX, y: dollarTitleRect.minY + (dollarTitleRect.height - dollarTitleTextHeight) / 2, width: dollarTitleRect.width, height: dollarTitleTextHeight), withAttributes: dollarTitleFontAttributes)
        context.restoreGState()






        //// Zond Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Text 21 Drawing
        let text21Rect = CGRect(x: 56.24, y: 231, width: 215.76, height: 32)
        let text21TextContent = "■ cостояние зонда:"
        let text21Style = NSMutableParagraphStyle()
        text21Style.alignment = .left
        let text21FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 20)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text21Style,
        ] as [NSAttributedString.Key: Any]

        let text21TextHeight: CGFloat = text21TextContent.boundingRect(with: CGSize(width: text21Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text21FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text21Rect)
        text21TextContent.draw(in: CGRect(x: text21Rect.minX, y: text21Rect.minY + (text21Rect.height - text21TextHeight) / 2, width: text21Rect.width, height: text21TextHeight), withAttributes: text21FontAttributes)
        context.restoreGState()


        //// Text 22 Drawing
        let text22Rect = CGRect(x: 279.47, y: 231, width: 76.53, height: 32)
        let text22Style = NSMutableParagraphStyle()
        text22Style.alignment = .right
        let text22FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 20)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text22Style,
        ] as [NSAttributedString.Key: Any]

        let text22TextHeight: CGFloat = betRecoveryExp.boundingRect(with: CGSize(width: text22Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text22FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text22Rect)
        betRecoveryExp.draw(in: CGRect(x: text22Rect.minX, y: text22Rect.minY + (text22Rect.height - text22TextHeight) / 2, width: text22Rect.width, height: text22TextHeight), withAttributes: text22FontAttributes)
        context.restoreGState()


        //// Rectangle 7 Drawing
        context.saveGState()
        context.setAlpha(zondRecoveryExp)
        context.setBlendMode(.color)

        let rectangle7Path = UIBezierPath(rect: CGRect(x: 56, y: 233, width: 300, height: 30))
        color2.setFill()
        rectangle7Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Remaining Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Text 18 Drawing
        let text18Rect = CGRect(x: 56, y: 197.1, width: 280, height: 31)
        let text18TextContent = "■ дней до столкновения:"
        let text18Style = NSMutableParagraphStyle()
        text18Style.alignment = .left
        let text18FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 20)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text18Style,
        ] as [NSAttributedString.Key: Any]

        let text18TextHeight: CGFloat = text18TextContent.boundingRect(with: CGSize(width: text18Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text18FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text18Rect)
        text18TextContent.draw(in: CGRect(x: text18Rect.minX, y: text18Rect.minY + (text18Rect.height - text18TextHeight) / 2, width: text18Rect.width, height: text18TextHeight), withAttributes: text18FontAttributes)
        context.restoreGState()


        //// Text 20 Drawing
        let text20Rect = CGRect(x: 320, y: 198, width: 36, height: 31)
        let text20Style = NSMutableParagraphStyle()
        text20Style.alignment = .right
        let text20FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 20)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text20Style,
        ] as [NSAttributedString.Key: Any]

        let text20TextHeight: CGFloat = beforeDisasterLeft.boundingRect(with: CGSize(width: text20Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text20FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text20Rect)
        beforeDisasterLeft.draw(in: CGRect(x: text20Rect.minX, y: text20Rect.minY + (text20Rect.height - text20TextHeight) / 2, width: text20Rect.width, height: text20TextHeight), withAttributes: text20FontAttributes)
        context.restoreGState()


        //// Rectangle 6 Drawing
        context.saveGState()
        context.setAlpha(disasterHighlightExp)
        context.setBlendMode(.color)

        let rectangle6Path = UIBezierPath(rect: CGRect(x: 56, y: 198, width: 300, height: 30))
        color2.setFill()
        rectangle6Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Aim Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Aim Drawing
        let aimRect = CGRect(x: 0, y: 144.28, width: 414, height: 47.72)
        let aimStyle = NSMutableParagraphStyle()
        aimStyle.alignment = .center
        let aimFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: aimStyle,
        ] as [NSAttributedString.Key: Any]

        let aimTextHeight: CGFloat = aimMoneyExp.boundingRect(with: CGSize(width: aimRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: aimFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: aimRect)
        aimMoneyExp.draw(in: CGRect(x: aimRect.minX, y: aimRect.minY + (aimRect.height - aimTextHeight) / 2, width: aimRect.width, height: aimTextHeight), withAttributes: aimFontAttributes)
        context.restoreGState()


        //// Rectangle 5 Drawing
        context.saveGState()
        context.setAlpha(aimHighlightExp)
        context.setBlendMode(.color)

        let rectangle5Path = UIBezierPath(rect: CGRect(x: 0, y: 144, width: 414, height: 48))
        color2.setFill()
        rectangle5Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Text 6 Drawing
        let text6Rect = CGRect(x: congratTitle, y: 52.28, width: 414, height: 60.62)
        let text6Path = UIBezierPath(rect: text6Rect)
        NextStageKit.gradientColor27.setStroke()
        text6Path.lineWidth = 1
        text6Path.stroke()
        let text6TextContent = "Поздравляем!"
        let text6Style = NSMutableParagraphStyle()
        text6Style.alignment = .center
        let text6FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text6Style,
        ] as [NSAttributedString.Key: Any]

        let text6TextHeight: CGFloat = text6TextContent.boundingRect(with: CGSize(width: text6Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text6Rect)
        text6TextContent.draw(in: CGRect(x: text6Rect.minX, y: text6Rect.minY + (text6Rect.height - text6TextHeight) / 2, width: text6Rect.width, height: text6TextHeight), withAttributes: text6FontAttributes)
        context.restoreGState()


        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Text 2 Drawing
        context.saveGState()
        context.setAlpha(startAnimation)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let text2Rect = CGRect(x: 0, y: 52.28, width: 414, height: 60.62)
        let text2Path = UIBezierPath(rect: text2Rect)
        NextStageKit.gradientColor27.setStroke()
        text2Path.lineWidth = 1
        text2Path.stroke()
        let text2TextContent = "Поздравляем!"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text2Style,
        ] as [NSAttributedString.Key: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// Rectangle 14 Drawing
        context.saveGState()
        context.translateBy(x: 196.68, y: 8.48)
        context.rotate(by: -highlightTitleExp * CGFloat.pi/180)

        context.saveGState()
        context.setBlendMode(.sourceIn)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let rectangle14Path = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 57.2, height: 202.1), cornerRadius: 28.6)
        bezierGradientColor5.setFill()
        rectangle14Path.fill()
        NextStageKit.gradientColor27.setStroke()
        rectangle14Path.lineWidth = 1
        rectangle14Path.stroke()

        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawDataLayer_58(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit, stageNum: CGFloat = 5, zondRecovery: CGFloat = 23, beforeDisasterLeft: String = "24", startAnimation: CGFloat = 1, highlightTitle: CGFloat = 0.334) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)


        //// Color Declarations
        let color6 = UIColor(red: 0.176, green: 0.333, blue: 0.698, alpha: 1.000)
        let bezierGradientColor5 = UIColor(red: 0.192, green: 1.000, blue: 0.953, alpha: 1.000)
        let color2 = UIColor(red: 0.029, green: 0.724, blue: 1.000, alpha: 1.000)

        //// Image Declarations
        let dollar = UIImage(named: "dollar.png")!
        let rupees = UIImage(named: "rupees.png")!
        let pound = UIImage(named: "pound.png")!
        let shekel = UIImage(named: "shekel.png")!
        let euro = UIImage(named: "euro.png")!
        let ruble = UIImage(named: "ruble.png")!
        let iena = UIImage(named: "iena.png")!

        //// Variable Declarations
        let aimMoneyExp = stageNum == 1 ? "новая цель 1/7: $1000" : (stageNum == 2 ? "новая цель 2/7: €1000" : (stageNum == 3 ? "новая цель 3/7: ¥1000" : (stageNum == 4 ? "новая цель 4/7: £1000" : (stageNum == 5 ? "новая цель 5/7: ₽1000" : (stageNum == 6 ? "новая цель 6/7: ₹1000" : (stageNum == 7 ? "новая цель 7/7: ₪1000" : ""))))))
        let dollarExp = stageNum > 1 ? "$1000" : "$0"
        let euroExp = stageNum > 2 ? "€1000" : "€0"
        let jpyExp = stageNum > 3 ? "¥1000" : "¥0"
        let gbrExp = stageNum > 4 ? "£1000" : "£0"
        let rubleExp = stageNum > 5 ? "₽1000" : "₽0"
        let inrExp = stageNum > 6 ? "₹1000" : "₹0"
        let sheckelExp = stageNum > 7 ? "₪1000" : "₪0"
        let betRecoveryExp = "\(Int(round(zondRecovery)))" + "%"
        let aimHighlightExp: CGFloat = startAnimation <= 0.1 ? startAnimation * 10 : (startAnimation > 0.1 && startAnimation < 0.2 ? (0.2 - startAnimation) * 10 : 0)
        let disasterHighlightExp: CGFloat = startAnimation >= 0.2 && startAnimation <= 0.3 ? (startAnimation - 0.2) * 10 : (startAnimation > 0.3 && startAnimation < 0.4 ? (0.4 - startAnimation) * 10 : 0)
        let zondRecoveryExp: CGFloat = startAnimation >= 0.4 && startAnimation <= 0.5 ? (startAnimation - 0.4) * 10 : (startAnimation > 0.5 && startAnimation < 0.6 ? (0.6 - startAnimation) * 10 : 0)
        let euroHightlightExp: CGFloat = stageNum != 2 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let jpyHightlightExp: CGFloat = stageNum != 3 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let gbrHightlightExp: CGFloat = stageNum != 4 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let ruHightlightExp: CGFloat = stageNum != 5 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let inrHightlightExp: CGFloat = stageNum != 6 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let sheHightlightExp: CGFloat = stageNum != 7 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let congratTitle: CGFloat = startAnimation <= 0.1 ? -414 * (1 - startAnimation * 10) : 0
        let highlightTitleExp: CGFloat = 90 * (1 - highlightTitle) - 130 * highlightTitle

        //// Money Group
        //// Sheckel Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Sheckel Button
        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 168.81, y: 667, width: 184.75, height: 30.33))
        color6.setFill()
        rectangle4Path.fill()


        //// Text 5 Drawing
        let text5Rect = CGRect(x: 169.21, y: 667.22, width: 184.28, height: 30)
        let text5Style = NSMutableParagraphStyle()
        text5Style.alignment = .center
        let text5FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text5Style,
        ] as [NSAttributedString.Key: Any]

        let text5TextHeight: CGFloat = sheckelExp.boundingRect(with: CGSize(width: text5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text5Rect)
        sheckelExp.draw(in: CGRect(x: text5Rect.minX, y: text5Rect.minY + (text5Rect.height - text5TextHeight) / 2, width: text5Rect.width, height: text5TextHeight), withAttributes: text5FontAttributes)
        context.restoreGState()


        //// s9 Drawing
        context.saveGState()
        context.translateBy(x: 175, y: 671)
        context.scaleBy(x: 0.17, y: 0.17)

        let s9Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 199, height: 134))
        context.saveGState()
        s9Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()




        //// Sheckel Title Drawing
        let sheckelTitleRect = CGRect(x: 23.12, y: 667.19, width: 142.05, height: 30)
        let sheckelTitleTextContent = "Шекель:"
        let sheckelTitleStyle = NSMutableParagraphStyle()
        sheckelTitleStyle.alignment = .left
        let sheckelTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: sheckelTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let sheckelTitleTextHeight: CGFloat = sheckelTitleTextContent.boundingRect(with: CGSize(width: sheckelTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: sheckelTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: sheckelTitleRect)
        sheckelTitleTextContent.draw(in: CGRect(x: sheckelTitleRect.minX, y: sheckelTitleRect.minY + (sheckelTitleRect.height - sheckelTitleTextHeight) / 2, width: sheckelTitleRect.width, height: sheckelTitleTextHeight), withAttributes: sheckelTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 13 Drawing
        context.saveGState()
        context.setAlpha(sheHightlightExp)
        context.setBlendMode(.color)

        let rectangle13Path = UIBezierPath(rect: CGRect(x: 18, y: 667, width: 335, height: 30))
        color2.setFill()
        rectangle13Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// INR Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// INR Button
        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 168.81, y: 620, width: 184.75, height: 30.33))
        color6.setFill()
        rectangle3Path.fill()


        //// Text 4 Drawing
        let text4Rect = CGRect(x: 169.21, y: 620.22, width: 184.28, height: 30)
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .center
        let text4FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text4Style,
        ] as [NSAttributedString.Key: Any]

        let text4TextHeight: CGFloat = inrExp.boundingRect(with: CGSize(width: text4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text4Rect)
        inrExp.draw(in: CGRect(x: text4Rect.minX, y: text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, width: text4Rect.width, height: text4TextHeight), withAttributes: text4FontAttributes)
        context.restoreGState()


        //// i1 Drawing
        context.saveGState()
        context.translateBy(x: 175, y: 624)
        context.scaleBy(x: 0.17, y: 0.17)

        let i1Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 201, height: 135))
        context.saveGState()
        i1Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()




        //// INR Title Drawing
        let iNRTitleRect = CGRect(x: 23.12, y: 620.19, width: 142.05, height: 30)
        let iNRTitleTextContent = "Рупий:"
        let iNRTitleStyle = NSMutableParagraphStyle()
        iNRTitleStyle.alignment = .left
        let iNRTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: iNRTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let iNRTitleTextHeight: CGFloat = iNRTitleTextContent.boundingRect(with: CGSize(width: iNRTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: iNRTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: iNRTitleRect)
        iNRTitleTextContent.draw(in: CGRect(x: iNRTitleRect.minX, y: iNRTitleRect.minY + (iNRTitleRect.height - iNRTitleTextHeight) / 2, width: iNRTitleRect.width, height: iNRTitleTextHeight), withAttributes: iNRTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 12 Drawing
        context.saveGState()
        context.setAlpha(inrHightlightExp)
        context.setBlendMode(.color)

        let rectangle12Path = UIBezierPath(rect: CGRect(x: 18, y: 620, width: 335, height: 30))
        color2.setFill()
        rectangle12Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Ruble Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Ruble Button
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 168.81, y: 572, width: 184.75, height: 30.33))
        color6.setFill()
        rectangle2Path.fill()


        //// Text 3 Drawing
        let text3Rect = CGRect(x: 169.21, y: 572.22, width: 184.28, height: 30)
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .center
        let text3FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text3Style,
        ] as [NSAttributedString.Key: Any]

        let text3TextHeight: CGFloat = rubleExp.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        rubleExp.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()


        //// ru9 Drawing
        context.saveGState()
        context.translateBy(x: 175, y: 576)
        context.scaleBy(x: 0.17, y: 0.17)

        let ru9Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 209, height: 138))
        context.saveGState()
        ru9Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()




        //// Ruble Title Drawing
        let rubleTitleRect = CGRect(x: 23.12, y: 572.19, width: 142.05, height: 30)
        let rubleTitleTextContent = "Рубль:"
        let rubleTitleStyle = NSMutableParagraphStyle()
        rubleTitleStyle.alignment = .left
        let rubleTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: rubleTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let rubleTitleTextHeight: CGFloat = rubleTitleTextContent.boundingRect(with: CGSize(width: rubleTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: rubleTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: rubleTitleRect)
        rubleTitleTextContent.draw(in: CGRect(x: rubleTitleRect.minX, y: rubleTitleRect.minY + (rubleTitleRect.height - rubleTitleTextHeight) / 2, width: rubleTitleRect.width, height: rubleTitleTextHeight), withAttributes: rubleTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 11 Drawing
        context.saveGState()
        context.setAlpha(ruHightlightExp)
        context.setBlendMode(.color)

        let rectangle11Path = UIBezierPath(rect: CGRect(x: 18, y: 572, width: 335, height: 30))
        color2.setFill()
        rectangle11Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// GBP Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// GBP Button
        //// Rectangle 31 Drawing
        let rectangle31Path = UIBezierPath(rect: CGRect(x: 167.81, y: 525, width: 184.75, height: 30.33))
        color6.setFill()
        rectangle31Path.fill()


        //// Text 14 Drawing
        let text14Rect = CGRect(x: 168.21, y: 525.22, width: 184.28, height: 30)
        let text14Style = NSMutableParagraphStyle()
        text14Style.alignment = .center
        let text14FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text14Style,
        ] as [NSAttributedString.Key: Any]

        let text14TextHeight: CGFloat = gbrExp.boundingRect(with: CGSize(width: text14Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text14FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text14Rect)
        gbrExp.draw(in: CGRect(x: text14Rect.minX, y: text14Rect.minY + (text14Rect.height - text14TextHeight) / 2, width: text14Rect.width, height: text14TextHeight), withAttributes: text14FontAttributes)
        context.restoreGState()


        //// p1 Drawing
        context.saveGState()
        context.translateBy(x: 175, y: 529)
        context.scaleBy(x: 0.17, y: 0.17)

        let p1Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 202, height: 136))
        context.saveGState()
        p1Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()




        //// GBP Title Drawing
        let gBPTitleRect = CGRect(x: 22.12, y: 525.19, width: 142.05, height: 30)
        let gBPTitleTextContent = "Фунт:"
        let gBPTitleStyle = NSMutableParagraphStyle()
        gBPTitleStyle.alignment = .left
        let gBPTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: gBPTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let gBPTitleTextHeight: CGFloat = gBPTitleTextContent.boundingRect(with: CGSize(width: gBPTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: gBPTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: gBPTitleRect)
        gBPTitleTextContent.draw(in: CGRect(x: gBPTitleRect.minX, y: gBPTitleRect.minY + (gBPTitleRect.height - gBPTitleTextHeight) / 2, width: gBPTitleRect.width, height: gBPTitleTextHeight), withAttributes: gBPTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 10 Drawing
        context.saveGState()
        context.setAlpha(gbrHightlightExp)
        context.setBlendMode(.color)

        let rectangle10Path = UIBezierPath(rect: CGRect(x: 17, y: 525, width: 335, height: 30))
        color2.setFill()
        rectangle10Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// JPY Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// JPY Button
        //// Rectangle 29 Drawing
        let rectangle29Path = UIBezierPath(rect: CGRect(x: 168.13, y: 476.9, width: 184.75, height: 31))
        color6.setFill()
        rectangle29Path.fill()


        //// JPY Text Drawing
        let jPYTextRect = CGRect(x: 168.48, y: 476.9, width: 184.37, height: 31)
        let jPYTextStyle = NSMutableParagraphStyle()
        jPYTextStyle.alignment = .center
        let jPYTextFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: jPYTextStyle,
        ] as [NSAttributedString.Key: Any]

        let jPYTextTextHeight: CGFloat = jpyExp.boundingRect(with: CGSize(width: jPYTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: jPYTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: jPYTextRect)
        jpyExp.draw(in: CGRect(x: jPYTextRect.minX, y: jPYTextRect.minY + (jPYTextRect.height - jPYTextTextHeight) / 2, width: jPYTextRect.width, height: jPYTextTextHeight), withAttributes: jPYTextFontAttributes)
        context.restoreGState()


        //// ie 8 Drawing
        context.saveGState()
        context.translateBy(x: 175, y: 481)
        context.scaleBy(x: 0.17, y: 0.17)

        let ie8Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 201, height: 135))
        context.saveGState()
        ie8Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()




        //// JPY Title Drawing
        let jPYTitleRect = CGRect(x: 22.13, y: 476.9, width: 142.05, height: 31)
        let jPYTitleTextContent = "Иена:"
        let jPYTitleStyle = NSMutableParagraphStyle()
        jPYTitleStyle.alignment = .left
        let jPYTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: jPYTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let jPYTitleTextHeight: CGFloat = jPYTitleTextContent.boundingRect(with: CGSize(width: jPYTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: jPYTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: jPYTitleRect)
        jPYTitleTextContent.draw(in: CGRect(x: jPYTitleRect.minX, y: jPYTitleRect.minY + (jPYTitleRect.height - jPYTitleTextHeight) / 2, width: jPYTitleRect.width, height: jPYTitleTextHeight), withAttributes: jPYTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 9 Drawing
        context.saveGState()
        context.setAlpha(jpyHightlightExp)
        context.setBlendMode(.color)

        let rectangle9Path = UIBezierPath(rect: CGRect(x: 17, y: 477, width: 336, height: 31))
        color2.setFill()
        rectangle9Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Euro Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Euro Button
        //// Rectangle 30 Drawing
        let rectangle30Path = UIBezierPath(rect: CGRect(x: 168.49, y: 429.15, width: 184.75, height: 30))
        color6.setFill()
        rectangle30Path.fill()


        //// EuroText Drawing
        let euroTextRect = CGRect(x: 168.76, y: 429.15, width: 184.62, height: 30)
        let euroTextStyle = NSMutableParagraphStyle()
        euroTextStyle.alignment = .center
        let euroTextFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: euroTextStyle,
        ] as [NSAttributedString.Key: Any]

        let euroTextTextHeight: CGFloat = euroExp.boundingRect(with: CGSize(width: euroTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: euroTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: euroTextRect)
        euroExp.draw(in: CGRect(x: euroTextRect.minX, y: euroTextRect.minY + (euroTextRect.height - euroTextTextHeight) / 2, width: euroTextRect.width, height: euroTextTextHeight), withAttributes: euroTextFontAttributes)
        context.restoreGState()


        //// e9 Drawing
        context.saveGState()
        context.translateBy(x: 175, y: 433)
        context.scaleBy(x: 0.17, y: 0.17)

        let e9Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 196, height: 129))
        context.saveGState()
        e9Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()




        //// Euro Title Drawing
        let euroTitleRect = CGRect(x: 22.49, y: 429.42, width: 142.05, height: 30)
        let euroTitleTextContent = "Евро:"
        let euroTitleStyle = NSMutableParagraphStyle()
        euroTitleStyle.alignment = .left
        let euroTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: euroTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let euroTitleTextHeight: CGFloat = euroTitleTextContent.boundingRect(with: CGSize(width: euroTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: euroTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: euroTitleRect)
        euroTitleTextContent.draw(in: CGRect(x: euroTitleRect.minX, y: euroTitleRect.minY + (euroTitleRect.height - euroTitleTextHeight) / 2, width: euroTitleRect.width, height: euroTitleTextHeight), withAttributes: euroTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 8 Drawing
        context.saveGState()
        context.setAlpha(euroHightlightExp)
        context.setBlendMode(.color)

        let rectangle8Path = UIBezierPath(rect: CGRect(x: 17, y: 429, width: 336, height: 30))
        color2.setFill()
        rectangle8Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Dollar Group
        //// Dollar Button
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 168.33, y: 383.06, width: 184.75, height: 28.7))
        color6.setFill()
        rectanglePath.fill()


        //// Text Drawing
        let textRect = CGRect(x: 168.73, y: 382.95, width: 184.28, height: 28)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = dollarExp.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        dollarExp.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// d1 Drawing
        context.saveGState()
        context.translateBy(x: 175, y: 386)
        context.scaleBy(x: 0.17, y: 0.17)

        let d1Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 198, height: 131))
        context.saveGState()
        d1Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()




        //// Dollar Title Drawing
        let dollarTitleRect = CGRect(x: 22.54, y: 382.95, width: 142.05, height: 29)
        let dollarTitleTextContent = "Доллар:"
        let dollarTitleStyle = NSMutableParagraphStyle()
        dollarTitleStyle.alignment = .left
        let dollarTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: dollarTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let dollarTitleTextHeight: CGFloat = dollarTitleTextContent.boundingRect(with: CGSize(width: dollarTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: dollarTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: dollarTitleRect)
        dollarTitleTextContent.draw(in: CGRect(x: dollarTitleRect.minX, y: dollarTitleRect.minY + (dollarTitleRect.height - dollarTitleTextHeight) / 2, width: dollarTitleRect.width, height: dollarTitleTextHeight), withAttributes: dollarTitleFontAttributes)
        context.restoreGState()






        //// Zond Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Text 21 Drawing
        let text21Rect = CGRect(x: 37.24, y: 231, width: 215.76, height: 32)
        let text21TextContent = "■ cостояние зонда:"
        let text21Style = NSMutableParagraphStyle()
        text21Style.alignment = .left
        let text21FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 20)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text21Style,
        ] as [NSAttributedString.Key: Any]

        let text21TextHeight: CGFloat = text21TextContent.boundingRect(with: CGSize(width: text21Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text21FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text21Rect)
        text21TextContent.draw(in: CGRect(x: text21Rect.minX, y: text21Rect.minY + (text21Rect.height - text21TextHeight) / 2, width: text21Rect.width, height: text21TextHeight), withAttributes: text21FontAttributes)
        context.restoreGState()


        //// Text 22 Drawing
        let text22Rect = CGRect(x: 260.47, y: 231, width: 76.53, height: 32)
        let text22Style = NSMutableParagraphStyle()
        text22Style.alignment = .right
        let text22FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 20)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text22Style,
        ] as [NSAttributedString.Key: Any]

        let text22TextHeight: CGFloat = betRecoveryExp.boundingRect(with: CGSize(width: text22Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text22FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text22Rect)
        betRecoveryExp.draw(in: CGRect(x: text22Rect.minX, y: text22Rect.minY + (text22Rect.height - text22TextHeight) / 2, width: text22Rect.width, height: text22TextHeight), withAttributes: text22FontAttributes)
        context.restoreGState()


        //// Rectangle 7 Drawing
        context.saveGState()
        context.setAlpha(zondRecoveryExp)
        context.setBlendMode(.color)

        let rectangle7Path = UIBezierPath(rect: CGRect(x: 37, y: 233, width: 300, height: 30))
        color2.setFill()
        rectangle7Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Remaining Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Text 18 Drawing
        let text18Rect = CGRect(x: 37, y: 197.1, width: 280, height: 31)
        let text18TextContent = "■ дней до столкновения:"
        let text18Style = NSMutableParagraphStyle()
        text18Style.alignment = .left
        let text18FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 20)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text18Style,
        ] as [NSAttributedString.Key: Any]

        let text18TextHeight: CGFloat = text18TextContent.boundingRect(with: CGSize(width: text18Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text18FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text18Rect)
        text18TextContent.draw(in: CGRect(x: text18Rect.minX, y: text18Rect.minY + (text18Rect.height - text18TextHeight) / 2, width: text18Rect.width, height: text18TextHeight), withAttributes: text18FontAttributes)
        context.restoreGState()


        //// Text 20 Drawing
        let text20Rect = CGRect(x: 301, y: 198, width: 36, height: 31)
        let text20Style = NSMutableParagraphStyle()
        text20Style.alignment = .right
        let text20FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 20)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text20Style,
        ] as [NSAttributedString.Key: Any]

        let text20TextHeight: CGFloat = beforeDisasterLeft.boundingRect(with: CGSize(width: text20Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text20FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text20Rect)
        beforeDisasterLeft.draw(in: CGRect(x: text20Rect.minX, y: text20Rect.minY + (text20Rect.height - text20TextHeight) / 2, width: text20Rect.width, height: text20TextHeight), withAttributes: text20FontAttributes)
        context.restoreGState()


        //// Rectangle 6 Drawing
        context.saveGState()
        context.setAlpha(disasterHighlightExp)
        context.setBlendMode(.color)

        let rectangle6Path = UIBezierPath(rect: CGRect(x: 37, y: 198, width: 300, height: 30))
        color2.setFill()
        rectangle6Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Aim Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Aim Drawing
        let aimRect = CGRect(x: -19, y: 144.28, width: 414, height: 47.72)
        let aimStyle = NSMutableParagraphStyle()
        aimStyle.alignment = .center
        let aimFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: aimStyle,
        ] as [NSAttributedString.Key: Any]

        let aimTextHeight: CGFloat = aimMoneyExp.boundingRect(with: CGSize(width: aimRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: aimFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: aimRect)
        aimMoneyExp.draw(in: CGRect(x: aimRect.minX, y: aimRect.minY + (aimRect.height - aimTextHeight) / 2, width: aimRect.width, height: aimTextHeight), withAttributes: aimFontAttributes)
        context.restoreGState()


        //// Rectangle 5 Drawing
        context.saveGState()
        context.setAlpha(aimHighlightExp)
        context.setBlendMode(.color)

        let rectangle5Path = UIBezierPath(rect: CGRect(x: -19, y: 144, width: 414, height: 48))
        color2.setFill()
        rectangle5Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Text 6 Drawing
        let text6Rect = CGRect(x: (congratTitle - 19), y: 52.28, width: 414, height: 60.62)
        let text6Path = UIBezierPath(rect: text6Rect)
        NextStageKit.gradientColor27.setStroke()
        text6Path.lineWidth = 1
        text6Path.stroke()
        let text6TextContent = "Поздравляем!"
        let text6Style = NSMutableParagraphStyle()
        text6Style.alignment = .center
        let text6FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text6Style,
        ] as [NSAttributedString.Key: Any]

        let text6TextHeight: CGFloat = text6TextContent.boundingRect(with: CGSize(width: text6Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text6Rect)
        text6TextContent.draw(in: CGRect(x: text6Rect.minX, y: text6Rect.minY + (text6Rect.height - text6TextHeight) / 2, width: text6Rect.width, height: text6TextHeight), withAttributes: text6FontAttributes)
        context.restoreGState()


        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Text 2 Drawing
        context.saveGState()
        context.setAlpha(startAnimation)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let text2Rect = CGRect(x: -19, y: 52.28, width: 414, height: 60.62)
        let text2Path = UIBezierPath(rect: text2Rect)
        NextStageKit.gradientColor27.setStroke()
        text2Path.lineWidth = 1
        text2Path.stroke()
        let text2TextContent = "Поздравляем!"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text2Style,
        ] as [NSAttributedString.Key: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// Rectangle 14 Drawing
        context.saveGState()
        context.translateBy(x: 177.68, y: 8.48)
        context.rotate(by: -highlightTitleExp * CGFloat.pi/180)

        context.saveGState()
        context.setBlendMode(.sourceIn)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let rectangle14Path = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 57.2, height: 202.1), cornerRadius: 28.6)
        bezierGradientColor5.setFill()
        rectangle14Path.fill()
        NextStageKit.gradientColor27.setStroke()
        rectangle14Path.lineWidth = 1
        rectangle14Path.stroke()

        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawDataLayer_55(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 736), resizing: ResizingBehavior = .aspectFit, stageNum: CGFloat = 5, zondRecovery: CGFloat = 23, beforeDisasterLeft: String = "24", startAnimation: CGFloat = 1, highlightTitle: CGFloat = 0.334) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 736), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 736)


        //// Color Declarations
        let color6 = UIColor(red: 0.176, green: 0.333, blue: 0.698, alpha: 1.000)
        let bezierGradientColor5 = UIColor(red: 0.192, green: 1.000, blue: 0.953, alpha: 1.000)
        let color2 = UIColor(red: 0.029, green: 0.724, blue: 1.000, alpha: 1.000)

        //// Image Declarations
        let dollar = UIImage(named: "dollar.png")!
        let rupees = UIImage(named: "rupees.png")!
        let pound = UIImage(named: "pound.png")!
        let shekel = UIImage(named: "shekel.png")!
        let euro = UIImage(named: "euro.png")!
        let ruble = UIImage(named: "ruble.png")!
        let iena = UIImage(named: "iena.png")!

        //// Variable Declarations
        let aimMoneyExp = stageNum == 1 ? "новая цель 1/7: $1000" : (stageNum == 2 ? "новая цель 2/7: €1000" : (stageNum == 3 ? "новая цель 3/7: ¥1000" : (stageNum == 4 ? "новая цель 4/7: £1000" : (stageNum == 5 ? "новая цель 5/7: ₽1000" : (stageNum == 6 ? "новая цель 6/7: ₹1000" : (stageNum == 7 ? "новая цель 7/7: ₪1000" : ""))))))
        let dollarExp = stageNum > 1 ? "$1000" : "$0"
        let euroExp = stageNum > 2 ? "€1000" : "€0"
        let jpyExp = stageNum > 3 ? "¥1000" : "¥0"
        let gbrExp = stageNum > 4 ? "£1000" : "£0"
        let rubleExp = stageNum > 5 ? "₽1000" : "₽0"
        let inrExp = stageNum > 6 ? "₹1000" : "₹0"
        let sheckelExp = stageNum > 7 ? "₪1000" : "₪0"
        let betRecoveryExp = "\(Int(round(zondRecovery)))" + "%"
        let aimHighlightExp: CGFloat = startAnimation <= 0.1 ? startAnimation * 10 : (startAnimation > 0.1 && startAnimation < 0.2 ? (0.2 - startAnimation) * 10 : 0)
        let disasterHighlightExp: CGFloat = startAnimation >= 0.2 && startAnimation <= 0.3 ? (startAnimation - 0.2) * 10 : (startAnimation > 0.3 && startAnimation < 0.4 ? (0.4 - startAnimation) * 10 : 0)
        let zondRecoveryExp: CGFloat = startAnimation >= 0.4 && startAnimation <= 0.5 ? (startAnimation - 0.4) * 10 : (startAnimation > 0.5 && startAnimation < 0.6 ? (0.6 - startAnimation) * 10 : 0)
        let euroHightlightExp: CGFloat = stageNum != 2 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let jpyHightlightExp: CGFloat = stageNum != 3 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let gbrHightlightExp: CGFloat = stageNum != 4 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let ruHightlightExp: CGFloat = stageNum != 5 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let inrHightlightExp: CGFloat = stageNum != 6 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let sheHightlightExp: CGFloat = stageNum != 7 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let congratTitle: CGFloat = startAnimation <= 0.1 ? -414 * (1 - startAnimation * 10) : 0
        let highlightTitleExp: CGFloat = 90 * (1 - highlightTitle) - 130 * highlightTitle

        //// Money Group
        //// Sheckel Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Sheckel Button
        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 187.81, y: 572, width: 184.75, height: 30.33))
        color6.setFill()
        rectangle4Path.fill()


        //// Text 5 Drawing
        let text5Rect = CGRect(x: 188.21, y: 572.22, width: 184.28, height: 30)
        let text5Style = NSMutableParagraphStyle()
        text5Style.alignment = .center
        let text5FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text5Style,
        ] as [NSAttributedString.Key: Any]

        let text5TextHeight: CGFloat = sheckelExp.boundingRect(with: CGSize(width: text5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text5Rect)
        sheckelExp.draw(in: CGRect(x: text5Rect.minX, y: text5Rect.minY + (text5Rect.height - text5TextHeight) / 2, width: text5Rect.width, height: text5TextHeight), withAttributes: text5FontAttributes)
        context.restoreGState()


        //// s9 Drawing
        context.saveGState()
        context.translateBy(x: 195, y: 576)
        context.scaleBy(x: 0.17, y: 0.17)

        let s9Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 199, height: 134))
        context.saveGState()
        s9Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()




        //// Sheckel Title Drawing
        let sheckelTitleRect = CGRect(x: 42.12, y: 572.19, width: 142.05, height: 30)
        let sheckelTitleTextContent = "Шекель:"
        let sheckelTitleStyle = NSMutableParagraphStyle()
        sheckelTitleStyle.alignment = .left
        let sheckelTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: sheckelTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let sheckelTitleTextHeight: CGFloat = sheckelTitleTextContent.boundingRect(with: CGSize(width: sheckelTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: sheckelTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: sheckelTitleRect)
        sheckelTitleTextContent.draw(in: CGRect(x: sheckelTitleRect.minX, y: sheckelTitleRect.minY + (sheckelTitleRect.height - sheckelTitleTextHeight) / 2, width: sheckelTitleRect.width, height: sheckelTitleTextHeight), withAttributes: sheckelTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 13 Drawing
        context.saveGState()
        context.setAlpha(sheHightlightExp)
        context.setBlendMode(.color)

        let rectangle13Path = UIBezierPath(rect: CGRect(x: 37, y: 572, width: 335, height: 30))
        color2.setFill()
        rectangle13Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// INR Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// INR Button
        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 187.81, y: 525, width: 184.75, height: 30.33))
        color6.setFill()
        rectangle3Path.fill()


        //// Text 4 Drawing
        let text4Rect = CGRect(x: 188.21, y: 525.22, width: 184.28, height: 30)
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .center
        let text4FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text4Style,
        ] as [NSAttributedString.Key: Any]

        let text4TextHeight: CGFloat = inrExp.boundingRect(with: CGSize(width: text4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text4Rect)
        inrExp.draw(in: CGRect(x: text4Rect.minX, y: text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, width: text4Rect.width, height: text4TextHeight), withAttributes: text4FontAttributes)
        context.restoreGState()


        //// i1 Drawing
        context.saveGState()
        context.translateBy(x: 195, y: 529)
        context.scaleBy(x: 0.17, y: 0.17)

        let i1Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 201, height: 135))
        context.saveGState()
        i1Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()




        //// INR Title Drawing
        let iNRTitleRect = CGRect(x: 42.12, y: 525.19, width: 142.05, height: 30)
        let iNRTitleTextContent = "Рупий:"
        let iNRTitleStyle = NSMutableParagraphStyle()
        iNRTitleStyle.alignment = .left
        let iNRTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: iNRTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let iNRTitleTextHeight: CGFloat = iNRTitleTextContent.boundingRect(with: CGSize(width: iNRTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: iNRTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: iNRTitleRect)
        iNRTitleTextContent.draw(in: CGRect(x: iNRTitleRect.minX, y: iNRTitleRect.minY + (iNRTitleRect.height - iNRTitleTextHeight) / 2, width: iNRTitleRect.width, height: iNRTitleTextHeight), withAttributes: iNRTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 12 Drawing
        context.saveGState()
        context.setAlpha(inrHightlightExp)
        context.setBlendMode(.color)

        let rectangle12Path = UIBezierPath(rect: CGRect(x: 37, y: 525, width: 335, height: 30))
        color2.setFill()
        rectangle12Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Ruble Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Ruble Button
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 187.81, y: 477, width: 184.75, height: 30.33))
        color6.setFill()
        rectangle2Path.fill()


        //// Text 3 Drawing
        let text3Rect = CGRect(x: 188.21, y: 477.22, width: 184.28, height: 30)
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .center
        let text3FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text3Style,
        ] as [NSAttributedString.Key: Any]

        let text3TextHeight: CGFloat = rubleExp.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        rubleExp.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()


        //// ru9 Drawing
        context.saveGState()
        context.translateBy(x: 195, y: 481)
        context.scaleBy(x: 0.17, y: 0.17)

        let ru9Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 209, height: 138))
        context.saveGState()
        ru9Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()




        //// Ruble Title Drawing
        let rubleTitleRect = CGRect(x: 42.12, y: 477.19, width: 142.05, height: 30)
        let rubleTitleTextContent = "Рубль:"
        let rubleTitleStyle = NSMutableParagraphStyle()
        rubleTitleStyle.alignment = .left
        let rubleTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: rubleTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let rubleTitleTextHeight: CGFloat = rubleTitleTextContent.boundingRect(with: CGSize(width: rubleTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: rubleTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: rubleTitleRect)
        rubleTitleTextContent.draw(in: CGRect(x: rubleTitleRect.minX, y: rubleTitleRect.minY + (rubleTitleRect.height - rubleTitleTextHeight) / 2, width: rubleTitleRect.width, height: rubleTitleTextHeight), withAttributes: rubleTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 11 Drawing
        context.saveGState()
        context.setAlpha(ruHightlightExp)
        context.setBlendMode(.color)

        let rectangle11Path = UIBezierPath(rect: CGRect(x: 37, y: 477, width: 335, height: 30))
        color2.setFill()
        rectangle11Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// GBP Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// GBP Button
        //// Rectangle 31 Drawing
        let rectangle31Path = UIBezierPath(rect: CGRect(x: 186.81, y: 430, width: 184.75, height: 30.33))
        color6.setFill()
        rectangle31Path.fill()


        //// Text 14 Drawing
        let text14Rect = CGRect(x: 187.21, y: 430.22, width: 184.28, height: 30)
        let text14Style = NSMutableParagraphStyle()
        text14Style.alignment = .center
        let text14FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text14Style,
        ] as [NSAttributedString.Key: Any]

        let text14TextHeight: CGFloat = gbrExp.boundingRect(with: CGSize(width: text14Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text14FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text14Rect)
        gbrExp.draw(in: CGRect(x: text14Rect.minX, y: text14Rect.minY + (text14Rect.height - text14TextHeight) / 2, width: text14Rect.width, height: text14TextHeight), withAttributes: text14FontAttributes)
        context.restoreGState()


        //// p1 Drawing
        context.saveGState()
        context.translateBy(x: 195, y: 434)
        context.scaleBy(x: 0.17, y: 0.17)

        let p1Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 202, height: 136))
        context.saveGState()
        p1Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()




        //// GBP Title Drawing
        let gBPTitleRect = CGRect(x: 41.12, y: 430.19, width: 142.05, height: 30)
        let gBPTitleTextContent = "Фунт:"
        let gBPTitleStyle = NSMutableParagraphStyle()
        gBPTitleStyle.alignment = .left
        let gBPTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: gBPTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let gBPTitleTextHeight: CGFloat = gBPTitleTextContent.boundingRect(with: CGSize(width: gBPTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: gBPTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: gBPTitleRect)
        gBPTitleTextContent.draw(in: CGRect(x: gBPTitleRect.minX, y: gBPTitleRect.minY + (gBPTitleRect.height - gBPTitleTextHeight) / 2, width: gBPTitleRect.width, height: gBPTitleTextHeight), withAttributes: gBPTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 10 Drawing
        context.saveGState()
        context.setAlpha(gbrHightlightExp)
        context.setBlendMode(.color)

        let rectangle10Path = UIBezierPath(rect: CGRect(x: 36, y: 430, width: 335, height: 30))
        color2.setFill()
        rectangle10Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// JPY Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// JPY Button
        //// Rectangle 29 Drawing
        let rectangle29Path = UIBezierPath(rect: CGRect(x: 187.13, y: 381.9, width: 184.75, height: 31))
        color6.setFill()
        rectangle29Path.fill()


        //// JPY Text Drawing
        let jPYTextRect = CGRect(x: 187.48, y: 381.9, width: 184.37, height: 31)
        let jPYTextStyle = NSMutableParagraphStyle()
        jPYTextStyle.alignment = .center
        let jPYTextFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: jPYTextStyle,
        ] as [NSAttributedString.Key: Any]

        let jPYTextTextHeight: CGFloat = jpyExp.boundingRect(with: CGSize(width: jPYTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: jPYTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: jPYTextRect)
        jpyExp.draw(in: CGRect(x: jPYTextRect.minX, y: jPYTextRect.minY + (jPYTextRect.height - jPYTextTextHeight) / 2, width: jPYTextRect.width, height: jPYTextTextHeight), withAttributes: jPYTextFontAttributes)
        context.restoreGState()


        //// ie 8 Drawing
        context.saveGState()
        context.translateBy(x: 195, y: 386)
        context.scaleBy(x: 0.17, y: 0.17)

        let ie8Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 201, height: 135))
        context.saveGState()
        ie8Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()




        //// JPY Title Drawing
        let jPYTitleRect = CGRect(x: 41.13, y: 381.9, width: 142.05, height: 31)
        let jPYTitleTextContent = "Иена:"
        let jPYTitleStyle = NSMutableParagraphStyle()
        jPYTitleStyle.alignment = .left
        let jPYTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: jPYTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let jPYTitleTextHeight: CGFloat = jPYTitleTextContent.boundingRect(with: CGSize(width: jPYTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: jPYTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: jPYTitleRect)
        jPYTitleTextContent.draw(in: CGRect(x: jPYTitleRect.minX, y: jPYTitleRect.minY + (jPYTitleRect.height - jPYTitleTextHeight) / 2, width: jPYTitleRect.width, height: jPYTitleTextHeight), withAttributes: jPYTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 9 Drawing
        context.saveGState()
        context.setAlpha(jpyHightlightExp)
        context.setBlendMode(.color)

        let rectangle9Path = UIBezierPath(rect: CGRect(x: 36, y: 382, width: 336, height: 31))
        color2.setFill()
        rectangle9Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Euro Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Euro Button
        //// Rectangle 30 Drawing
        let rectangle30Path = UIBezierPath(rect: CGRect(x: 187.49, y: 334.16, width: 184.75, height: 30))
        color6.setFill()
        rectangle30Path.fill()


        //// EuroText Drawing
        let euroTextRect = CGRect(x: 187.76, y: 334.16, width: 184.62, height: 30)
        let euroTextStyle = NSMutableParagraphStyle()
        euroTextStyle.alignment = .center
        let euroTextFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: euroTextStyle,
        ] as [NSAttributedString.Key: Any]

        let euroTextTextHeight: CGFloat = euroExp.boundingRect(with: CGSize(width: euroTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: euroTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: euroTextRect)
        euroExp.draw(in: CGRect(x: euroTextRect.minX, y: euroTextRect.minY + (euroTextRect.height - euroTextTextHeight) / 2, width: euroTextRect.width, height: euroTextTextHeight), withAttributes: euroTextFontAttributes)
        context.restoreGState()


        //// e9 Drawing
        context.saveGState()
        context.translateBy(x: 195, y: 339)
        context.scaleBy(x: 0.17, y: 0.17)

        let e9Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 196, height: 129))
        context.saveGState()
        e9Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()




        //// Euro Title Drawing
        let euroTitleRect = CGRect(x: 41.49, y: 334.42, width: 142.05, height: 30)
        let euroTitleTextContent = "Евро:"
        let euroTitleStyle = NSMutableParagraphStyle()
        euroTitleStyle.alignment = .left
        let euroTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: euroTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let euroTitleTextHeight: CGFloat = euroTitleTextContent.boundingRect(with: CGSize(width: euroTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: euroTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: euroTitleRect)
        euroTitleTextContent.draw(in: CGRect(x: euroTitleRect.minX, y: euroTitleRect.minY + (euroTitleRect.height - euroTitleTextHeight) / 2, width: euroTitleRect.width, height: euroTitleTextHeight), withAttributes: euroTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 8 Drawing
        context.saveGState()
        context.setAlpha(euroHightlightExp)
        context.setBlendMode(.color)

        let rectangle8Path = UIBezierPath(rect: CGRect(x: 36, y: 334, width: 336, height: 30))
        color2.setFill()
        rectangle8Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Dollar Group
        //// Dollar Button
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 187.33, y: 288.06, width: 184.75, height: 28.7))
        color6.setFill()
        rectanglePath.fill()


        //// Text Drawing
        let textRect = CGRect(x: 187.73, y: 287.95, width: 184.28, height: 28)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = dollarExp.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        dollarExp.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// d1 Drawing
        context.saveGState()
        context.translateBy(x: 195, y: 291)
        context.scaleBy(x: 0.17, y: 0.17)

        let d1Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 198, height: 131))
        context.saveGState()
        d1Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()




        //// Dollar Title Drawing
        let dollarTitleRect = CGRect(x: 41.54, y: 287.95, width: 142.05, height: 29)
        let dollarTitleTextContent = "Доллар:"
        let dollarTitleStyle = NSMutableParagraphStyle()
        dollarTitleStyle.alignment = .left
        let dollarTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: dollarTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let dollarTitleTextHeight: CGFloat = dollarTitleTextContent.boundingRect(with: CGSize(width: dollarTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: dollarTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: dollarTitleRect)
        dollarTitleTextContent.draw(in: CGRect(x: dollarTitleRect.minX, y: dollarTitleRect.minY + (dollarTitleRect.height - dollarTitleTextHeight) / 2, width: dollarTitleRect.width, height: dollarTitleTextHeight), withAttributes: dollarTitleFontAttributes)
        context.restoreGState()






        //// Zond Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Text 21 Drawing
        let text21Rect = CGRect(x: 56.24, y: 200, width: 215.76, height: 32)
        let text21TextContent = "■ cостояние зонда:"
        let text21Style = NSMutableParagraphStyle()
        text21Style.alignment = .left
        let text21FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 20)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text21Style,
        ] as [NSAttributedString.Key: Any]

        let text21TextHeight: CGFloat = text21TextContent.boundingRect(with: CGSize(width: text21Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text21FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text21Rect)
        text21TextContent.draw(in: CGRect(x: text21Rect.minX, y: text21Rect.minY + (text21Rect.height - text21TextHeight) / 2, width: text21Rect.width, height: text21TextHeight), withAttributes: text21FontAttributes)
        context.restoreGState()


        //// Text 22 Drawing
        let text22Rect = CGRect(x: 279.47, y: 200, width: 76.53, height: 32)
        let text22Style = NSMutableParagraphStyle()
        text22Style.alignment = .right
        let text22FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 20)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text22Style,
        ] as [NSAttributedString.Key: Any]

        let text22TextHeight: CGFloat = betRecoveryExp.boundingRect(with: CGSize(width: text22Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text22FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text22Rect)
        betRecoveryExp.draw(in: CGRect(x: text22Rect.minX, y: text22Rect.minY + (text22Rect.height - text22TextHeight) / 2, width: text22Rect.width, height: text22TextHeight), withAttributes: text22FontAttributes)
        context.restoreGState()


        //// Rectangle 7 Drawing
        context.saveGState()
        context.setAlpha(zondRecoveryExp)
        context.setBlendMode(.color)

        let rectangle7Path = UIBezierPath(rect: CGRect(x: 56, y: 202, width: 300, height: 30))
        color2.setFill()
        rectangle7Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Remaining Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Text 18 Drawing
        let text18Rect = CGRect(x: 56, y: 166.1, width: 280, height: 31)
        let text18TextContent = "■ дней до столкновения:"
        let text18Style = NSMutableParagraphStyle()
        text18Style.alignment = .left
        let text18FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 20)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text18Style,
        ] as [NSAttributedString.Key: Any]

        let text18TextHeight: CGFloat = text18TextContent.boundingRect(with: CGSize(width: text18Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text18FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text18Rect)
        text18TextContent.draw(in: CGRect(x: text18Rect.minX, y: text18Rect.minY + (text18Rect.height - text18TextHeight) / 2, width: text18Rect.width, height: text18TextHeight), withAttributes: text18FontAttributes)
        context.restoreGState()


        //// Text 20 Drawing
        let text20Rect = CGRect(x: 320, y: 167, width: 36, height: 31)
        let text20Style = NSMutableParagraphStyle()
        text20Style.alignment = .right
        let text20FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 20)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text20Style,
        ] as [NSAttributedString.Key: Any]

        let text20TextHeight: CGFloat = beforeDisasterLeft.boundingRect(with: CGSize(width: text20Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text20FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text20Rect)
        beforeDisasterLeft.draw(in: CGRect(x: text20Rect.minX, y: text20Rect.minY + (text20Rect.height - text20TextHeight) / 2, width: text20Rect.width, height: text20TextHeight), withAttributes: text20FontAttributes)
        context.restoreGState()


        //// Rectangle 6 Drawing
        context.saveGState()
        context.setAlpha(disasterHighlightExp)
        context.setBlendMode(.color)

        let rectangle6Path = UIBezierPath(rect: CGRect(x: 56, y: 167, width: 300, height: 30))
        color2.setFill()
        rectangle6Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Aim Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Aim Drawing
        let aimRect = CGRect(x: 0, y: 113.28, width: 414, height: 47.72)
        let aimStyle = NSMutableParagraphStyle()
        aimStyle.alignment = .center
        let aimFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: aimStyle,
        ] as [NSAttributedString.Key: Any]

        let aimTextHeight: CGFloat = aimMoneyExp.boundingRect(with: CGSize(width: aimRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: aimFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: aimRect)
        aimMoneyExp.draw(in: CGRect(x: aimRect.minX, y: aimRect.minY + (aimRect.height - aimTextHeight) / 2, width: aimRect.width, height: aimTextHeight), withAttributes: aimFontAttributes)
        context.restoreGState()


        //// Rectangle 5 Drawing
        context.saveGState()
        context.setAlpha(aimHighlightExp)
        context.setBlendMode(.color)

        let rectangle5Path = UIBezierPath(rect: CGRect(x: 0, y: 113, width: 414, height: 48))
        color2.setFill()
        rectangle5Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Text 6 Drawing
        let text6Rect = CGRect(x: congratTitle, y: 29.28, width: 414, height: 60.62)
        let text6Path = UIBezierPath(rect: text6Rect)
        NextStageKit.gradientColor27.setStroke()
        text6Path.lineWidth = 1
        text6Path.stroke()
        let text6TextContent = "Поздравляем!"
        let text6Style = NSMutableParagraphStyle()
        text6Style.alignment = .center
        let text6FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text6Style,
        ] as [NSAttributedString.Key: Any]

        let text6TextHeight: CGFloat = text6TextContent.boundingRect(with: CGSize(width: text6Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text6Rect)
        text6TextContent.draw(in: CGRect(x: text6Rect.minX, y: text6Rect.minY + (text6Rect.height - text6TextHeight) / 2, width: text6Rect.width, height: text6TextHeight), withAttributes: text6FontAttributes)
        context.restoreGState()


        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Text 2 Drawing
        context.saveGState()
        context.setAlpha(startAnimation)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let text2Rect = CGRect(x: 0, y: 29.28, width: 414, height: 60.62)
        let text2Path = UIBezierPath(rect: text2Rect)
        NextStageKit.gradientColor27.setStroke()
        text2Path.lineWidth = 1
        text2Path.stroke()
        let text2TextContent = "Поздравляем!"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text2Style,
        ] as [NSAttributedString.Key: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// Rectangle 14 Drawing
        context.saveGState()
        context.translateBy(x: 196.68, y: -14.52)
        context.rotate(by: -highlightTitleExp * CGFloat.pi/180)

        context.saveGState()
        context.setBlendMode(.sourceIn)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let rectangle14Path = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 57.2, height: 202.1), cornerRadius: 28.6)
        bezierGradientColor5.setFill()
        rectangle14Path.fill()
        NextStageKit.gradientColor27.setStroke()
        rectangle14Path.lineWidth = 1
        rectangle14Path.stroke()

        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawDataLayer_47(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit, stageNum: CGFloat = 5, zondRecovery: CGFloat = 23, beforeDisasterLeft: String = "24", startAnimation: CGFloat = 1, highlightTitle: CGFloat = 0.334) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)


        //// Color Declarations
        let color6 = UIColor(red: 0.176, green: 0.333, blue: 0.698, alpha: 1.000)
        let bezierGradientColor5 = UIColor(red: 0.192, green: 1.000, blue: 0.953, alpha: 1.000)
        let color2 = UIColor(red: 0.029, green: 0.724, blue: 1.000, alpha: 1.000)

        //// Image Declarations
        let dollar = UIImage(named: "dollar.png")!
        let rupees = UIImage(named: "rupees.png")!
        let pound = UIImage(named: "pound.png")!
        let shekel = UIImage(named: "shekel.png")!
        let euro = UIImage(named: "euro.png")!
        let ruble = UIImage(named: "ruble.png")!
        let iena = UIImage(named: "iena.png")!

        //// Variable Declarations
        let aimMoneyExp = stageNum == 1 ? "новая цель 1/7: $1000" : (stageNum == 2 ? "новая цель 2/7: €1000" : (stageNum == 3 ? "новая цель 3/7: ¥1000" : (stageNum == 4 ? "новая цель 4/7: £1000" : (stageNum == 5 ? "новая цель 5/7: ₽1000" : (stageNum == 6 ? "новая цель 6/7: ₹1000" : (stageNum == 7 ? "новая цель 7/7: ₪1000" : ""))))))
        let dollarExp = stageNum > 1 ? "$1000" : "$0"
        let euroExp = stageNum > 2 ? "€1000" : "€0"
        let jpyExp = stageNum > 3 ? "¥1000" : "¥0"
        let gbrExp = stageNum > 4 ? "£1000" : "£0"
        let rubleExp = stageNum > 5 ? "₽1000" : "₽0"
        let inrExp = stageNum > 6 ? "₹1000" : "₹0"
        let sheckelExp = stageNum > 7 ? "₪1000" : "₪0"
        let betRecoveryExp = "\(Int(round(zondRecovery)))" + "%"
        let aimHighlightExp: CGFloat = startAnimation <= 0.1 ? startAnimation * 10 : (startAnimation > 0.1 && startAnimation < 0.2 ? (0.2 - startAnimation) * 10 : 0)
        let disasterHighlightExp: CGFloat = startAnimation >= 0.2 && startAnimation <= 0.3 ? (startAnimation - 0.2) * 10 : (startAnimation > 0.3 && startAnimation < 0.4 ? (0.4 - startAnimation) * 10 : 0)
        let zondRecoveryExp: CGFloat = startAnimation >= 0.4 && startAnimation <= 0.5 ? (startAnimation - 0.4) * 10 : (startAnimation > 0.5 && startAnimation < 0.6 ? (0.6 - startAnimation) * 10 : 0)
        let euroHightlightExp: CGFloat = stageNum != 2 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let jpyHightlightExp: CGFloat = stageNum != 3 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let gbrHightlightExp: CGFloat = stageNum != 4 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let ruHightlightExp: CGFloat = stageNum != 5 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let inrHightlightExp: CGFloat = stageNum != 6 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let sheHightlightExp: CGFloat = stageNum != 7 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let congratTitle: CGFloat = startAnimation <= 0.1 ? -414 * (1 - startAnimation * 10) : 0
        let highlightTitleExp: CGFloat = 90 * (1 - highlightTitle) - 130 * highlightTitle

        //// Money Group
        //// Sheckel Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Sheckel Button
        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 168.85, y: 529.62, width: 184.75, height: 30.33))
        color6.setFill()
        rectangle4Path.fill()


        //// Text 5 Drawing
        let text5Rect = CGRect(x: 169.26, y: 529.84, width: 184.28, height: 30)
        let text5Style = NSMutableParagraphStyle()
        text5Style.alignment = .center
        let text5FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text5Style,
        ] as [NSAttributedString.Key: Any]

        let text5TextHeight: CGFloat = sheckelExp.boundingRect(with: CGSize(width: text5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text5Rect)
        sheckelExp.draw(in: CGRect(x: text5Rect.minX, y: text5Rect.minY + (text5Rect.height - text5TextHeight) / 2, width: text5Rect.width, height: text5TextHeight), withAttributes: text5FontAttributes)
        context.restoreGState()


        //// s9 Drawing
        context.saveGState()
        context.translateBy(x: 175, y: 534)
        context.scaleBy(x: 0.17, y: 0.17)

        let s9Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 199, height: 134))
        context.saveGState()
        s9Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -shekel.size.height)
        context.draw(shekel.cgImage!, in: CGRect(x: 0, y: 0, width: shekel.size.width, height: shekel.size.height))
        context.restoreGState()

        context.restoreGState()




        //// Sheckel Title Drawing
        let sheckelTitleRect = CGRect(x: 23.16, y: 529.81, width: 142.05, height: 30)
        let sheckelTitleTextContent = "Шекель:"
        let sheckelTitleStyle = NSMutableParagraphStyle()
        sheckelTitleStyle.alignment = .left
        let sheckelTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: sheckelTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let sheckelTitleTextHeight: CGFloat = sheckelTitleTextContent.boundingRect(with: CGSize(width: sheckelTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: sheckelTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: sheckelTitleRect)
        sheckelTitleTextContent.draw(in: CGRect(x: sheckelTitleRect.minX, y: sheckelTitleRect.minY + (sheckelTitleRect.height - sheckelTitleTextHeight) / 2, width: sheckelTitleRect.width, height: sheckelTitleTextHeight), withAttributes: sheckelTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 13 Drawing
        context.saveGState()
        context.setAlpha(sheHightlightExp)
        context.setBlendMode(.color)

        let rectangle13Path = UIBezierPath(rect: CGRect(x: 18.04, y: 529.62, width: 335, height: 30))
        color2.setFill()
        rectangle13Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// INR Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// INR Button
        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 168.85, y: 482.62, width: 184.75, height: 30.33))
        color6.setFill()
        rectangle3Path.fill()


        //// Text 4 Drawing
        let text4Rect = CGRect(x: 169.26, y: 482.84, width: 184.28, height: 30)
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .center
        let text4FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text4Style,
        ] as [NSAttributedString.Key: Any]

        let text4TextHeight: CGFloat = inrExp.boundingRect(with: CGSize(width: text4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text4Rect)
        inrExp.draw(in: CGRect(x: text4Rect.minX, y: text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, width: text4Rect.width, height: text4TextHeight), withAttributes: text4FontAttributes)
        context.restoreGState()


        //// i1 Drawing
        context.saveGState()
        context.translateBy(x: 175, y: 486)
        context.scaleBy(x: 0.17, y: 0.17)

        let i1Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 201, height: 135))
        context.saveGState()
        i1Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rupees.size.height)
        context.draw(rupees.cgImage!, in: CGRect(x: 0, y: 0, width: rupees.size.width, height: rupees.size.height))
        context.restoreGState()

        context.restoreGState()




        //// INR Title Drawing
        let iNRTitleRect = CGRect(x: 23.16, y: 482.81, width: 142.05, height: 30)
        let iNRTitleTextContent = "Рупий:"
        let iNRTitleStyle = NSMutableParagraphStyle()
        iNRTitleStyle.alignment = .left
        let iNRTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: iNRTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let iNRTitleTextHeight: CGFloat = iNRTitleTextContent.boundingRect(with: CGSize(width: iNRTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: iNRTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: iNRTitleRect)
        iNRTitleTextContent.draw(in: CGRect(x: iNRTitleRect.minX, y: iNRTitleRect.minY + (iNRTitleRect.height - iNRTitleTextHeight) / 2, width: iNRTitleRect.width, height: iNRTitleTextHeight), withAttributes: iNRTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 12 Drawing
        context.saveGState()
        context.setAlpha(inrHightlightExp)
        context.setBlendMode(.color)

        let rectangle12Path = UIBezierPath(rect: CGRect(x: 18.04, y: 482.62, width: 335, height: 30))
        color2.setFill()
        rectangle12Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Ruble Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Ruble Button
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 168.85, y: 434.62, width: 184.75, height: 30.33))
        color6.setFill()
        rectangle2Path.fill()


        //// Text 3 Drawing
        let text3Rect = CGRect(x: 169.26, y: 434.84, width: 184.28, height: 30)
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .center
        let text3FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text3Style,
        ] as [NSAttributedString.Key: Any]

        let text3TextHeight: CGFloat = rubleExp.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        rubleExp.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()


        //// ru9 Drawing
        context.saveGState()
        context.translateBy(x: 175, y: 439)
        context.scaleBy(x: 0.17, y: 0.17)

        let ru9Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 209, height: 138))
        context.saveGState()
        ru9Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -ruble.size.height)
        context.draw(ruble.cgImage!, in: CGRect(x: 0, y: 0, width: ruble.size.width, height: ruble.size.height))
        context.restoreGState()

        context.restoreGState()




        //// Ruble Title Drawing
        let rubleTitleRect = CGRect(x: 23.16, y: 434.81, width: 142.05, height: 30)
        let rubleTitleTextContent = "Рубль:"
        let rubleTitleStyle = NSMutableParagraphStyle()
        rubleTitleStyle.alignment = .left
        let rubleTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: rubleTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let rubleTitleTextHeight: CGFloat = rubleTitleTextContent.boundingRect(with: CGSize(width: rubleTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: rubleTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: rubleTitleRect)
        rubleTitleTextContent.draw(in: CGRect(x: rubleTitleRect.minX, y: rubleTitleRect.minY + (rubleTitleRect.height - rubleTitleTextHeight) / 2, width: rubleTitleRect.width, height: rubleTitleTextHeight), withAttributes: rubleTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 11 Drawing
        context.saveGState()
        context.setAlpha(ruHightlightExp)
        context.setBlendMode(.color)

        let rectangle11Path = UIBezierPath(rect: CGRect(x: 18.04, y: 434.62, width: 335, height: 30))
        color2.setFill()
        rectangle11Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// GBP Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// GBP Button
        //// Rectangle 31 Drawing
        let rectangle31Path = UIBezierPath(rect: CGRect(x: 167.85, y: 387.62, width: 184.75, height: 30.33))
        color6.setFill()
        rectangle31Path.fill()


        //// Text 14 Drawing
        let text14Rect = CGRect(x: 168.26, y: 387.84, width: 184.28, height: 30)
        let text14Style = NSMutableParagraphStyle()
        text14Style.alignment = .center
        let text14FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text14Style,
        ] as [NSAttributedString.Key: Any]

        let text14TextHeight: CGFloat = gbrExp.boundingRect(with: CGSize(width: text14Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text14FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text14Rect)
        gbrExp.draw(in: CGRect(x: text14Rect.minX, y: text14Rect.minY + (text14Rect.height - text14TextHeight) / 2, width: text14Rect.width, height: text14TextHeight), withAttributes: text14FontAttributes)
        context.restoreGState()




        //// GBP Title Drawing
        let gBPTitleRect = CGRect(x: 22.16, y: 387.81, width: 142.05, height: 30)
        let gBPTitleTextContent = "Фунт:"
        let gBPTitleStyle = NSMutableParagraphStyle()
        gBPTitleStyle.alignment = .left
        let gBPTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: gBPTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let gBPTitleTextHeight: CGFloat = gBPTitleTextContent.boundingRect(with: CGSize(width: gBPTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: gBPTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: gBPTitleRect)
        gBPTitleTextContent.draw(in: CGRect(x: gBPTitleRect.minX, y: gBPTitleRect.minY + (gBPTitleRect.height - gBPTitleTextHeight) / 2, width: gBPTitleRect.width, height: gBPTitleTextHeight), withAttributes: gBPTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 10 Drawing
        context.saveGState()
        context.setAlpha(gbrHightlightExp)
        context.setBlendMode(.color)

        let rectangle10Path = UIBezierPath(rect: CGRect(x: 17.04, y: 387.62, width: 335, height: 30))
        color2.setFill()
        rectangle10Path.fill()

        context.restoreGState()


        //// p1 Drawing
        context.saveGState()
        context.translateBy(x: 175, y: 391)
        context.scaleBy(x: 0.17, y: 0.17)

        let p1Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 202, height: 136))
        context.saveGState()
        p1Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -pound.size.height)
        context.draw(pound.cgImage!, in: CGRect(x: 0, y: 0, width: pound.size.width, height: pound.size.height))
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// JPY Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// JPY Button
        //// Rectangle 29 Drawing
        let rectangle29Path = UIBezierPath(rect: CGRect(x: 168.17, y: 339.52, width: 184.75, height: 31))
        color6.setFill()
        rectangle29Path.fill()


        //// JPY Text Drawing
        let jPYTextRect = CGRect(x: 168.52, y: 339.52, width: 184.37, height: 31)
        let jPYTextStyle = NSMutableParagraphStyle()
        jPYTextStyle.alignment = .center
        let jPYTextFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: jPYTextStyle,
        ] as [NSAttributedString.Key: Any]

        let jPYTextTextHeight: CGFloat = jpyExp.boundingRect(with: CGSize(width: jPYTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: jPYTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: jPYTextRect)
        jpyExp.draw(in: CGRect(x: jPYTextRect.minX, y: jPYTextRect.minY + (jPYTextRect.height - jPYTextTextHeight) / 2, width: jPYTextRect.width, height: jPYTextTextHeight), withAttributes: jPYTextFontAttributes)
        context.restoreGState()


        //// ie 8 Drawing
        context.saveGState()
        context.translateBy(x: 175, y: 344)
        context.scaleBy(x: 0.17, y: 0.17)

        let ie8Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 201, height: 135))
        context.saveGState()
        ie8Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -iena.size.height)
        context.draw(iena.cgImage!, in: CGRect(x: 0, y: 0, width: iena.size.width, height: iena.size.height))
        context.restoreGState()

        context.restoreGState()




        //// JPY Title Drawing
        let jPYTitleRect = CGRect(x: 22.17, y: 339.52, width: 142.05, height: 31)
        let jPYTitleTextContent = "Иена:"
        let jPYTitleStyle = NSMutableParagraphStyle()
        jPYTitleStyle.alignment = .left
        let jPYTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: jPYTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let jPYTitleTextHeight: CGFloat = jPYTitleTextContent.boundingRect(with: CGSize(width: jPYTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: jPYTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: jPYTitleRect)
        jPYTitleTextContent.draw(in: CGRect(x: jPYTitleRect.minX, y: jPYTitleRect.minY + (jPYTitleRect.height - jPYTitleTextHeight) / 2, width: jPYTitleRect.width, height: jPYTitleTextHeight), withAttributes: jPYTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 9 Drawing
        context.saveGState()
        context.setAlpha(jpyHightlightExp)
        context.setBlendMode(.color)

        let rectangle9Path = UIBezierPath(rect: CGRect(x: 17.04, y: 339.62, width: 336, height: 31))
        color2.setFill()
        rectangle9Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Euro Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Euro Button
        //// Rectangle 30 Drawing
        let rectangle30Path = UIBezierPath(rect: CGRect(x: 168.54, y: 291.78, width: 184.75, height: 30))
        color6.setFill()
        rectangle30Path.fill()


        //// EuroText Drawing
        let euroTextRect = CGRect(x: 168.81, y: 291.78, width: 184.62, height: 30)
        let euroTextStyle = NSMutableParagraphStyle()
        euroTextStyle.alignment = .center
        let euroTextFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: euroTextStyle,
        ] as [NSAttributedString.Key: Any]

        let euroTextTextHeight: CGFloat = euroExp.boundingRect(with: CGSize(width: euroTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: euroTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: euroTextRect)
        euroExp.draw(in: CGRect(x: euroTextRect.minX, y: euroTextRect.minY + (euroTextRect.height - euroTextTextHeight) / 2, width: euroTextRect.width, height: euroTextTextHeight), withAttributes: euroTextFontAttributes)
        context.restoreGState()


        //// e9 Drawing
        context.saveGState()
        context.translateBy(x: 175, y: 296)
        context.scaleBy(x: 0.17, y: 0.17)

        let e9Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 196, height: 129))
        context.saveGState()
        e9Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -euro.size.height)
        context.draw(euro.cgImage!, in: CGRect(x: 0, y: 0, width: euro.size.width, height: euro.size.height))
        context.restoreGState()

        context.restoreGState()




        //// Euro Title Drawing
        let euroTitleRect = CGRect(x: 22.54, y: 292.04, width: 142.05, height: 30)
        let euroTitleTextContent = "Евро:"
        let euroTitleStyle = NSMutableParagraphStyle()
        euroTitleStyle.alignment = .left
        let euroTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: euroTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let euroTitleTextHeight: CGFloat = euroTitleTextContent.boundingRect(with: CGSize(width: euroTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: euroTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: euroTitleRect)
        euroTitleTextContent.draw(in: CGRect(x: euroTitleRect.minX, y: euroTitleRect.minY + (euroTitleRect.height - euroTitleTextHeight) / 2, width: euroTitleRect.width, height: euroTitleTextHeight), withAttributes: euroTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 8 Drawing
        context.saveGState()
        context.setAlpha(euroHightlightExp)
        context.setBlendMode(.color)

        let rectangle8Path = UIBezierPath(rect: CGRect(x: 17.04, y: 291.62, width: 336, height: 30))
        color2.setFill()
        rectangle8Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Dollar Group
        //// Dollar Button
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 168.37, y: 245.69, width: 184.75, height: 28.7))
        color6.setFill()
        rectanglePath.fill()


        //// Text Drawing
        let textRect = CGRect(x: 168.77, y: 245.57, width: 184.28, height: 28)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = dollarExp.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        dollarExp.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// d1 Drawing
        context.saveGState()
        context.translateBy(x: 175, y: 249)
        context.scaleBy(x: 0.17, y: 0.17)

        let d1Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 198, height: 131))
        context.saveGState()
        d1Path.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -dollar.size.height)
        context.draw(dollar.cgImage!, in: CGRect(x: 0, y: 0, width: dollar.size.width, height: dollar.size.height))
        context.restoreGState()

        context.restoreGState()




        //// Dollar Title Drawing
        let dollarTitleRect = CGRect(x: 22.59, y: 245.57, width: 142.05, height: 29)
        let dollarTitleTextContent = "Доллар:"
        let dollarTitleStyle = NSMutableParagraphStyle()
        dollarTitleStyle.alignment = .left
        let dollarTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: dollarTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let dollarTitleTextHeight: CGFloat = dollarTitleTextContent.boundingRect(with: CGSize(width: dollarTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: dollarTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: dollarTitleRect)
        dollarTitleTextContent.draw(in: CGRect(x: dollarTitleRect.minX, y: dollarTitleRect.minY + (dollarTitleRect.height - dollarTitleTextHeight) / 2, width: dollarTitleRect.width, height: dollarTitleTextHeight), withAttributes: dollarTitleFontAttributes)
        context.restoreGState()






        //// Zond Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Text 21 Drawing
        let text21Rect = CGRect(x: 37.24, y: 156, width: 215.76, height: 32)
        let text21TextContent = "■ cостояние зонда:"
        let text21Style = NSMutableParagraphStyle()
        text21Style.alignment = .left
        let text21FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 20)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text21Style,
        ] as [NSAttributedString.Key: Any]

        let text21TextHeight: CGFloat = text21TextContent.boundingRect(with: CGSize(width: text21Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text21FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text21Rect)
        text21TextContent.draw(in: CGRect(x: text21Rect.minX, y: text21Rect.minY + (text21Rect.height - text21TextHeight) / 2, width: text21Rect.width, height: text21TextHeight), withAttributes: text21FontAttributes)
        context.restoreGState()


        //// Text 22 Drawing
        let text22Rect = CGRect(x: 260.47, y: 156, width: 76.53, height: 32)
        let text22Style = NSMutableParagraphStyle()
        text22Style.alignment = .right
        let text22FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 20)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text22Style,
        ] as [NSAttributedString.Key: Any]

        let text22TextHeight: CGFloat = betRecoveryExp.boundingRect(with: CGSize(width: text22Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text22FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text22Rect)
        betRecoveryExp.draw(in: CGRect(x: text22Rect.minX, y: text22Rect.minY + (text22Rect.height - text22TextHeight) / 2, width: text22Rect.width, height: text22TextHeight), withAttributes: text22FontAttributes)
        context.restoreGState()


        //// Rectangle 7 Drawing
        context.saveGState()
        context.setAlpha(zondRecoveryExp)
        context.setBlendMode(.color)

        let rectangle7Path = UIBezierPath(rect: CGRect(x: 37, y: 158, width: 300, height: 30))
        color2.setFill()
        rectangle7Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Remaining Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Text 18 Drawing
        let text18Rect = CGRect(x: 37, y: 122.1, width: 280, height: 31)
        let text18TextContent = "■ дней до столкновения:"
        let text18Style = NSMutableParagraphStyle()
        text18Style.alignment = .left
        let text18FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 20)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text18Style,
        ] as [NSAttributedString.Key: Any]

        let text18TextHeight: CGFloat = text18TextContent.boundingRect(with: CGSize(width: text18Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text18FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text18Rect)
        text18TextContent.draw(in: CGRect(x: text18Rect.minX, y: text18Rect.minY + (text18Rect.height - text18TextHeight) / 2, width: text18Rect.width, height: text18TextHeight), withAttributes: text18FontAttributes)
        context.restoreGState()


        //// Text 20 Drawing
        let text20Rect = CGRect(x: 301, y: 123, width: 36, height: 31)
        let text20Style = NSMutableParagraphStyle()
        text20Style.alignment = .right
        let text20FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 20)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text20Style,
        ] as [NSAttributedString.Key: Any]

        let text20TextHeight: CGFloat = beforeDisasterLeft.boundingRect(with: CGSize(width: text20Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text20FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text20Rect)
        beforeDisasterLeft.draw(in: CGRect(x: text20Rect.minX, y: text20Rect.minY + (text20Rect.height - text20TextHeight) / 2, width: text20Rect.width, height: text20TextHeight), withAttributes: text20FontAttributes)
        context.restoreGState()


        //// Rectangle 6 Drawing
        context.saveGState()
        context.setAlpha(disasterHighlightExp)
        context.setBlendMode(.color)

        let rectangle6Path = UIBezierPath(rect: CGRect(x: 37, y: 123, width: 300, height: 30))
        color2.setFill()
        rectangle6Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Aim Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Aim Drawing
        let aimRect = CGRect(x: -19, y: 77.28, width: 414, height: 47.72)
        let aimStyle = NSMutableParagraphStyle()
        aimStyle.alignment = .center
        let aimFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: aimStyle,
        ] as [NSAttributedString.Key: Any]

        let aimTextHeight: CGFloat = aimMoneyExp.boundingRect(with: CGSize(width: aimRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: aimFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: aimRect)
        aimMoneyExp.draw(in: CGRect(x: aimRect.minX, y: aimRect.minY + (aimRect.height - aimTextHeight) / 2, width: aimRect.width, height: aimTextHeight), withAttributes: aimFontAttributes)
        context.restoreGState()


        //// Rectangle 5 Drawing
        context.saveGState()
        context.setAlpha(aimHighlightExp)
        context.setBlendMode(.color)

        let rectangle5Path = UIBezierPath(rect: CGRect(x: -19, y: 77, width: 414, height: 48))
        color2.setFill()
        rectangle5Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Text 6 Drawing
        let text6Rect = CGRect(x: (congratTitle - 19), y: 8.28, width: 414, height: 60.62)
        let text6Path = UIBezierPath(rect: text6Rect)
        NextStageKit.gradientColor27.setStroke()
        text6Path.lineWidth = 1
        text6Path.stroke()
        let text6TextContent = "Поздравляем!"
        let text6Style = NSMutableParagraphStyle()
        text6Style.alignment = .center
        let text6FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text6Style,
        ] as [NSAttributedString.Key: Any]

        let text6TextHeight: CGFloat = text6TextContent.boundingRect(with: CGSize(width: text6Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text6Rect)
        text6TextContent.draw(in: CGRect(x: text6Rect.minX, y: text6Rect.minY + (text6Rect.height - text6TextHeight) / 2, width: text6Rect.width, height: text6TextHeight), withAttributes: text6FontAttributes)
        context.restoreGState()


        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Text 2 Drawing
        context.saveGState()
        context.setAlpha(startAnimation)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let text2Rect = CGRect(x: -19, y: 8.28, width: 414, height: 60.62)
        let text2Path = UIBezierPath(rect: text2Rect)
        NextStageKit.gradientColor27.setStroke()
        text2Path.lineWidth = 1
        text2Path.stroke()
        let text2TextContent = "Поздравляем!"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text2Style,
        ] as [NSAttributedString.Key: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// Rectangle 14 Drawing
        context.saveGState()
        context.translateBy(x: 177.68, y: -35.52)
        context.rotate(by: -highlightTitleExp * CGFloat.pi/180)

        context.saveGState()
        context.setBlendMode(.sourceIn)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let rectangle14Path = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 57.2, height: 202.1), cornerRadius: 28.6)
        bezierGradientColor5.setFill()
        rectangle14Path.fill()
        NextStageKit.gradientColor27.setStroke()
        rectangle14Path.lineWidth = 1
        rectangle14Path.stroke()

        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSpotlightLayer_65(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 896), resizing: ResizingBehavior = .aspectFit, spotlightMove: CGFloat = 0.615) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 896), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 896)


        //// Color Declarations
        let hintGradient2Color = UIColor(red: 0.125, green: 0.173, blue: 0.627, alpha: 0.359)

        //// Variable Declarations
        let spotlightExp1: CGFloat = 10 * spotlightMove - 30 * (1 - spotlightMove)
        let spotlightExp2: CGFloat = -3 * spotlightMove + 25 * (1 - spotlightMove)

        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 223.86, y: 973.31)
        context.rotate(by: -(spotlightExp1 - 7.10706756592) * CGFloat.pi/180)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: -8.64, y: 0.79))
        bezierPath.addLine(to: CGPoint(x: -109.22, y: -987.3))
        bezierPath.addLine(to: CGPoint(x: -15.03, y: -990.35))
        bezierPath.addLine(to: CGPoint(x: 8.36, y: 0.79))
        bezierPath.addLine(to: CGPoint(x: -8.64, y: 0.79))
        bezierPath.close()
        hintGradient2Color.setFill()
        bezierPath.fill()

        context.restoreGState()


        //// Bezier 7 Drawing
        context.saveGState()
        context.translateBy(x: 223.14, y: 973.58)
        context.rotate(by: -(spotlightExp2 - 17.4768981934) * CGFloat.pi/180)

        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: -8.64, y: 0.79))
        bezier7Path.addLine(to: CGPoint(x: -26.48, y: -998.52))
        bezier7Path.addLine(to: CGPoint(x: 62.22, y: -989.39))
        bezier7Path.addLine(to: CGPoint(x: 8.36, y: 0.79))
        bezier7Path.addLine(to: CGPoint(x: -8.64, y: 0.79))
        bezier7Path.close()
        hintGradient2Color.setFill()
        bezier7Path.fill()

        context.restoreGState()


        //// Bezier 5 Drawing
        context.saveGState()
        context.translateBy(x: 224, y: 973.24)
        context.rotate(by: -(spotlightExp1 + 10.2094248047) * CGFloat.pi/180)

        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: -8.64, y: 0.79))
        bezier5Path.addLine(to: CGPoint(x: -63.32, y: -1001.3))
        bezier5Path.addLine(to: CGPoint(x: 36.86, y: -993.57))
        bezier5Path.addLine(to: CGPoint(x: 8.36, y: 0.79))
        bezier5Path.addLine(to: CGPoint(x: -8.64, y: 0.79))
        bezier5Path.close()
        hintGradient2Color.setFill()
        bezier5Path.fill()

        context.restoreGState()


        //// Bezier 2 Drawing
        context.saveGState()
        context.translateBy(x: 224.14, y: 973.71)
        context.rotate(by: -spotlightExp2 * CGFloat.pi/180)

        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: -8.64, y: 0.79))
        bezier2Path.addLine(to: CGPoint(x: -31.38, y: -1031.01))
        bezier2Path.addLine(to: CGPoint(x: 71.44, y: -1044.49))
        bezier2Path.addLine(to: CGPoint(x: 8.36, y: 0.79))
        bezier2Path.addLine(to: CGPoint(x: -8.64, y: 0.79))
        bezier2Path.close()
        hintGradient2Color.setFill()
        bezier2Path.fill()

        context.restoreGState()


        //// Bezier 6 Drawing
        context.saveGState()
        context.translateBy(x: 223.86, y: 973.55)
        context.rotate(by: -(spotlightExp1 + 23.3487992554) * CGFloat.pi/180)

        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: -8.64, y: 0.79))
        bezier6Path.addLine(to: CGPoint(x: -70.35, y: -1042.74))
        bezier6Path.addLine(to: CGPoint(x: 38.45, y: -1044.69))
        bezier6Path.addLine(to: CGPoint(x: 8.36, y: 0.79))
        bezier6Path.addLine(to: CGPoint(x: -8.64, y: 0.79))
        bezier6Path.close()
        hintGradient2Color.setFill()
        bezier6Path.fill()

        context.restoreGState()


        //// Bezier 8 Drawing
        context.saveGState()
        context.translateBy(x: 222.21, y: 977.08)
        context.rotate(by: -(spotlightExp2 - 33.0260519409) * CGFloat.pi/180)

        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: -8.64, y: 0.79))
        bezier8Path.addLine(to: CGPoint(x: -37.15, y: -1006.48))
        bezier8Path.addLine(to: CGPoint(x: 37.13, y: -1008.24))
        bezier8Path.addLine(to: CGPoint(x: 8.36, y: 0.79))
        bezier8Path.addLine(to: CGPoint(x: -8.64, y: 0.79))
        bezier8Path.close()
        hintGradient2Color.setFill()
        bezier8Path.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawMoneyGroupLayer_65(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 896), resizing: ResizingBehavior = .aspectFit, highlightMoneyStoke: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 896), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 896)


        //// Color Declarations
        let paint0_linear3Color3 = UIColor(red: 0.033, green: 0.360, blue: 0.892, alpha: 1.000)
        let bezierGradientColor5 = UIColor(red: 0.192, green: 1.000, blue: 0.953, alpha: 1.000)
        let gradientColor = UIColor(red: 0.000, green: 1.000, blue: 0.853, alpha: 1.000)
        let gradientColor2 = UIColor(red: 0.053, green: 0.001, blue: 0.060, alpha: 1.000)

        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [gradientColor2.cgColor, gradientColor.cgColor] as CFArray, locations: [0.01, 1])!

        //// Variable Declarations
        let moneyRotation: CGFloat = 120 * highlightMoneyStoke

        //// Money Group
        //// Rectangle 33 Drawing
        let rectangle33Path = UIBezierPath(roundedRect: CGRect(x: 30.23, y: 346.5, width: 353.82, height: 385), cornerRadius: 10)
        bezierGradientColor5.setStroke()
        rectangle33Path.lineWidth = 1
        rectangle33Path.stroke()


        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Rectangle 15 Drawing
        let rectangle15Path = UIBezierPath(roundedRect: CGRect(x: 30.23, y: 346.5, width: 353.82, height: 385), cornerRadius: 10)
        bezierGradientColor5.setStroke()
        rectangle15Path.lineWidth = 1
        rectangle15Path.stroke()


        //// Rectangle 16 Drawing
        context.saveGState()
        context.translateBy(x: 0, y: 896)
        context.rotate(by: -moneyRotation * CGFloat.pi/180)

        context.saveGState()
        context.setBlendMode(.sourceIn)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let rectangle16Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 726.08, height: 62))
        context.saveGState()
        rectangle16Path.addClip()
        context.drawLinearGradient(gradient, start: CGPoint(x: 363.04, y: -0), end: CGPoint(x: 363.04, y: 62), options: [])
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Text 23 Drawing
        let text23Rect = CGRect(x: 41.31, y: 336.14, width: 119.21, height: 21)
        let text23Path = UIBezierPath(roundedRect: text23Rect, cornerRadius: 4)
        paint0_linear3Color3.setFill()
        text23Path.fill()
        let text23TextContent = "Счета:"
        let text23Style = NSMutableParagraphStyle()
        text23Style.alignment = .center
        let text23FontAttributes = [
            .font: UIFont(name: "Gilroy-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text23Style,
        ] as [NSAttributedString.Key: Any]

        let text23TextHeight: CGFloat = text23TextContent.boundingRect(with: CGSize(width: text23Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text23FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text23Rect)
        text23TextContent.draw(in: CGRect(x: text23Rect.minX, y: text23Rect.minY + (text23Rect.height - text23TextHeight) / 2, width: text23Rect.width, height: text23TextHeight), withAttributes: text23FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawNextStageScreen_(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 896), resizing: ResizingBehavior = .aspectFit, stageNum: CGFloat = 5, zondRecovery: CGFloat = 23, beforeDisasterLeft: String = "24", startAnimation: CGFloat = 1, highlightTitle: CGFloat = 0.334, highlightMoneyStoke: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 896), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 896)


        //// Color Declarations
        let paint0_linear3Color3 = UIColor(red: 0.033, green: 0.360, blue: 0.892, alpha: 1.000)
        let color6 = UIColor(red: 0.176, green: 0.333, blue: 0.698, alpha: 1.000)
        let bezierGradientColor5 = UIColor(red: 0.192, green: 1.000, blue: 0.953, alpha: 1.000)
        let gradientColor = UIColor(red: 0.000, green: 1.000, blue: 0.853, alpha: 1.000)
        let gradientColor2 = UIColor(red: 0.053, green: 0.001, blue: 0.060, alpha: 1.000)

        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [gradientColor2.cgColor, gradientColor.cgColor] as CFArray, locations: [0.01, 1])!

        //// Variable Declarations
        let aimMoneyExp = stageNum == 1 ? "новая цель 1/7: $1000" : (stageNum == 2 ? "новая цель 2/7: €1000" : (stageNum == 3 ? "новая цель 3/7: ¥1000" : (stageNum == 4 ? "новая цель 4/7: £1000" : (stageNum == 5 ? "новая цель 5/7: ₽1000" : (stageNum == 6 ? "новая цель 6/7: ₹1000" : (stageNum == 7 ? "новая цель 7/7: ₪1000" : ""))))))
        let dollarExp = stageNum > 1 ? "$1000" : "$0"
        let euroExp = stageNum > 2 ? "€1000" : "€0"
        let jpyExp = stageNum > 3 ? "¥1000" : "¥0"
        let gbrExp = stageNum > 4 ? "£1000" : "£0"
        let rubleExp = stageNum > 5 ? "₽1000" : "₽0"
        let inrExp = stageNum > 6 ? "₹1000" : "₹0"
        let sheckelExp = stageNum > 7 ? "₪1000" : "₪0"
        let betRecoveryExp = "\(Int(round(zondRecovery)))" + "%"
        let aimHighlightExp: CGFloat = startAnimation <= 0.1 ? startAnimation * 10 : (startAnimation > 0.1 && startAnimation < 0.2 ? (0.2 - startAnimation) * 10 : 0)
        let disasterHighlightExp: CGFloat = startAnimation >= 0.2 && startAnimation <= 0.3 ? (startAnimation - 0.2) * 10 : (startAnimation > 0.3 && startAnimation < 0.4 ? (0.4 - startAnimation) * 10 : 0)
        let zondRecoveryExp: CGFloat = startAnimation >= 0.4 && startAnimation <= 0.5 ? (startAnimation - 0.4) * 10 : (startAnimation > 0.5 && startAnimation < 0.6 ? (0.6 - startAnimation) * 10 : 0)
        let euroHightlightExp: CGFloat = stageNum != 2 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let jpyHightlightExp: CGFloat = stageNum != 3 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let gbrHightlightExp: CGFloat = stageNum != 4 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let ruHightlightExp: CGFloat = stageNum != 5 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let inrHightlightExp: CGFloat = stageNum != 6 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let sheHightlightExp: CGFloat = stageNum != 7 || startAnimation < 0.6 ? 0 : (startAnimation >= 0.6 && startAnimation <= 0.7 ? (startAnimation - 0.6) * 10 : 1)
        let congratTitle: CGFloat = startAnimation <= 0.1 ? -414 * (1 - startAnimation * 10) : 0
        let highlightTitleExp: CGFloat = 90 * (1 - highlightTitle) - 130 * highlightTitle
        let moneyRotation: CGFloat = 120 * highlightMoneyStoke

        //// Money Group
        //// Rectangle 33 Drawing
        let rectangle33Path = UIBezierPath(roundedRect: CGRect(x: 30.23, y: 346.5, width: 353.82, height: 385), cornerRadius: 10)
        bezierGradientColor5.setStroke()
        rectangle33Path.lineWidth = 1
        rectangle33Path.stroke()


        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Rectangle 15 Drawing
        let rectangle15Path = UIBezierPath(roundedRect: CGRect(x: 30.23, y: 346.5, width: 353.82, height: 385), cornerRadius: 10)
        bezierGradientColor5.setStroke()
        rectangle15Path.lineWidth = 1
        rectangle15Path.stroke()


        //// Rectangle 16 Drawing
        context.saveGState()
        context.translateBy(x: -0, y: 896)
        context.rotate(by: -moneyRotation * CGFloat.pi/180)

        context.saveGState()
        context.setBlendMode(.sourceIn)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let rectangle16Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 726.08, height: 62))
        context.saveGState()
        rectangle16Path.addClip()
        context.drawLinearGradient(gradient, start: CGPoint(x: 363.04, y: -0), end: CGPoint(x: 363.04, y: 62), options: [])
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Sheckel Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Sheckel Button
        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 187.81, y: 667, width: 184.75, height: 30.33))
        color6.setFill()
        rectangle4Path.fill()


        //// Text 5 Drawing
        let text5Rect = CGRect(x: 188.21, y: 667.22, width: 184.28, height: 30)
        let text5Style = NSMutableParagraphStyle()
        text5Style.alignment = .center
        let text5FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text5Style,
        ] as [NSAttributedString.Key: Any]

        let text5TextHeight: CGFloat = sheckelExp.boundingRect(with: CGSize(width: text5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text5Rect)
        sheckelExp.draw(in: CGRect(x: text5Rect.minX, y: text5Rect.minY + (text5Rect.height - text5TextHeight) / 2, width: text5Rect.width, height: text5TextHeight), withAttributes: text5FontAttributes)
        context.restoreGState()




        //// Sheckel Title Drawing
        let sheckelTitleRect = CGRect(x: 42.12, y: 667.19, width: 142.05, height: 30)
        let sheckelTitleTextContent = "Шекель:"
        let sheckelTitleStyle = NSMutableParagraphStyle()
        sheckelTitleStyle.alignment = .left
        let sheckelTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: sheckelTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let sheckelTitleTextHeight: CGFloat = sheckelTitleTextContent.boundingRect(with: CGSize(width: sheckelTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: sheckelTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: sheckelTitleRect)
        sheckelTitleTextContent.draw(in: CGRect(x: sheckelTitleRect.minX, y: sheckelTitleRect.minY + (sheckelTitleRect.height - sheckelTitleTextHeight) / 2, width: sheckelTitleRect.width, height: sheckelTitleTextHeight), withAttributes: sheckelTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 13 Drawing
        context.saveGState()
        context.setAlpha(sheHightlightExp)
        context.setBlendMode(.color)

        let rectangle13Path = UIBezierPath(rect: CGRect(x: 37, y: 667, width: 335, height: 30))
        UIColor.green.setFill()
        rectangle13Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// INR Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// INR Button
        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 187.81, y: 620, width: 184.75, height: 30.33))
        color6.setFill()
        rectangle3Path.fill()


        //// Text 4 Drawing
        let text4Rect = CGRect(x: 188.21, y: 620.22, width: 184.28, height: 30)
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .center
        let text4FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text4Style,
        ] as [NSAttributedString.Key: Any]

        let text4TextHeight: CGFloat = inrExp.boundingRect(with: CGSize(width: text4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text4Rect)
        inrExp.draw(in: CGRect(x: text4Rect.minX, y: text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, width: text4Rect.width, height: text4TextHeight), withAttributes: text4FontAttributes)
        context.restoreGState()




        //// INR Title Drawing
        let iNRTitleRect = CGRect(x: 42.12, y: 620.19, width: 142.05, height: 30)
        let iNRTitleTextContent = "Рупий:"
        let iNRTitleStyle = NSMutableParagraphStyle()
        iNRTitleStyle.alignment = .left
        let iNRTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: iNRTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let iNRTitleTextHeight: CGFloat = iNRTitleTextContent.boundingRect(with: CGSize(width: iNRTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: iNRTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: iNRTitleRect)
        iNRTitleTextContent.draw(in: CGRect(x: iNRTitleRect.minX, y: iNRTitleRect.minY + (iNRTitleRect.height - iNRTitleTextHeight) / 2, width: iNRTitleRect.width, height: iNRTitleTextHeight), withAttributes: iNRTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 12 Drawing
        context.saveGState()
        context.setAlpha(inrHightlightExp)
        context.setBlendMode(.color)

        let rectangle12Path = UIBezierPath(rect: CGRect(x: 37, y: 620, width: 335, height: 30))
        UIColor.green.setFill()
        rectangle12Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Ruble Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Ruble Button
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 187.81, y: 572, width: 184.75, height: 30.33))
        color6.setFill()
        rectangle2Path.fill()


        //// Text 3 Drawing
        let text3Rect = CGRect(x: 188.21, y: 572.22, width: 184.28, height: 30)
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .center
        let text3FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text3Style,
        ] as [NSAttributedString.Key: Any]

        let text3TextHeight: CGFloat = rubleExp.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        rubleExp.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()




        //// Ruble Title Drawing
        let rubleTitleRect = CGRect(x: 42.12, y: 572.19, width: 142.05, height: 30)
        let rubleTitleTextContent = "Рубль:"
        let rubleTitleStyle = NSMutableParagraphStyle()
        rubleTitleStyle.alignment = .left
        let rubleTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: rubleTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let rubleTitleTextHeight: CGFloat = rubleTitleTextContent.boundingRect(with: CGSize(width: rubleTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: rubleTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: rubleTitleRect)
        rubleTitleTextContent.draw(in: CGRect(x: rubleTitleRect.minX, y: rubleTitleRect.minY + (rubleTitleRect.height - rubleTitleTextHeight) / 2, width: rubleTitleRect.width, height: rubleTitleTextHeight), withAttributes: rubleTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 11 Drawing
        context.saveGState()
        context.setAlpha(ruHightlightExp)
        context.setBlendMode(.color)

        let rectangle11Path = UIBezierPath(rect: CGRect(x: 37, y: 572, width: 335, height: 30))
        UIColor.green.setFill()
        rectangle11Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// GBP Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// GBP Button
        //// Rectangle 31 Drawing
        let rectangle31Path = UIBezierPath(rect: CGRect(x: 186.81, y: 525, width: 184.75, height: 30.33))
        color6.setFill()
        rectangle31Path.fill()


        //// Text 14 Drawing
        let text14Rect = CGRect(x: 187.21, y: 525.22, width: 184.28, height: 30)
        let text14Style = NSMutableParagraphStyle()
        text14Style.alignment = .center
        let text14FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text14Style,
        ] as [NSAttributedString.Key: Any]

        let text14TextHeight: CGFloat = gbrExp.boundingRect(with: CGSize(width: text14Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text14FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text14Rect)
        gbrExp.draw(in: CGRect(x: text14Rect.minX, y: text14Rect.minY + (text14Rect.height - text14TextHeight) / 2, width: text14Rect.width, height: text14TextHeight), withAttributes: text14FontAttributes)
        context.restoreGState()




        //// GBP Title Drawing
        let gBPTitleRect = CGRect(x: 41.12, y: 525.19, width: 142.05, height: 30)
        let gBPTitleTextContent = "Фунт:"
        let gBPTitleStyle = NSMutableParagraphStyle()
        gBPTitleStyle.alignment = .left
        let gBPTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: gBPTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let gBPTitleTextHeight: CGFloat = gBPTitleTextContent.boundingRect(with: CGSize(width: gBPTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: gBPTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: gBPTitleRect)
        gBPTitleTextContent.draw(in: CGRect(x: gBPTitleRect.minX, y: gBPTitleRect.minY + (gBPTitleRect.height - gBPTitleTextHeight) / 2, width: gBPTitleRect.width, height: gBPTitleTextHeight), withAttributes: gBPTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 10 Drawing
        context.saveGState()
        context.setAlpha(gbrHightlightExp)
        context.setBlendMode(.color)

        let rectangle10Path = UIBezierPath(rect: CGRect(x: 36, y: 525, width: 335, height: 30))
        UIColor.green.setFill()
        rectangle10Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// JPY Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// JPY Button
        //// Rectangle 29 Drawing
        let rectangle29Path = UIBezierPath(rect: CGRect(x: 187.12, y: 476.9, width: 184.75, height: 31))
        color6.setFill()
        rectangle29Path.fill()


        //// JPY Text Drawing
        let jPYTextRect = CGRect(x: 187.48, y: 476.9, width: 184.37, height: 31)
        let jPYTextStyle = NSMutableParagraphStyle()
        jPYTextStyle.alignment = .center
        let jPYTextFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: jPYTextStyle,
        ] as [NSAttributedString.Key: Any]

        let jPYTextTextHeight: CGFloat = jpyExp.boundingRect(with: CGSize(width: jPYTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: jPYTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: jPYTextRect)
        jpyExp.draw(in: CGRect(x: jPYTextRect.minX, y: jPYTextRect.minY + (jPYTextRect.height - jPYTextTextHeight) / 2, width: jPYTextRect.width, height: jPYTextTextHeight), withAttributes: jPYTextFontAttributes)
        context.restoreGState()




        //// JPY Title Drawing
        let jPYTitleRect = CGRect(x: 41.12, y: 476.9, width: 142.05, height: 31)
        let jPYTitleTextContent = "Иена:"
        let jPYTitleStyle = NSMutableParagraphStyle()
        jPYTitleStyle.alignment = .left
        let jPYTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: jPYTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let jPYTitleTextHeight: CGFloat = jPYTitleTextContent.boundingRect(with: CGSize(width: jPYTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: jPYTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: jPYTitleRect)
        jPYTitleTextContent.draw(in: CGRect(x: jPYTitleRect.minX, y: jPYTitleRect.minY + (jPYTitleRect.height - jPYTitleTextHeight) / 2, width: jPYTitleRect.width, height: jPYTitleTextHeight), withAttributes: jPYTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 9 Drawing
        context.saveGState()
        context.setAlpha(jpyHightlightExp)
        context.setBlendMode(.color)

        let rectangle9Path = UIBezierPath(rect: CGRect(x: 36, y: 477, width: 336, height: 31))
        UIColor.green.setFill()
        rectangle9Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Euro Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Euro Button
        //// Rectangle 30 Drawing
        let rectangle30Path = UIBezierPath(rect: CGRect(x: 187.49, y: 429.15, width: 184.75, height: 30))
        color6.setFill()
        rectangle30Path.fill()


        //// EuroText Drawing
        let euroTextRect = CGRect(x: 187.76, y: 429.15, width: 184.62, height: 30)
        let euroTextStyle = NSMutableParagraphStyle()
        euroTextStyle.alignment = .center
        let euroTextFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: euroTextStyle,
        ] as [NSAttributedString.Key: Any]

        let euroTextTextHeight: CGFloat = euroExp.boundingRect(with: CGSize(width: euroTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: euroTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: euroTextRect)
        euroExp.draw(in: CGRect(x: euroTextRect.minX, y: euroTextRect.minY + (euroTextRect.height - euroTextTextHeight) / 2, width: euroTextRect.width, height: euroTextTextHeight), withAttributes: euroTextFontAttributes)
        context.restoreGState()




        //// Euro Title Drawing
        let euroTitleRect = CGRect(x: 41.49, y: 429.42, width: 142.05, height: 30)
        let euroTitleTextContent = "Евро:"
        let euroTitleStyle = NSMutableParagraphStyle()
        euroTitleStyle.alignment = .left
        let euroTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: euroTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let euroTitleTextHeight: CGFloat = euroTitleTextContent.boundingRect(with: CGSize(width: euroTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: euroTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: euroTitleRect)
        euroTitleTextContent.draw(in: CGRect(x: euroTitleRect.minX, y: euroTitleRect.minY + (euroTitleRect.height - euroTitleTextHeight) / 2, width: euroTitleRect.width, height: euroTitleTextHeight), withAttributes: euroTitleFontAttributes)
        context.restoreGState()


        //// Rectangle 8 Drawing
        context.saveGState()
        context.setAlpha(euroHightlightExp)
        context.setBlendMode(.color)

        let rectangle8Path = UIBezierPath(rect: CGRect(x: 36, y: 429, width: 336, height: 30))
        UIColor.green.setFill()
        rectangle8Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Dollar Group
        //// Dollar Button
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 187.33, y: 383.06, width: 184.75, height: 28.7))
        color6.setFill()
        rectanglePath.fill()


        //// Text Drawing
        let textRect = CGRect(x: 187.73, y: 382.95, width: 184.28, height: 28)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = dollarExp.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        dollarExp.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()




        //// Dollar Title Drawing
        let dollarTitleRect = CGRect(x: 41.54, y: 382.95, width: 142.05, height: 29)
        let dollarTitleTextContent = "Доллар:"
        let dollarTitleStyle = NSMutableParagraphStyle()
        dollarTitleStyle.alignment = .left
        let dollarTitleFontAttributes = [
            .font: UIFont(name: "Gilroy-Regular", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: dollarTitleStyle,
        ] as [NSAttributedString.Key: Any]

        let dollarTitleTextHeight: CGFloat = dollarTitleTextContent.boundingRect(with: CGSize(width: dollarTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: dollarTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: dollarTitleRect)
        dollarTitleTextContent.draw(in: CGRect(x: dollarTitleRect.minX, y: dollarTitleRect.minY + (dollarTitleRect.height - dollarTitleTextHeight) / 2, width: dollarTitleRect.width, height: dollarTitleTextHeight), withAttributes: dollarTitleFontAttributes)
        context.restoreGState()




        //// Text 23 Drawing
        let text23Rect = CGRect(x: 41.31, y: 336.14, width: 119.21, height: 21)
        let text23Path = UIBezierPath(roundedRect: text23Rect, cornerRadius: 4)
        paint0_linear3Color3.setFill()
        text23Path.fill()
        let text23TextContent = "Счета:"
        let text23Style = NSMutableParagraphStyle()
        text23Style.alignment = .center
        let text23FontAttributes = [
            .font: UIFont(name: "Gilroy-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text23Style,
        ] as [NSAttributedString.Key: Any]

        let text23TextHeight: CGFloat = text23TextContent.boundingRect(with: CGSize(width: text23Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text23FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text23Rect)
        text23TextContent.draw(in: CGRect(x: text23Rect.minX, y: text23Rect.minY + (text23Rect.height - text23TextHeight) / 2, width: text23Rect.width, height: text23TextHeight), withAttributes: text23FontAttributes)
        context.restoreGState()




        //// Zond Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Text 21 Drawing
        let text21Rect = CGRect(x: 56.24, y: 231, width: 215.76, height: 32)
        let text21TextContent = "■ cостояние зонда:"
        let text21Style = NSMutableParagraphStyle()
        text21Style.alignment = .left
        let text21FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 20)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text21Style,
        ] as [NSAttributedString.Key: Any]

        let text21TextHeight: CGFloat = text21TextContent.boundingRect(with: CGSize(width: text21Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text21FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text21Rect)
        text21TextContent.draw(in: CGRect(x: text21Rect.minX, y: text21Rect.minY + (text21Rect.height - text21TextHeight) / 2, width: text21Rect.width, height: text21TextHeight), withAttributes: text21FontAttributes)
        context.restoreGState()


        //// Text 22 Drawing
        let text22Rect = CGRect(x: 279.47, y: 231, width: 76.53, height: 32)
        let text22Style = NSMutableParagraphStyle()
        text22Style.alignment = .right
        let text22FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 20)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text22Style,
        ] as [NSAttributedString.Key: Any]

        let text22TextHeight: CGFloat = betRecoveryExp.boundingRect(with: CGSize(width: text22Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text22FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text22Rect)
        betRecoveryExp.draw(in: CGRect(x: text22Rect.minX, y: text22Rect.minY + (text22Rect.height - text22TextHeight) / 2, width: text22Rect.width, height: text22TextHeight), withAttributes: text22FontAttributes)
        context.restoreGState()


        //// Rectangle 7 Drawing
        context.saveGState()
        context.setAlpha(zondRecoveryExp)
        context.setBlendMode(.color)

        let rectangle7Path = UIBezierPath(rect: CGRect(x: 56, y: 233, width: 300, height: 30))
        UIColor.green.setFill()
        rectangle7Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Remaining Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Text 18 Drawing
        let text18Rect = CGRect(x: 56, y: 197.1, width: 280, height: 31)
        let text18TextContent = "■ дней до столкновения:"
        let text18Style = NSMutableParagraphStyle()
        text18Style.alignment = .left
        let text18FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 20)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text18Style,
        ] as [NSAttributedString.Key: Any]

        let text18TextHeight: CGFloat = text18TextContent.boundingRect(with: CGSize(width: text18Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text18FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text18Rect)
        text18TextContent.draw(in: CGRect(x: text18Rect.minX, y: text18Rect.minY + (text18Rect.height - text18TextHeight) / 2, width: text18Rect.width, height: text18TextHeight), withAttributes: text18FontAttributes)
        context.restoreGState()


        //// Text 20 Drawing
        let text20Rect = CGRect(x: 320, y: 198, width: 36, height: 31)
        let text20Style = NSMutableParagraphStyle()
        text20Style.alignment = .right
        let text20FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 20)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text20Style,
        ] as [NSAttributedString.Key: Any]

        let text20TextHeight: CGFloat = beforeDisasterLeft.boundingRect(with: CGSize(width: text20Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text20FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text20Rect)
        beforeDisasterLeft.draw(in: CGRect(x: text20Rect.minX, y: text20Rect.minY + (text20Rect.height - text20TextHeight) / 2, width: text20Rect.width, height: text20TextHeight), withAttributes: text20FontAttributes)
        context.restoreGState()


        //// Rectangle 6 Drawing
        context.saveGState()
        context.setAlpha(disasterHighlightExp)
        context.setBlendMode(.color)

        let rectangle6Path = UIBezierPath(rect: CGRect(x: 56, y: 198, width: 300, height: 30))
        UIColor.green.setFill()
        rectangle6Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Aim Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Aim Drawing
        let aimRect = CGRect(x: 0, y: 144.28, width: 414, height: 47.72)
        let aimStyle = NSMutableParagraphStyle()
        aimStyle.alignment = .center
        let aimFontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: aimStyle,
        ] as [NSAttributedString.Key: Any]

        let aimTextHeight: CGFloat = aimMoneyExp.boundingRect(with: CGSize(width: aimRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: aimFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: aimRect)
        aimMoneyExp.draw(in: CGRect(x: aimRect.minX, y: aimRect.minY + (aimRect.height - aimTextHeight) / 2, width: aimRect.width, height: aimTextHeight), withAttributes: aimFontAttributes)
        context.restoreGState()


        //// Rectangle 5 Drawing
        context.saveGState()
        context.setAlpha(aimHighlightExp)
        context.setBlendMode(.color)

        let rectangle5Path = UIBezierPath(rect: CGRect(x: 0, y: 144, width: 414, height: 48))
        UIColor.green.setFill()
        rectangle5Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Text 6 Drawing
        let text6Rect = CGRect(x: congratTitle, y: 52.28, width: 414, height: 60.62)
        let text6Path = UIBezierPath(rect: text6Rect)
        NextStageKit.gradientColor27.setStroke()
        text6Path.lineWidth = 1
        text6Path.stroke()
        let text6TextContent = "Поздравляем!"
        let text6Style = NSMutableParagraphStyle()
        text6Style.alignment = .center
        let text6FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text6Style,
        ] as [NSAttributedString.Key: Any]

        let text6TextHeight: CGFloat = text6TextContent.boundingRect(with: CGSize(width: text6Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text6Rect)
        text6TextContent.draw(in: CGRect(x: text6Rect.minX, y: text6Rect.minY + (text6Rect.height - text6TextHeight) / 2, width: text6Rect.width, height: text6TextHeight), withAttributes: text6FontAttributes)
        context.restoreGState()


        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 0, y: 52.28, width: 414, height: 60.62)
        let text2Path = UIBezierPath(rect: text2Rect)
        NextStageKit.gradientColor27.setStroke()
        text2Path.lineWidth = 1
        text2Path.stroke()
        let text2TextContent = "Поздравляем!"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [
            .font: UIFont(name: "Play-Bold", size: 28)!,
            .foregroundColor: NextStageKit.gradientColor27,
            .paragraphStyle: text2Style,
        ] as [NSAttributedString.Key: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()


        //// Rectangle 14 Drawing
        context.saveGState()
        context.translateBy(x: 196.68, y: 8.48)
        context.rotate(by: -highlightTitleExp * CGFloat.pi/180)

        context.saveGState()
        context.setBlendMode(.sourceIn)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let rectangle14Path = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 57.2, height: 202.1), cornerRadius: 28.6)
        bezierGradientColor5.setFill()
        rectangle14Path.fill()
        NextStageKit.gradientColor27.setStroke()
        rectangle14Path.lineWidth = 1
        rectangle14Path.stroke()

        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawMoneyGroupLayer_58(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit, highlightMoneyStoke: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)


        //// Color Declarations
        let paint0_linear3Color3 = UIColor(red: 0.033, green: 0.360, blue: 0.892, alpha: 1.000)
        let bezierGradientColor5 = UIColor(red: 0.192, green: 1.000, blue: 0.953, alpha: 1.000)
        let gradientColor = UIColor(red: 0.000, green: 1.000, blue: 0.853, alpha: 1.000)
        let gradientColor2 = UIColor(red: 0.053, green: 0.001, blue: 0.060, alpha: 1.000)

        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [gradientColor2.cgColor, gradientColor.cgColor] as CFArray, locations: [0.01, 1])!

        //// Variable Declarations
        let moneyRotation: CGFloat = 120 * highlightMoneyStoke

        //// Money Group
        //// Rectangle 33 Drawing
        let rectangle33Path = UIBezierPath(roundedRect: CGRect(x: 11.23, y: 346.5, width: 353.82, height: 385), cornerRadius: 10)
        bezierGradientColor5.setStroke()
        rectangle33Path.lineWidth = 1
        rectangle33Path.stroke()


        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Rectangle 15 Drawing
        let rectangle15Path = UIBezierPath(roundedRect: CGRect(x: 11.23, y: 346.5, width: 353.82, height: 385), cornerRadius: 10)
        bezierGradientColor5.setStroke()
        rectangle15Path.lineWidth = 1
        rectangle15Path.stroke()


        //// Rectangle 16 Drawing
        context.saveGState()
        context.translateBy(x: -19, y: 896)
        context.rotate(by: -moneyRotation * CGFloat.pi/180)

        context.saveGState()
        context.setBlendMode(.sourceIn)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let rectangle16Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 726.08, height: 62))
        context.saveGState()
        rectangle16Path.addClip()
        context.drawLinearGradient(gradient, start: CGPoint(x: 363.04, y: -0), end: CGPoint(x: 363.04, y: 62), options: [])
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Text 23 Drawing
        let text23Rect = CGRect(x: 22.31, y: 336.14, width: 119.21, height: 21)
        let text23Path = UIBezierPath(roundedRect: text23Rect, cornerRadius: 4)
        paint0_linear3Color3.setFill()
        text23Path.fill()
        let text23TextContent = "Счета:"
        let text23Style = NSMutableParagraphStyle()
        text23Style.alignment = .center
        let text23FontAttributes = [
            .font: UIFont(name: "Gilroy-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text23Style,
        ] as [NSAttributedString.Key: Any]

        let text23TextHeight: CGFloat = text23TextContent.boundingRect(with: CGSize(width: text23Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text23FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text23Rect)
        text23TextContent.draw(in: CGRect(x: text23Rect.minX, y: text23Rect.minY + (text23Rect.height - text23TextHeight) / 2, width: text23Rect.width, height: text23TextHeight), withAttributes: text23FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawMoneyGroupLayer_55(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 736), resizing: ResizingBehavior = .aspectFit, highlightMoneyStoke: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 736), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 736)


        //// Color Declarations
        let paint0_linear3Color3 = UIColor(red: 0.033, green: 0.360, blue: 0.892, alpha: 1.000)
        let bezierGradientColor5 = UIColor(red: 0.192, green: 1.000, blue: 0.953, alpha: 1.000)
        let gradientColor = UIColor(red: 0.000, green: 1.000, blue: 0.853, alpha: 1.000)
        let gradientColor2 = UIColor(red: 0.053, green: 0.001, blue: 0.060, alpha: 1.000)

        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [gradientColor2.cgColor, gradientColor.cgColor] as CFArray, locations: [0.01, 1])!

        //// Variable Declarations
        let moneyRotation: CGFloat = 120 * highlightMoneyStoke

        //// Money Group
        //// Rectangle 33 Drawing
        let rectangle33Path = UIBezierPath(roundedRect: CGRect(x: 30.23, y: 251.5, width: 353.82, height: 385), cornerRadius: 10)
        bezierGradientColor5.setStroke()
        rectangle33Path.lineWidth = 1
        rectangle33Path.stroke()


        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Rectangle 15 Drawing
        let rectangle15Path = UIBezierPath(roundedRect: CGRect(x: 30.23, y: 251.5, width: 353.82, height: 385), cornerRadius: 10)
        bezierGradientColor5.setStroke()
        rectangle15Path.lineWidth = 1
        rectangle15Path.stroke()


        //// Rectangle 16 Drawing
        context.saveGState()
        context.translateBy(x: -0, y: 801)
        context.rotate(by: -moneyRotation * CGFloat.pi/180)

        context.saveGState()
        context.setBlendMode(.sourceIn)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let rectangle16Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 726.08, height: 62))
        context.saveGState()
        rectangle16Path.addClip()
        context.drawLinearGradient(gradient, start: CGPoint(x: 363.04, y: -0), end: CGPoint(x: 363.04, y: 62), options: [])
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Text 23 Drawing
        let text23Rect = CGRect(x: 41.31, y: 241.14, width: 119.21, height: 21)
        let text23Path = UIBezierPath(roundedRect: text23Rect, cornerRadius: 4)
        paint0_linear3Color3.setFill()
        text23Path.fill()
        let text23TextContent = "Счета:"
        let text23Style = NSMutableParagraphStyle()
        text23Style.alignment = .center
        let text23FontAttributes = [
            .font: UIFont(name: "Gilroy-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text23Style,
        ] as [NSAttributedString.Key: Any]

        let text23TextHeight: CGFloat = text23TextContent.boundingRect(with: CGSize(width: text23Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text23FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text23Rect)
        text23TextContent.draw(in: CGRect(x: text23Rect.minX, y: text23Rect.minY + (text23Rect.height - text23TextHeight) / 2, width: text23Rect.width, height: text23TextHeight), withAttributes: text23FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawMoneyGroupLayer_47(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit, highlightMoneyStoke: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)


        //// Color Declarations
        let paint0_linear3Color3 = UIColor(red: 0.033, green: 0.360, blue: 0.892, alpha: 1.000)
        let bezierGradientColor5 = UIColor(red: 0.192, green: 1.000, blue: 0.953, alpha: 1.000)
        let gradientColor = UIColor(red: 0.000, green: 1.000, blue: 0.853, alpha: 1.000)
        let gradientColor2 = UIColor(red: 0.053, green: 0.001, blue: 0.060, alpha: 1.000)

        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [gradientColor2.cgColor, gradientColor.cgColor] as CFArray, locations: [0.01, 1])!

        //// Variable Declarations
        let moneyRotation: CGFloat = 120 * highlightMoneyStoke

        //// Money Group
        //// Rectangle 33 Drawing
        let rectangle33Path = UIBezierPath(roundedRect: CGRect(x: 11.23, y: 209.13, width: 353.82, height: 385), cornerRadius: 10)
        bezierGradientColor5.setStroke()
        rectangle33Path.lineWidth = 1
        rectangle33Path.stroke()


        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Rectangle 15 Drawing
        let rectangle15Path = UIBezierPath(roundedRect: CGRect(x: 11.23, y: 209.13, width: 353.82, height: 385), cornerRadius: 10)
        bezierGradientColor5.setStroke()
        rectangle15Path.lineWidth = 1
        rectangle15Path.stroke()


        //// Rectangle 16 Drawing
        context.saveGState()
        context.translateBy(x: -19, y: 758.63)
        context.rotate(by: -moneyRotation * CGFloat.pi/180)

        context.saveGState()
        context.setBlendMode(.sourceIn)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let rectangle16Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 726.08, height: 62))
        context.saveGState()
        rectangle16Path.addClip()
        context.drawLinearGradient(gradient, start: CGPoint(x: 363.04, y: -0), end: CGPoint(x: 363.04, y: 62), options: [])
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Text 23 Drawing
        let text23Rect = CGRect(x: 22.31, y: 198.77, width: 119.21, height: 21)
        let text23Path = UIBezierPath(roundedRect: text23Rect, cornerRadius: 4)
        paint0_linear3Color3.setFill()
        text23Path.fill()
        let text23TextContent = "Счета:"
        let text23Style = NSMutableParagraphStyle()
        text23Style.alignment = .center
        let text23FontAttributes = [
            .font: UIFont(name: "Gilroy-Bold", size: 17)!,
            .foregroundColor: UIColor.white,
            .paragraphStyle: text23Style,
        ] as [NSAttributedString.Key: Any]

        let text23TextHeight: CGFloat = text23TextContent.boundingRect(with: CGSize(width: text23Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text23FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text23Rect)
        text23TextContent.draw(in: CGRect(x: text23Rect.minX, y: text23Rect.minY + (text23Rect.height - text23TextHeight) / 2, width: text23Rect.width, height: text23TextHeight), withAttributes: text23FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawBkg(frame: CGRect = CGRect(x: 0, y: 104, width: 414, height: 896)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let hintGradientColor2 = UIColor(red: 0.151, green: 0.202, blue: 0.532, alpha: 1.000)
        let hintGradientColor = UIColor(red: 0.121, green: 0.068, blue: 0.948, alpha: 1.000)
        let color5 = UIColor(red: 0.098, green: 0.031, blue: 0.431, alpha: 1.000)

        //// Gradient Declarations
        let hintGradient = CGGradient(colorsSpace: nil, colors: [hintGradientColor.cgColor, hintGradientColor2.cgColor] as CFArray, locations: [0, 1])!

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: frame.minX + fastFloor(frame.width * 0.00000 + 0.5), y: frame.minY + fastFloor(frame.height * -0.00000 - 0.5) + 1, width: fastFloor(frame.width * 1.00000 + 0.5) - fastFloor(frame.width * 0.00000 + 0.5), height: fastFloor(frame.height * 1.00000 - 0.5) - fastFloor(frame.height * -0.00000 - 0.5)))
        color5.setFill()
        rectanglePath.fill()


        //// Rectangle 28 Drawing
        context.saveGState()
        context.setAlpha(0.9)

        let rectangle28Rect = CGRect(x: frame.minX + fastFloor(frame.width * 0.00000 + 0.5), y: frame.minY + fastFloor(frame.height * -0.00000 - 0.5) + 1, width: fastFloor(frame.width * 1.00000 + 0.5) - fastFloor(frame.width * 0.00000 + 0.5), height: fastFloor(frame.height * 1.00000 - 0.5) - fastFloor(frame.height * -0.00000 - 0.5))
        let rectangle28Path = UIBezierPath(rect: rectangle28Rect)
        context.saveGState()
        rectangle28Path.addClip()
        context.drawLinearGradient(hintGradient,
            start: CGPoint(x: rectangle28Rect.midX, y: rectangle28Rect.minY),
            end: CGPoint(x: rectangle28Rect.midX, y: rectangle28Rect.maxY),
            options: [])
        context.restoreGState()

        context.restoreGState()
    }

    @objc dynamic public class func drawSpotlightLayer_58(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit, spotlightMove: CGFloat = 0.615) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)


        //// Color Declarations
        let hintGradient2Color = UIColor(red: 0.125, green: 0.173, blue: 0.627, alpha: 0.359)

        //// Variable Declarations
        let spotlightExp1: CGFloat = 10 * spotlightMove - 30 * (1 - spotlightMove)
        let spotlightExp2: CGFloat = -3 * spotlightMove + 25 * (1 - spotlightMove)

        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 190.86, y: 841.31)
        context.rotate(by: -(spotlightExp1 - 7.10706756592) * CGFloat.pi/180)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: -8.64, y: 0.79))
        bezierPath.addLine(to: CGPoint(x: -92.25, y: -850.37))
        bezierPath.addLine(to: CGPoint(x: -9.34, y: -860.46))
        bezierPath.addLine(to: CGPoint(x: 8.36, y: 0.79))
        bezierPath.addLine(to: CGPoint(x: -8.64, y: 0.79))
        bezierPath.close()
        hintGradient2Color.setFill()
        bezierPath.fill()

        context.restoreGState()


        //// Bezier 7 Drawing
        context.saveGState()
        context.translateBy(x: 190.14, y: 841.58)
        context.rotate(by: -(spotlightExp2 - 17.4768981934) * CGFloat.pi/180)

        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: -8.64, y: 0.79))
        bezier7Path.addLine(to: CGPoint(x: -69.3, y: -864.48))
        bezier7Path.addLine(to: CGPoint(x: 18.19, y: -867.27))
        bezier7Path.addLine(to: CGPoint(x: 8.36, y: 0.79))
        bezier7Path.addLine(to: CGPoint(x: -8.64, y: 0.79))
        bezier7Path.close()
        hintGradient2Color.setFill()
        bezier7Path.fill()

        context.restoreGState()


        //// Bezier 5 Drawing
        context.saveGState()
        context.translateBy(x: 191, y: 841.24)
        context.rotate(by: -(spotlightExp1 + 10.2094248047) * CGFloat.pi/180)

        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: -8.64, y: 0.79))
        bezier5Path.addLine(to: CGPoint(x: -33.18, y: -866.55))
        bezier5Path.addLine(to: CGPoint(x: 44.82, y: -871.04))
        bezier5Path.addLine(to: CGPoint(x: 8.36, y: 0.79))
        bezier5Path.addLine(to: CGPoint(x: -8.64, y: 0.79))
        bezier5Path.close()
        hintGradient2Color.setFill()
        bezier5Path.fill()

        context.restoreGState()


        //// Bezier 2 Drawing
        context.saveGState()
        context.translateBy(x: 191.14, y: 841.71)
        context.rotate(by: -spotlightExp2 * CGFloat.pi/180)

        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: -8.64, y: 0.79))
        bezier2Path.addLine(to: CGPoint(x: 1.55, y: -875.28))
        bezier2Path.addLine(to: CGPoint(x: 86.63, y: -862.08))
        bezier2Path.addLine(to: CGPoint(x: 8.36, y: 0.79))
        bezier2Path.addLine(to: CGPoint(x: -8.64, y: 0.79))
        bezier2Path.close()
        hintGradient2Color.setFill()
        bezier2Path.fill()

        context.restoreGState()


        //// Bezier 6 Drawing
        context.saveGState()
        context.translateBy(x: 190.86, y: 841.55)
        context.rotate(by: -(spotlightExp1 + 23.3487992554) * CGFloat.pi/180)

        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: -8.64, y: 0.79))
        bezier6Path.addLine(to: CGPoint(x: -37.21, y: -864.79))
        bezier6Path.addLine(to: CGPoint(x: 44.61, y: -873.58))
        bezier6Path.addLine(to: CGPoint(x: 8.36, y: 0.79))
        bezier6Path.addLine(to: CGPoint(x: -8.64, y: 0.79))
        bezier6Path.close()
        hintGradient2Color.setFill()
        bezier6Path.fill()

        context.restoreGState()


        //// Bezier 8 Drawing
        context.saveGState()
        context.translateBy(x: 189.21, y: 845.08)
        context.rotate(by: -(spotlightExp2 - 33.0260519409) * CGFloat.pi/180)

        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: -8.64, y: 0.79))
        bezier8Path.addLine(to: CGPoint(x: -101.98, y: -875.32))
        bezier8Path.addLine(to: CGPoint(x: -3.6, y: -881.43))
        bezier8Path.addLine(to: CGPoint(x: 8.36, y: 0.79))
        bezier8Path.addLine(to: CGPoint(x: -8.64, y: 0.79))
        bezier8Path.close()
        hintGradient2Color.setFill()
        bezier8Path.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSpotlightLayer_55(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 796), resizing: ResizingBehavior = .aspectFit, spotlightMove: CGFloat = 0.615) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 796), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 796)


        //// Color Declarations
        let hintGradient2Color = UIColor(red: 0.125, green: 0.173, blue: 0.627, alpha: 0.359)

        //// Variable Declarations
        let spotlightExp1: CGFloat = 10 * spotlightMove - 30 * (1 - spotlightMove)
        let spotlightExp2: CGFloat = -3 * spotlightMove + 25 * (1 - spotlightMove)

        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 221.86, y: 828.31)
        context.rotate(by: -(spotlightExp1 - 7.10706756592) * CGFloat.pi/180)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: -8.64, y: 0.79))
        bezierPath.addLine(to: CGPoint(x: -69.74, y: -845.77))
        bezierPath.addLine(to: CGPoint(x: 9.67, y: -845.4))
        bezierPath.addLine(to: CGPoint(x: 8.36, y: 0.79))
        bezierPath.addLine(to: CGPoint(x: -8.64, y: 0.79))
        bezierPath.close()
        hintGradient2Color.setFill()
        bezierPath.fill()

        context.restoreGState()


        //// Bezier 7 Drawing
        context.saveGState()
        context.translateBy(x: 221.14, y: 828.58)
        context.rotate(by: -(spotlightExp2 - 17.4768981934) * CGFloat.pi/180)

        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: -8.64, y: 0.79))
        bezier7Path.addLine(to: CGPoint(x: -50.19, y: -902.49))
        bezier7Path.addLine(to: CGPoint(x: 35.23, y: -899.64))
        bezier7Path.addLine(to: CGPoint(x: 8.36, y: 0.79))
        bezier7Path.addLine(to: CGPoint(x: -8.64, y: 0.79))
        bezier7Path.close()
        hintGradient2Color.setFill()
        bezier7Path.fill()

        context.restoreGState()


        //// Bezier 5 Drawing
        context.saveGState()
        context.translateBy(x: 222, y: 828.24)
        context.rotate(by: -(spotlightExp1 + 10.2094248047) * CGFloat.pi/180)

        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: -8.64, y: 0.79))
        bezier5Path.addLine(to: CGPoint(x: -2.77, y: -875.43))
        bezier5Path.addLine(to: CGPoint(x: 85.39, y: -887.59))
        bezier5Path.addLine(to: CGPoint(x: 8.36, y: 0.79))
        bezier5Path.addLine(to: CGPoint(x: -8.64, y: 0.79))
        bezier5Path.close()
        hintGradient2Color.setFill()
        bezier5Path.fill()

        context.restoreGState()


        //// Bezier 2 Drawing
        context.saveGState()
        context.translateBy(x: 222.14, y: 828.71)
        context.rotate(by: -spotlightExp2 * CGFloat.pi/180)

        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: -8.64, y: 0.79))
        bezier2Path.addLine(to: CGPoint(x: -27.53, y: -843.36))
        bezier2Path.addLine(to: CGPoint(x: 68.95, y: -845.7))
        bezier2Path.addLine(to: CGPoint(x: 8.36, y: 0.79))
        bezier2Path.addLine(to: CGPoint(x: -8.64, y: 0.79))
        bezier2Path.close()
        hintGradient2Color.setFill()
        bezier2Path.fill()

        context.restoreGState()


        //// Bezier 6 Drawing
        context.saveGState()
        context.translateBy(x: 221.86, y: 828.55)
        context.rotate(by: -(spotlightExp1 + 23.3487992554) * CGFloat.pi/180)

        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: -8.64, y: 0.79))
        bezier6Path.addLine(to: CGPoint(x: -100.12, y: -860.99))
        bezier6Path.addLine(to: CGPoint(x: 1.72, y: -865.61))
        bezier6Path.addLine(to: CGPoint(x: 8.36, y: 0.79))
        bezier6Path.addLine(to: CGPoint(x: -8.64, y: 0.79))
        bezier6Path.close()
        hintGradient2Color.setFill()
        bezier6Path.fill()

        context.restoreGState()


        //// Bezier 8 Drawing
        context.saveGState()
        context.translateBy(x: 220.21, y: 832.08)
        context.rotate(by: -(spotlightExp2 - 33.0260519409) * CGFloat.pi/180)

        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: -8.64, y: 0.79))
        bezier8Path.addLine(to: CGPoint(x: -82.2, y: -876.9))
        bezier8Path.addLine(to: CGPoint(x: 11.68, y: -869.6))
        bezier8Path.addLine(to: CGPoint(x: 8.36, y: 0.79))
        bezier8Path.addLine(to: CGPoint(x: -8.64, y: 0.79))
        bezier8Path.close()
        hintGradient2Color.setFill()
        bezier8Path.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSpotlightLayer_47(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit, spotlightMove: CGFloat = 0.615) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)


        //// Color Declarations
        let hintGradient2Color = UIColor(red: 0.125, green: 0.173, blue: 0.627, alpha: 0.359)

        //// Variable Declarations
        let spotlightExp1: CGFloat = 10 * spotlightMove - 30 * (1 - spotlightMove)
        let spotlightExp2: CGFloat = -3 * spotlightMove + 25 * (1 - spotlightMove)

        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 187.86, y: 685.31)
        context.rotate(by: -(spotlightExp1 - 7.10706756592) * CGFloat.pi/180)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: -8.64, y: 0.79))
        bezierPath.addLine(to: CGPoint(x: -59.33, y: -703.87))
        bezierPath.addLine(to: CGPoint(x: 36.97, y: -710.85))
        bezierPath.addLine(to: CGPoint(x: 8.36, y: 0.79))
        bezierPath.addLine(to: CGPoint(x: -8.64, y: 0.79))
        bezierPath.close()
        hintGradient2Color.setFill()
        bezierPath.fill()

        context.restoreGState()


        //// Bezier 7 Drawing
        context.saveGState()
        context.translateBy(x: 187.14, y: 685.58)
        context.rotate(by: -(spotlightExp2 - 17.4768981934) * CGFloat.pi/180)

        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: -8.64, y: 0.79))
        bezier7Path.addLine(to: CGPoint(x: -47.19, y: -708.38))
        bezier7Path.addLine(to: CGPoint(x: 30.96, y: -703.98))
        bezier7Path.addLine(to: CGPoint(x: 8.36, y: 0.79))
        bezier7Path.addLine(to: CGPoint(x: -8.64, y: 0.79))
        bezier7Path.close()
        hintGradient2Color.setFill()
        bezier7Path.fill()

        context.restoreGState()


        //// Bezier 5 Drawing
        context.saveGState()
        context.translateBy(x: 186.61, y: 684.53)
        context.rotate(by: -(spotlightExp1 + 10.2094248047) * CGFloat.pi/180)

        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: -8.64, y: 0.79))
        bezier5Path.addLine(to: CGPoint(x: -40.53, y: -731.83))
        bezier5Path.addLine(to: CGPoint(x: 33.16, y: -725.75))
        bezier5Path.addLine(to: CGPoint(x: 8.36, y: 0.79))
        bezier5Path.addLine(to: CGPoint(x: -8.64, y: 0.79))
        bezier5Path.close()
        hintGradient2Color.setFill()
        bezier5Path.fill()

        context.restoreGState()


        //// Bezier 2 Drawing
        context.saveGState()
        context.translateBy(x: 188.14, y: 685.71)
        context.rotate(by: -spotlightExp2 * CGFloat.pi/180)

        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: -8.64, y: 0.79))
        bezier2Path.addLine(to: CGPoint(x: -43.75, y: -699.84))
        bezier2Path.addLine(to: CGPoint(x: 75.02, y: -692.47))
        bezier2Path.addLine(to: CGPoint(x: 8.36, y: 0.79))
        bezier2Path.addLine(to: CGPoint(x: -8.64, y: 0.79))
        bezier2Path.close()
        hintGradient2Color.setFill()
        bezier2Path.fill()

        context.restoreGState()


        //// Bezier 6 Drawing
        context.saveGState()
        context.translateBy(x: 187.86, y: 685.55)
        context.rotate(by: -(spotlightExp1 + 23.3487992554) * CGFloat.pi/180)

        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: -8.64, y: 0.79))
        bezier6Path.addLine(to: CGPoint(x: -51.23, y: -717.39))
        bezier6Path.addLine(to: CGPoint(x: 23.28, y: -718.75))
        bezier6Path.addLine(to: CGPoint(x: 8.36, y: 0.79))
        bezier6Path.addLine(to: CGPoint(x: -8.64, y: 0.79))
        bezier6Path.close()
        hintGradient2Color.setFill()
        bezier6Path.fill()

        context.restoreGState()


        //// Bezier 8 Drawing
        context.saveGState()
        context.translateBy(x: 186.21, y: 689.08)
        context.rotate(by: -(spotlightExp2 - 33.0260519409) * CGFloat.pi/180)

        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: -8.64, y: 0.79))
        bezier8Path.addLine(to: CGPoint(x: -55.21, y: -710.98))
        bezier8Path.addLine(to: CGPoint(x: 28.98, y: -717.14))
        bezier8Path.addLine(to: CGPoint(x: 8.36, y: 0.79))
        bezier8Path.addLine(to: CGPoint(x: -8.64, y: 0.79))
        bezier8Path.close()
        hintGradient2Color.setFill()
        bezier8Path.fill()

        context.restoreGState()
        
        context.restoreGState()

    }




    @objc(NextStageKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
