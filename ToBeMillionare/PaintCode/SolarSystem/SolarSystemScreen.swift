//
//  SolarSystemScreen.swift
//  Millionare
//
//  Created by Igor Ivanov on 17.07.2020.
//  Copyright © 2020 None. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class SolarSystemScreen : NSObject {

    //// Cache

    private struct Cache {
        static let gradientColor: UIColor = UIColor(red: 0.071, green: 0.306, blue: 0.937, alpha: 1.000)
        static let gradientColor2: UIColor = UIColor(red: 0.870, green: 0.000, blue: 1.000, alpha: 1.000)
        static let gradientColor3: UIColor = UIColor(red: 0.082, green: 0.627, blue: 1.000, alpha: 1.000)
        static let mainBackground: UIColor = UIColor(red: 0.141, green: 0.082, blue: 0.424, alpha: 1.000)
        static let primaryTextColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        static let honeycombesStrokeColor1: UIColor = UIColor(red: 0.000, green: 0.820, blue: 1.000, alpha: 1.000)
        static let markPGradientColor4: UIColor = UIColor(red: 0.988, green: 0.671, blue: 0.208, alpha: 0.500)
        static let gradientColor6: UIColor = UIColor(red: 0.145, green: 0.102, blue: 0.498, alpha: 1.000)
        static let gradientColor7: UIColor = UIColor(red: 0.224, green: 0.176, blue: 0.624, alpha: 1.000)
        static let lighting: UIColor = UIColor(red: 0.094, green: 0.114, blue: 0.847, alpha: 1.000)
        static let cubeConture: UIColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static let spaceship_floorColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static let spaceship_floorColor2: UIColor = UIColor(red: 0.204, green: 0.127, blue: 0.752, alpha: 1.000)
        static let paint0_linear: CGGradient = CGGradient(colorsSpace: nil, colors: [SolarSystemScreen.gradientColor.cgColor, SolarSystemScreen.gradientColor2.cgColor, SolarSystemScreen.gradientColor3.cgColor] as CFArray, locations: [0, 0.5, 1])!
        static let button_linear: CGGradient = CGGradient(colorsSpace: nil, colors: [SolarSystemScreen.gradientColor6.cgColor, SolarSystemScreen.gradientColor7.cgColor] as CFArray, locations: [0, 1])!
    }

    //// Colors

    @objc dynamic public class var gradientColor: UIColor { return Cache.gradientColor }
    @objc dynamic public class var gradientColor2: UIColor { return Cache.gradientColor2 }
    @objc dynamic public class var gradientColor3: UIColor { return Cache.gradientColor3 }
    @objc dynamic public class var mainBackground: UIColor { return Cache.mainBackground }
    @objc dynamic public class var primaryTextColor: UIColor { return Cache.primaryTextColor }
    @objc dynamic public class var honeycombesStrokeColor1: UIColor { return Cache.honeycombesStrokeColor1 }
    @objc dynamic public class var markPGradientColor4: UIColor { return Cache.markPGradientColor4 }
    @objc dynamic public class var gradientColor6: UIColor { return Cache.gradientColor6 }
    @objc dynamic public class var gradientColor7: UIColor { return Cache.gradientColor7 }
    @objc dynamic public class var lighting: UIColor { return Cache.lighting }
    @objc dynamic public class var cubeConture: UIColor { return Cache.cubeConture }
    @objc dynamic public class var spaceship_floorColor: UIColor { return Cache.spaceship_floorColor }
    @objc dynamic public class var spaceship_floorColor2: UIColor { return Cache.spaceship_floorColor2 }

    //// Gradients

    @objc dynamic public class var paint0_linear: CGGradient { return Cache.paint0_linear }
    @objc dynamic public class var button_linear: CGGradient { return Cache.button_linear }

    //// Drawing Methods

    @objc dynamic public class func drawSolarSystemAsteroidLayer_58(frame: CGRect = CGRect(x: 0, y: -0, width: 375, height: 812), solarPathMaskShow: CGFloat = 1, solarAsteroidShow: CGFloat = 1, solarAsteroidMove: CGFloat = 0.257) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let fillColor22 = UIColor(red: 0.427, green: 0.878, blue: 0.965, alpha: 1.000)
        let color = UIColor(red: 0.000, green: 1.000, blue: 0.872, alpha: 1.000)
        let solar_pathColor = UIColor(red: 0.041, green: 0.097, blue: 0.252, alpha: 1.000)
        let solar_pathColor2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)
        let solar_path_mask = UIColor(red: 0.034, green: 0.014, blue: 0.550, alpha: 1.000)

        //// Gradient Declarations
        let solar_path = CGGradient(colorsSpace: nil, colors: [solar_pathColor.cgColor, solar_pathColor.blended(withFraction: 0.5, of: solar_pathColor2).cgColor, solar_pathColor2.cgColor] as CFArray, locations: [0, 0.45, 1])!

        //// Image Declarations
        let spaceship_holo = UIImage(named: "spaceship_holo.png")!
        let solar_asteroid_v2 = UIImage(named: "solar_asteroid_v2.png")!

        //// Variable Declarations
        let solarAsteroidExpr = solarAsteroidMove == 0 ? CGPoint(x: 2.5, y: 208) : (solarAsteroidMove > 0 && solarAsteroidMove <= 0.1 ? CGPoint(x: 4 + 44 * solarAsteroidMove * 10, y: 208 + 25 * solarAsteroidMove * 10) : (solarAsteroidMove > 0.1 && solarAsteroidMove <= 0.2 ? CGPoint(x: 48 + 82 * (solarAsteroidMove - 0.1) * 10, y: 233 + 65 * (solarAsteroidMove - 0.1) * 10) : (solarAsteroidMove > 0.2 && solarAsteroidMove <= 0.3 ? CGPoint(x: 130 + 49 * (solarAsteroidMove - 0.2) * 10, y: 298 + 61 * (solarAsteroidMove - 0.2) * 10) : (solarAsteroidMove > 0.3 && solarAsteroidMove <= 0.351 ? CGPoint(x: 179 + 85 * (solarAsteroidMove - 0.3) * 10, y: 359 + 140 * (solarAsteroidMove - 0.3) * 10) : (solarAsteroidMove > 0.35 && solarAsteroidMove <= 0.4 ? CGPoint(x: 219 + 28 * (solarAsteroidMove - 0.35) * 10, y: 429 + 60 * (solarAsteroidMove - 0.35) * 10) : (solarAsteroidMove > 0.4 && solarAsteroidMove <= 0.5 ? CGPoint(x: 233 + 23 * (solarAsteroidMove - 0.4) * 10, y: 459 + 73 * (solarAsteroidMove - 0.4) * 10) : (solarAsteroidMove > 0.5 && solarAsteroidMove <= 0.6 ? CGPoint(x: 256 + 16 * (solarAsteroidMove - 0.5) * 10, y: 531 + 120 * (solarAsteroidMove - 0.5) * 10) : CGPoint(x: 272, y: 651))))))))
        let solarText = "\(Int(round(30 - 50 * solarAsteroidMove)))" + " дн."


        //// Subframes
        let pathAsteroid: CGRect = CGRect(x: frame.minX + frame.width - 310.78, y: frame.minY + frame.height - 546.22, width: 272.58, height: 468.17)


        //// Spaceship Holo Drawing
        context.saveGState()
        context.translateBy(x: frame.maxX - 88, y: frame.maxY - 139.78)
        context.scaleBy(x: 0.1, y: 0.1)

        context.saveGState()
        context.setAlpha(solarAsteroidShow)

        let spaceshipHoloRect = CGRect(x: 0, y: 0, width: 785, height: 1363)
        let spaceshipHoloPath = UIBezierPath(rect: spaceshipHoloRect)
        context.saveGState()
        spaceshipHoloPath.addClip()
        context.translateBy(x: floor(spaceshipHoloRect.minX + 0.5), y: floor(spaceshipHoloRect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -spaceship_holo.size.height)
        context.draw(spaceship_holo.cgImage!, in: CGRect(x: 0, y: 0, width: spaceship_holo.size.width, height: spaceship_holo.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Path Asteroid
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Path
        //// Bezier 32 Drawing
        let bezier32Path = UIBezierPath()
        bezier32Path.move(to: CGPoint(x: pathAsteroid.minX + 2.63, y: pathAsteroid.minY + 2.27))
        bezier32Path.addCurve(to: CGPoint(x: pathAsteroid.minX + 203.54, y: pathAsteroid.minY + 189.56), controlPoint1: CGPoint(x: pathAsteroid.minX + 2.63, y: pathAsteroid.minY + 2.27), controlPoint2: CGPoint(x: pathAsteroid.minX + 129.3, y: pathAsteroid.minY + 54.97))
        bezier32Path.addCurve(to: CGPoint(x: pathAsteroid.minX + 222.54, y: pathAsteroid.minY + 225.88), controlPoint1: CGPoint(x: pathAsteroid.minX + 222.1, y: pathAsteroid.minY + 223.21), controlPoint2: CGPoint(x: pathAsteroid.minX + 216.97, y: pathAsteroid.minY + 213.58))
        bezier32Path.addCurve(to: CGPoint(x: pathAsteroid.minX + 269.42, y: pathAsteroid.minY + 423.45), controlPoint1: CGPoint(x: pathAsteroid.minX + 272.69, y: pathAsteroid.minY + 336.65), controlPoint2: CGPoint(x: pathAsteroid.minX + 269.42, y: pathAsteroid.minY + 423.45))
        bezier32Path.addLine(to: CGPoint(x: pathAsteroid.minX + 2.63, y: pathAsteroid.minY + 2.27))
        bezier32Path.close()
        context.saveGState()
        bezier32Path.addClip()
        let bezier32RotatedPath = UIBezierPath()
        bezier32RotatedPath.append(bezier32Path)
        var bezier32Transform = CGAffineTransform(rotationAngle: 147 * -CGFloat.pi/180)
        bezier32RotatedPath.apply(bezier32Transform)
        let bezier32Bounds = bezier32RotatedPath.cgPath.boundingBoxOfPath
        bezier32Transform = bezier32Transform.inverted()
        context.drawLinearGradient(solar_path,
            start: CGPoint(x: bezier32Bounds.minX, y: bezier32Bounds.midY).applying(bezier32Transform),
            end: CGPoint(x: bezier32Bounds.maxX, y: bezier32Bounds.midY).applying(bezier32Transform),
            options: [])
        context.restoreGState()


        //// Bezier 30 Drawing
        let bezier30Path = UIBezierPath()
        bezier30Path.move(to: CGPoint(x: pathAsteroid.minX + 2.63, y: pathAsteroid.minY + 2.27))
        bezier30Path.addCurve(to: CGPoint(x: pathAsteroid.minX + 203.54, y: pathAsteroid.minY + 189.56), controlPoint1: CGPoint(x: pathAsteroid.minX + 2.63, y: pathAsteroid.minY + 2.27), controlPoint2: CGPoint(x: pathAsteroid.minX + 128.72, y: pathAsteroid.minY + 54.02))
        bezier30Path.addCurve(to: CGPoint(x: pathAsteroid.minX + 222.54, y: pathAsteroid.minY + 225.88), controlPoint1: CGPoint(x: pathAsteroid.minX + 222.24, y: pathAsteroid.minY + 223.45), controlPoint2: CGPoint(x: pathAsteroid.minX + 216.97, y: pathAsteroid.minY + 213.58))
        bezier30Path.addCurve(to: CGPoint(x: pathAsteroid.minX + 269.43, y: pathAsteroid.minY + 421.78), controlPoint1: CGPoint(x: pathAsteroid.minX + 272.69, y: pathAsteroid.minY + 336.65), controlPoint2: CGPoint(x: pathAsteroid.minX + 269.43, y: pathAsteroid.minY + 421.78))
        fillColor22.setStroke()
        bezier30Path.lineWidth = 0.1
        bezier30Path.stroke()




        //// Rectangle 3 Drawing
        context.saveGState()
        context.translateBy(x: pathAsteroid.minX, y: pathAsteroid.minY)
        context.scaleBy(x: 1, y: solarPathMaskShow)

        context.saveGState()
        context.setBlendMode(.sourceAtop)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let rectangle3Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 272.58, height: 468.17))
        solar_path_mask.setFill()
        rectangle3Path.fill()
        UIColor.red.setStroke()
        rectangle3Path.lineWidth = 10
        rectangle3Path.stroke()

        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()


        //// Asteroid End Point Drawing
        let asteroidEndPointPath = UIBezierPath(ovalIn: CGRect(x: pathAsteroid.minX + 269.01, y: pathAsteroid.minY + 421.25, width: 1, height: 1))
        color.setFill()
        asteroidEndPointPath.fill()


        //// Asteroid Start Point Drawing
        let asteroidStartPointPath = UIBezierPath(ovalIn: CGRect(x: pathAsteroid.minX + 2.26, y: pathAsteroid.minY + 1.94, width: 1, height: 1))
        color.setFill()
        asteroidStartPointPath.fill()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Asteroid Holo Drawing
        context.saveGState()
        context.translateBy(x: (solarAsteroidExpr.x + 16.3603515625), y: (solarAsteroidExpr.y + 17.9736328125))
        context.scaleBy(x: 0.1, y: 0.1)

        context.saveGState()
        context.setAlpha(solarAsteroidShow)

        let asteroidHoloRect = CGRect(x: 0, y: 0, width: 709, height: 1399)
        let asteroidHoloPath = UIBezierPath(rect: asteroidHoloRect)
        context.saveGState()
        asteroidHoloPath.addClip()
        context.translateBy(x: floor(asteroidHoloRect.minX + 0.5), y: floor(asteroidHoloRect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -solar_asteroid_v2.size.height)
        context.draw(solar_asteroid_v2.cgImage!, in: CGRect(x: 0, y: 0, width: solar_asteroid_v2.size.width, height: solar_asteroid_v2.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Asteroid Point Drawing
        context.saveGState()
        context.setAlpha(solarAsteroidShow)

        let asteroidPointPath = UIBezierPath(ovalIn: CGRect(x: (solarAsteroidExpr.x + 63.8987630208), y: (solarAsteroidExpr.y + 59.5807291667), width: 1, height: 1))
        color.setFill()
        asteroidPointPath.fill()

        context.restoreGState()


        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: (solarAsteroidExpr.x + 13.0341796875), y: (solarAsteroidExpr.y + 45.1025390625))

        context.saveGState()
        context.setAlpha(solarAsteroidShow)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 51.22, y: 14.55))
        bezierPath.addLine(to: CGPoint(x: 44.05, y: 0.01))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0))
        SolarSystemScreen.primaryTextColor.setStroke()
        bezierPath.lineWidth = 0.1
        bezierPath.stroke()

        context.restoreGState()

        context.restoreGState()


        //// Text Drawing
        context.saveGState()
        context.setAlpha(solarAsteroidShow)

        let textRect = CGRect(x: (solarAsteroidExpr.x + 13.5706380208), y: (solarAsteroidExpr.y + 33.9443359375), width: 34.72, height: 11.17)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            .font: UIFont(name: "CourierNewPSMT", size: 9)!,
            .foregroundColor: SolarSystemScreen.primaryTextColor,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = solarText.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        solarText.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()

        context.restoreGState()
    }

    @objc dynamic public class func drawSolarSystemSunLayer(frame: CGRect = CGRect(x: 0, y: -0, width: 414, height: 896), solarDottedCoverHide: CGFloat = 0, solarSunShow1: CGFloat = 1, solarSunShow2: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let color = UIColor(red: 0.000, green: 1.000, blue: 0.872, alpha: 1.000)

        //// Image Declarations
        let solar_sun_v2 = UIImage(named: "solar_sun_v2.png")!

        //// Variable Declarations
        let solarBlackCoverDisappear: CGFloat = 90 * solarDottedCoverHide
        let solarSunCoverBlack: CGFloat = 1 - solarSunShow1
        let solarSunBlackCover: CGFloat = solarSunShow2 == 0 ? -90.01 : -90 * solarSunShow2 - 90

        //// SolarBkg Drawing
        let solarBkgPath = UIBezierPath(rect: CGRect(x: frame.minX, y: frame.minY, width: fastFloor((frame.width) * 1.00000 + 0.5), height: fastFloor((frame.height) * 1.00000 + 0.5)))
        black.setFill()
        solarBkgPath.fill()


        //// Sun Real Drawing
        let sunRealRect = CGRect(x: frame.minX + frame.width - 413.29, y: frame.minY + frame.height - 1129.27, width: 414, height: 694.79)
        let sunRealPath = UIBezierPath(rect: sunRealRect)
        context.saveGState()
        sunRealPath.addClip()
        context.translateBy(x: floor(sunRealRect.minX + 0.5), y: floor(sunRealRect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -solar_sun_v2.size.height)
        context.draw(solar_sun_v2.cgImage!, in: CGRect(x: 0, y: 0, width: solar_sun_v2.size.width, height: solar_sun_v2.size.height))
        context.restoreGState()


        //// Sun Cover Transparent Drawing
        context.saveGState()
        context.setBlendMode(.color)

        let sunCoverTransparentRect = CGRect(x: frame.minX + frame.width - 449.13, y: frame.minY + frame.height - 1345.73, width: 900, height: 900)
        let sunCoverTransparentPath = UIBezierPath()
        sunCoverTransparentPath.addArc(withCenter: CGPoint(x: sunCoverTransparentRect.midX, y: sunCoverTransparentRect.midY), radius: sunCoverTransparentRect.width / 2, startAngle: -solarSunBlackCover * CGFloat.pi/180, endAngle: 90 * CGFloat.pi/180, clockwise: true)
        sunCoverTransparentPath.addLine(to: CGPoint(x: sunCoverTransparentRect.midX, y: sunCoverTransparentRect.midY))
        sunCoverTransparentPath.close()

        black.setFill()
        sunCoverTransparentPath.fill()

        context.restoreGState()


        //// Dotted 8 Drawing
        let dotted8Path = UIBezierPath()
        dotted8Path.move(to: CGPoint(x: frame.minX + 0.00783 * frame.width, y: frame.maxY - 127.8))
        dotted8Path.addCurve(to: CGPoint(x: frame.minX + 0.48652 * frame.width, y: frame.maxY - 83.2), controlPoint1: CGPoint(x: frame.minX + 0.00783 * frame.width, y: frame.maxY - 127.8), controlPoint2: CGPoint(x: frame.minX + 0.22806 * frame.width, y: frame.maxY - 99.58))
        dotted8Path.addCurve(to: CGPoint(x: frame.minX + 0.99068 * frame.width, y: frame.maxY - 65.57), controlPoint1: CGPoint(x: frame.minX + 0.74499 * frame.width, y: frame.maxY - 66.82), controlPoint2: CGPoint(x: frame.minX + 0.99068 * frame.width, y: frame.maxY - 65.57))
        color.setStroke()
        dotted8Path.lineWidth = 0.2
        context.saveGState()
        context.setLineDash(phase: 0, lengths: [2, 2])
        dotted8Path.stroke()
        context.restoreGState()


        //// Dotted 7 Drawing
        let dotted7Path = UIBezierPath()
        dotted7Path.move(to: CGPoint(x: frame.minX + 0.00064 * frame.width, y: frame.maxY - 201.02))
        dotted7Path.addCurve(to: CGPoint(x: frame.minX + 0.47983 * frame.width, y: frame.maxY - 149.02), controlPoint1: CGPoint(x: frame.minX + 0.00064 * frame.width, y: frame.maxY - 201.02), controlPoint2: CGPoint(x: frame.minX + 0.22228 * frame.width, y: frame.maxY - 167.48))
        dotted7Path.addCurve(to: CGPoint(x: frame.minX + 0.99494 * frame.width, y: frame.maxY - 130.32), controlPoint1: CGPoint(x: frame.minX + 0.73738 * frame.width, y: frame.maxY - 130.55), controlPoint2: CGPoint(x: frame.minX + 0.99494 * frame.width, y: frame.maxY - 130.32))
        color.setStroke()
        dotted7Path.lineWidth = 0.2
        context.saveGState()
        context.setLineDash(phase: 0, lengths: [2, 2])
        dotted7Path.stroke()
        context.restoreGState()


        //// Dotted 6 Drawing
        let dotted6Path = UIBezierPath()
        dotted6Path.move(to: CGPoint(x: frame.minX + 0.01280 * frame.width, y: frame.maxY - 245.2))
        dotted6Path.addCurve(to: CGPoint(x: frame.minX + 0.48188 * frame.width, y: frame.maxY - 194.2), controlPoint1: CGPoint(x: frame.minX + 0.01280 * frame.width, y: frame.maxY - 245.2), controlPoint2: CGPoint(x: frame.minX + 0.22976 * frame.width, y: frame.maxY - 212.69))
        dotted6Path.addCurve(to: CGPoint(x: frame.minX + 0.98080 * frame.width, y: frame.maxY - 174.45), controlPoint1: CGPoint(x: frame.minX + 0.73400 * frame.width, y: frame.maxY - 175.71), controlPoint2: CGPoint(x: frame.minX + 0.98080 * frame.width, y: frame.maxY - 174.45))
        color.setStroke()
        dotted6Path.lineWidth = 0.2
        context.saveGState()
        context.setLineDash(phase: 0, lengths: [2, 2])
        dotted6Path.stroke()
        context.restoreGState()


        //// Dotted 5 Drawing
        let dotted5Path = UIBezierPath()
        dotted5Path.move(to: CGPoint(x: frame.minX + 0.00070 * frame.width, y: frame.maxY - 323.98))
        dotted5Path.addCurve(to: CGPoint(x: frame.minX + 0.47699 * frame.width, y: frame.maxY - 268.06), controlPoint1: CGPoint(x: frame.minX + 0.00070 * frame.width, y: frame.maxY - 323.98), controlPoint2: CGPoint(x: frame.minX + 0.21965 * frame.width, y: frame.maxY - 288.39))
        dotted5Path.addCurve(to: CGPoint(x: frame.minX + 0.99768 * frame.width, y: frame.maxY - 246.45), controlPoint1: CGPoint(x: frame.minX + 0.73434 * frame.width, y: frame.maxY - 247.73), controlPoint2: CGPoint(x: frame.minX + 0.99768 * frame.width, y: frame.maxY - 246.45))
        color.setStroke()
        dotted5Path.lineWidth = 0.2
        context.saveGState()
        context.setLineDash(phase: 0, lengths: [2, 2])
        dotted5Path.stroke()
        context.restoreGState()


        //// Dotted 4 Drawing
        let dotted4Path = UIBezierPath()
        dotted4Path.move(to: CGPoint(x: frame.minX + 0.00496 * frame.width, y: frame.maxY - 419.91))
        dotted4Path.addCurve(to: CGPoint(x: frame.minX + 0.47307 * frame.width, y: frame.maxY - 356.05), controlPoint1: CGPoint(x: frame.minX + 0.00496 * frame.width, y: frame.maxY - 419.91), controlPoint2: CGPoint(x: frame.minX + 0.22476 * frame.width, y: frame.maxY - 377.76))
        dotted4Path.addCurve(to: CGPoint(x: frame.minX + 0.99941 * frame.width, y: frame.maxY - 328.85), controlPoint1: CGPoint(x: frame.minX + 0.72137 * frame.width, y: frame.maxY - 334.35), controlPoint2: CGPoint(x: frame.minX + 0.99941 * frame.width, y: frame.maxY - 328.85))
        color.setStroke()
        dotted4Path.lineWidth = 0.2
        context.saveGState()
        context.setLineDash(phase: 0, lengths: [2, 2])
        dotted4Path.stroke()
        context.restoreGState()


        //// Dotted 3 Drawing
        let dotted3Path = UIBezierPath()
        dotted3Path.move(to: CGPoint(x: frame.minX + 0.00373 * frame.width, y: frame.maxY - 466.91))
        dotted3Path.addCurve(to: CGPoint(x: frame.minX + 0.50882 * frame.width, y: frame.maxY - 396.26), controlPoint1: CGPoint(x: frame.minX + 0.00373 * frame.width, y: frame.maxY - 466.91), controlPoint2: CGPoint(x: frame.minX + 0.26051 * frame.width, y: frame.maxY - 417.97))
        dotted3Path.addCurve(to: CGPoint(x: frame.minX + 0.99580 * frame.width, y: frame.maxY - 373.92), controlPoint1: CGPoint(x: frame.minX + 0.75713 * frame.width, y: frame.maxY - 374.56), controlPoint2: CGPoint(x: frame.minX + 0.99580 * frame.width, y: frame.maxY - 373.92))
        color.setStroke()
        dotted3Path.lineWidth = 0.2
        context.saveGState()
        context.setLineDash(phase: 0, lengths: [2, 2])
        dotted3Path.stroke()
        context.restoreGState()


        //// Dotted 2 Drawing
        let dotted2Path = UIBezierPath()
        dotted2Path.move(to: CGPoint(x: frame.minX + 0.00482 * frame.width, y: frame.maxY - 509.1))
        dotted2Path.addCurve(to: CGPoint(x: frame.minX + 0.51419 * frame.width, y: frame.maxY - 434.74), controlPoint1: CGPoint(x: frame.minX + 0.00482 * frame.width, y: frame.maxY - 509.1), controlPoint2: CGPoint(x: frame.minX + 0.26588 * frame.width, y: frame.maxY - 456.44))
        dotted2Path.addCurve(to: CGPoint(x: frame.minX + 0.99676 * frame.width, y: frame.maxY - 411.35), controlPoint1: CGPoint(x: frame.minX + 0.76249 * frame.width, y: frame.maxY - 413.04), controlPoint2: CGPoint(x: frame.minX + 0.99676 * frame.width, y: frame.maxY - 411.35))
        color.setStroke()
        dotted2Path.lineWidth = 0.2
        context.saveGState()
        context.setLineDash(phase: 0, lengths: [2, 2])
        dotted2Path.stroke()
        context.restoreGState()


        //// Dotted 1 Drawing
        let dotted1Path = UIBezierPath()
        dotted1Path.move(to: CGPoint(x: frame.minX + 0.00594 * frame.width, y: frame.maxY - 562.1))
        dotted1Path.addCurve(to: CGPoint(x: frame.minX + 0.52514 * frame.width, y: frame.maxY - 480.12), controlPoint1: CGPoint(x: frame.minX + 0.00594 * frame.width, y: frame.maxY - 562.1), controlPoint2: CGPoint(x: frame.minX + 0.27875 * frame.width, y: frame.maxY - 500.37))
        dotted1Path.addCurve(to: CGPoint(x: frame.minX + 0.98917 * frame.width, y: frame.maxY - 455.77), controlPoint1: CGPoint(x: frame.minX + 0.77154 * frame.width, y: frame.maxY - 459.87), controlPoint2: CGPoint(x: frame.minX + 0.98917 * frame.width, y: frame.maxY - 455.77))
        color.setStroke()
        dotted1Path.lineWidth = 0.2
        context.saveGState()
        context.setLineDash(phase: 0, lengths: [2, 2])
        dotted1Path.stroke()
        context.restoreGState()


        //// Dotted Mask
        context.saveGState()
        context.translateBy(x: -20.36, y: -6.96)
        context.rotate(by: -solarBlackCoverDisappear * CGFloat.pi/180)

        context.setBlendMode(.sourceAtop)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: 495.18, y: -0.3))
        bezier10Path.addLine(to: CGPoint(x: 497.74, y: 895.14))
        bezier10Path.addLine(to: CGPoint(x: 50.68, y: 899.46))
        bezier10Path.addLine(to: CGPoint(x: 3.91, y: 756.45))
        bezier10Path.addLine(to: CGPoint(x: 25.05, y: 695.5))
        bezier10Path.addLine(to: CGPoint(x: 2.22, y: 616.67))
        bezier10Path.addLine(to: CGPoint(x: 17.58, y: 554.65))
        bezier10Path.addLine(to: CGPoint(x: 3.97, y: 492.53))
        bezier10Path.addLine(to: CGPoint(x: 19.58, y: 430.37))
        bezier10Path.addLine(to: CGPoint(x: 1.09, y: 347.98))
        bezier10Path.addLine(to: CGPoint(x: 11.31, y: 302.94))
        bezier10Path.addLine(to: CGPoint(x: -0.4, y: 270.06))
        bezier10Path.addLine(to: CGPoint(x: 18.52, y: 154.97))
        bezier10Path.addLine(to: CGPoint(x: 5.64, y: -0.3))
        bezier10Path.addLine(to: CGPoint(x: 495.18, y: -0.3))
        bezier10Path.close()
        black.setFill()
        bezier10Path.fill()


        context.endTransparencyLayer()

        context.restoreGState()


        //// Sun Cover Black Drawing
        context.saveGState()
        context.setAlpha(solarSunCoverBlack)

        let sunCoverBlackPath = UIBezierPath()
        sunCoverBlackPath.move(to: CGPoint(x: 0, y: -170))
        sunCoverBlackPath.addLine(to: CGPoint(x: frame.maxX - 414, y: frame.maxY - 577.9))
        sunCoverBlackPath.addLine(to: CGPoint(x: frame.minX + 90.11, y: frame.minY + 365.46))
        sunCoverBlackPath.addLine(to: CGPoint(x: frame.minX + 165.78, y: frame.minY + 395.34))
        sunCoverBlackPath.addLine(to: CGPoint(x: frame.maxX, y: frame.maxY - 462.72))
        sunCoverBlackPath.addLine(to: CGPoint(x: 414, y: -170))
        sunCoverBlackPath.addLine(to: CGPoint(x: 0, y: -170))
        sunCoverBlackPath.close()
        black.setFill()
        sunCoverBlackPath.fill()

        context.restoreGState()
    }

    @objc dynamic public class func drawSolarSystemHoloLayer(frame: CGRect = CGRect(x: 0, y: -0, width: 414, height: 896), solarHoloPlanetsShow: CGFloat = 1, solarHoloPlanetsHide: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let discCircle4Color = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let solar_planet_holo_line = UIColor(red: 0.076, green: 1.000, blue: 0.524, alpha: 1.000)

        //// Shadow Declarations
        let shadow3 = NSShadow()
        shadow3.shadowColor = SolarSystemScreen.gradientColor2
        shadow3.shadowOffset = CGSize(width: 0, height: 0)
        shadow3.shadowBlurRadius = 5

        //// Image Declarations
        let blueplantet = UIImage(named: "blueplantet.png")!
        let solar_neptune_v3 = UIImage(named: "solar_neptune_v3.png")!
        let solar_uran_v3 = UIImage(named: "solar_uran_v3.png")!
        let solar_jupiter_v3 = UIImage(named: "solar_jupiter_v3.png")!
        let solar_mars_v3 = UIImage(named: "solar_mars_v3.png")!
        let solar_earth_v3 = UIImage(named: "solar_earth_v3.png")!
        let solar_venus_v3 = UIImage(named: "solar_venus_v3.png")!
        let solar_mercury_v3 = UIImage(named: "solar_mercury_v3.png")!
        let solar_saturn_v3 = UIImage(named: "solar_saturn_v3.png")!

        //// Variable Declarations
        let solarHoloPlanetsAppearExpr: CGFloat = 1 - solarHoloPlanetsShow
        let solarPlanetsHoloOpacity: CGFloat = 1 - solarHoloPlanetsHide


        //// Subframes
        let saturn: CGRect = CGRect(x: frame.minX + frame.width - 334.84, y: frame.minY + frame.height - 317.99, width: 141.08, height: 224.32)
        let neptune: CGRect = CGRect(x: frame.minX + frame.width - 186.85, y: frame.minY + frame.height - 131.66, width: 65.93, height: 114.37)
        let uran: CGRect = CGRect(x: frame.minX + frame.width - 240.87, y: frame.minY + frame.height - 195.01, width: 59.65, height: 94.45)
        let mars: CGRect = CGRect(x: frame.minX + fastFloor((frame.width - 14.64) * 0.37483 - 0.19) + 0.69, y: frame.minY + frame.height - 373.43, width: 14.64, height: 17.37)
        let earth: CGRect = CGRect(x: frame.minX + fastFloor((frame.width - 19.54) * 0.21949 - 0.08) + 0.58, y: frame.minY + frame.height - 441.4, width: 19.54, height: 30.92)
        let venus: CGRect = CGRect(x: frame.minX + fastFloor((frame.width - 18.39) * 0.07795 - 0.34) + 0.84, y: frame.minY + frame.height - 505.45, width: 18.39, height: 29.84)


        //// Neptune Real Drawing
        context.saveGState()
        context.translateBy(x: frame.maxX - 179.41, y: frame.maxY - 130.1)
        context.scaleBy(x: 0.38, y: 0.38)

        context.saveGState()
        context.setAlpha(solarHoloPlanetsHide)

        let neptuneRealRect = CGRect(x: 0, y: 0, width: 151, height: 274)
        let neptuneRealPath = UIBezierPath(rect: neptuneRealRect)
        context.saveGState()
        neptuneRealPath.addClip()
        context.translateBy(x: floor(neptuneRealRect.minX + 0.5), y: floor(neptuneRealRect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -solar_neptune_v3.size.height)
        context.draw(solar_neptune_v3.cgImage!, in: CGRect(x: 0, y: 0, width: solar_neptune_v3.size.width, height: solar_neptune_v3.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Saturn Real Drawing
        context.saveGState()
        context.translateBy(x: frame.maxX - 371.88, y: frame.maxY - 310.17)
        context.scaleBy(x: 0.3, y: 0.3)

        context.saveGState()
        context.setAlpha(solarHoloPlanetsHide)

        let saturnRealRect = CGRect(x: 0, y: 0, width: 729, height: 665)
        let saturnRealPath = UIBezierPath(rect: saturnRealRect)
        context.saveGState()
        saturnRealPath.addClip()
        context.translateBy(x: floor(saturnRealRect.minX + 0.5), y: floor(saturnRealRect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -solar_saturn_v3.size.height)
        context.draw(solar_saturn_v3.cgImage!, in: CGRect(x: 0, y: 0, width: solar_saturn_v3.size.width, height: solar_saturn_v3.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Uran Real Drawing
        context.saveGState()
        context.translateBy(x: frame.maxX - 246.82, y: frame.maxY - 196.1)
        context.scaleBy(x: 0.35, y: 0.35)

        context.saveGState()
        context.setAlpha(solarHoloPlanetsHide)

        let uranRealRect = CGRect(x: 0, y: 0, width: 237, height: 268)
        let uranRealPath = UIBezierPath(rect: uranRealRect)
        context.saveGState()
        uranRealPath.addClip()
        context.translateBy(x: floor(uranRealRect.minX + 0.5), y: floor(uranRealRect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -solar_uran_v3.size.height)
        context.draw(solar_uran_v3.cgImage!, in: CGRect(x: 0, y: 0, width: solar_uran_v3.size.width, height: solar_uran_v3.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Jupiter Real Drawing
        context.saveGState()
        context.translateBy(x: frame.maxX - 81.53, y: frame.maxY - 386.41)
        context.scaleBy(x: 0.34, y: 0.34)

        context.saveGState()
        context.setAlpha(solarHoloPlanetsHide)

        let jupiterRealRect = CGRect(x: 0, y: 0, width: 418, height: 817)
        let jupiterRealPath = UIBezierPath(rect: jupiterRealRect)
        context.saveGState()
        jupiterRealPath.addClip()
        context.translateBy(x: floor(jupiterRealRect.minX + 0.5), y: floor(jupiterRealRect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -solar_jupiter_v3.size.height)
        context.draw(solar_jupiter_v3.cgImage!, in: CGRect(x: 0, y: 0, width: solar_jupiter_v3.size.width, height: solar_jupiter_v3.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Mars Real Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 0.36846 * frame.width, y: frame.maxY - 373.07)
        context.scaleBy(x: 0.1, y: 0.1)

        context.saveGState()
        context.setAlpha(solarHoloPlanetsHide)

        let marsRealRect = CGRect(x: 0, y: 0, width: 89, height: 154)
        let marsRealPath = UIBezierPath(rect: marsRealRect)
        context.saveGState()
        marsRealPath.addClip()
        context.translateBy(x: floor(marsRealRect.minX + 0.5), y: floor(marsRealRect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -solar_mars_v3.size.height)
        context.draw(solar_mars_v3.cgImage!, in: CGRect(x: 0, y: 0, width: solar_mars_v3.size.width, height: solar_mars_v3.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Earth Real Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 0.21591 * frame.width, y: frame.maxY - 441.1)
        context.scaleBy(x: 0.1, y: 0.1)

        context.saveGState()
        context.setAlpha(solarHoloPlanetsHide)

        let earthRealRect = CGRect(x: 0, y: 0, width: 166, height: 288)
        let earthRealPath = UIBezierPath(rect: earthRealRect)
        context.saveGState()
        earthRealPath.addClip()
        context.translateBy(x: floor(earthRealRect.minX + 0.5), y: floor(earthRealRect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -solar_earth_v3.size.height)
        context.draw(solar_earth_v3.cgImage!, in: CGRect(x: 0, y: 0, width: solar_earth_v3.size.width, height: solar_earth_v3.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Venus Real Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 0.08022 * frame.width, y: frame.maxY - 506.1)
        context.scaleBy(x: 0.1, y: 0.1)

        context.saveGState()
        context.setAlpha(solarHoloPlanetsHide)

        let venusRealRect = CGRect(x: 0, y: 0, width: 157, height: 292)
        let venusRealPath = UIBezierPath(rect: venusRealRect)
        context.saveGState()
        venusRealPath.addClip()
        context.translateBy(x: floor(venusRealRect.minX + 0.5), y: floor(venusRealRect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -solar_venus_v3.size.height)
        context.draw(solar_venus_v3.cgImage!, in: CGRect(x: 0, y: 0, width: solar_venus_v3.size.width, height: solar_venus_v3.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Mercury Real Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 0.51053 * frame.width, y: frame.maxY - 486.95)
        context.scaleBy(x: 0.1, y: 0.1)

        context.saveGState()
        context.setAlpha(solarHoloPlanetsHide)

        let mercuryRealRect = CGRect(x: 0, y: 0, width: 63, height: 121)
        let mercuryRealPath = UIBezierPath(rect: mercuryRealRect)
        context.saveGState()
        mercuryRealPath.addClip()
        context.translateBy(x: floor(mercuryRealRect.minX + 0.5), y: floor(mercuryRealRect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -solar_mercury_v3.size.height)
        context.draw(solar_mercury_v3.cgImage!, in: CGRect(x: 0, y: 0, width: solar_mercury_v3.size.width, height: solar_mercury_v3.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Saturn
        context.saveGState()
        context.setAlpha(solarPlanetsHoloOpacity)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Saturn Holo Reflection Drawing
        context.saveGState()
        context.translateBy(x: saturn.minX + 65.18, y: saturn.minY + 156.96)
        context.rotate(by: 68.5 * CGFloat.pi/180)
        context.scaleBy(x: 0.35, y: 0.35)

        context.saveGState()
        context.setAlpha(0.3)

        let saturnHoloReflectionRect = CGRect(x: -130.88, y: -137.11, width: 259, height: 259)
        let saturnHoloReflectionPath = UIBezierPath(rect: saturnHoloReflectionRect)
        context.saveGState()
        saturnHoloReflectionPath.addClip()
        context.translateBy(x: floor(saturnHoloReflectionRect.minX + 0.5), y: floor(saturnHoloReflectionRect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -blueplantet.size.height)
        context.draw(blueplantet.cgImage!, in: CGRect(x: 0, y: 0, width: blueplantet.size.width, height: blueplantet.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Saturn Mask Reflection
        context.saveGState()
        context.translateBy(x: saturn.minX + 113.55, y: saturn.minY + 224.6)
        context.rotate(by: -168.5 * CGFloat.pi/180)
        context.scaleBy(x: 1, y: solarHoloPlanetsAppearExpr)

        context.setBlendMode(.sourceAtop)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier 13 Drawing
        let bezier13Path = UIBezierPath()
        bezier13Path.move(to: CGPoint(x: 56.93, y: 108.75))
        bezier13Path.addCurve(to: CGPoint(x: 2.61, y: 86.75), controlPoint1: CGPoint(x: 18.07, y: 108.54), controlPoint2: CGPoint(x: 2.61, y: 86.75))
        bezier13Path.addLine(to: CGPoint(x: 1.39, y: 10.99))
        bezier13Path.addLine(to: CGPoint(x: 115.88, y: 9.93))
        bezier13Path.addLine(to: CGPoint(x: 114.45, y: 86.97))
        bezier13Path.addCurve(to: CGPoint(x: 56.93, y: 108.75), controlPoint1: CGPoint(x: 114.45, y: 86.97), controlPoint2: CGPoint(x: 95.79, y: 108.95))
        bezier13Path.close()
        context.saveGState()
        context.setShadow(offset: shadow3.shadowOffset, blur: shadow3.shadowBlurRadius, color: (shadow3.shadowColor as! UIColor).cgColor)
        discCircle4Color.setFill()
        bezier13Path.fill()
        context.restoreGState()

        solar_planet_holo_line.setStroke()
        bezier13Path.lineWidth = 3
        bezier13Path.stroke()


        context.endTransparencyLayer()

        context.restoreGState()


        //// Saturn Holo Drawing
        context.saveGState()
        context.translateBy(x: saturn.minX + 36.12, y: saturn.minY + 12.52)
        context.scaleBy(x: 0.35, y: 0.35)

        let saturnHoloRect = CGRect(x: 0, y: 0, width: 259, height: 259)
        let saturnHoloPath = UIBezierPath(rect: saturnHoloRect)
        context.saveGState()
        saturnHoloPath.addClip()
        context.translateBy(x: floor(saturnHoloRect.minX + 0.5), y: floor(saturnHoloRect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -blueplantet.size.height)
        context.draw(blueplantet.cgImage!, in: CGRect(x: 0, y: 0, width: blueplantet.size.width, height: blueplantet.size.height))
        context.restoreGState()

        context.restoreGState()


        //// Saturn Mask
        context.saveGState()
        context.translateBy(x: saturn.minX + 27.08, y: saturn.minY + 0)
        context.scaleBy(x: 1, y: solarHoloPlanetsAppearExpr)

        context.setBlendMode(.sourceAtop)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier 28 Drawing
        let bezier28Path = UIBezierPath()
        bezier28Path.move(to: CGPoint(x: 55.05, y: -2.18))
        bezier28Path.addCurve(to: CGPoint(x: 0.73, y: 22.35), controlPoint1: CGPoint(x: 16.19, y: -1.95), controlPoint2: CGPoint(x: 0.73, y: 22.35))
        bezier28Path.addLine(to: CGPoint(x: -0.49, y: 106.82))
        bezier28Path.addLine(to: CGPoint(x: 114, y: 108))
        bezier28Path.addLine(to: CGPoint(x: 112.57, y: 22.11))
        bezier28Path.addCurve(to: CGPoint(x: 55.05, y: -2.18), controlPoint1: CGPoint(x: 112.57, y: 22.11), controlPoint2: CGPoint(x: 93.91, y: -2.41))
        bezier28Path.close()
        context.saveGState()
        context.setShadow(offset: shadow3.shadowOffset, blur: shadow3.shadowBlurRadius, color: (shadow3.shadowColor as! UIColor).cgColor)
        discCircle4Color.setFill()
        bezier28Path.fill()
        context.restoreGState()

        solar_planet_holo_line.setStroke()
        bezier28Path.lineWidth = 3
        bezier28Path.stroke()


        context.endTransparencyLayer()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Neptune
        context.saveGState()
        context.setAlpha(solarPlanetsHoloOpacity)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Neptune Holo Reflection Drawing
        context.saveGState()
        context.translateBy(x: neptune.minX + 31.39, y: neptune.minY + 81.94)
        context.rotate(by: 68.5 * CGFloat.pi/180)
        context.scaleBy(x: 0.19, y: 0.19)

        context.saveGState()
        context.setAlpha(0.3)

        let neptuneHoloReflectionRect = CGRect(x: -130.88, y: -137.11, width: 259, height: 259)
        let neptuneHoloReflectionPath = UIBezierPath(rect: neptuneHoloReflectionRect)
        context.saveGState()
        neptuneHoloReflectionPath.addClip()
        context.translateBy(x: floor(neptuneHoloReflectionRect.minX + 0.5), y: floor(neptuneHoloReflectionRect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -blueplantet.size.height)
        context.draw(blueplantet.cgImage!, in: CGRect(x: 0, y: 0, width: blueplantet.size.width, height: blueplantet.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Neptune Mask Reflection
        context.saveGState()
        context.translateBy(x: neptune.minX + 54.33, y: neptune.minY + 114.37)
        context.rotate(by: -168.5 * CGFloat.pi/180)
        context.scaleBy(x: 1, y: solarHoloPlanetsAppearExpr)

        context.setBlendMode(.sourceAtop)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier 2 Drawing
        context.saveGState()
        context.translateBy(x: 27.72, y: 27.91)

        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: -0.82, y: 27.91))
        bezier2Path.addCurve(to: CGPoint(x: -27.13, y: 15.48), controlPoint1: CGPoint(x: -19.64, y: 27.79), controlPoint2: CGPoint(x: -27.13, y: 15.48))
        bezier2Path.addLine(to: CGPoint(x: -27.72, y: -27.31))
        bezier2Path.addLine(to: CGPoint(x: 27.72, y: -27.91))
        bezier2Path.addLine(to: CGPoint(x: 27.03, y: 15.61))
        bezier2Path.addCurve(to: CGPoint(x: -0.82, y: 27.91), controlPoint1: CGPoint(x: 27.03, y: 15.61), controlPoint2: CGPoint(x: 17.99, y: 28.03))
        bezier2Path.close()
        context.saveGState()
        context.setShadow(offset: shadow3.shadowOffset, blur: shadow3.shadowBlurRadius, color: (shadow3.shadowColor as! UIColor).cgColor)
        discCircle4Color.setFill()
        bezier2Path.fill()
        context.restoreGState()

        solar_planet_holo_line.setStroke()
        bezier2Path.lineWidth = 2
        bezier2Path.stroke()

        context.restoreGState()


        context.endTransparencyLayer()

        context.restoreGState()


        //// Neptune Holo Drawing
        context.saveGState()
        context.translateBy(x: neptune.minX + 12.99, y: neptune.minY + 4.99)
        context.scaleBy(x: 0.19, y: 0.19)

        let neptuneHoloRect = CGRect(x: 0, y: 0, width: 259, height: 259)
        let neptuneHoloPath = UIBezierPath(rect: neptuneHoloRect)
        context.saveGState()
        neptuneHoloPath.addClip()
        context.translateBy(x: floor(neptuneHoloRect.minX + 0.5), y: floor(neptuneHoloRect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -blueplantet.size.height)
        context.draw(blueplantet.cgImage!, in: CGRect(x: 0, y: 0, width: blueplantet.size.width, height: blueplantet.size.height))
        context.restoreGState()

        context.restoreGState()


        //// Neptune Mask
        context.saveGState()
        context.translateBy(x: neptune.minX + 10.49, y: neptune.minY)
        context.scaleBy(x: 1, y: solarHoloPlanetsAppearExpr)

        context.setBlendMode(.sourceAtop)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier 31 Drawing
        context.saveGState()
        context.translateBy(x: 27.72, y: 27.91)

        let bezier31Path = UIBezierPath()
        bezier31Path.move(to: CGPoint(x: -0.82, y: 27.91))
        bezier31Path.addCurve(to: CGPoint(x: -27.13, y: 15.48), controlPoint1: CGPoint(x: -19.64, y: 27.79), controlPoint2: CGPoint(x: -27.13, y: 15.48))
        bezier31Path.addLine(to: CGPoint(x: -27.72, y: -27.31))
        bezier31Path.addLine(to: CGPoint(x: 27.72, y: -27.91))
        bezier31Path.addLine(to: CGPoint(x: 27.03, y: 15.61))
        bezier31Path.addCurve(to: CGPoint(x: -0.82, y: 27.91), controlPoint1: CGPoint(x: 27.03, y: 15.61), controlPoint2: CGPoint(x: 17.99, y: 28.03))
        bezier31Path.close()
        context.saveGState()
        context.setShadow(offset: shadow3.shadowOffset, blur: shadow3.shadowBlurRadius, color: (shadow3.shadowColor as! UIColor).cgColor)
        discCircle4Color.setFill()
        bezier31Path.fill()
        context.restoreGState()

        solar_planet_holo_line.setStroke()
        bezier31Path.lineWidth = 2
        bezier31Path.stroke()

        context.restoreGState()


        context.endTransparencyLayer()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Uran
        context.saveGState()
        context.setAlpha(solarPlanetsHoloOpacity)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Neptune Holo Reflection 2 Drawing
        context.saveGState()
        context.translateBy(x: uran.minX + 31, y: uran.minY + 67.72)
        context.rotate(by: 68.5 * CGFloat.pi/180)
        context.scaleBy(x: 0.16, y: 0.16)

        context.saveGState()
        context.setAlpha(0.3)

        let neptuneHoloReflection2Rect = CGRect(x: -130.88, y: -137.11, width: 259, height: 259)
        let neptuneHoloReflection2Path = UIBezierPath(rect: neptuneHoloReflection2Rect)
        context.saveGState()
        neptuneHoloReflection2Path.addClip()
        context.translateBy(x: floor(neptuneHoloReflection2Rect.minX + 0.5), y: floor(neptuneHoloReflection2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -blueplantet.size.height)
        context.draw(blueplantet.cgImage!, in: CGRect(x: 0, y: 0, width: blueplantet.size.width, height: blueplantet.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Neptune Mask Reflection 2
        context.saveGState()
        context.translateBy(x: uran.minX + 53.9, y: uran.minY + 94.45)
        context.rotate(by: -168.5 * CGFloat.pi/180)
        context.scaleBy(x: 1, y: solarHoloPlanetsAppearExpr)

        context.setBlendMode(.sourceAtop)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier 12 Drawing
        context.saveGState()
        context.translateBy(x: 27.5, y: 22.5)

        let bezier12Path = UIBezierPath()
        bezier12Path.move(to: CGPoint(x: -0.82, y: 22.5))
        bezier12Path.addCurve(to: CGPoint(x: -26.91, y: 12.48), controlPoint1: CGPoint(x: -19.49, y: 22.4), controlPoint2: CGPoint(x: -26.91, y: 12.48))
        bezier12Path.addLine(to: CGPoint(x: -27.5, y: -22.02))
        bezier12Path.addLine(to: CGPoint(x: 27.5, y: -22.5))
        bezier12Path.addLine(to: CGPoint(x: 26.81, y: 12.58))
        bezier12Path.addCurve(to: CGPoint(x: -0.82, y: 22.5), controlPoint1: CGPoint(x: 26.81, y: 12.58), controlPoint2: CGPoint(x: 17.85, y: 22.59))
        bezier12Path.close()
        context.saveGState()
        context.setShadow(offset: shadow3.shadowOffset, blur: shadow3.shadowBlurRadius, color: (shadow3.shadowColor as! UIColor).cgColor)
        discCircle4Color.setFill()
        bezier12Path.fill()
        context.restoreGState()

        solar_planet_holo_line.setStroke()
        bezier12Path.lineWidth = 2
        bezier12Path.stroke()

        context.restoreGState()


        context.endTransparencyLayer()

        context.restoreGState()


        //// Uran Holo Drawing
        context.saveGState()
        context.translateBy(x: uran.minX + 16.15, y: uran.minY + 2.48)
        context.scaleBy(x: 0.16, y: 0.16)

        let uranHoloRect = CGRect(x: 0, y: 0, width: 259, height: 259)
        let uranHoloPath = UIBezierPath(rect: uranHoloRect)
        context.saveGState()
        uranHoloPath.addClip()
        context.translateBy(x: floor(uranHoloRect.minX + 0.5), y: floor(uranHoloRect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -blueplantet.size.height)
        context.draw(blueplantet.cgImage!, in: CGRect(x: 0, y: 0, width: blueplantet.size.width, height: blueplantet.size.height))
        context.restoreGState()

        context.restoreGState()


        //// Uran Mask
        context.saveGState()
        context.translateBy(x: uran.minX + 14.63, y: uran.minY)
        context.scaleBy(x: 1, y: solarHoloPlanetsAppearExpr)

        context.setBlendMode(.sourceAtop)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier 27 Drawing
        context.saveGState()
        context.translateBy(x: 22.51, y: 22.5)

        let bezier27Path = UIBezierPath()
        bezier27Path.move(to: CGPoint(x: -0.67, y: 22.5))
        bezier27Path.addCurve(to: CGPoint(x: -22.03, y: 12.49), controlPoint1: CGPoint(x: -15.95, y: 22.41), controlPoint2: CGPoint(x: -22.03, y: 12.49))
        bezier27Path.addLine(to: CGPoint(x: -22.51, y: -22.02))
        bezier27Path.addLine(to: CGPoint(x: 22.51, y: -22.5))
        bezier27Path.addLine(to: CGPoint(x: 21.95, y: 12.58))
        bezier27Path.addCurve(to: CGPoint(x: -0.67, y: 22.5), controlPoint1: CGPoint(x: 21.95, y: 12.58), controlPoint2: CGPoint(x: 14.61, y: 22.6))
        bezier27Path.close()
        context.saveGState()
        context.setShadow(offset: shadow3.shadowOffset, blur: shadow3.shadowBlurRadius, color: (shadow3.shadowColor as! UIColor).cgColor)
        discCircle4Color.setFill()
        bezier27Path.fill()
        context.restoreGState()

        solar_planet_holo_line.setStroke()
        bezier27Path.lineWidth = 2
        bezier27Path.stroke()

        context.restoreGState()


        context.endTransparencyLayer()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Jupiter
        context.saveGState()
        context.translateBy(x: frame.maxX - 2.27, y: frame.maxY - 310.75)

        context.setAlpha(solarPlanetsHoloOpacity)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Jupiter Holo Reflection Drawing
        context.saveGState()
        context.translateBy(x: -17.96, y: 129.4)
        context.rotate(by: 68.5 * CGFloat.pi/180)
        context.scaleBy(x: 0.48, y: 0.48)

        context.saveGState()
        context.setAlpha(0.3)

        let jupiterHoloReflectionPath = UIBezierPath(rect: CGRect(x: -130.88, y: -137.11, width: 259, height: 259))
        context.saveGState()
        jupiterHoloReflectionPath.addClip()
        context.translateBy(x: -131, y: -137)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -blueplantet.size.height)
        context.draw(blueplantet.cgImage!, in: CGRect(x: 0, y: 0, width: blueplantet.size.width, height: blueplantet.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Jupiter Mask Reflection
        context.saveGState()
        context.translateBy(x: 42.67, y: 209.05)
        context.rotate(by: -168.5 * CGFloat.pi/180)
        context.scaleBy(x: 1, y: solarHoloPlanetsAppearExpr)

        context.setBlendMode(.sourceAtop)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier 14 Drawing
        context.saveGState()
        context.translateBy(x: 72, y: 66.03)

        let bezier14Path = UIBezierPath()
        bezier14Path.move(to: CGPoint(x: -2.14, y: 66.03))
        bezier14Path.addCurve(to: CGPoint(x: -70.46, y: 36.63), controlPoint1: CGPoint(x: -51.02, y: 65.75), controlPoint2: CGPoint(x: -70.46, y: 36.63))
        bezier14Path.addLine(to: CGPoint(x: -72, y: -64.61))
        bezier14Path.addLine(to: CGPoint(x: 72, y: -66.03))
        bezier14Path.addLine(to: CGPoint(x: 70.2, y: 36.92))
        bezier14Path.addCurve(to: CGPoint(x: -2.14, y: 66.03), controlPoint1: CGPoint(x: 70.2, y: 36.92), controlPoint2: CGPoint(x: 46.74, y: 66.31))
        bezier14Path.close()
        context.saveGState()
        context.setShadow(offset: shadow3.shadowOffset, blur: shadow3.shadowBlurRadius, color: (shadow3.shadowColor as! UIColor).cgColor)
        discCircle4Color.setFill()
        bezier14Path.fill()
        context.restoreGState()

        solar_planet_holo_line.setStroke()
        bezier14Path.lineWidth = 1.5
        bezier14Path.stroke()

        context.restoreGState()


        context.endTransparencyLayer()

        context.restoreGState()


        //// Jupiter Holo Drawing
        context.saveGState()
        context.translateBy(x: -66.45, y: -62.9)
        context.scaleBy(x: 0.48, y: 0.48)

        let jupiterHoloPath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 259, height: 259))
        context.saveGState()
        jupiterHoloPath.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -blueplantet.size.height)
        context.draw(blueplantet.cgImage!, in: CGRect(x: 0, y: 0, width: blueplantet.size.width, height: blueplantet.size.height))
        context.restoreGState()

        context.restoreGState()


        //// Jupiter Mask
        context.saveGState()
        context.translateBy(x: -71.3, y: -66.62)
        context.scaleBy(x: 1, y: solarHoloPlanetsAppearExpr)

        context.setBlendMode(.sourceAtop)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier 25 Drawing
        context.saveGState()
        context.translateBy(x: 71.69, y: 66.03)

        let bezier25Path = UIBezierPath()
        bezier25Path.move(to: CGPoint(x: -2.13, y: 66.03))
        bezier25Path.addCurve(to: CGPoint(x: -70.16, y: 36.64), controlPoint1: CGPoint(x: -50.8, y: 65.75), controlPoint2: CGPoint(x: -70.16, y: 36.64))
        bezier25Path.addLine(to: CGPoint(x: -71.69, y: -64.61))
        bezier25Path.addLine(to: CGPoint(x: 71.69, y: -66.03))
        bezier25Path.addLine(to: CGPoint(x: 69.9, y: 36.92))
        bezier25Path.addCurve(to: CGPoint(x: -2.13, y: 66.03), controlPoint1: CGPoint(x: 69.9, y: 36.92), controlPoint2: CGPoint(x: 46.54, y: 66.31))
        bezier25Path.close()
        context.saveGState()
        context.setShadow(offset: shadow3.shadowOffset, blur: shadow3.shadowBlurRadius, color: (shadow3.shadowColor as! UIColor).cgColor)
        discCircle4Color.setFill()
        bezier25Path.fill()
        context.restoreGState()

        solar_planet_holo_line.setStroke()
        bezier25Path.lineWidth = 1.5
        bezier25Path.stroke()

        context.restoreGState()


        context.endTransparencyLayer()

        context.restoreGState()


        context.endTransparencyLayer()

        context.restoreGState()


        //// Mars
        context.saveGState()
        context.setAlpha(solarPlanetsHoloOpacity)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Mars Holo 2 Drawing
        context.saveGState()
        context.translateBy(x: mars.minX + 6.7, y: mars.minY + 12.48)
        context.rotate(by: 68.5 * CGFloat.pi/180)
        context.scaleBy(x: 0.03, y: 0.03)

        context.saveGState()
        context.setAlpha(0.4)

        let marsHolo2Rect = CGRect(x: -131.18, y: -130.44, width: 259, height: 259)
        let marsHolo2Path = UIBezierPath(rect: marsHolo2Rect)
        context.saveGState()
        marsHolo2Path.addClip()
        context.translateBy(x: floor(marsHolo2Rect.minX + 0.5), y: floor(marsHolo2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -blueplantet.size.height)
        context.draw(blueplantet.cgImage!, in: CGRect(x: 0, y: 0, width: blueplantet.size.width, height: blueplantet.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Mars Mask Reflection
        context.saveGState()
        context.translateBy(x: mars.minX + 9.69, y: mars.minY + 16.82)
        context.rotate(by: -168.5 * CGFloat.pi/180)
        context.scaleBy(x: 1, y: solarHoloPlanetsAppearExpr)

        context.setBlendMode(.sourceAtop)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier 15 Drawing
        context.saveGState()
        context.translateBy(x: 3.32, y: 4.34)

        let bezier15Path = UIBezierPath()
        bezier15Path.move(to: CGPoint(x: -0.18, y: 4))
        bezier15Path.addCurve(to: CGPoint(x: -5.95, y: 1.95), controlPoint1: CGPoint(x: -4.31, y: 3.98), controlPoint2: CGPoint(x: -5.95, y: 1.95))
        bezier15Path.addLine(to: CGPoint(x: -6.08, y: -5.1))
        bezier15Path.addLine(to: CGPoint(x: 6.08, y: -5.2))
        bezier15Path.addLine(to: CGPoint(x: 5.93, y: 1.97))
        bezier15Path.addCurve(to: CGPoint(x: -0.18, y: 4), controlPoint1: CGPoint(x: 5.93, y: 1.97), controlPoint2: CGPoint(x: 3.95, y: 4.02))
        bezier15Path.close()
        context.saveGState()
        context.setShadow(offset: shadow3.shadowOffset, blur: shadow3.shadowBlurRadius, color: (shadow3.shadowColor as! UIColor).cgColor)
        discCircle4Color.setFill()
        bezier15Path.fill()
        context.restoreGState()

        solar_planet_holo_line.setStroke()
        bezier15Path.lineWidth = 1
        bezier15Path.stroke()

        context.restoreGState()


        context.endTransparencyLayer()

        context.restoreGState()


        //// Mars Holo Drawing
        context.saveGState()
        context.translateBy(x: mars.minX + 4.29, y: mars.minY + 0.2)
        context.scaleBy(x: 0.03, y: 0.03)

        let marsHoloRect = CGRect(x: 0, y: 0, width: 259, height: 259)
        let marsHoloPath = UIBezierPath(rect: marsHoloRect)
        context.saveGState()
        marsHoloPath.addClip()
        context.translateBy(x: floor(marsHoloRect.minX + 0.5), y: floor(marsHoloRect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -blueplantet.size.height)
        context.draw(blueplantet.cgImage!, in: CGRect(x: 0, y: 0, width: blueplantet.size.width, height: blueplantet.size.height))
        context.restoreGState()

        context.restoreGState()


        //// Mars Mask
        context.saveGState()
        context.translateBy(x: mars.minX + 2.19, y: mars.minY)
        context.scaleBy(x: 1, y: solarHoloPlanetsAppearExpr)

        context.setBlendMode(.sourceAtop)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier 33 Drawing
        context.saveGState()
        context.translateBy(x: 5.04, y: 4.23)

        let bezier33Path = UIBezierPath()
        bezier33Path.move(to: CGPoint(x: -0.13, y: 4.21))
        bezier33Path.addCurve(to: CGPoint(x: -7.08, y: 2.14), controlPoint1: CGPoint(x: -5.1, y: 4.19), controlPoint2: CGPoint(x: -7.08, y: 2.14))
        bezier33Path.addLine(to: CGPoint(x: -7.23, y: -4.98))
        bezier33Path.addLine(to: CGPoint(x: 7.41, y: -5.08))
        bezier33Path.addLine(to: CGPoint(x: 7.22, y: 2.16))
        bezier33Path.addCurve(to: CGPoint(x: -0.13, y: 4.21), controlPoint1: CGPoint(x: 7.22, y: 2.16), controlPoint2: CGPoint(x: 4.84, y: 4.23))
        bezier33Path.close()
        context.saveGState()
        context.setShadow(offset: shadow3.shadowOffset, blur: shadow3.shadowBlurRadius, color: (shadow3.shadowColor as! UIColor).cgColor)
        discCircle4Color.setFill()
        bezier33Path.fill()
        context.restoreGState()

        solar_planet_holo_line.setStroke()
        bezier33Path.lineWidth = 1
        bezier33Path.stroke()

        context.restoreGState()


        context.endTransparencyLayer()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Earth
        context.saveGState()
        context.setAlpha(solarPlanetsHoloOpacity)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Earth Holo  Reflection Drawing
        context.saveGState()
        context.translateBy(x: earth.minX + 9.74, y: earth.minY + 21.67)
        context.rotate(by: 68.5 * CGFloat.pi/180)
        context.scaleBy(x: 0.05, y: 0.05)

        context.saveGState()
        context.setAlpha(0.4)

        let earthHoloReflectionRect = CGRect(x: -129.29, y: -129.6, width: 259, height: 259)
        let earthHoloReflectionPath = UIBezierPath(rect: earthHoloReflectionRect)
        context.saveGState()
        earthHoloReflectionPath.addClip()
        context.translateBy(x: floor(earthHoloReflectionRect.minX + 0.5), y: floor(earthHoloReflectionRect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -blueplantet.size.height)
        context.draw(blueplantet.cgImage!, in: CGRect(x: 0, y: 0, width: blueplantet.size.width, height: blueplantet.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Earth Mask Reflection
        context.saveGState()
        context.translateBy(x: earth.minX + 14.48, y: earth.minY + 30.92)
        context.rotate(by: 201.5 * CGFloat.pi/180)
        context.scaleBy(x: 1, y: solarHoloPlanetsAppearExpr)

        context.setBlendMode(.sourceAtop)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier 16 Drawing
        context.saveGState()
        context.translateBy(x: 8.11, y: 7.51)

        let bezier16Path = UIBezierPath()
        bezier16Path.move(to: CGPoint(x: -0.56, y: 6.81))
        bezier16Path.addCurve(to: CGPoint(x: -7.95, y: 3.63), controlPoint1: CGPoint(x: -5.85, y: 6.78), controlPoint2: CGPoint(x: -7.95, y: 3.63))
        bezier16Path.addLine(to: CGPoint(x: -8.11, y: -7.36))
        bezier16Path.addLine(to: CGPoint(x: 7.45, y: -7.51))
        bezier16Path.addLine(to: CGPoint(x: 7.26, y: 3.66))
        bezier16Path.addCurve(to: CGPoint(x: -0.56, y: 6.81), controlPoint1: CGPoint(x: 7.26, y: 3.66), controlPoint2: CGPoint(x: 4.72, y: 6.84))
        bezier16Path.close()
        context.saveGState()
        context.setShadow(offset: shadow3.shadowOffset, blur: shadow3.shadowBlurRadius, color: (shadow3.shadowColor as! UIColor).cgColor)
        discCircle4Color.setFill()
        bezier16Path.fill()
        context.restoreGState()

        solar_planet_holo_line.setStroke()
        bezier16Path.lineWidth = 1
        bezier16Path.stroke()

        context.restoreGState()


        context.endTransparencyLayer()

        context.restoreGState()


        //// Earth Holo Drawing
        context.saveGState()
        context.translateBy(x: earth.minX + 5.47, y: earth.minY + 0.77)
        context.scaleBy(x: 0.05, y: 0.05)

        let earthHoloRect = CGRect(x: 0, y: 0, width: 259, height: 259)
        let earthHoloPath = UIBezierPath(rect: earthHoloRect)
        context.saveGState()
        earthHoloPath.addClip()
        context.translateBy(x: floor(earthHoloRect.minX + 0.5), y: floor(earthHoloRect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -blueplantet.size.height)
        context.draw(blueplantet.cgImage!, in: CGRect(x: 0, y: 0, width: blueplantet.size.width, height: blueplantet.size.height))
        context.restoreGState()

        context.restoreGState()


        //// Earth Mask
        context.saveGState()
        context.translateBy(x: earth.minX + 3.97, y: earth.minY)
        context.scaleBy(x: 1, y: solarHoloPlanetsAppearExpr)

        context.setBlendMode(.sourceAtop)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier 35 Drawing
        context.saveGState()
        context.translateBy(x: 8.11, y: 7.51)

        let bezier35Path = UIBezierPath()
        bezier35Path.move(to: CGPoint(x: -0.56, y: 6.81))
        bezier35Path.addCurve(to: CGPoint(x: -7.95, y: 3.63), controlPoint1: CGPoint(x: -5.85, y: 6.78), controlPoint2: CGPoint(x: -7.95, y: 3.63))
        bezier35Path.addLine(to: CGPoint(x: -8.11, y: -7.36))
        bezier35Path.addLine(to: CGPoint(x: 7.45, y: -7.51))
        bezier35Path.addLine(to: CGPoint(x: 7.26, y: 3.66))
        bezier35Path.addCurve(to: CGPoint(x: -0.56, y: 6.81), controlPoint1: CGPoint(x: 7.26, y: 3.66), controlPoint2: CGPoint(x: 4.72, y: 6.84))
        bezier35Path.close()
        context.saveGState()
        context.setShadow(offset: shadow3.shadowOffset, blur: shadow3.shadowBlurRadius, color: (shadow3.shadowColor as! UIColor).cgColor)
        discCircle4Color.setFill()
        bezier35Path.fill()
        context.restoreGState()

        solar_planet_holo_line.setStroke()
        bezier35Path.lineWidth = 1
        bezier35Path.stroke()

        context.restoreGState()


        context.endTransparencyLayer()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Venus
        context.saveGState()
        context.setAlpha(solarPlanetsHoloOpacity)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Venus Holo Reflection Drawing
        context.saveGState()
        context.translateBy(x: venus.minX + 8.74, y: venus.minY + 21.52)
        context.rotate(by: 68.5 * CGFloat.pi/180)
        context.scaleBy(x: 0.05, y: 0.05)

        context.saveGState()
        context.setAlpha(0.4)

        let venusHoloReflectionRect = CGRect(x: -132.45, y: -126.19, width: 259, height: 259)
        let venusHoloReflectionPath = UIBezierPath(rect: venusHoloReflectionRect)
        context.saveGState()
        venusHoloReflectionPath.addClip()
        context.translateBy(x: floor(venusHoloReflectionRect.minX + 0.5), y: floor(venusHoloReflectionRect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -blueplantet.size.height)
        context.draw(blueplantet.cgImage!, in: CGRect(x: 0, y: 0, width: blueplantet.size.width, height: blueplantet.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Venus Mask Reflection
        context.saveGState()
        context.translateBy(x: venus.minX + 15.26, y: venus.minY + 29.69)
        context.rotate(by: -168.5 * CGFloat.pi/180)
        context.scaleBy(x: 1, y: solarHoloPlanetsAppearExpr)

        context.setBlendMode(.sourceAtop)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier 17 Drawing
        context.saveGState()
        context.translateBy(x: 8.11, y: 7.58)

        let bezier17Path = UIBezierPath()
        bezier17Path.move(to: CGPoint(x: -0.56, y: 6.87))
        bezier17Path.addCurve(to: CGPoint(x: -7.95, y: 3.66), controlPoint1: CGPoint(x: -5.85, y: 6.84), controlPoint2: CGPoint(x: -7.95, y: 3.66))
        bezier17Path.addLine(to: CGPoint(x: -8.11, y: -7.42))
        bezier17Path.addLine(to: CGPoint(x: 7.45, y: -7.58))
        bezier17Path.addLine(to: CGPoint(x: 7.26, y: 3.69))
        bezier17Path.addCurve(to: CGPoint(x: -0.56, y: 6.87), controlPoint1: CGPoint(x: 7.26, y: 3.69), controlPoint2: CGPoint(x: 4.72, y: 6.9))
        bezier17Path.close()
        context.saveGState()
        context.setShadow(offset: shadow3.shadowOffset, blur: shadow3.shadowBlurRadius, color: (shadow3.shadowColor as! UIColor).cgColor)
        discCircle4Color.setFill()
        bezier17Path.fill()
        context.restoreGState()

        solar_planet_holo_line.setStroke()
        bezier17Path.lineWidth = 1
        bezier17Path.stroke()

        context.restoreGState()


        context.endTransparencyLayer()

        context.restoreGState()


        //// Venus Holo Drawing
        context.saveGState()
        context.translateBy(x: venus.minX + 4.3, y: venus.minY + 0.94)
        context.scaleBy(x: 0.05, y: 0.05)

        let venusHoloRect = CGRect(x: 0, y: 0, width: 259, height: 259)
        let venusHoloPath = UIBezierPath(rect: venusHoloRect)
        context.saveGState()
        venusHoloPath.addClip()
        context.translateBy(x: floor(venusHoloRect.minX + 0.5), y: floor(venusHoloRect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -blueplantet.size.height)
        context.draw(blueplantet.cgImage!, in: CGRect(x: 0, y: 0, width: blueplantet.size.width, height: blueplantet.size.height))
        context.restoreGState()

        context.restoreGState()


        //// Venus Mask
        context.saveGState()
        context.translateBy(x: venus.minX + 2.82, y: venus.minY)
        context.scaleBy(x: 1, y: solarHoloPlanetsAppearExpr)

        context.setBlendMode(.sourceAtop)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier 26 Drawing
        context.saveGState()
        context.translateBy(x: 8.11, y: 7.58)

        let bezier26Path = UIBezierPath()
        bezier26Path.move(to: CGPoint(x: -0.56, y: 6.87))
        bezier26Path.addCurve(to: CGPoint(x: -7.95, y: 3.66), controlPoint1: CGPoint(x: -5.85, y: 6.84), controlPoint2: CGPoint(x: -7.95, y: 3.66))
        bezier26Path.addLine(to: CGPoint(x: -8.11, y: -7.42))
        bezier26Path.addLine(to: CGPoint(x: 7.45, y: -7.58))
        bezier26Path.addLine(to: CGPoint(x: 7.26, y: 3.69))
        bezier26Path.addCurve(to: CGPoint(x: -0.56, y: 6.87), controlPoint1: CGPoint(x: 7.26, y: 3.69), controlPoint2: CGPoint(x: 4.72, y: 6.9))
        bezier26Path.close()
        context.saveGState()
        context.setShadow(offset: shadow3.shadowOffset, blur: shadow3.shadowBlurRadius, color: (shadow3.shadowColor as! UIColor).cgColor)
        discCircle4Color.setFill()
        bezier26Path.fill()
        context.restoreGState()

        solar_planet_holo_line.setStroke()
        bezier26Path.lineWidth = 1
        bezier26Path.stroke()

        context.restoreGState()


        context.endTransparencyLayer()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Mercury
        context.saveGState()
        context.translateBy(x: frame.minX + 0.51274 * frame.width, y: frame.maxY - 486.58)

        context.setAlpha(solarPlanetsHoloOpacity)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Mercury Holo Reflection Drawing
        context.saveGState()
        context.translateBy(x: 1.35, y: 8.89)
        context.rotate(by: 68.5 * CGFloat.pi/180)
        context.scaleBy(x: 0.02, y: 0.02)

        context.saveGState()
        context.setAlpha(0.4)

        let mercuryHoloReflectionPath = UIBezierPath(rect: CGRect(x: -120.47, y: -133.61, width: 263.86, height: 268.41))
        context.saveGState()
        mercuryHoloReflectionPath.addClip()
        context.translateBy(x: -120, y: -134)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -blueplantet.size.height)
        context.draw(blueplantet.cgImage!, in: CGRect(x: 0, y: 0, width: blueplantet.size.width, height: blueplantet.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Mercury Mask Reflection
        context.saveGState()
        context.translateBy(x: 3.81, y: 12.38)
        context.rotate(by: -168.5 * CGFloat.pi/180)
        context.scaleBy(x: 1, y: solarHoloPlanetsAppearExpr)

        context.setBlendMode(.sourceAtop)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier 18 Drawing
        context.saveGState()
        context.translateBy(x: 3.53, y: 3.46)

        let bezier18Path = UIBezierPath()
        bezier18Path.move(to: CGPoint(x: -0.24, y: 3.14))
        bezier18Path.addCurve(to: CGPoint(x: -3.46, y: 1.67), controlPoint1: CGPoint(x: -2.54, y: 3.12), controlPoint2: CGPoint(x: -3.46, y: 1.67))
        bezier18Path.addLine(to: CGPoint(x: -3.53, y: -3.39))
        bezier18Path.addLine(to: CGPoint(x: 3.24, y: -3.46))
        bezier18Path.addLine(to: CGPoint(x: 3.16, y: 1.68))
        bezier18Path.addCurve(to: CGPoint(x: -0.24, y: 3.14), controlPoint1: CGPoint(x: 3.16, y: 1.68), controlPoint2: CGPoint(x: 2.05, y: 3.15))
        bezier18Path.close()
        context.saveGState()
        context.setShadow(offset: shadow3.shadowOffset, blur: shadow3.shadowBlurRadius, color: (shadow3.shadowColor as! UIColor).cgColor)
        discCircle4Color.setFill()
        bezier18Path.fill()
        context.restoreGState()

        solar_planet_holo_line.setStroke()
        bezier18Path.lineWidth = 1
        bezier18Path.stroke()

        context.restoreGState()


        context.endTransparencyLayer()

        context.restoreGState()


        //// Mercury Holo Drawing
        context.saveGState()
        context.translateBy(x: -0.06, y: 0.05)
        context.scaleBy(x: 0.02, y: 0.02)

        let mercuryHoloPath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 263.86, height: 268.41))
        context.saveGState()
        mercuryHoloPath.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -blueplantet.size.height)
        context.draw(blueplantet.cgImage!, in: CGRect(x: 0, y: 0, width: blueplantet.size.width, height: blueplantet.size.height))
        context.restoreGState()

        context.restoreGState()


        //// Mercury Mask
        context.saveGState()
        context.translateBy(x: -0.92, y: -0.75)
        context.scaleBy(x: 1, y: solarHoloPlanetsAppearExpr)

        context.setBlendMode(.sourceAtop)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier 29 Drawing
        context.saveGState()
        context.translateBy(x: 3.53, y: 3.46)

        let bezier29Path = UIBezierPath()
        bezier29Path.move(to: CGPoint(x: -0.24, y: 3.14))
        bezier29Path.addCurve(to: CGPoint(x: -3.46, y: 1.67), controlPoint1: CGPoint(x: -2.54, y: 3.12), controlPoint2: CGPoint(x: -3.46, y: 1.67))
        bezier29Path.addLine(to: CGPoint(x: -3.53, y: -3.39))
        bezier29Path.addLine(to: CGPoint(x: 3.24, y: -3.46))
        bezier29Path.addLine(to: CGPoint(x: 3.16, y: 1.68))
        bezier29Path.addCurve(to: CGPoint(x: -0.24, y: 3.14), controlPoint1: CGPoint(x: 3.16, y: 1.68), controlPoint2: CGPoint(x: 2.05, y: 3.15))
        bezier29Path.close()
        context.saveGState()
        context.setShadow(offset: shadow3.shadowOffset, blur: shadow3.shadowBlurRadius, color: (shadow3.shadowColor as! UIColor).cgColor)
        discCircle4Color.setFill()
        bezier29Path.fill()
        context.restoreGState()

        solar_planet_holo_line.setStroke()
        bezier29Path.lineWidth = 1
        bezier29Path.stroke()

        context.restoreGState()


        context.endTransparencyLayer()

        context.restoreGState()


        context.endTransparencyLayer()

        context.restoreGState()
    }

    @objc dynamic public class func drawSolarSystemAsteroidLayer_65(frame: CGRect = CGRect(x: 0, y: -0, width: 414, height: 896), solarPathMaskShow: CGFloat = 1, solarAsteroidShow: CGFloat = 1, solarAsteroidMove: CGFloat = 0.257) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let fillColor22 = UIColor(red: 0.427, green: 0.878, blue: 0.965, alpha: 1.000)
        let color = UIColor(red: 0.000, green: 1.000, blue: 0.872, alpha: 1.000)
        let solar_pathColor = UIColor(red: 0.041, green: 0.097, blue: 0.252, alpha: 1.000)
        let solar_pathColor2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)
        let solar_path_mask = UIColor(red: 0.034, green: 0.014, blue: 0.550, alpha: 1.000)

        //// Gradient Declarations
        let solar_path = CGGradient(colorsSpace: nil, colors: [solar_pathColor.cgColor, solar_pathColor.blended(withFraction: 0.5, of: solar_pathColor2).cgColor, solar_pathColor2.cgColor] as CFArray, locations: [0, 0.45, 1])!

        //// Image Declarations
        let spaceship_holo = UIImage(named: "spaceship_holo.png")!
        let solar_asteroid_v2 = UIImage(named: "solar_asteroid_v2.png")!

        //// Variable Declarations
        let solarAsteroidExpr = solarAsteroidMove == 0 ? CGPoint(x: 2.5, y: 208) : (solarAsteroidMove > 0 && solarAsteroidMove <= 0.1 ? CGPoint(x: 4 + 44 * solarAsteroidMove * 10, y: 208 + 25 * solarAsteroidMove * 10) : (solarAsteroidMove > 0.1 && solarAsteroidMove <= 0.2 ? CGPoint(x: 48 + 82 * (solarAsteroidMove - 0.1) * 10, y: 233 + 65 * (solarAsteroidMove - 0.1) * 10) : (solarAsteroidMove > 0.2 && solarAsteroidMove <= 0.3 ? CGPoint(x: 130 + 49 * (solarAsteroidMove - 0.2) * 10, y: 298 + 61 * (solarAsteroidMove - 0.2) * 10) : (solarAsteroidMove > 0.3 && solarAsteroidMove <= 0.351 ? CGPoint(x: 179 + 85 * (solarAsteroidMove - 0.3) * 10, y: 359 + 140 * (solarAsteroidMove - 0.3) * 10) : (solarAsteroidMove > 0.35 && solarAsteroidMove <= 0.4 ? CGPoint(x: 219 + 28 * (solarAsteroidMove - 0.35) * 10, y: 429 + 60 * (solarAsteroidMove - 0.35) * 10) : (solarAsteroidMove > 0.4 && solarAsteroidMove <= 0.5 ? CGPoint(x: 233 + 23 * (solarAsteroidMove - 0.4) * 10, y: 459 + 73 * (solarAsteroidMove - 0.4) * 10) : (solarAsteroidMove > 0.5 && solarAsteroidMove <= 0.6 ? CGPoint(x: 256 + 16 * (solarAsteroidMove - 0.5) * 10, y: 531 + 120 * (solarAsteroidMove - 0.5) * 10) : CGPoint(x: 272, y: 651))))))))
        let solarText = "\(Int(round(30 - 50 * solarAsteroidMove)))" + " дн."


        //// Subframes
        let pathAsteroid: CGRect = CGRect(x: frame.minX + frame.width - 310.78, y: frame.minY + frame.height - 546.13, width: 272.58, height: 468.17)


        //// Spaceship Holo Drawing
        context.saveGState()
        context.translateBy(x: frame.maxX - 88, y: frame.maxY - 139.78)
        context.scaleBy(x: 0.1, y: 0.1)

        context.saveGState()
        context.setAlpha(solarAsteroidShow)

        let spaceshipHoloRect = CGRect(x: 0, y: 0, width: 785, height: 1363)
        let spaceshipHoloPath = UIBezierPath(rect: spaceshipHoloRect)
        context.saveGState()
        spaceshipHoloPath.addClip()
        context.translateBy(x: floor(spaceshipHoloRect.minX + 0.5), y: floor(spaceshipHoloRect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -spaceship_holo.size.height)
        context.draw(spaceship_holo.cgImage!, in: CGRect(x: 0, y: 0, width: spaceship_holo.size.width, height: spaceship_holo.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Path Asteroid
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Path
        //// Bezier 32 Drawing
        let bezier32Path = UIBezierPath()
        bezier32Path.move(to: CGPoint(x: pathAsteroid.minX + 2.63, y: pathAsteroid.minY + 2.27))
        bezier32Path.addCurve(to: CGPoint(x: pathAsteroid.minX + 203.54, y: pathAsteroid.minY + 189.56), controlPoint1: CGPoint(x: pathAsteroid.minX + 2.63, y: pathAsteroid.minY + 2.27), controlPoint2: CGPoint(x: pathAsteroid.minX + 129.3, y: pathAsteroid.minY + 54.97))
        bezier32Path.addCurve(to: CGPoint(x: pathAsteroid.minX + 222.54, y: pathAsteroid.minY + 225.88), controlPoint1: CGPoint(x: pathAsteroid.minX + 222.1, y: pathAsteroid.minY + 223.21), controlPoint2: CGPoint(x: pathAsteroid.minX + 216.97, y: pathAsteroid.minY + 213.58))
        bezier32Path.addCurve(to: CGPoint(x: pathAsteroid.minX + 269.42, y: pathAsteroid.minY + 423.45), controlPoint1: CGPoint(x: pathAsteroid.minX + 272.69, y: pathAsteroid.minY + 336.65), controlPoint2: CGPoint(x: pathAsteroid.minX + 269.42, y: pathAsteroid.minY + 423.45))
        bezier32Path.addLine(to: CGPoint(x: pathAsteroid.minX + 2.63, y: pathAsteroid.minY + 2.27))
        bezier32Path.close()
        context.saveGState()
        bezier32Path.addClip()
        let bezier32RotatedPath = UIBezierPath()
        bezier32RotatedPath.append(bezier32Path)
        var bezier32Transform = CGAffineTransform(rotationAngle: 147 * -CGFloat.pi/180)
        bezier32RotatedPath.apply(bezier32Transform)
        let bezier32Bounds = bezier32RotatedPath.cgPath.boundingBoxOfPath
        bezier32Transform = bezier32Transform.inverted()
        context.drawLinearGradient(solar_path,
            start: CGPoint(x: bezier32Bounds.minX, y: bezier32Bounds.midY).applying(bezier32Transform),
            end: CGPoint(x: bezier32Bounds.maxX, y: bezier32Bounds.midY).applying(bezier32Transform),
            options: [])
        context.restoreGState()


        //// Bezier 30 Drawing
        let bezier30Path = UIBezierPath()
        bezier30Path.move(to: CGPoint(x: pathAsteroid.minX + 2.63, y: pathAsteroid.minY + 2.27))
        bezier30Path.addCurve(to: CGPoint(x: pathAsteroid.minX + 203.54, y: pathAsteroid.minY + 189.56), controlPoint1: CGPoint(x: pathAsteroid.minX + 2.63, y: pathAsteroid.minY + 2.27), controlPoint2: CGPoint(x: pathAsteroid.minX + 128.72, y: pathAsteroid.minY + 54.02))
        bezier30Path.addCurve(to: CGPoint(x: pathAsteroid.minX + 222.54, y: pathAsteroid.minY + 225.88), controlPoint1: CGPoint(x: pathAsteroid.minX + 222.24, y: pathAsteroid.minY + 223.45), controlPoint2: CGPoint(x: pathAsteroid.minX + 216.97, y: pathAsteroid.minY + 213.58))
        bezier30Path.addCurve(to: CGPoint(x: pathAsteroid.minX + 269.43, y: pathAsteroid.minY + 421.78), controlPoint1: CGPoint(x: pathAsteroid.minX + 272.69, y: pathAsteroid.minY + 336.65), controlPoint2: CGPoint(x: pathAsteroid.minX + 269.43, y: pathAsteroid.minY + 421.78))
        fillColor22.setStroke()
        bezier30Path.lineWidth = 0.1
        bezier30Path.stroke()




        //// Rectangle 3 Drawing
        context.saveGState()
        context.translateBy(x: pathAsteroid.minX, y: pathAsteroid.minY)
        context.scaleBy(x: 1, y: solarPathMaskShow)

        context.saveGState()
        context.setBlendMode(.sourceAtop)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let rectangle3Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 272.58, height: 468.17))
        solar_path_mask.setFill()
        rectangle3Path.fill()
        UIColor.red.setStroke()
        rectangle3Path.lineWidth = 10
        rectangle3Path.stroke()

        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()


        //// Asteroid End Point Drawing
        let asteroidEndPointPath = UIBezierPath(ovalIn: CGRect(x: pathAsteroid.minX + 269.01, y: pathAsteroid.minY + 421.25, width: 1, height: 1))
        color.setFill()
        asteroidEndPointPath.fill()


        //// Asteroid Start Point Drawing
        let asteroidStartPointPath = UIBezierPath(ovalIn: CGRect(x: pathAsteroid.minX + 2.26, y: pathAsteroid.minY + 1.94, width: 1, height: 1))
        color.setFill()
        asteroidStartPointPath.fill()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Asteroid Holo Drawing
        context.saveGState()
        context.translateBy(x: (solarAsteroidExpr.x + 55.4482421875), y: (solarAsteroidExpr.y + 102.110351562))
        context.scaleBy(x: 0.1, y: 0.1)

        context.saveGState()
        context.setAlpha(solarAsteroidShow)

        let asteroidHoloRect = CGRect(x: 0, y: 0, width: 709, height: 1399)
        let asteroidHoloPath = UIBezierPath(rect: asteroidHoloRect)
        context.saveGState()
        asteroidHoloPath.addClip()
        context.translateBy(x: floor(asteroidHoloRect.minX + 0.5), y: floor(asteroidHoloRect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -solar_asteroid_v2.size.height)
        context.draw(solar_asteroid_v2.cgImage!, in: CGRect(x: 0, y: 0, width: solar_asteroid_v2.size.width, height: solar_asteroid_v2.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Asteroid Point Drawing
        context.saveGState()
        context.setAlpha(solarAsteroidShow)

        let asteroidPointPath = UIBezierPath(ovalIn: CGRect(x: (solarAsteroidExpr.x + 102.986653646), y: (solarAsteroidExpr.y + 143.717447917), width: 1, height: 1))
        color.setFill()
        asteroidPointPath.fill()

        context.restoreGState()


        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: (solarAsteroidExpr.x + 52.1220703125), y: (solarAsteroidExpr.y + 129.239257812))

        context.saveGState()
        context.setAlpha(solarAsteroidShow)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 51.22, y: 14.55))
        bezierPath.addLine(to: CGPoint(x: 44.05, y: 0.01))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0))
        SolarSystemScreen.primaryTextColor.setStroke()
        bezierPath.lineWidth = 0.1
        bezierPath.stroke()

        context.restoreGState()

        context.restoreGState()


        //// Text Drawing
        context.saveGState()
        context.setAlpha(solarAsteroidShow)

        let textRect = CGRect(x: (solarAsteroidExpr.x + 52.6585286458), y: (solarAsteroidExpr.y + 118.081054688), width: 34.72, height: 11.17)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            .font: UIFont(name: "CourierNewPSMT", size: 9)!,
            .foregroundColor: SolarSystemScreen.primaryTextColor,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = solarText.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        solarText.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()

        context.restoreGState()
    }

    @objc dynamic public class func drawSolarSystemLightsLayer(frame: CGRect = CGRect(x: 0, y: -0, width: 414, height: 896), solarLightsShow: CGFloat = 0.5, solarLightsBlink: CGFloat = 0.349) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let solarlightsgradientColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.000)
        let solarlightsgradientColor2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)
        let solarlightsgradientColor5 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)
        let solarlightsgradientColor6 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)
        let solarlightsgradientColor7 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)
        let solarlightsgradientColor8 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)
        let solarlightsgradientColor10 = UIColor(red: 0.425, green: 0.425, blue: 0.425, alpha: 0.000)
        let solarlightsgradientColor12 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.015)
        let solarlightsgradientColor13 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)
        let solarlightsgradientColor14 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)
        let solarlightsgradientColor17 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.001)
        let solarlightsgradientColor19 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)
        let solarlightsgradientColor20 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.006)
        let solarlightsgradient2Color = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)
        let solarlightsgradient2Color2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Gradient Declarations
        let solarlightsgradient2 = CGGradient(colorsSpace: nil, colors: [solarlightsgradientColor8.cgColor, solarlightsgradientColor7.cgColor, UIColor.black.cgColor, solarlightsgradientColor10.cgColor, solarlightsgradientColor12.cgColor, UIColor.black.cgColor, solarlightsgradientColor20.cgColor, solarlightsgradientColor19.cgColor, UIColor.black.cgColor, solarlightsgradientColor17.cgColor, solarlightsgradientColor14.cgColor, UIColor.black.cgColor, solarlightsgradientColor13.cgColor, solarlightsgradient2Color.cgColor, UIColor.black.cgColor, solarlightsgradientColor6.cgColor, solarlightsgradientColor.cgColor, UIColor.black.cgColor, solarlightsgradientColor2.cgColor, solarlightsgradientColor5.cgColor, UIColor.black.cgColor, solarlightsgradient2Color2.cgColor] as CFArray, locations: [0, 0.01, 0.05, 0.09, 0.17, 0.19, 0.23, 0.32, 0.36, 0.39, 0.51, 0.55, 0.59, 0.67, 0.72, 0.75, 0.81, 0.84, 0.87, 0.91, 0.96, 0.98])!

        //// Image Declarations
        let solar_dotted8_lights = UIImage(named: "solar_dotted8_lights.png")!
        let solar_dotted7_lights = UIImage(named: "solar_dotted7_lights.png")!
        let solar_dotted6_lights = UIImage(named: "solar_dotted6_lights.png")!
        let solar_dotted5_lights = UIImage(named: "solar_dotted5_lights.png")!
        let solar_dotted5_2_lights = UIImage(named: "solar_dotted5_2_lights.png")!
        let solar_dotted4_2_lights = UIImage(named: "solar_dotted4_2_lights.png")!
        let solar_dotted4_1_lights = UIImage(named: "solar_dotted4_1_lights.png")!
        let solar_dotted3_lights = UIImage(named: "solar_dotted3_lights.png")!
        let solar_dotted2_lights = UIImage(named: "solar_dotted2_lights.png")!
        let solar_dotted1_lights = UIImage(named: "solar_dotted1_lights.png")!

        //// Variable Declarations
        let solarLightsLocationExpr = CGPoint(x: -50 + 50 * solarLightsBlink, y: 0)

        //// Dotted Lights 8 Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 0.05055 * frame.width, y: frame.maxY - 124.94)
        context.scaleBy(x: 0.5, y: 0.5)

        context.saveGState()
        context.setAlpha(solarLightsShow)

        let dottedLights8Rect = CGRect(x: 0, y: 0, width: 379, height: 122)
        let dottedLights8Path = UIBezierPath(rect: dottedLights8Rect)
        context.saveGState()
        dottedLights8Path.addClip()
        context.translateBy(x: floor(dottedLights8Rect.minX + 0.5), y: floor(dottedLights8Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -solar_dotted8_lights.size.height)
        context.draw(solar_dotted8_lights.cgImage!, in: CGRect(x: 0, y: 0, width: solar_dotted8_lights.size.width, height: solar_dotted8_lights.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Dotted Lights 7 Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 0.26680 * frame.width, y: frame.maxY - 173.55)
        context.scaleBy(x: 0.5, y: 0.5)

        context.saveGState()
        context.setAlpha(solarLightsShow)

        let dottedLights7Rect = CGRect(x: 0, y: 0, width: 472, height: 102)
        let dottedLights7Path = UIBezierPath(rect: dottedLights7Rect)
        context.saveGState()
        dottedLights7Path.addClip()
        context.translateBy(x: floor(dottedLights7Rect.minX + 0.5), y: floor(dottedLights7Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -solar_dotted7_lights.size.height)
        context.draw(solar_dotted7_lights.cgImage!, in: CGRect(x: 0, y: 0, width: solar_dotted7_lights.size.width, height: solar_dotted7_lights.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Dotted Lights 6 Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 0.31302 * frame.width, y: frame.maxY - 215.34)
        context.scaleBy(x: 0.5, y: 0.5)

        context.saveGState()
        context.setAlpha(solarLightsShow)

        let dottedLights6Rect = CGRect(x: 0, y: 0, width: 223, height: 76)
        let dottedLights6Path = UIBezierPath(rect: dottedLights6Rect)
        context.saveGState()
        dottedLights6Path.addClip()
        context.translateBy(x: floor(dottedLights6Rect.minX + 0.5), y: floor(dottedLights6Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -solar_dotted6_lights.size.height)
        context.draw(solar_dotted6_lights.cgImage!, in: CGRect(x: 0, y: 0, width: solar_dotted6_lights.size.width, height: solar_dotted6_lights.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Dotted Lights 5 Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 0.85744 * frame.width, y: frame.maxY - 257.09)
        context.scaleBy(x: 0.5, y: 0.5)

        context.saveGState()
        context.setAlpha(solarLightsShow)

        let dottedLights5Rect = CGRect(x: 0, y: 0, width: 106, height: 49)
        let dottedLights5Path = UIBezierPath(rect: dottedLights5Rect)
        context.saveGState()
        dottedLights5Path.addClip()
        context.translateBy(x: floor(dottedLights5Rect.minX + 0.5), y: floor(dottedLights5Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -solar_dotted5_lights.size.height)
        context.draw(solar_dotted5_lights.cgImage!, in: CGRect(x: 0, y: 0, width: solar_dotted5_lights.size.width, height: solar_dotted5_lights.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Dotted Lights 5_2 Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 0.00885 * frame.width, y: frame.maxY - 325.71)
        context.scaleBy(x: 0.5, y: 0.5)

        context.saveGState()
        context.setAlpha(solarLightsShow)

        let dottedLights5_2Rect = CGRect(x: 0, y: 0, width: 75, height: 51)
        let dottedLights5_2Path = UIBezierPath(rect: dottedLights5_2Rect)
        context.saveGState()
        dottedLights5_2Path.addClip()
        context.translateBy(x: floor(dottedLights5_2Rect.minX + 0.5), y: floor(dottedLights5_2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -solar_dotted5_2_lights.size.height)
        context.draw(solar_dotted5_2_lights.cgImage!, in: CGRect(x: 0, y: 0, width: solar_dotted5_2_lights.size.width, height: solar_dotted5_2_lights.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Dotted Lights 4_2 Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 0.30792 * frame.width, y: frame.maxY - 378.81)
        context.scaleBy(x: 0.5, y: 0.5)

        context.saveGState()
        context.setAlpha(solarLightsShow)

        let dottedLights4_2Rect = CGRect(x: 0, y: 0, width: 139, height: 60)
        let dottedLights4_2Path = UIBezierPath(rect: dottedLights4_2Rect)
        context.saveGState()
        dottedLights4_2Path.addClip()
        context.translateBy(x: floor(dottedLights4_2Rect.minX + 0.5), y: floor(dottedLights4_2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -solar_dotted4_2_lights.size.height)
        context.draw(solar_dotted4_2_lights.cgImage!, in: CGRect(x: 0, y: 0, width: solar_dotted4_2_lights.size.width, height: solar_dotted4_2_lights.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Dotted Lights 4_1 Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 0.05504 * frame.width, y: frame.maxY - 414)
        context.rotate(by: 3 * CGFloat.pi/180)
        context.scaleBy(x: 0.5, y: 0.5)

        context.saveGState()
        context.setAlpha(solarLightsShow)

        let dottedLights4_1Rect = CGRect(x: 0, y: 0, width: 125, height: 52)
        let dottedLights4_1Path = UIBezierPath(rect: dottedLights4_1Rect)
        context.saveGState()
        dottedLights4_1Path.addClip()
        context.translateBy(x: floor(dottedLights4_1Rect.minX + 0.5), y: floor(dottedLights4_1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -solar_dotted4_1_lights.size.height)
        context.draw(solar_dotted4_1_lights.cgImage!, in: CGRect(x: 0, y: 0, width: solar_dotted4_1_lights.size.width, height: solar_dotted4_1_lights.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Dotted Lights 3 Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 0.45105 * frame.width, y: frame.maxY - 403.72)
        context.rotate(by: -4 * CGFloat.pi/180)
        context.scaleBy(x: 0.5, y: 0.5)

        context.saveGState()
        context.setAlpha(solarLightsShow)

        let dottedLights3Rect = CGRect(x: 0, y: 0, width: 71, height: 34)
        let dottedLights3Path = UIBezierPath(rect: dottedLights3Rect)
        context.saveGState()
        dottedLights3Path.addClip()
        context.translateBy(x: floor(dottedLights3Rect.minX + 0.5), y: floor(dottedLights3Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -solar_dotted3_lights.size.height)
        context.draw(solar_dotted3_lights.cgImage!, in: CGRect(x: 0, y: 0, width: solar_dotted3_lights.size.width, height: solar_dotted3_lights.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Dotted Lights 2 Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 0.61477 * frame.width, y: frame.maxY - 429.24)
        context.rotate(by: -5.5 * CGFloat.pi/180)
        context.scaleBy(x: 0.5, y: 0.5)

        context.saveGState()
        context.setAlpha(solarLightsShow)

        let dottedLights2Rect = CGRect(x: 0, y: 0, width: 115, height: 42)
        let dottedLights2Path = UIBezierPath(rect: dottedLights2Rect)
        context.saveGState()
        dottedLights2Path.addClip()
        context.translateBy(x: floor(dottedLights2Rect.minX + 0.5), y: floor(dottedLights2Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -solar_dotted2_lights.size.height)
        context.draw(solar_dotted2_lights.cgImage!, in: CGRect(x: 0, y: 0, width: solar_dotted2_lights.size.width, height: solar_dotted2_lights.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Dotted Lights 1 Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 0.30869 * frame.width, y: frame.maxY - 510.57)
        context.rotate(by: 10.5 * CGFloat.pi/180)
        context.scaleBy(x: 0.5, y: 0.5)

        context.saveGState()
        context.setAlpha(solarLightsShow)

        let dottedLights1Rect = CGRect(x: 0, y: 0, width: 243, height: 38)
        let dottedLights1Path = UIBezierPath(rect: dottedLights1Rect)
        context.saveGState()
        dottedLights1Path.addClip()
        context.translateBy(x: floor(dottedLights1Rect.minX + 0.5), y: floor(dottedLights1Rect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -solar_dotted1_lights.size.height)
        context.draw(solar_dotted1_lights.cgImage!, in: CGRect(x: 0, y: 0, width: solar_dotted1_lights.size.width, height: solar_dotted1_lights.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Dotted Lights Mask Drawing
        context.saveGState()
        context.setBlendMode(.destinationIn)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let dottedLightsMaskRect = CGRect(x: solarLightsLocationExpr.x, y: solarLightsLocationExpr.y, width: 414, height: 896)
        let dottedLightsMaskPath = UIBezierPath(rect: dottedLightsMaskRect)
        context.saveGState()
        dottedLightsMaskPath.addClip()
        context.drawLinearGradient(solarlightsgradient2,
            start: CGPoint(x: dottedLightsMaskRect.midX + 208.7 * dottedLightsMaskRect.width / 414, y: dottedLightsMaskRect.midY + -46.47 * dottedLightsMaskRect.height / 896),
            end: CGPoint(x: dottedLightsMaskRect.midX + -205.19 * dottedLightsMaskRect.width / 414, y: dottedLightsMaskRect.midY + -160.85 * dottedLightsMaskRect.height / 896),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()
    }

    @objc dynamic public class func drawSolarSystemAsteroidLayer_47(frame: CGRect = CGRect(x: 0, y: -0, width: 375, height: 667), solarPathMaskShow: CGFloat = 1, solarAsteroidShow: CGFloat = 1, solarAsteroidMove: CGFloat = 0.257) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let fillColor22 = UIColor(red: 0.427, green: 0.878, blue: 0.965, alpha: 1.000)
        let color = UIColor(red: 0.000, green: 1.000, blue: 0.872, alpha: 1.000)
        let solar_pathColor = UIColor(red: 0.041, green: 0.097, blue: 0.252, alpha: 1.000)
        let solar_pathColor2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)
        let solar_path_mask = UIColor(red: 0.034, green: 0.014, blue: 0.550, alpha: 1.000)

        //// Gradient Declarations
        let solar_path = CGGradient(colorsSpace: nil, colors: [solar_pathColor.cgColor, solar_pathColor.blended(withFraction: 0.5, of: solar_pathColor2).cgColor, solar_pathColor2.cgColor] as CFArray, locations: [0, 0.45, 1])!

        //// Image Declarations
        let spaceship_holo = UIImage(named: "spaceship_holo.png")!
        let solar_asteroid_v2 = UIImage(named: "solar_asteroid_v2.png")!

        //// Variable Declarations
        let solarAsteroidExpr = solarAsteroidMove == 0 ? CGPoint(x: 2.5, y: 208) : (solarAsteroidMove > 0 && solarAsteroidMove <= 0.1 ? CGPoint(x: 4 + 44 * solarAsteroidMove * 10, y: 208 + 25 * solarAsteroidMove * 10) : (solarAsteroidMove > 0.1 && solarAsteroidMove <= 0.2 ? CGPoint(x: 48 + 82 * (solarAsteroidMove - 0.1) * 10, y: 233 + 65 * (solarAsteroidMove - 0.1) * 10) : (solarAsteroidMove > 0.2 && solarAsteroidMove <= 0.3 ? CGPoint(x: 130 + 49 * (solarAsteroidMove - 0.2) * 10, y: 298 + 61 * (solarAsteroidMove - 0.2) * 10) : (solarAsteroidMove > 0.3 && solarAsteroidMove <= 0.351 ? CGPoint(x: 179 + 85 * (solarAsteroidMove - 0.3) * 10, y: 359 + 140 * (solarAsteroidMove - 0.3) * 10) : (solarAsteroidMove > 0.35 && solarAsteroidMove <= 0.4 ? CGPoint(x: 219 + 28 * (solarAsteroidMove - 0.35) * 10, y: 429 + 60 * (solarAsteroidMove - 0.35) * 10) : (solarAsteroidMove > 0.4 && solarAsteroidMove <= 0.5 ? CGPoint(x: 233 + 23 * (solarAsteroidMove - 0.4) * 10, y: 459 + 73 * (solarAsteroidMove - 0.4) * 10) : (solarAsteroidMove > 0.5 && solarAsteroidMove <= 0.6 ? CGPoint(x: 256 + 16 * (solarAsteroidMove - 0.5) * 10, y: 531 + 120 * (solarAsteroidMove - 0.5) * 10) : CGPoint(x: 272, y: 651))))))))
        let solarText = "\(Int(round(30 - 50 * solarAsteroidMove)))" + " дн."


        //// Subframes
        let pathAsteroid: CGRect = CGRect(x: frame.minX + frame.width - 310.78, y: frame.minY + frame.height - 546.22, width: 272.58, height: 468.17)


        //// Spaceship Holo Drawing
        context.saveGState()
        context.translateBy(x: frame.maxX - 88, y: frame.maxY - 139.78)
        context.scaleBy(x: 0.1, y: 0.1)

        context.saveGState()
        context.setAlpha(solarAsteroidShow)

        let spaceshipHoloRect = CGRect(x: 0, y: 0, width: 785, height: 1363)
        let spaceshipHoloPath = UIBezierPath(rect: spaceshipHoloRect)
        context.saveGState()
        spaceshipHoloPath.addClip()
        context.translateBy(x: floor(spaceshipHoloRect.minX + 0.5), y: floor(spaceshipHoloRect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -spaceship_holo.size.height)
        context.draw(spaceship_holo.cgImage!, in: CGRect(x: 0, y: 0, width: spaceship_holo.size.width, height: spaceship_holo.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Path Asteroid
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Path
        //// Bezier 32 Drawing
        let bezier32Path = UIBezierPath()
        bezier32Path.move(to: CGPoint(x: pathAsteroid.minX + 2.63, y: pathAsteroid.minY + 2.27))
        bezier32Path.addCurve(to: CGPoint(x: pathAsteroid.minX + 203.54, y: pathAsteroid.minY + 189.56), controlPoint1: CGPoint(x: pathAsteroid.minX + 2.63, y: pathAsteroid.minY + 2.27), controlPoint2: CGPoint(x: pathAsteroid.minX + 129.3, y: pathAsteroid.minY + 54.97))
        bezier32Path.addCurve(to: CGPoint(x: pathAsteroid.minX + 222.54, y: pathAsteroid.minY + 225.88), controlPoint1: CGPoint(x: pathAsteroid.minX + 222.1, y: pathAsteroid.minY + 223.21), controlPoint2: CGPoint(x: pathAsteroid.minX + 216.97, y: pathAsteroid.minY + 213.58))
        bezier32Path.addCurve(to: CGPoint(x: pathAsteroid.minX + 269.42, y: pathAsteroid.minY + 423.45), controlPoint1: CGPoint(x: pathAsteroid.minX + 272.69, y: pathAsteroid.minY + 336.65), controlPoint2: CGPoint(x: pathAsteroid.minX + 269.42, y: pathAsteroid.minY + 423.45))
        bezier32Path.addLine(to: CGPoint(x: pathAsteroid.minX + 2.63, y: pathAsteroid.minY + 2.27))
        bezier32Path.close()
        context.saveGState()
        bezier32Path.addClip()
        let bezier32RotatedPath = UIBezierPath()
        bezier32RotatedPath.append(bezier32Path)
        var bezier32Transform = CGAffineTransform(rotationAngle: 147 * -CGFloat.pi/180)
        bezier32RotatedPath.apply(bezier32Transform)
        let bezier32Bounds = bezier32RotatedPath.cgPath.boundingBoxOfPath
        bezier32Transform = bezier32Transform.inverted()
        context.drawLinearGradient(solar_path,
            start: CGPoint(x: bezier32Bounds.minX, y: bezier32Bounds.midY).applying(bezier32Transform),
            end: CGPoint(x: bezier32Bounds.maxX, y: bezier32Bounds.midY).applying(bezier32Transform),
            options: [])
        context.restoreGState()


        //// Bezier 30 Drawing
        let bezier30Path = UIBezierPath()
        bezier30Path.move(to: CGPoint(x: pathAsteroid.minX + 2.63, y: pathAsteroid.minY + 2.27))
        bezier30Path.addCurve(to: CGPoint(x: pathAsteroid.minX + 203.54, y: pathAsteroid.minY + 189.56), controlPoint1: CGPoint(x: pathAsteroid.minX + 2.63, y: pathAsteroid.minY + 2.27), controlPoint2: CGPoint(x: pathAsteroid.minX + 128.72, y: pathAsteroid.minY + 54.02))
        bezier30Path.addCurve(to: CGPoint(x: pathAsteroid.minX + 222.54, y: pathAsteroid.minY + 225.88), controlPoint1: CGPoint(x: pathAsteroid.minX + 222.24, y: pathAsteroid.minY + 223.45), controlPoint2: CGPoint(x: pathAsteroid.minX + 216.97, y: pathAsteroid.minY + 213.58))
        bezier30Path.addCurve(to: CGPoint(x: pathAsteroid.minX + 269.43, y: pathAsteroid.minY + 421.78), controlPoint1: CGPoint(x: pathAsteroid.minX + 272.69, y: pathAsteroid.minY + 336.65), controlPoint2: CGPoint(x: pathAsteroid.minX + 269.43, y: pathAsteroid.minY + 421.78))
        fillColor22.setStroke()
        bezier30Path.lineWidth = 0.1
        bezier30Path.stroke()




        //// Rectangle 3 Drawing
        context.saveGState()
        context.translateBy(x: pathAsteroid.minX, y: pathAsteroid.minY)
        context.scaleBy(x: 1, y: solarPathMaskShow)

        context.saveGState()
        context.setBlendMode(.sourceAtop)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let rectangle3Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 272.58, height: 468.17))
        solar_path_mask.setFill()
        rectangle3Path.fill()
        UIColor.red.setStroke()
        rectangle3Path.lineWidth = 10
        rectangle3Path.stroke()

        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()


        //// Asteroid End Point Drawing
        let asteroidEndPointPath = UIBezierPath(ovalIn: CGRect(x: pathAsteroid.minX + 269.01, y: pathAsteroid.minY + 421.25, width: 1, height: 1))
        color.setFill()
        asteroidEndPointPath.fill()


        //// Asteroid Start Point Drawing
        let asteroidStartPointPath = UIBezierPath(ovalIn: CGRect(x: pathAsteroid.minX + 2.26, y: pathAsteroid.minY + 1.94, width: 1, height: 1))
        color.setFill()
        asteroidStartPointPath.fill()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Asteroid Holo Drawing
        context.saveGState()
        context.translateBy(x: (solarAsteroidExpr.x + 16.275390625), y: (solarAsteroidExpr.y - 126.73828125))
        context.scaleBy(x: 0.1, y: 0.1)

        context.saveGState()
        context.setAlpha(solarAsteroidShow)

        let asteroidHoloRect = CGRect(x: 0, y: 0, width: 709, height: 1399)
        let asteroidHoloPath = UIBezierPath(rect: asteroidHoloRect)
        context.saveGState()
        asteroidHoloPath.addClip()
        context.translateBy(x: floor(asteroidHoloRect.minX + 0.5), y: floor(asteroidHoloRect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -solar_asteroid_v2.size.height)
        context.draw(solar_asteroid_v2.cgImage!, in: CGRect(x: 0, y: 0, width: solar_asteroid_v2.size.width, height: solar_asteroid_v2.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Asteroid Point Drawing
        context.saveGState()
        context.setAlpha(solarAsteroidShow)

        let asteroidPointPath = UIBezierPath(ovalIn: CGRect(x: (solarAsteroidExpr.x + 63.8138020833), y: (solarAsteroidExpr.y - 85.1311848958), width: 1, height: 1))
        color.setFill()
        asteroidPointPath.fill()

        context.restoreGState()


        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: (solarAsteroidExpr.x + 12.94921875), y: (solarAsteroidExpr.y - 99.609375))

        context.saveGState()
        context.setAlpha(solarAsteroidShow)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 51.22, y: 14.55))
        bezierPath.addLine(to: CGPoint(x: 44.05, y: 0.01))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0))
        SolarSystemScreen.primaryTextColor.setStroke()
        bezierPath.lineWidth = 0.1
        bezierPath.stroke()

        context.restoreGState()

        context.restoreGState()


        //// Text Drawing
        context.saveGState()
        context.setAlpha(solarAsteroidShow)

        let textRect = CGRect(x: (solarAsteroidExpr.x + 13.4856770833), y: (solarAsteroidExpr.y - 110.767578125), width: 34.72, height: 11.17)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            .font: UIFont(name: "CourierNewPSMT", size: 9)!,
            .foregroundColor: SolarSystemScreen.primaryTextColor,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = solarText.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        solarText.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()

        context.restoreGState()
    }

    @objc dynamic public class func drawSolarSystemAsteroidLayer_55(frame: CGRect = CGRect(x: 0, y: -0, width: 414, height: 736), solarPathMaskShow: CGFloat = 1, solarAsteroidShow: CGFloat = 1, solarAsteroidMove: CGFloat = 0.257) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let fillColor22 = UIColor(red: 0.427, green: 0.878, blue: 0.965, alpha: 1.000)
        let color = UIColor(red: 0.000, green: 1.000, blue: 0.872, alpha: 1.000)
        let solar_pathColor = UIColor(red: 0.041, green: 0.097, blue: 0.252, alpha: 1.000)
        let solar_pathColor2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)
        let solar_path_mask = UIColor(red: 0.034, green: 0.014, blue: 0.550, alpha: 1.000)

        //// Gradient Declarations
        let solar_path = CGGradient(colorsSpace: nil, colors: [solar_pathColor.cgColor, solar_pathColor.blended(withFraction: 0.5, of: solar_pathColor2).cgColor, solar_pathColor2.cgColor] as CFArray, locations: [0, 0.45, 1])!

        //// Image Declarations
        let spaceship_holo = UIImage(named: "spaceship_holo.png")!
        let solar_asteroid_v2 = UIImage(named: "solar_asteroid_v2.png")!

        //// Variable Declarations
        let solarAsteroidExpr = solarAsteroidMove == 0 ? CGPoint(x: 2.5, y: 208) : (solarAsteroidMove > 0 && solarAsteroidMove <= 0.1 ? CGPoint(x: 4 + 44 * solarAsteroidMove * 10, y: 208 + 25 * solarAsteroidMove * 10) : (solarAsteroidMove > 0.1 && solarAsteroidMove <= 0.2 ? CGPoint(x: 48 + 82 * (solarAsteroidMove - 0.1) * 10, y: 233 + 65 * (solarAsteroidMove - 0.1) * 10) : (solarAsteroidMove > 0.2 && solarAsteroidMove <= 0.3 ? CGPoint(x: 130 + 49 * (solarAsteroidMove - 0.2) * 10, y: 298 + 61 * (solarAsteroidMove - 0.2) * 10) : (solarAsteroidMove > 0.3 && solarAsteroidMove <= 0.351 ? CGPoint(x: 179 + 85 * (solarAsteroidMove - 0.3) * 10, y: 359 + 140 * (solarAsteroidMove - 0.3) * 10) : (solarAsteroidMove > 0.35 && solarAsteroidMove <= 0.4 ? CGPoint(x: 219 + 28 * (solarAsteroidMove - 0.35) * 10, y: 429 + 60 * (solarAsteroidMove - 0.35) * 10) : (solarAsteroidMove > 0.4 && solarAsteroidMove <= 0.5 ? CGPoint(x: 233 + 23 * (solarAsteroidMove - 0.4) * 10, y: 459 + 73 * (solarAsteroidMove - 0.4) * 10) : (solarAsteroidMove > 0.5 && solarAsteroidMove <= 0.6 ? CGPoint(x: 256 + 16 * (solarAsteroidMove - 0.5) * 10, y: 531 + 120 * (solarAsteroidMove - 0.5) * 10) : CGPoint(x: 272, y: 651))))))))
        let solarText = "\(Int(round(30 - 50 * solarAsteroidMove)))" + " дн."


        //// Subframes
        let pathAsteroid: CGRect = CGRect(x: frame.minX + frame.width - 310.78, y: frame.minY + frame.height - 546.22, width: 272.58, height: 468.17)


        //// Spaceship Holo Drawing
        context.saveGState()
        context.translateBy(x: frame.maxX - 88, y: frame.maxY - 139.78)
        context.scaleBy(x: 0.1, y: 0.1)

        context.saveGState()
        context.setAlpha(solarAsteroidShow)

        let spaceshipHoloRect = CGRect(x: 0, y: 0, width: 785, height: 1363)
        let spaceshipHoloPath = UIBezierPath(rect: spaceshipHoloRect)
        context.saveGState()
        spaceshipHoloPath.addClip()
        context.translateBy(x: floor(spaceshipHoloRect.minX + 0.5), y: floor(spaceshipHoloRect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -spaceship_holo.size.height)
        context.draw(spaceship_holo.cgImage!, in: CGRect(x: 0, y: 0, width: spaceship_holo.size.width, height: spaceship_holo.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Path Asteroid
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Path
        //// Bezier 32 Drawing
        let bezier32Path = UIBezierPath()
        bezier32Path.move(to: CGPoint(x: pathAsteroid.minX + 2.63, y: pathAsteroid.minY + 2.27))
        bezier32Path.addCurve(to: CGPoint(x: pathAsteroid.minX + 203.54, y: pathAsteroid.minY + 189.56), controlPoint1: CGPoint(x: pathAsteroid.minX + 2.63, y: pathAsteroid.minY + 2.27), controlPoint2: CGPoint(x: pathAsteroid.minX + 129.3, y: pathAsteroid.minY + 54.97))
        bezier32Path.addCurve(to: CGPoint(x: pathAsteroid.minX + 222.54, y: pathAsteroid.minY + 225.88), controlPoint1: CGPoint(x: pathAsteroid.minX + 222.1, y: pathAsteroid.minY + 223.21), controlPoint2: CGPoint(x: pathAsteroid.minX + 216.97, y: pathAsteroid.minY + 213.58))
        bezier32Path.addCurve(to: CGPoint(x: pathAsteroid.minX + 269.42, y: pathAsteroid.minY + 423.45), controlPoint1: CGPoint(x: pathAsteroid.minX + 272.69, y: pathAsteroid.minY + 336.65), controlPoint2: CGPoint(x: pathAsteroid.minX + 269.42, y: pathAsteroid.minY + 423.45))
        bezier32Path.addLine(to: CGPoint(x: pathAsteroid.minX + 2.63, y: pathAsteroid.minY + 2.27))
        bezier32Path.close()
        context.saveGState()
        bezier32Path.addClip()
        let bezier32RotatedPath = UIBezierPath()
        bezier32RotatedPath.append(bezier32Path)
        var bezier32Transform = CGAffineTransform(rotationAngle: 147 * -CGFloat.pi/180)
        bezier32RotatedPath.apply(bezier32Transform)
        let bezier32Bounds = bezier32RotatedPath.cgPath.boundingBoxOfPath
        bezier32Transform = bezier32Transform.inverted()
        context.drawLinearGradient(solar_path,
            start: CGPoint(x: bezier32Bounds.minX, y: bezier32Bounds.midY).applying(bezier32Transform),
            end: CGPoint(x: bezier32Bounds.maxX, y: bezier32Bounds.midY).applying(bezier32Transform),
            options: [])
        context.restoreGState()


        //// Bezier 30 Drawing
        let bezier30Path = UIBezierPath()
        bezier30Path.move(to: CGPoint(x: pathAsteroid.minX + 2.63, y: pathAsteroid.minY + 2.27))
        bezier30Path.addCurve(to: CGPoint(x: pathAsteroid.minX + 203.54, y: pathAsteroid.minY + 189.56), controlPoint1: CGPoint(x: pathAsteroid.minX + 2.63, y: pathAsteroid.minY + 2.27), controlPoint2: CGPoint(x: pathAsteroid.minX + 128.72, y: pathAsteroid.minY + 54.02))
        bezier30Path.addCurve(to: CGPoint(x: pathAsteroid.minX + 222.54, y: pathAsteroid.minY + 225.88), controlPoint1: CGPoint(x: pathAsteroid.minX + 222.24, y: pathAsteroid.minY + 223.45), controlPoint2: CGPoint(x: pathAsteroid.minX + 216.97, y: pathAsteroid.minY + 213.58))
        bezier30Path.addCurve(to: CGPoint(x: pathAsteroid.minX + 269.43, y: pathAsteroid.minY + 421.78), controlPoint1: CGPoint(x: pathAsteroid.minX + 272.69, y: pathAsteroid.minY + 336.65), controlPoint2: CGPoint(x: pathAsteroid.minX + 269.43, y: pathAsteroid.minY + 421.78))
        fillColor22.setStroke()
        bezier30Path.lineWidth = 0.1
        bezier30Path.stroke()




        //// Rectangle 3 Drawing
        context.saveGState()
        context.translateBy(x: pathAsteroid.minX, y: pathAsteroid.minY)
        context.scaleBy(x: 1, y: solarPathMaskShow)

        context.saveGState()
        context.setBlendMode(.sourceAtop)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let rectangle3Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 272.58, height: 468.17))
        solar_path_mask.setFill()
        rectangle3Path.fill()
        UIColor.red.setStroke()
        rectangle3Path.lineWidth = 10
        rectangle3Path.stroke()

        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()


        //// Asteroid End Point Drawing
        let asteroidEndPointPath = UIBezierPath(ovalIn: CGRect(x: pathAsteroid.minX + 269.01, y: pathAsteroid.minY + 421.25, width: 1, height: 1))
        color.setFill()
        asteroidEndPointPath.fill()


        //// Asteroid Start Point Drawing
        let asteroidStartPointPath = UIBezierPath(ovalIn: CGRect(x: pathAsteroid.minX + 2.26, y: pathAsteroid.minY + 1.94, width: 1, height: 1))
        color.setFill()
        asteroidStartPointPath.fill()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Asteroid Holo Drawing
        context.saveGState()
        context.translateBy(x: (solarAsteroidExpr.x + 55.36328125), y: (solarAsteroidExpr.y - 58.037109375))
        context.scaleBy(x: 0.1, y: 0.1)

        context.saveGState()
        context.setAlpha(solarAsteroidShow)

        let asteroidHoloRect = CGRect(x: 0, y: 0, width: 709, height: 1399)
        let asteroidHoloPath = UIBezierPath(rect: asteroidHoloRect)
        context.saveGState()
        asteroidHoloPath.addClip()
        context.translateBy(x: floor(asteroidHoloRect.minX + 0.5), y: floor(asteroidHoloRect.minY + 0.5))
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -solar_asteroid_v2.size.height)
        context.draw(solar_asteroid_v2.cgImage!, in: CGRect(x: 0, y: 0, width: solar_asteroid_v2.size.width, height: solar_asteroid_v2.size.height))
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()


        //// Asteroid Point Drawing
        context.saveGState()
        context.setAlpha(solarAsteroidShow)

        let asteroidPointPath = UIBezierPath(ovalIn: CGRect(x: (solarAsteroidExpr.x + 102.901692708), y: (solarAsteroidExpr.y - 16.4300130208), width: 1, height: 1))
        color.setFill()
        asteroidPointPath.fill()

        context.restoreGState()


        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: (solarAsteroidExpr.x + 52.037109375), y: (solarAsteroidExpr.y - 30.908203125))

        context.saveGState()
        context.setAlpha(solarAsteroidShow)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 51.22, y: 14.55))
        bezierPath.addLine(to: CGPoint(x: 44.05, y: 0.01))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0))
        SolarSystemScreen.primaryTextColor.setStroke()
        bezierPath.lineWidth = 0.1
        bezierPath.stroke()

        context.restoreGState()

        context.restoreGState()


        //// Text Drawing
        context.saveGState()
        context.setAlpha(solarAsteroidShow)

        let textRect = CGRect(x: (solarAsteroidExpr.x + 52.5735677083), y: (solarAsteroidExpr.y - 42.06640625), width: 34.72, height: 11.17)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            .font: UIFont(name: "CourierNewPSMT", size: 9)!,
            .foregroundColor: SolarSystemScreen.primaryTextColor,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = solarText.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        solarText.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()

        context.restoreGState()
    }

}



private extension UIColor {
    func blended(withFraction fraction: CGFloat, of color: UIColor) -> UIColor {
        var r1: CGFloat = 1, g1: CGFloat = 1, b1: CGFloat = 1, a1: CGFloat = 1
        var r2: CGFloat = 1, g2: CGFloat = 1, b2: CGFloat = 1, a2: CGFloat = 1

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}
